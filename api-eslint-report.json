[{"filePath":"/workspace/luckymart-tj/app/api/admin/analytics/business/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":12,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[462,491],"text":"(searchParams.get('timeRange') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[462,491],"text":"(searchParams.get('timeRange') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[462,491],"text":"(Boolean(searchParams.get('timeRange')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":12,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":12,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[492,494],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin-permission-manager';\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware({\n    customPermissions: AdminPermissions.stats.read()\n  });\n\n  return withPermission(async (request, admin) => {\n\n    const { searchParams } = new URL(request.url);\n    const timeRange = searchParams.get('timeRange') || '7d';\n\n    const days = timeRange === '24h' ? 1 : timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n\n    const businessAnalytics = {\n      orderMetrics: {\n        totalOrders: 5678 + Math.floor(Math.random() * 500),\n        completedOrders: 5234 + Math.floor(Math.random() * 400),\n        canceledOrders: 234 + Math.floor(Math.random() * 50),\n        avgOrderValue: (245.67 + Math.random() * 50).toFixed(2),\n      },\n      dailyOrders: Array.from({ length: days }, (_, i) => ({\n        date: new Date(Date.now() - (days - i - 1) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        orders: Math.floor(Math.random() * 200) + 100,\n        revenue: Math.floor(Math.random() * 50000) + 20000,\n      })),\n      categoryPerformance: [\n        { category: '食品饮料', orders: 2345, revenue: 125678, growth: 15.6 },\n        { category: '日用百货', orders: 1876, revenue: 98543, growth: 8.3 },\n        { category: '个护清洁', orders: 1234, revenue: 76543, growth: 12.4 },\n        { category: '母婴用品', orders: 987, revenue: 65432, growth: -3.2 },\n        { category: '数码家电', orders: 765, revenue: 54321, growth: 21.5 },\n      ],\n      topProducts: [\n        { id: 1, name: '可口可乐 330ml', sales: 567, revenue: 4536, stock: 1234 },\n        { id: 2, name: '农夫山泉 550ml', sales: 489, revenue: 3912, stock: 2345 },\n        { id: 3, name: '康师傅方便面', sales: 423, revenue: 5076, stock: 876 },\n        { id: 4, name: '维达抽纸', sales: 398, revenue: 7164, stock: 456 },\n        { id: 5, name: '金龙鱼食用油 5L', sales: 345, revenue: 20700, stock: 234 },\n      ],\n      conversionFunnel: [\n        { step: '浏览商品', count: 12345, percentage: 100 },\n        { step: '加入购物车', count: 4567, percentage: 37.0 },\n        { step: '进入结算', count: 2345, percentage: 19.0 },\n        { step: '完成支付', count: 1876, percentage: 15.2 },\n      ],\n    };\n\n    return NextResponse.json(businessAnalytics);\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/analytics/financial/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":12,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[462,491],"text":"(searchParams.get('timeRange') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[462,491],"text":"(searchParams.get('timeRange') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[462,491],"text":"(Boolean(searchParams.get('timeRange')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":12,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":12,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[492,494],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin-permission-manager';\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware({\n    customPermissions: AdminPermissions.stats.read()\n  });\n\n  return withPermission(async (request, admin) => {\n\n    const { searchParams } = new URL(request.url);\n    const timeRange = searchParams.get('timeRange') || '7d';\n\n    const days = timeRange === '24h' ? 1 : timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n\n    const financialAnalytics = {\n      summary: {\n        totalRevenue: 2345678 + Math.floor(Math.random() * 100000),\n        totalCost: 1456789 + Math.floor(Math.random() * 50000),\n        grossProfit: 888889 + Math.floor(Math.random() * 50000),\n        profitMargin: (37.9 + Math.random() * 5).toFixed(1),\n      },\n      dailyRevenue: Array.from({ length: days }, (_, i) => ({\n        date: new Date(Date.now() - (days - i - 1) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        revenue: Math.floor(Math.random() * 50000) + 30000,\n        cost: Math.floor(Math.random() * 30000) + 18000,\n        profit: Math.floor(Math.random() * 20000) + 12000,\n      })),\n      revenueByCategory: [\n        { category: '食品饮料', revenue: 567890, percentage: 35.2 },\n        { category: '日用百货', revenue: 456789, percentage: 28.3 },\n        { category: '个护清洁', revenue: 234567, percentage: 14.5 },\n        { category: '母婴用品', revenue: 189012, percentage: 11.7 },\n        { category: '数码家电', revenue: 165432, percentage: 10.3 },\n      ],\n      paymentMethods: [\n        { method: 'Lucky币支付', amount: 987654, count: 3456, percentage: 62.3 },\n        { method: '信用卡', amount: 345678, count: 1234, percentage: 21.8 },\n        { method: '借记卡', amount: 156789, count: 876, percentage: 9.9 },\n        { method: '其他', amount: 94567, count: 456, percentage: 6.0 },\n      ],\n      costBreakdown: [\n        { item: '商品成本', amount: 1234567, percentage: 68.5 },\n        { item: '运营成本', amount: 234567, percentage: 13.0 },\n        { item: '营销费用', amount: 156789, percentage: 8.7 },\n        { item: '物流费用', amount: 123456, percentage: 6.8 },\n        { item: '其他支出', amount: 54321, percentage: 3.0 },\n      ],\n      cashFlow: {\n        operatingCashFlow: 567890,\n        investingCashFlow: -123456,\n        financingCashFlow: 89012,\n        netCashFlow: 533446,\n      },\n    };\n\n    return NextResponse.json(financialAnalytics);\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/analytics/realtime/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":46}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin-permission-manager';\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware({\n    customPermissions: AdminPermissions.stats.read()\n  });\n\n  return withPermission(async (request, admin) => {\n\n    // 模拟实时数据\n    const realtimeData = {\n      onlineUsers: Math.floor(Math.random() * 2000) + 800,\n      todayOrders: Math.floor(Math.random() * 600) + 300,\n      todayRevenue: Math.floor(Math.random() * 20000) + 10000,\n      conversionRate: (Math.random() * 5 + 1).toFixed(2),\n      trends: {\n        onlineUsers: (Math.random() * 30 - 10).toFixed(1),\n        todayOrders: (Math.random() * 20 - 5).toFixed(1),\n        todayRevenue: (Math.random() * 25 - 5).toFixed(1),\n        conversionRate: (Math.random() * 10 - 5).toFixed(1),\n      },\n      hourlyData: Array.from({ length: 24 }, (_, i) => ({\n        hour: i,\n        orders: Math.floor(Math.random() * 50) + 10,\n        revenue: Math.floor(Math.random() * 2000) + 500,\n        users: Math.floor(Math.random() * 100) + 50,\n      })),\n    };\n\n    return NextResponse.json(realtimeData);\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/analytics/users/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":12,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[462,491],"text":"(searchParams.get('timeRange') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[462,491],"text":"(searchParams.get('timeRange') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[462,491],"text":"(Boolean(searchParams.get('timeRange')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":12,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":12,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[492,494],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin-permission-manager';\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware({\n    customPermissions: AdminPermissions.stats.read()\n  });\n\n  return withPermission(async (request, admin) => {\n\n    const { searchParams } = new URL(request.url);\n    const timeRange = searchParams.get('timeRange') || '7d';\n\n    // 根据时间范围生成数据\n    const days = timeRange === '24h' ? 1 : timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n\n    const userAnalytics = {\n      summary: {\n        totalUsers: 15234 + Math.floor(Math.random() * 1000),\n        activeUsers: 8456 + Math.floor(Math.random() * 500),\n        newUsers: 234 + Math.floor(Math.random() * 100),\n        retentionRate: (65 + Math.random() * 10).toFixed(1),\n      },\n      dailyNewUsers: Array.from({ length: days }, (_, i) => ({\n        date: new Date(Date.now() - (days - i - 1) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        count: Math.floor(Math.random() * 150) + 50,\n      })),\n      userSources: [\n        { source: 'Telegram推荐', count: 4523, percentage: 42.3 },\n        { source: '直接访问', count: 2856, percentage: 26.7 },\n        { source: '社交媒体', count: 1876, percentage: 17.5 },\n        { source: '搜索引擎', count: 982, percentage: 9.2 },\n        { source: '其他', count: 456, percentage: 4.3 },\n      ],\n      ageDistribution: [\n        { range: '18-24岁', count: 3456, percentage: 28.5 },\n        { range: '25-34岁', count: 5234, percentage: 43.2 },\n        { range: '35-44岁', count: 2145, percentage: 17.7 },\n        { range: '45-54岁', count: 876, percentage: 7.2 },\n        { range: '55岁以上', count: 412, percentage: 3.4 },\n      ],\n      deviceDistribution: [\n        { device: '移动端', count: 9876, percentage: 78.4 },\n        { device: '桌面端', count: 2145, percentage: 17.0 },\n        { device: '平板', count: 578, percentage: 4.6 },\n      ],\n    };\n\n    return NextResponse.json(userAnalytics);\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/costs/breakdown/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":10,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":10,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":11,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":11,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 18. Maximum allowed is 10.","line":33,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":170,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":48,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":48,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1645,1658],"text":"breakdownType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1645,1658],"text":"breakdownType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1645,1658],"text":"Boolean(breakdownType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":52,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":52,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1734,1742],"text":"userType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1734,1742],"text":"userType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1734,1742],"text":"Boolean(userType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":56,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":56,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1808,1821],"text":"timeDimension != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1808,1821],"text":"timeDimension ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1808,1821],"text":"Boolean(timeDimension)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":60,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1897,1910],"text":"breakdownDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1897,1910],"text":"breakdownDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1897,1910],"text":"Boolean(breakdownDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1986,1995],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1986,1995],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1986,1995],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1999,2006],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1999,2006],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1999,2006],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":96,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2719,3035],"text":"(Boolean((breakdownData?.reduce((acc, curr) => {\n      acc.totalCost += parseFloat(curr.cost_amount.toString());\n      acc.totalUserCount += curr.user_count;\n      acc.totalTransactionCount += curr.transaction_count;\n      return acc;\n    }, {\n      totalCost: 0,\n      totalUserCount: 0,\n      totalTransactionCount: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":96,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":96,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3036,3038],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":99,"column":31,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":114,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3091,3627],"text":"(Boolean((breakdownData?.reduce((acc, curr) => {\n      if (curr.user_type) {\n        if (!acc[curr.user_type]) {\n          acc[curr.user_type] = {\n            cost: 0,\n            userCount: 0,\n            transactionCount: 0,\n            avgCostPerUser: 0\n          };\n        }\n        acc[curr.user_type].cost += parseFloat(curr.cost_amount.toString());\n        acc[curr.user_type].userCount += curr.user_count;\n        acc[curr.user_type].transactionCount += curr.transaction_count;\n      }\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":100,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":100,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3140,3154],"text":"Boolean(curr.user_type)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":101,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":108,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3166,3360],"text":"acc[curr.user_type] ??= {\n            cost: 0,\n            userCount: 0,\n            transactionCount: 0,\n            avgCostPerUser: 0\n          };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":101,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3171,3190],"text":"(Boolean(acc[curr.user_type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3622,3625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3622,3625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3628,3630],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":117,"column":36,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":117,"endColumn":43,"fix":{"range":[3654,3840],"text":"for (const type of Object.keys(userTypeBreakdown)) {\n      const stats = userTypeBreakdown[type];\n      stats.avgCostPerUser = stats.userCount > 0 ? stats.cost / stats.userCount : 0;\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":118,"column":21,"nodeType":"MemberExpression","endLine":118,"endColumn":44},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":123,"column":36,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":137,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3894,4429],"text":"(Boolean((breakdownData?.reduce((acc, curr) => {\n      if (curr.time_dimension) {\n        if (!acc[curr.time_dimension]) {\n          acc[curr.time_dimension] = {\n            cost: 0,\n            userCount: 0,\n            transactionCount: 0\n          };\n        }\n        acc[curr.time_dimension].cost += parseFloat(curr.cost_amount.toString());\n        acc[curr.time_dimension].userCount += curr.user_count;\n        acc[curr.time_dimension].transactionCount += curr.transaction_count;\n      }\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":124,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":124,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3943,3962],"text":"Boolean(curr.time_dimension)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":125,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":131,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3974,4147],"text":"acc[curr.time_dimension] ??= {\n            cost: 0,\n            userCount: 0,\n            transactionCount: 0\n          };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":125,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":125,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3979,4003],"text":"(Boolean(acc[curr.time_dimension]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4424,4427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4424,4427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4430,4432],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":140,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":144,"endColumn":8},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":147,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":147,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":149,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":149,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4759,4768],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4759,4768],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4759,4768],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4769,4771],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":149,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":149,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4780,4787],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4780,4787],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4780,4787],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4788,4790],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":186,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":303,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":186,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":186,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":186,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'userType' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":191,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userType' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":191,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'timeDimension' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":192,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeDimension' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":192,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":196,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":196,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6093,6106],"text":"(Boolean(breakdownType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":239,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":239,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7496,7498],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":240,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":240,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7553,7555],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":243,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":244,"endColumn":64,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7604,7707],"text":"((firstChargeData?.reduce((sum, curr) => \n            sum + parseFloat(curr.reward_amount.toString()), 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7604,7707],"text":"((firstChargeData?.reduce((sum, curr) => \n            sum + parseFloat(curr.reward_amount.toString()), 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7604,7707],"text":"(Boolean((firstChargeData?.reduce((sum, curr) => \n            sum + parseFloat(curr.reward_amount.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":244,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":244,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7708,7710],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":254,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":254,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8091,8093],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":255,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":256,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8127,8217],"text":"((lotteryData?.reduce((sum, curr) => \n            sum + parseFloat(curr.cost.toString()), 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8127,8217],"text":"((lotteryData?.reduce((sum, curr) => \n            sum + parseFloat(curr.cost.toString()), 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8127,8217],"text":"(Boolean((lotteryData?.reduce((sum, curr) => \n            sum + parseFloat(curr.cost.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":256,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":256,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8218,8220],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":45,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport { getLogger } from '@/lib/logger';\nimport { ErrorHandler } from '@/lib/errors';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst logger = getLogger();\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/costs/breakdown\n * 获取成本细分统计数据\n * \n * Query Parameters:\n * - breakdownType: 细分类型 (user_type/time_dimension)\n * - userType: 用户类型 (new_user/active_user/vip_user)\n * - timeDimension: 时间维度 (hour/day/week/month)\n * - breakdownDate: 统计日期\n * - startDate: 开始日期\n * - endDate: 结束日期\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const breakdownType = searchParams.get('breakdownType');\n    const userType = searchParams.get('userType');\n    const timeDimension = searchParams.get('timeDimension');\n    const breakdownDate = searchParams.get('breakdownDate');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n\n    let query = supabase\n      .from('cost_breakdown')\n      .select('*')\n      .order('breakdown_date', { ascending: false });\n\n    if (breakdownType) {\n      query = query.eq('breakdown_type', breakdownType);\n    }\n\n    if (userType) {\n      query = query.eq('user_type', userType);\n    }\n\n    if (timeDimension) {\n      query = query.eq('time_dimension', timeDimension);\n    }\n\n    if (breakdownDate) {\n      query = query.eq('breakdown_date', breakdownDate);\n    } else if (startDate && endDate) {\n      query = query\n        .gte('breakdown_date', startDate)\n        .lte('breakdown_date', endDate);\n    } else {\n      // 默认获取最近7天的数据\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      query = query.gte('breakdown_date', sevenDaysAgo.toISOString().split('T')[0]);\n    }\n\n    const { data: breakdownData, error } = await query;\n\n    if (error) {\n      logger.error('查询成本细分数据失败', error, {\n        endpoint: '/api/admin/costs/breakdown',\n        method: 'GET',\n        userType,\n        timeDimension,\n        dateRange: { startDate, endDate }\n      });\n      return ErrorHandler.createErrorResponse('查询成本细分数据失败');\n    }\n\n    // 计算汇总统计\n    const totalStats = breakdownData?.reduce((acc, curr) => {\n      acc.totalCost += parseFloat(curr.cost_amount.toString());\n      acc.totalUserCount += curr.user_count;\n      acc.totalTransactionCount += curr.transaction_count;\n      return acc;\n    }, {\n      totalCost: 0,\n      totalUserCount: 0,\n      totalTransactionCount: 0\n    }) || {};\n\n    // 按用户类型分组统计\n    const userTypeBreakdown = breakdownData?.reduce((acc, curr) => {\n      if (curr.user_type) {\n        if (!acc[curr.user_type]) {\n          acc[curr.user_type] = {\n            cost: 0,\n            userCount: 0,\n            transactionCount: 0,\n            avgCostPerUser: 0\n          };\n        }\n        acc[curr.user_type].cost += parseFloat(curr.cost_amount.toString());\n        acc[curr.user_type].userCount += curr.user_count;\n        acc[curr.user_type].transactionCount += curr.transaction_count;\n      }\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    // 计算平均成本\n    Object.keys(userTypeBreakdown).forEach(type => {\n      const stats = userTypeBreakdown[type];\n      stats.avgCostPerUser = stats.userCount > 0 ? stats.cost / stats.userCount : 0;\n    });\n\n    // 按时间维度分组统计\n    const timeDimensionBreakdown = breakdownData?.reduce((acc, curr) => {\n      if (curr.time_dimension) {\n        if (!acc[curr.time_dimension]) {\n          acc[curr.time_dimension] = {\n            cost: 0,\n            userCount: 0,\n            transactionCount: 0\n          };\n        }\n        acc[curr.time_dimension].cost += parseFloat(curr.cost_amount.toString());\n        acc[curr.time_dimension].userCount += curr.user_count;\n        acc[curr.time_dimension].transactionCount += curr.transaction_count;\n      }\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    // 成本趋势数据（最近7天）\n    const trendData = breakdownData?.slice(0, 7).reverse().map(item => ({\n      date: item.breakdown_date,\n      cost: parseFloat(item.cost_amount.toString()),\n      userCount: item.user_count\n    })) || [];\n\n    const response = {\n      data: breakdownData || [],\n      summary: {\n        period: `${startDate || ''} - ${endDate || ''}`,\n        totalCost: totalStats.totalCost,\n        totalUserCount: totalStats.totalUserCount,\n        totalTransactionCount: totalStats.totalTransactionCount,\n        averageCostPerUser: totalStats.totalUserCount > 0 \n          ? totalStats.totalCost / totalStats.totalUserCount \n          : 0,\n        averageCostPerTransaction: totalStats.totalTransactionCount > 0 \n          ? totalStats.totalCost / totalStats.totalTransactionCount \n          : 0\n      },\n      breakdownByUserType: userTypeBreakdown,\n      breakdownByTimeDimension: timeDimensionBreakdown,\n      trendData\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    return ErrorHandler.handleApiError(error, '获取成本细分统计数据');\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/costs/breakdown\n * 计算并保存成本细分统计数据\n * \n * Body:\n * {\n *   \"breakdownType\": \"user_type\", // user_type/time_dimension\n *   \"userType\": \"new_user\", // 可选\n *   \"timeDimension\": \"day\", // 可选\n *   \"date\": \"2025-10-31\" // 可选，默认今天\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      breakdownType,\n      userType = null,\n      timeDimension = null,\n      date = new Date().toISOString().split('T')[0]\n    } = body;\n\n    if (!breakdownType) {\n      return NextResponse.json(\n        { error: 'breakdownType 为必填参数' },\n        { status: 400 }\n      );\n    }\n\n    const results = [];\n\n    if (breakdownType === 'user_type') {\n      // 按用户类型计算成本\n      const userTypes = ['new_user', 'active_user', 'vip_user'];\n      \n      for (const type of userTypes) {\n        let costAmount = 0;\n        let userCount = 0;\n        let transactionCount = 0;\n\n        // 根据用户类型计算相关成本\n        if (type === 'new_user') {\n          // 新用户：新手任务 + 签到 + 首充奖励\n          const { data: taskData } = await supabase\n            .from('user_task_progress')\n            .select('user_id')\n            .eq('status', 'claimed')\n            .gte('created_at', `${date}T00:00:00`)\n            .lt('created_at', `${date}T23:59:59`);\n\n          const { data: checkinData } = await supabase\n            .from('check_in_records')\n            .select('user_id')\n            .eq('status', 'claimed')\n            .gte('created_at', `${date}T00:00:00`)\n            .lt('created_at', `${date}T23:59:59`);\n\n          const { data: firstChargeData } = await supabase\n            .from('first_recharge_rewards')\n            .select('user_id, reward_amount')\n            .eq('status', 'claimed')\n            .gte('created_at', `${date}T00:00:00`)\n            .lt('created_at', `${date}T23:59:59`);\n\n          userCount = new Set([\n            ...(taskData?.map(d => d.user_id) || []),\n            ...(checkinData?.map(d => d.user_id) || [])\n          ]).size;\n\n          costAmount = (firstChargeData?.reduce((sum, curr) => \n            sum + parseFloat(curr.reward_amount.toString()), 0) || 0);\n        } \n        else if (type === 'active_user') {\n          // 活跃用户：抽奖 + 邀请奖励\n          const { data: lotteryData } = await supabase\n            .from('participations')\n            .select('user_id, cost')\n            .gte('created_at', `${date}T00:00:00`)\n            .lt('created_at', `${date}T23:59:59`);\n\n          userCount = new Set(lotteryData?.map(d => d.user_id) || []).size;\n          costAmount = lotteryData?.reduce((sum, curr) => \n            sum + parseFloat(curr.cost.toString()), 0) || 0;\n        }\n        else if (type === 'vip_user') {\n          // VIP用户：额外的运营成本\n          costAmount = 100.00; // VIP用户每日额外成本\n          userCount = 50; // 假设的VIP用户数量\n        }\n\n        transactionCount = Math.floor(userCount * 1.2); // 估算交易数量\n\n        // 插入数据\n        const { data, error } = await supabase\n          .from('cost_breakdown')\n          .insert({\n            breakdown_type: 'user_type',\n            user_type: type,\n            cost_amount: costAmount,\n            user_count: userCount,\n            transaction_count: transactionCount,\n            cost_per_user: userCount > 0 ? costAmount / userCount : 0,\n            breakdown_date: date\n          })\n          .select()\n          .single();\n\n        if (error) {\n          logger.error(`插入${type}成本细分数据失败`, error, {\n            userType: type,\n            date,\n            breakdownType\n          });\n        } else {\n          results.push(data);\n        }\n      }\n    }\n\n    return NextResponse.json(\n      ErrorHandler.createSuccessResponse({\n        data: results,\n        message: '成本细分数据计算完成'\n      })\n    );\n\n  } catch (error) {\n    return ErrorHandler.handleApiError(error, '计算成本细分统计数据');\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/costs/daily/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 16. Maximum allowed is 10.","line":29,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":118,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":35,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1146,1170],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1146,1170],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1146,1170],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":35,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":35,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1171,1173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":36,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":36,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1207,1232],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1207,1232],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1207,1232],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":36,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":36,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1233,1235],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1416,1420],"text":"date != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1416,1420],"text":"date ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1416,1420],"text":"Boolean(date)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1482,1491],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1482,1491],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1482,1491],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1495,1502],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1495,1502],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1495,1502],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2047,2083],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":86,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2226,2746],"text":"(Boolean((costData?.reduce((acc, curr) => {\n      acc.totalCost += parseFloat(curr.total_cost.toString());\n      acc.incentiveCost += parseFloat(curr.incentive_cost.toString());\n      acc.operationCost += parseFloat(curr.operation_cost.toString());\n      acc.referralCost += parseFloat(curr.referral_cost.toString());\n      acc.lotteryCost += parseFloat(curr.lottery_cost.toString());\n      return acc;\n    }, {\n      totalCost: 0,\n      incentiveCost: 0,\n      operationCost: 0,\n      referralCost: 0,\n      lotteryCost: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":86,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":86,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2747,2749],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":89,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":89,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":91,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":91,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2841,2846],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2841,2846],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2841,2846],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":91,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":91,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2847,2849],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":94,"column":32,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":94,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2913,2918],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2913,2918],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2913,2918],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2919,2921],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.","line":97,"column":17,"nodeType":"ConditionalExpression","messageId":"preferNullishOverTernary","endLine":97,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2976,3029],"text":"date ?? `${startDate || ''} - ${endDate || ''}`"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":97,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":97,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2976,2980],"text":"(date != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2976,2980],"text":"(date ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2976,2980],"text":"(Boolean(date))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":97,"column":34,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":97,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2993,3002],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2993,3002],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2993,3002],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":97,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":97,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3003,3005],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":97,"column":55,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":97,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3014,3021],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3014,3021],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3014,3021],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":97,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":97,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3022,3024],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3445,3484],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":132,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":132,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":135,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":135,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3935,3944],"text":"(Boolean(body.date))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":135,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":135,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3945,3947],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":136,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":136,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4017,4038],"text":"(Boolean(body.forceRecalculate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4039,4041],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":139,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":139,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4080,4096],"text":"(Boolean(forceRecalculate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":155,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":155,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4609,4645],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5101,5140],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/costs/daily\n * 获取每日成本统计数据\n * \n * Query Parameters:\n * - date: 特定日期 (格式: YYYY-MM-DD)\n * - startDate: 开始日期 (格式: YYYY-MM-DD)\n * - endDate: 结束日期 (格式: YYYY-MM-DD)\n * - page: 页码\n * - limit: 每页记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const date = searchParams.get('date');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '30');\n    const offset = (page - 1) * limit;\n\n    let query = supabase\n      .from('cost_statistics')\n      .select('*')\n      .order('stat_date', { ascending: false });\n\n    if (date) {\n      query = query.eq('stat_date', date);\n    } else if (startDate && endDate) {\n      query = query\n        .gte('stat_date', startDate)\n        .lte('stat_date', endDate);\n    } else {\n      // 默认获取最近30天的数据\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      query = query.gte('stat_date', thirtyDaysAgo.toISOString().split('T')[0]);\n    }\n\n    // 获取总数\n    const { count } = await query.select('*', { count: 'exact', head: true });\n    \n    // 获取分页数据\n    const { data: costData, error } = await query\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      console.error('查询成本统计数据失败:', error);\n      return NextResponse.json(\n        { error: '查询成本统计数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 计算汇总统计\n    const totalStats = costData?.reduce((acc, curr) => {\n      acc.totalCost += parseFloat(curr.total_cost.toString());\n      acc.incentiveCost += parseFloat(curr.incentive_cost.toString());\n      acc.operationCost += parseFloat(curr.operation_cost.toString());\n      acc.referralCost += parseFloat(curr.referral_cost.toString());\n      acc.lotteryCost += parseFloat(curr.lottery_cost.toString());\n      return acc;\n    }, {\n      totalCost: 0,\n      incentiveCost: 0,\n      operationCost: 0,\n      referralCost: 0,\n      lotteryCost: 0\n    }) || {};\n\n    const response = {\n      data: costData || [],\n      pagination: {\n        total: count || 0,\n        page,\n        limit,\n        totalPages: Math.ceil((count || 0) / limit)\n      },\n      summary: {\n        period: date ? date : `${startDate || ''} - ${endDate || ''}`,\n        totalCost: totalStats.totalCost,\n        averageDailyCost: (totalStats.totalCost / (costData?.length || 1)),\n        costBreakdown: {\n          incentive: totalStats.incentiveCost,\n          operation: totalStats.operationCost,\n          referral: totalStats.referralCost,\n          lottery: totalStats.lotteryCost\n        }\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取每日成本统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/costs/daily\n * 计算并保存指定日期的成本统计数据\n * \n * Body:\n * {\n *   \"date\": \"2025-10-31\", // 可选，默认今天\n *   \"forceRecalculate\": false // 是否强制重新计算\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const targetDate = body.date || new Date().toISOString().split('T')[0];\n    const forceRecalculate = body.forceRecalculate || false;\n\n    // 检查是否已存在该日期的数据\n    if (!forceRecalculate) {\n      const { data: existing } = await supabase\n        .from('cost_statistics')\n        .select('id')\n        .eq('stat_date', targetDate)\n        .single();\n\n      if (existing) {\n        return NextResponse.json(\n          { error: '该日期的成本数据已存在，如需重新计算请设置 forceRecalculate=true' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // 调用成本聚合函数\n    const { data, error } = await supabase\n      .rpc('aggregate_daily_cost_statistics', {\n        target_date: targetDate\n      });\n\n    if (error) {\n      console.error('计算成本统计数据失败:', error);\n      return NextResponse.json(\n        { error: '计算成本统计数据失败', details: error.message },\n        { status: 500 }\n      );\n    }\n\n    // 获取计算结果\n    const { data: resultData } = await supabase\n      .from('cost_statistics')\n      .select('*')\n      .eq('stat_date', targetDate)\n      .single();\n\n    return NextResponse.json({\n      success: true,\n      message: '成本统计数据计算完成',\n      date: targetDate,\n      data: resultData\n    });\n\n  } catch (error) {\n    console.error('计算每日成本统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/costs/roi/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 21. Maximum allowed is 10.","line":31,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":158,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":39,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":39,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1335,1359],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1335,1359],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1335,1359],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":39,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":39,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1360,1362],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":40,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1396,1421],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1396,1421],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1396,1421],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1422,1424],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":48,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":48,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1606,1618],"text":"analysisType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1606,1618],"text":"analysisType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1606,1618],"text":"Boolean(analysisType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":52,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":52,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1692,1703],"text":"referenceId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1692,1703],"text":"referenceId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1692,1703],"text":"Boolean(referenceId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":56,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":56,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1775,1789],"text":"analysisPeriod != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1775,1789],"text":"analysisPeriod ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1775,1789],"text":"Boolean(analysisPeriod)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":60,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1867,1876],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1867,1876],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1867,1876],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":60,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1880,1887],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1880,1887],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1880,1887],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2443,2480],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":98,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2624,3025],"text":"(Boolean((roiData?.reduce((acc, curr) => {\n      acc.totalRevenue += parseFloat(curr.total_revenue.toString());\n      acc.totalCost += parseFloat(curr.total_cost.toString());\n      acc.totalUserCount += curr.user_count;\n      acc.totalTransactionCount += curr.transaction_count;\n      return acc;\n    }, {\n      totalRevenue: 0,\n      totalCost: 0,\n      totalUserCount: 0,\n      totalTransactionCount: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":98,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":98,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3026,3028],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":109,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":109,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":111,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":111,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3434,3439],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3434,3439],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3434,3439],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3440,3442],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":114,"column":32,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":114,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3506,3511],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3506,3511],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3506,3511],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3512,3514],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":117,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":117,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3572,3581],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3572,3581],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3572,3581],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3582,3584],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":117,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":117,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3593,3600],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3593,3600],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3593,3600],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3601,3603],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":146,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4257,4733],"text":"(Boolean((roiData?.reduce((acc, curr) => {\n        const type = curr.analysis_type;\n        if (!acc[type]) {\n          acc[type] = {\n            count: 0,\n            totalRevenue: 0,\n            totalCost: 0,\n            avgRoi: 0\n          };\n        }\n        acc[type].count++;\n        acc[type].totalRevenue += parseFloat(curr.total_revenue.toString());\n        acc[type].totalCost += parseFloat(curr.total_cost.toString());\n        return acc;\n      }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":134,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":141,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[4339,4502],"text":"acc[type] ??= {\n            count: 0,\n            totalRevenue: 0,\n            totalCost: 0,\n            avgRoi: 0\n          };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":134,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":134,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4344,4353],"text":"(Boolean(acc[type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":134,"column":14,"nodeType":"MemberExpression","endLine":134,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":135,"column":11,"nodeType":"MemberExpression","endLine":135,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":142,"column":9,"nodeType":"MemberExpression","endLine":142,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":143,"column":9,"nodeType":"MemberExpression","endLine":143,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":144,"column":9,"nodeType":"MemberExpression","endLine":144,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4728,4731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4728,4731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4734,4736],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4813,4851],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":174,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":174,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":184,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":184,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5533,5545],"text":"(Boolean(analysisType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":184,"column":27,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":184,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5550,5564],"text":"(Boolean(analysisPeriod))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":192,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":192,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5978,6015],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":213,"column":27,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":213,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6322,6333],"text":"(Boolean(referenceId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":213,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":213,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6334,6336],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6595,6633],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":42,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/costs/roi\n * 获取ROI分析数据\n * \n * Query Parameters:\n * - analysisType: 分析类型 (period/product/channel)\n * - referenceId: 关联对象ID\n * - analysisPeriod: 分析周期 (daily/weekly/monthly)\n * - startDate: 开始日期\n * - endDate: 结束日期\n * - page: 页码\n * - limit: 每页记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const analysisType = searchParams.get('analysisType');\n    const referenceId = searchParams.get('referenceId');\n    const analysisPeriod = searchParams.get('analysisPeriod');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = (page - 1) * limit;\n\n    let query = supabase\n      .from('roi_analysis')\n      .select('*')\n      .order('analysis_date', { ascending: false });\n\n    if (analysisType) {\n      query = query.eq('analysis_type', analysisType);\n    }\n\n    if (referenceId) {\n      query = query.eq('reference_id', referenceId);\n    }\n\n    if (analysisPeriod) {\n      query = query.eq('analysis_period', analysisPeriod);\n    }\n\n    if (startDate && endDate) {\n      query = query\n        .gte('analysis_date', startDate)\n        .lte('analysis_date', endDate);\n    } else {\n      // 默认获取最近30天的数据\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      query = query.gte('analysis_date', thirtyDaysAgo.toISOString().split('T')[0]);\n    }\n\n    // 获取总数\n    const { count } = await query.select('*', { count: 'exact', head: true });\n    \n    // 获取分页数据\n    const { data: roiData, error } = await query\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      console.error('查询ROI分析数据失败:', error);\n      return NextResponse.json(\n        { error: '查询ROI分析数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 计算汇总统计\n    const totalStats = roiData?.reduce((acc, curr) => {\n      acc.totalRevenue += parseFloat(curr.total_revenue.toString());\n      acc.totalCost += parseFloat(curr.total_cost.toString());\n      acc.totalUserCount += curr.user_count;\n      acc.totalTransactionCount += curr.transaction_count;\n      return acc;\n    }, {\n      totalRevenue: 0,\n      totalCost: 0,\n      totalUserCount: 0,\n      totalTransactionCount: 0\n    }) || {};\n\n    const roiPercentage = totalStats.totalCost > 0 \n      ? ((totalStats.totalRevenue - totalStats.totalCost) / totalStats.totalCost) * 100 \n      : 0;\n    \n    const profitMargin = totalStats.totalRevenue > 0 \n      ? ((totalStats.totalRevenue - totalStats.totalCost) / totalStats.totalRevenue) * 100 \n      : 0;\n\n    const response = {\n      data: roiData || [],\n      pagination: {\n        total: count || 0,\n        page,\n        limit,\n        totalPages: Math.ceil((count || 0) / limit)\n      },\n      summary: {\n        period: `${startDate || ''} - ${endDate || ''}`,\n        totalRevenue: totalStats.totalRevenue,\n        totalCost: totalStats.totalCost,\n        netProfit: totalStats.totalRevenue - totalStats.totalCost,\n        roiPercentage,\n        profitMargin,\n        totalUserCount: totalStats.totalUserCount,\n        totalTransactionCount: totalStats.totalTransactionCount,\n        averageRevenuePerUser: totalStats.totalUserCount > 0 \n          ? totalStats.totalRevenue / totalStats.totalUserCount \n          : 0,\n        averageTransactionValue: totalStats.totalTransactionCount > 0 \n          ? totalStats.totalRevenue / totalStats.totalTransactionCount \n          : 0\n      },\n      breakdownByType: roiData?.reduce((acc, curr) => {\n        const type = curr.analysis_type;\n        if (!acc[type]) {\n          acc[type] = {\n            count: 0,\n            totalRevenue: 0,\n            totalCost: 0,\n            avgRoi: 0\n          };\n        }\n        acc[type].count++;\n        acc[type].totalRevenue += parseFloat(curr.total_revenue.toString());\n        acc[type].totalCost += parseFloat(curr.total_cost.toString());\n        return acc;\n      }, {} as Record<string, any>) || {}\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取ROI分析API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/costs/roi\n * 计算并保存ROI分析数据\n * \n * Body:\n * {\n *   \"analysisType\": \"period\", // period/product/channel\n *   \"referenceId\": \"optional-id\",\n *   \"analysisPeriod\": \"daily\", // daily/weekly/monthly\n *   \"date\": \"2025-10-31\" // 可选，默认今天\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      analysisType,\n      referenceId = null,\n      analysisPeriod,\n      date = new Date().toISOString().split('T')[0]\n    } = body;\n\n    if (!analysisType || !analysisPeriod) {\n      return NextResponse.json(\n        { error: 'analysisType 和 analysisPeriod 为必填参数' },\n        { status: 400 }\n      );\n    }\n\n    // 调用ROI计算函数\n    const { data, error } = await supabase\n      .rpc('calculate_roi_for_period', {\n        p_analysis_type: analysisType,\n        p_reference_id: referenceId,\n        p_analysis_period: analysisPeriod,\n        target_date: date\n      });\n\n    if (error) {\n      console.error('计算ROI分析数据失败:', error);\n      return NextResponse.json(\n        { error: '计算ROI分析数据失败', details: error.message },\n        { status: 500 }\n      );\n    }\n\n    // 获取计算结果\n    const { data: resultData } = await supabase\n      .from('roi_analysis')\n      .select('*')\n      .eq('analysis_type', analysisType)\n      .eq('reference_id', referenceId || '')\n      .eq('analysis_date', date)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single();\n\n    return NextResponse.json({\n      success: true,\n      message: 'ROI分析数据计算完成',\n      data: resultData\n    });\n\n  } catch (error) {\n    console.error('计算ROI分析API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/costs/trends/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 13. Maximum allowed is 10.","line":29,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":143,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1038,1064],"text":"(searchParams.get('period') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1038,1064],"text":"(searchParams.get('period') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1038,1064],"text":"(Boolean(searchParams.get('period')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1065,1067],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":33,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1096,1124],"text":"(searchParams.get('costType') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1096,1124],"text":"(searchParams.get('costType') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1096,1124],"text":"(Boolean(searchParams.get('costType')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1125,1127],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":21,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":34,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1155,1182],"text":"(searchParams.get('groupBy') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1155,1182],"text":"(searchParams.get('groupBy') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1155,1182],"text":"(Boolean(searchParams.get('groupBy')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":34,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":34,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1183,1185],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'calculatedEndDate' is never reassigned. Use 'const' instead.","line":40,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":40,"endColumn":26,"fix":{"range":[1353,1416],"text":"const calculatedEndDate = new Date().toISOString().split('T')[0];"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":42,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":42,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1426,1435],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1426,1435],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1426,1435],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":42,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":42,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1439,1446],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1439,1446],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1439,1446],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"prefer-const","severity":2,"message":"'query' is never reassigned. Use 'const' instead.","line":52,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":52,"endColumn":14,"fix":{"range":[1738,1944],"text":"const query = supabase\n      .from('cost_statistics')\n      .select('*')\n      .gte('stat_date', calculatedStartDate)\n      .lte('stat_date', calculatedEndDate)\n      .order('stat_date', { ascending: true });"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2021,2057],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":70,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":92,"endColumn":7},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":78,"column":37,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":78,"endColumn":66,"fix":{"range":[2652,2681],"text":"{selectedCost = incentiveCost;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":79,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":79,"endColumn":71,"fix":{"range":[2723,2752],"text":"{selectedCost = operationCost;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":80,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":80,"endColumn":69,"fix":{"range":[2793,2821],"text":"{selectedCost = referralCost;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":81,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":81,"endColumn":67,"fix":{"range":[2861,2888],"text":"{selectedCost = lotteryCost;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4282,4319],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4472,4475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4472,4475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4529,4532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4529,4532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":150,"column":8,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":150,"endColumn":15,"fix":{"range":[4543,5478],"text":"for (const item of data) {\n    const date = new Date(item.date);\n    let key: string;\n\n    if (period === 'weekly') {\n      // 获取周一\n      const monday = new Date(date);\n      monday.setDate(date.getDate() - date.getDay() + 1);\n      key = monday.toISOString().split('T')[0];\n    } else if (period === 'monthly') {\n      // 获取月份第一天\n      key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-01`;\n    }\n\n    if (!grouped[key]) {\n      grouped[key] = {\n        date: key,\n        totalCost: 0,\n        incentiveCost: 0,\n        operationCost: 0,\n        referralCost: 0,\n        lotteryCost: 0,\n        count: 0\n      };\n    }\n\n    grouped[key].totalCost += item.totalCost;\n    grouped[key].incentiveCost += item.incentiveCost;\n    grouped[key].operationCost += item.operationCost;\n    grouped[key].referralCost += item.referralCost;\n    grouped[key].lotteryCost += item.lotteryCost;\n    grouped[key].count += 1;\n  }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":164,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":174,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[4969,5186],"text":"grouped[key] ??= {\n        date: key,\n        totalCost: 0,\n        incentiveCost: 0,\n        operationCost: 0,\n        referralCost: 0,\n        lotteryCost: 0,\n        count: 0\n      };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":164,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":164,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4974,4986],"text":"(Boolean(grouped[key]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":164,"column":10,"nodeType":"MemberExpression","endLine":164,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":165,"column":7,"nodeType":"MemberExpression","endLine":165,"endColumn":19},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":176,"column":5,"nodeType":"MemberExpression","endLine":176,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":177,"column":5,"nodeType":"MemberExpression","endLine":177,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":178,"column":5,"nodeType":"MemberExpression","endLine":178,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":179,"column":5,"nodeType":"MemberExpression","endLine":179,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":180,"column":5,"nodeType":"MemberExpression","endLine":180,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":181,"column":5,"nodeType":"MemberExpression","endLine":181,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5523,5526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5523,5526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5902,5905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5902,5905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7666,7669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7666,7669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8607,8610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8607,8610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":6,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/costs/trends\n * 获取成本趋势分析数据\n * \n * Query Parameters:\n * - period: 趋势周期 (7d/30d/90d)\n * - costType: 成本类型 (all/incentive/operation/referral/lottery)\n * - groupBy: 分组方式 (daily/weekly/monthly)\n * - startDate: 自定义开始日期\n * - endDate: 自定义结束日期\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const period = searchParams.get('period') || '30d';\n    const costType = searchParams.get('costType') || 'all';\n    const groupBy = searchParams.get('groupBy') || 'daily';\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n\n    // 计算日期范围\n    let calculatedStartDate: string;\n    let calculatedEndDate = new Date().toISOString().split('T')[0];\n\n    if (startDate && endDate) {\n      calculatedStartDate = startDate;\n    } else {\n      const days = period === '7d' ? 7 : period === '30d' ? 30 : 90;\n      const start = new Date();\n      start.setDate(start.getDate() - days);\n      calculatedStartDate = start.toISOString().split('T')[0];\n    }\n\n    // 获取成本统计数据\n    let query = supabase\n      .from('cost_statistics')\n      .select('*')\n      .gte('stat_date', calculatedStartDate)\n      .lte('stat_date', calculatedEndDate)\n      .order('stat_date', { ascending: true });\n\n    const { data: costData, error } = await query;\n\n    if (error) {\n      console.error('查询成本趋势数据失败:', error);\n      return NextResponse.json(\n        { error: '查询成本趋势数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 处理数据并按成本类型过滤\n    const processedData = costData?.map(item => {\n      const totalCost = parseFloat(item.total_cost.toString());\n      const incentiveCost = parseFloat(item.incentive_cost.toString());\n      const operationCost = parseFloat(item.operation_cost.toString());\n      const referralCost = parseFloat(item.referral_cost.toString());\n      const lotteryCost = parseFloat(item.lottery_cost.toString());\n\n      let selectedCost = totalCost;\n      if (costType === 'incentive') selectedCost = incentiveCost;\n      else if (costType === 'operation') selectedCost = operationCost;\n      else if (costType === 'referral') selectedCost = referralCost;\n      else if (costType === 'lottery') selectedCost = lotteryCost;\n\n      return {\n        date: item.stat_date,\n        totalCost,\n        incentiveCost,\n        operationCost,\n        referralCost,\n        lotteryCost,\n        selectedCost\n      };\n    }) || [];\n\n    // 按周期分组（如果需要周/月统计）\n    let groupedData = processedData;\n    if (groupBy === 'weekly' || groupBy === 'monthly') {\n      groupedData = groupDataByPeriod(processedData, groupBy);\n    }\n\n    // 计算趋势统计\n    const trendStats = calculateTrendStats(processedData);\n\n    // 计算成本占比\n    const costBreakdown = calculateCostBreakdown(processedData);\n\n    // 计算同比增长（如果有足够的历史数据）\n    const growthMetrics = calculateGrowthMetrics(processedData);\n\n    const response = {\n      data: groupedData,\n      summary: {\n        period: period,\n        dateRange: {\n          start: calculatedStartDate,\n          end: calculatedEndDate\n        },\n        costType,\n        groupBy,\n        totalCost: trendStats.totalCost,\n        averageDailyCost: trendStats.averageDailyCost,\n        maxDailyCost: trendStats.maxDailyCost,\n        minDailyCost: trendStats.minDailyCost,\n        costVolatility: trendStats.costVolatility\n      },\n      costBreakdown,\n      trendAnalysis: {\n        trendDirection: trendStats.trendDirection,\n        growthRate: trendStats.growthRate,\n        consistency: trendStats.consistency\n      },\n      growthMetrics\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取成本趋势API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n// 数据分组函数\nfunction groupDataByPeriod(data: any[], period: string) {\n  const grouped: Record<string, any> = {};\n\n  data.forEach(item => {\n    const date = new Date(item.date);\n    let key: string;\n\n    if (period === 'weekly') {\n      // 获取周一\n      const monday = new Date(date);\n      monday.setDate(date.getDate() - date.getDay() + 1);\n      key = monday.toISOString().split('T')[0];\n    } else if (period === 'monthly') {\n      // 获取月份第一天\n      key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-01`;\n    }\n\n    if (!grouped[key]) {\n      grouped[key] = {\n        date: key,\n        totalCost: 0,\n        incentiveCost: 0,\n        operationCost: 0,\n        referralCost: 0,\n        lotteryCost: 0,\n        count: 0\n      };\n    }\n\n    grouped[key].totalCost += item.totalCost;\n    grouped[key].incentiveCost += item.incentiveCost;\n    grouped[key].operationCost += item.operationCost;\n    grouped[key].referralCost += item.referralCost;\n    grouped[key].lotteryCost += item.lotteryCost;\n    grouped[key].count += 1;\n  });\n\n  return Object.values(grouped).map((item: any) => ({\n    date: item.date,\n    totalCost: item.totalCost / item.count,\n    incentiveCost: item.incentiveCost / item.count,\n    operationCost: item.operationCost / item.count,\n    referralCost: item.referralCost / item.count,\n    lotteryCost: item.lotteryCost / item.count,\n    selectedCost: item.totalCost / item.count\n  }));\n}\n\n// 计算趋势统计\nfunction calculateTrendStats(data: any[]) {\n  if (data.length === 0) {\n    return {\n      totalCost: 0,\n      averageDailyCost: 0,\n      maxDailyCost: 0,\n      minDailyCost: 0,\n      costVolatility: 0,\n      trendDirection: 'stable',\n      growthRate: 0,\n      consistency: 0\n    };\n  }\n\n  const totalCost = data.reduce((sum, item) => sum + item.selectedCost, 0);\n  const averageDailyCost = totalCost / data.length;\n  const maxDailyCost = Math.max(...data.map(item => item.selectedCost));\n  const minDailyCost = Math.min(...data.map(item => item.selectedCost));\n\n  // 计算成本波动性（标准差）\n  const variance = data.reduce((sum, item) => \n    sum + Math.pow(item.selectedCost - averageDailyCost, 2), 0) / data.length;\n  const costVolatility = Math.sqrt(variance);\n\n  // 计算趋势方向\n  let trendDirection = 'stable';\n  let growthRate = 0;\n\n  if (data.length >= 2) {\n    const firstHalf = data.slice(0, Math.floor(data.length / 2));\n    const secondHalf = data.slice(Math.floor(data.length / 2));\n\n    const firstAvg = firstHalf.reduce((sum, item) => sum + item.selectedCost, 0) / firstHalf.length;\n    const secondAvg = secondHalf.reduce((sum, item) => sum + item.selectedCost, 0) / secondHalf.length;\n\n    if (secondAvg > firstAvg * 1.1) {\n      trendDirection = 'increasing';\n      growthRate = ((secondAvg - firstAvg) / firstAvg) * 100;\n    } else if (secondAvg < firstAvg * 0.9) {\n      trendDirection = 'decreasing';\n      growthRate = ((firstAvg - secondAvg) / firstAvg) * 100;\n    }\n  }\n\n  // 计算一致性（波动系数）\n  const consistency = averageDailyCost > 0 ? (costVolatility / averageDailyCost) * 100 : 0;\n\n  return {\n    totalCost,\n    averageDailyCost,\n    maxDailyCost,\n    minDailyCost,\n    costVolatility,\n    trendDirection,\n    growthRate,\n    consistency\n  };\n}\n\n// 计算成本占比\nfunction calculateCostBreakdown(data: any[]) {\n  const totals = data.reduce((acc, item) => {\n    acc.incentive += item.incentiveCost;\n    acc.operation += item.operationCost;\n    acc.referral += item.referralCost;\n    acc.lottery += item.lotteryCost;\n    acc.total += item.totalCost;\n    return acc;\n  }, { incentive: 0, operation: 0, referral: 0, lottery: 0, total: 0 });\n\n  return {\n    incentive: {\n      amount: totals.incentive,\n      percentage: totals.total > 0 ? (totals.incentive / totals.total) * 100 : 0\n    },\n    operation: {\n      amount: totals.operation,\n      percentage: totals.total > 0 ? (totals.operation / totals.total) * 100 : 0\n    },\n    referral: {\n      amount: totals.referral,\n      percentage: totals.total > 0 ? (totals.referral / totals.total) * 100 : 0\n    },\n    lottery: {\n      amount: totals.lottery,\n      percentage: totals.total > 0 ? (totals.lottery / totals.total) * 100 : 0\n    }\n  };\n}\n\n// 计算增长指标\nfunction calculateGrowthMetrics(data: any[]) {\n  if (data.length < 2) {\n    return {\n      weekOverWeek: 0,\n      monthOverMonth: 0,\n      cumulativeGrowth: 0\n    };\n  }\n\n  const lastWeek = data.slice(-7);\n  const previousWeek = data.slice(-14, -7);\n\n  const lastWeekAvg = lastWeek.reduce((sum, item) => sum + item.selectedCost, 0) / lastWeek.length;\n  const previousWeekAvg = previousWeek.reduce((sum, item) => sum + item.selectedCost, 0) / previousWeek.length;\n\n  const weekOverWeek = previousWeekAvg > 0 \n    ? ((lastWeekAvg - previousWeekAvg) / previousWeekAvg) * 100 \n    : 0;\n\n  const firstValue = data[0].selectedCost;\n  const lastValue = data[data.length - 1].selectedCost;\n\n  const cumulativeGrowth = firstValue > 0 \n    ? ((lastValue - firstValue) / firstValue) * 100 \n    : 0;\n\n  return {\n    weekOverWeek,\n    monthOverMonth: 0, // 需要更多历史数据才能计算\n    cumulativeGrowth\n  };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/financial/costs/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 21. Maximum allowed is 10.","line":29,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":193,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":24,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1039,1069],"text":"(searchParams.get('periodType') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1039,1069],"text":"(searchParams.get('periodType') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1039,1069],"text":"(Boolean(searchParams.get('periodType')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1070,1072],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":36,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":36,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1262,1287],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1262,1287],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1262,1287],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":36,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":36,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1288,1290],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":45,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1485,1493],"text":"costType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1485,1493],"text":"costType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1485,1493],"text":"Boolean(costType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1559,1568],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1559,1568],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1559,1568],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1572,1579],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1572,1579],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1572,1579],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1988,2024],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":71,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":80,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2167,2478],"text":"(Boolean((costData?.reduce((acc, curr) => {\n      acc.totalCost += parseFloat(curr.cost_amount.toString());\n      acc.totalUserCount += curr.user_count;\n      acc.totalTransactionCount += curr.transaction_count;\n      return acc;\n    }, {\n      totalCost: 0,\n      totalUserCount: 0,\n      totalTransactionCount: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":80,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":80,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2479,2481],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":31,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":101,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2666,3137],"text":"(Boolean((costData?.reduce((acc, curr) => {\n      const type = curr.user_type || 'unknown';\n      if (!acc[type]) {\n        acc[type] = {\n          cost: 0,\n          userCount: 0,\n          transactionCount: 0,\n          avgCostPerUser: 0\n        };\n      }\n      acc[type].cost += parseFloat(curr.cost_amount.toString());\n      acc[type].userCount += curr.user_count;\n      acc[type].transactionCount += curr.transaction_count;\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":88,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":88,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2719,2733],"text":"(Boolean(curr.user_type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":88,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":88,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2734,2736],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":89,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":96,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[2754,2914],"text":"acc[type] ??= {\n          cost: 0,\n          userCount: 0,\n          transactionCount: 0,\n          avgCostPerUser: 0\n        };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":89,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":89,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2759,2768],"text":"(Boolean(acc[type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":89,"column":12,"nodeType":"MemberExpression","endLine":89,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":90,"column":9,"nodeType":"MemberExpression","endLine":90,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":97,"column":7,"nodeType":"MemberExpression","endLine":97,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":98,"column":7,"nodeType":"MemberExpression","endLine":98,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":99,"column":7,"nodeType":"MemberExpression","endLine":99,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3132,3135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3132,3135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":101,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":101,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3138,3140],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":104,"column":36,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":104,"endColumn":43,"fix":{"range":[3168,3354],"text":"for (const type of Object.keys(costTypeBreakdown)) {\n      const stats = costTypeBreakdown[type];\n      stats.avgCostPerUser = stats.userCount > 0 ? stats.cost / stats.userCount : 0;\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":105,"column":21,"nodeType":"MemberExpression","endLine":105,"endColumn":44},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":110,"column":36,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":123,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3408,3842],"text":"(Boolean((costData?.reduce((acc, curr) => {\n      const date = curr.breakdown_date;\n      if (!acc[date]) {\n        acc[date] = {\n          cost: 0,\n          userCount: 0,\n          transactionCount: 0\n        };\n      }\n      acc[date].cost += parseFloat(curr.cost_amount.toString());\n      acc[date].userCount += curr.user_count;\n      acc[date].transactionCount += curr.transaction_count;\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":112,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":118,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3488,3619],"text":"acc[date] ??= {\n          cost: 0,\n          userCount: 0,\n          transactionCount: 0\n        };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":112,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":112,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3493,3502],"text":"(Boolean(acc[date]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":112,"column":12,"nodeType":"MemberExpression","endLine":112,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":113,"column":9,"nodeType":"MemberExpression","endLine":113,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":119,"column":7,"nodeType":"MemberExpression","endLine":119,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":120,"column":7,"nodeType":"MemberExpression","endLine":120,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":121,"column":7,"nodeType":"MemberExpression","endLine":121,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3837,3840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3837,3840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3843,3845],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":126,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":132,"endColumn":8},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":131,"column":31,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":131,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4140,4170],"text":"(Boolean((item.cost_per_user?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4171,4173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":150,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":150,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":161,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":161,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":163,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":163,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5215,5224],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5215,5224],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5215,5224],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":163,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":163,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5225,5227],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":163,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":163,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5236,5243],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5236,5243],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5236,5243],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":163,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":163,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5244,5246],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5970,6007],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":207,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":207,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7327,7364],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'calculateIncentiveCosts' has a complexity of 16. Maximum allowed is 10.","line":254,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":351,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7552,7555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7552,7555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":265,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":266,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7843,7931],"text":"(Boolean((taskData?.reduce((sum, task) => \n    sum + parseFloat(task.reward_amount.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7932,7934],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":267,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":267,"endColumn":58,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7966,7995],"text":"(Boolean((taskData?.map(t => t.user_id))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7996,7998],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":279,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":279,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8344,8360],"text":"(Boolean((taskData?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":279,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":279,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8361,8363],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":296,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":297,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8803,8900],"text":"(Boolean((checkinData?.reduce((sum, checkin) => \n    sum + parseFloat(checkin.reward_amount.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":297,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":297,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8901,8903],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":298,"column":32,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":298,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8938,8970],"text":"(Boolean((checkinData?.map(c => c.user_id))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":298,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":298,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8971,8973],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":310,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":310,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9331,9350],"text":"(Boolean((checkinData?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":310,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":310,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9351,9353],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":327,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":328,"endColumn":58,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9823,9924],"text":"(Boolean((firstRechargeData?.reduce((sum, reward) => \n    sum + parseFloat(reward.reward_amount.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":328,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":328,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9925,9927],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":329,"column":38,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":329,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9968,10006],"text":"(Boolean((firstRechargeData?.map(r => r.user_id))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":329,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":329,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10007,10009],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":341,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":341,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10391,10416],"text":"(Boolean((firstRechargeData?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":341,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":341,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10417,10419],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":354,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10725,10728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10725,10728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":364,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":364,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11013,11039],"text":"(Boolean((participationsData?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":364,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":364,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11040,11042],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":365,"column":38,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":365,"endColumn":77,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11083,11122],"text":"(Boolean((participationsData?.map(p => p.user_id))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":365,"column":78,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":365,"endColumn":80,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11123,11125],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":366,"column":34,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":367,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11169,11252],"text":"(Boolean((participationsData?.reduce((sum, p) => \n    sum + parseFloat(p.cost.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":367,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":367,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11253,11255],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11984,11987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11984,11987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":409,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":409,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12341,12358],"text":"(Boolean((usersData?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":409,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":409,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12359,12361],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":428,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":428,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12933,12948],"text":"Boolean(operationResult)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13090,13093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13090,13093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":462,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":462,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[13763,13777],"text":"Boolean(platformResult)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13916,13919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13916,13919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":479,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":479,"endColumn":41,"fix":{"range":[14092,14283],"text":"for (const type of Object.keys(costTypeBreakdown)) {\n    const cost = costTypeBreakdown[type].cost;\n    if (cost > maxCost) {\n      maxCost = cost;\n      analysis.dominantType = type;\n    }\n  }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":480,"column":18,"nodeType":"MemberExpression","endLine":480,"endColumn":41},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":488,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":488,"endColumn":41,"fix":{"range":[14299,14484],"text":"for (const type of Object.keys(costTypeBreakdown)) {\n    const stats = costTypeBreakdown[type];\n    analysis.efficiency[type] = stats.userCount > 0 ? stats.cost / stats.userCount : 0;\n  }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":489,"column":19,"nodeType":"MemberExpression","endLine":489,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":490,"column":5,"nodeType":"MemberExpression","endLine":490,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":505,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":505,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14817,14820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14817,14820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":506,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":506,"endColumn":43,"fix":{"range":[14856,14868],"text":"{return null;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15050,15053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15050,15053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":517,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":517,"endColumn":41,"fix":{"range":[15124,15372],"text":"for (const type of Object.keys(costTypeBreakdown)) {\n    const stats = costTypeBreakdown[type];\n    if (stats.avgCostPerUser < minCostPerUser && stats.userCount > 0) {\n      minCostPerUser = stats.avgCostPerUser;\n      mostEfficient = type;\n    }\n  }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":518,"column":19,"nodeType":"MemberExpression","endLine":518,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":529,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":529,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15463,15466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15463,15466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":530,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":530,"endColumn":38,"fix":{"range":[15500,15509],"text":"{return 0;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":538,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":538,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15848,15851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15848,15851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":539,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":539,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[15880,15916],"text":"(Boolean((costTypeBreakdown['incentive']?.cost)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":539,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":539,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15917,15919],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":540,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":540,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[15947,15983],"text":"(Boolean((costTypeBreakdown['operation']?.cost)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":540,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":540,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15984,15986],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":541,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":541,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[16009,16050],"text":"(Boolean((costTypeBreakdown['incentive']?.userCount)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":541,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":541,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16051,16053],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":87,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":2,"fixableWarningCount":4,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/financial/costs\n * 获取成本统计数据（整合版本）\n * \n * Query Parameters:\n * - periodType: 期间类型 (daily/weekly/monthly/quarterly)\n * - costType: 成本类型 (incentive/prize/operation/platform)\n * - startDate: 开始日期\n * - endDate: 结束日期\n * - limit: 限制返回记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const periodType = searchParams.get('periodType') || 'daily';\n    const costType = searchParams.get('costType');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const limit = parseInt(searchParams.get('limit') || '100');\n\n    // 从cost_breakdown表获取数据\n    let query = supabase\n      .from('cost_breakdown')\n      .select('*')\n      .order('breakdown_date', { ascending: false })\n      .limit(limit);\n\n    if (costType) {\n      query = query.eq('user_type', costType);\n    }\n\n    if (startDate && endDate) {\n      query = query\n        .gte('breakdown_date', startDate)\n        .lte('breakdown_date', endDate);\n    } else {\n      // 默认获取最近30天的数据\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      query = query.gte('breakdown_date', thirtyDaysAgo.toISOString().split('T')[0]);\n    }\n\n    const { data: costData, error } = await query;\n\n    if (error) {\n      console.error('查询成本统计数据失败:', error);\n      return NextResponse.json(\n        { error: '查询成本统计数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 计算汇总统计\n    const totalStats = costData?.reduce((acc, curr) => {\n      acc.totalCost += parseFloat(curr.cost_amount.toString());\n      acc.totalUserCount += curr.user_count;\n      acc.totalTransactionCount += curr.transaction_count;\n      return acc;\n    }, {\n      totalCost: 0,\n      totalUserCount: 0,\n      totalTransactionCount: 0\n    }) || {};\n\n    const averageCostPerUser = totalStats.totalUserCount > 0 \n      ? totalStats.totalCost / totalStats.totalUserCount \n      : 0;\n\n    // 按成本类型分组统计\n    const costTypeBreakdown = costData?.reduce((acc, curr) => {\n      const type = curr.user_type || 'unknown';\n      if (!acc[type]) {\n        acc[type] = {\n          cost: 0,\n          userCount: 0,\n          transactionCount: 0,\n          avgCostPerUser: 0\n        };\n      }\n      acc[type].cost += parseFloat(curr.cost_amount.toString());\n      acc[type].userCount += curr.user_count;\n      acc[type].transactionCount += curr.transaction_count;\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    // 计算各类型的平均成本\n    Object.keys(costTypeBreakdown).forEach(type => {\n      const stats = costTypeBreakdown[type];\n      stats.avgCostPerUser = stats.userCount > 0 ? stats.cost / stats.userCount : 0;\n    });\n\n    // 按时间维度分组统计\n    const timeDimensionBreakdown = costData?.reduce((acc, curr) => {\n      const date = curr.breakdown_date;\n      if (!acc[date]) {\n        acc[date] = {\n          cost: 0,\n          userCount: 0,\n          transactionCount: 0\n        };\n      }\n      acc[date].cost += parseFloat(curr.cost_amount.toString());\n      acc[date].userCount += curr.user_count;\n      acc[date].transactionCount += curr.transaction_count;\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    // 成本趋势数据（最近30天）\n    const trendData = costData?.slice(0, 30).reverse().map(item => ({\n      date: item.breakdown_date,\n      cost: parseFloat(item.cost_amount.toString()),\n      userCount: item.user_count,\n      transactionCount: item.transaction_count,\n      costPerUser: parseFloat(item.cost_per_user?.toString() || '0')\n    })) || [];\n\n    // 成本效率分析\n    const costEfficiency = {\n      costPerUser: averageCostPerUser,\n      costPerTransaction: totalStats.totalTransactionCount > 0 \n        ? totalStats.totalCost / totalStats.totalTransactionCount \n        : 0,\n      userEngagementRate: totalStats.totalUserCount > 0 \n        ? (totalStats.totalTransactionCount / totalStats.totalUserCount) * 100 \n        : 0\n    };\n\n    // 成本类型详细分析\n    const costTypeAnalysis = analyzeCostTypes(costTypeBreakdown);\n\n    // 计算成本增长率\n    let costGrowthRate = 0;\n    if (costData && costData.length > 1) {\n      const recentCost = costData.slice(0, 7).reduce((sum, item) => \n        sum + parseFloat(item.cost_amount.toString()), 0);\n      const previousCost = costData.slice(7, 14).reduce((sum, item) => \n        sum + parseFloat(item.cost_amount.toString()), 0);\n      if (previousCost > 0) {\n        costGrowthRate = ((recentCost - previousCost) / previousCost) * 100;\n      }\n    }\n\n    const response = {\n      data: costData || [],\n      summary: {\n        period: `${startDate || ''} - ${endDate || ''}`,\n        totalCost: totalStats.totalCost,\n        totalUserCount: totalStats.totalUserCount,\n        totalTransactionCount: totalStats.totalTransactionCount,\n        averageCostPerUser,\n        costGrowthRate,\n        periodType\n      },\n      costTypeBreakdown,\n      timeDimensionBreakdown,\n      trendData,\n      costEfficiency,\n      costTypeAnalysis,\n      keyMetrics: {\n        highestCostDay: findHighestCostDay(trendData),\n        mostEfficientType: findMostEfficientType(costTypeBreakdown),\n        costVolatility: calculateCostVolatility(trendData),\n        userAcquisitionCost: calculateUserAcquisitionCost(costTypeBreakdown)\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取成本统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/financial/costs\n * 计算并保存成本统计数据\n * \n * Body:\n * {\n *   \"costType\": \"incentive\",\n *   \"date\": \"2025-10-31\"\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      costType = 'incentive',\n      date = new Date().toISOString().split('T')[0]\n    } = body;\n\n    let results = [];\n\n    // 根据成本类型计算相关成本\n    if (costType === 'incentive') {\n      // 激励成本：新手任务、签到奖励、首充奖励\n      results = await calculateIncentiveCosts(date, supabase);\n    } else if (costType === 'prize') {\n      // 奖品成本：抽奖奖品发放\n      results = await calculatePrizeCosts(date, supabase);\n    } else if (costType === 'operation') {\n      // 运营成本：平台运营、技术维护等\n      results = await calculateOperationCosts(date, supabase);\n    } else if (costType === 'platform') {\n      // 平台成本：服务器、第三方服务等\n      results = await calculatePlatformCosts(date, supabase);\n    } else {\n      return NextResponse.json(\n        { error: '不支持的成本类型' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: `${costType}成本数据计算完成`,\n      data: results\n    });\n\n  } catch (error) {\n    console.error('计算成本统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n// 辅助函数：计算激励成本\nasync function calculateIncentiveCosts(date: string, supabase: any) {\n  const results = [];\n\n  // 新手任务成本\n  const { data: taskData } = await supabase\n    .from('user_task_progress')\n    .select('user_id, reward_amount')\n    .eq('status', 'claimed')\n    .gte('created_at', `${date}T00:00:00`)\n    .lt('created_at', `${date}T23:59:59`);\n\n  const taskCost = taskData?.reduce((sum, task) => \n    sum + parseFloat(task.reward_amount.toString()), 0) || 0;\n  const taskUsers = new Set(taskData?.map(t => t.user_id) || []).size;\n\n  if (taskCost > 0) {\n    const { data: taskResult } = await supabase\n      .from('cost_breakdown')\n      .insert({\n        breakdown_type: 'cost_type',\n        user_type: 'incentive',\n        time_dimension: 'daily',\n        time_period: date,\n        cost_amount: taskCost,\n        user_count: taskUsers,\n        transaction_count: taskData?.length || 0,\n        cost_per_user: taskUsers > 0 ? taskCost / taskUsers : 0,\n        breakdown_date: date\n      })\n      .select()\n      .single();\n    results.push(taskResult);\n  }\n\n  // 签到奖励成本\n  const { data: checkinData } = await supabase\n    .from('check_in_records')\n    .select('user_id, reward_amount')\n    .eq('status', 'claimed')\n    .gte('created_at', `${date}T00:00:00`)\n    .lt('created_at', `${date}T23:59:59`);\n\n  const checkinCost = checkinData?.reduce((sum, checkin) => \n    sum + parseFloat(checkin.reward_amount.toString()), 0) || 0;\n  const checkinUsers = new Set(checkinData?.map(c => c.user_id) || []).size;\n\n  if (checkinCost > 0) {\n    const { data: checkinResult } = await supabase\n      .from('cost_breakdown')\n      .insert({\n        breakdown_type: 'cost_type',\n        user_type: 'incentive',\n        time_dimension: 'daily',\n        time_period: date,\n        cost_amount: checkinCost,\n        user_count: checkinUsers,\n        transaction_count: checkinData?.length || 0,\n        cost_per_user: checkinUsers > 0 ? checkinCost / checkinUsers : 0,\n        breakdown_date: date\n      })\n      .select()\n      .single();\n    results.push(checkinResult);\n  }\n\n  // 首充奖励成本\n  const { data: firstRechargeData } = await supabase\n    .from('first_recharge_rewards')\n    .select('user_id, reward_amount')\n    .eq('status', 'claimed')\n    .gte('created_at', `${date}T00:00:00`)\n    .lt('created_at', `${date}T23:59:59`);\n\n  const firstRechargeCost = firstRechargeData?.reduce((sum, reward) => \n    sum + parseFloat(reward.reward_amount.toString()), 0) || 0;\n  const firstRechargeUsers = new Set(firstRechargeData?.map(r => r.user_id) || []).size;\n\n  if (firstRechargeCost > 0) {\n    const { data: firstRechargeResult } = await supabase\n      .from('cost_breakdown')\n      .insert({\n        breakdown_type: 'cost_type',\n        user_type: 'incentive',\n        time_dimension: 'daily',\n        time_period: date,\n        cost_amount: firstRechargeCost,\n        user_count: firstRechargeUsers,\n        transaction_count: firstRechargeData?.length || 0,\n        cost_per_user: firstRechargeUsers > 0 ? firstRechargeCost / firstRechargeUsers : 0,\n        breakdown_date: date\n      })\n      .select()\n      .single();\n    results.push(firstRechargeResult);\n  }\n\n  return results;\n}\n\n// 辅助函数：计算奖品成本\nasync function calculatePrizeCosts(date: string, supabase: any) {\n  const results = [];\n  \n  // 抽奖奖品成本（简化处理，假设每次抽奖平均成本）\n  const { data: participationsData } = await supabase\n    .from('participations')\n    .select('user_id, cost')\n    .gte('created_at', `${date}T00:00:00`)\n    .lt('created_at', `${date}T23:59:59`);\n\n  const participationCount = participationsData?.length || 0;\n  const participationUsers = new Set(participationsData?.map(p => p.user_id) || []).size;\n  const totalParticipationCost = participationsData?.reduce((sum, p) => \n    sum + parseFloat(p.cost.toString()), 0) || 0;\n\n  // 假设奖品成本占参与成本的20%\n  const prizeCost = totalParticipationCost * 0.2;\n\n  if (prizeCost > 0) {\n    const { data: prizeResult } = await supabase\n      .from('cost_breakdown')\n      .insert({\n        breakdown_type: 'cost_type',\n        user_type: 'prize',\n        time_dimension: 'daily',\n        time_period: date,\n        cost_amount: prizeCost,\n        user_count: participationUsers,\n        transaction_count: participationCount,\n        cost_per_user: participationUsers > 0 ? prizeCost / participationUsers : 0,\n        breakdown_date: date\n      })\n      .select()\n      .single();\n    results.push(prizeResult);\n  }\n\n  return results;\n}\n\n// 辅助函数：计算运营成本\nasync function calculateOperationCosts(date: string, supabase: any) {\n  const results = [];\n  \n  // 运营成本（固定成本 + 变动成本）\n  const baseOperationCost = 500.00; // 基础运营成本\n  const variableOperationCost = 100.00; // 变动运营成本\n\n  // 用户数量影响\n  const { data: usersData } = await supabase\n    .from('users')\n    .select('id')\n    .gte('created_at', `${date}T00:00:00`)\n    .lt('created_at', `${date}T23:59:59`);\n\n  const dailyNewUsers = usersData?.length || 0;\n  const totalOperationCost = baseOperationCost + (dailyNewUsers * variableOperationCost);\n\n  const { data: operationResult } = await supabase\n    .from('cost_breakdown')\n    .insert({\n      breakdown_type: 'cost_type',\n      user_type: 'operation',\n      time_dimension: 'daily',\n      time_period: date,\n      cost_amount: totalOperationCost,\n      user_count: dailyNewUsers,\n      transaction_count: dailyNewUsers,\n      cost_per_user: dailyNewUsers > 0 ? totalOperationCost / dailyNewUsers : 0,\n      breakdown_date: date\n    })\n    .select()\n    .single();\n\n  if (operationResult) {\n    results.push(operationResult);\n  }\n\n  return results;\n}\n\n// 辅助函数：计算平台成本\nasync function calculatePlatformCosts(date: string, supabase: any) {\n  const results = [];\n  \n  // 平台成本（服务器、第三方服务等）\n  const serverCost = 200.00; // 服务器成本\n  const serviceCost = 100.00; // 第三方服务成本\n  const maintenanceCost = 150.00; // 维护成本\n\n  const totalPlatformCost = serverCost + serviceCost + maintenanceCost;\n\n  const { data: platformResult } = await supabase\n    .from('cost_breakdown')\n    .insert({\n      breakdown_type: 'cost_type',\n      user_type: 'platform',\n      time_dimension: 'daily',\n      time_period: date,\n      cost_amount: totalPlatformCost,\n      user_count: 1, // 平台级成本，用户数为1\n      transaction_count: 1,\n      cost_per_user: totalPlatformCost,\n      breakdown_date: date\n    })\n    .select()\n    .single();\n\n  if (platformResult) {\n    results.push(platformResult);\n  }\n\n  return results;\n}\n\n// 辅助函数：分析成本类型\nfunction analyzeCostTypes(costTypeBreakdown: Record<string, any>) {\n  const analysis = {\n    dominantType: null,\n    efficiency: {} as Record<string, number>,\n    recommendations: [] as string[]\n  };\n\n  // 找出主要成本类型\n  let maxCost = 0;\n  Object.keys(costTypeBreakdown).forEach(type => {\n    const cost = costTypeBreakdown[type].cost;\n    if (cost > maxCost) {\n      maxCost = cost;\n      analysis.dominantType = type;\n    }\n  });\n\n  // 计算效率指标\n  Object.keys(costTypeBreakdown).forEach(type => {\n    const stats = costTypeBreakdown[type];\n    analysis.efficiency[type] = stats.userCount > 0 ? stats.cost / stats.userCount : 0;\n  });\n\n  // 生成建议\n  if (analysis.dominantType === 'operation') {\n    analysis.recommendations.push('运营成本较高，建议优化运营效率');\n  }\n  if (analysis.efficiency['incentive'] > analysis.efficiency['platform']) {\n    analysis.recommendations.push('激励成本效率较低，建议调整激励策略');\n  }\n\n  return analysis;\n}\n\n// 辅助函数：找出成本最高的一天\nfunction findHighestCostDay(trendData: any[]) {\n  if (trendData.length === 0) return null;\n  return trendData.reduce((max, current) => \n    current.cost > max.cost ? current : max\n  );\n}\n\n// 辅助函数：找出最高效的成本类型\nfunction findMostEfficientType(costTypeBreakdown: Record<string, any>) {\n  let minCostPerUser = Infinity;\n  let mostEfficient = null;\n  \n  Object.keys(costTypeBreakdown).forEach(type => {\n    const stats = costTypeBreakdown[type];\n    if (stats.avgCostPerUser < minCostPerUser && stats.userCount > 0) {\n      minCostPerUser = stats.avgCostPerUser;\n      mostEfficient = type;\n    }\n  });\n  \n  return mostEfficient;\n}\n\n// 辅助函数：计算成本波动性\nfunction calculateCostVolatility(trendData: any[]) {\n  if (trendData.length < 2) return 0;\n  const costs = trendData.map(d => d.cost);\n  const mean = costs.reduce((sum, cost) => sum + cost, 0) / costs.length;\n  const variance = costs.reduce((sum, cost) => sum + Math.pow(cost - mean, 2), 0) / costs.length;\n  return Math.sqrt(variance);\n}\n\n// 辅助函数：计算用户获取成本\nfunction calculateUserAcquisitionCost(costTypeBreakdown: Record<string, any>) {\n  const incentiveCost = costTypeBreakdown['incentive']?.cost || 0;\n  const operationCost = costTypeBreakdown['operation']?.cost || 0;\n  const newUsers = costTypeBreakdown['incentive']?.userCount || 0;\n  \n  return newUsers > 0 ? (incentiveCost + operationCost) / newUsers : 0;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/financial/profits/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 22. Maximum allowed is 10.","line":28,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":155,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":24,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[978,1008],"text":"(searchParams.get('periodType') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[978,1008],"text":"(searchParams.get('periodType') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[978,1008],"text":"(Boolean(searchParams.get('periodType')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1009,1011],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":34,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1150,1175],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1150,1175],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1150,1175],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":34,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":34,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1176,1178],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1379,1388],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1379,1388],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1379,1388],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1392,1399],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1392,1399],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1392,1399],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1780,1816],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":80,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1959,2564],"text":"(Boolean((profitData?.reduce((acc, curr) => {\n      acc.grossRevenue += parseFloat(curr.revenue.toString());\n      acc.productCosts += parseFloat(curr.product_cost.toString());\n      acc.platformFees += parseFloat(curr.platform_fee.toString());\n      acc.operationCosts += parseFloat(curr.operation_cost.toString());\n      acc.grossProfit += parseFloat(curr.gross_profit.toString());\n      acc.netProfit += parseFloat(curr.net_profit.toString());\n      return acc;\n    }, {\n      grossRevenue: 0,\n      productCosts: 0,\n      platformFees: 0,\n      operationCosts: 0,\n      grossProfit: 0,\n      netProfit: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":80,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":80,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2565,2567],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":88,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":98,"endColumn":8},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":96,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3392,3410],"text":"(Boolean(item.profit_margin))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":97,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":97,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3471,3479],"text":"(Boolean(item.roi))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":123,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":123,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":125,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":125,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4575,4584],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4575,4584],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4575,4584],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":125,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":125,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4585,4587],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":125,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":125,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4596,4603],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4596,4603],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4596,4603],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":125,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":125,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4604,4606],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5447,5484],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":168,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":290,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":168,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":168,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":187,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":188,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6284,6377],"text":"((ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[6284,6377],"text":"((ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6284,6377],"text":"(Boolean((ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":188,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":188,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6378,6380],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":197,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":198,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6611,6720],"text":"((participationsData?.reduce((sum, participation) => \n      sum + parseFloat(participation.cost.toString()), 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[6611,6720],"text":"((participationsData?.reduce((sum, participation) => \n      sum + parseFloat(participation.cost.toString()), 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6611,6720],"text":"(Boolean((participationsData?.reduce((sum, participation) => \n      sum + parseFloat(participation.cost.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6721,6723],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":226,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":226,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7572,7574],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":227,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":227,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7652,7654],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":228,"column":79,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":228,"endColumn":81,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7738,7740],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":241,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":241,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8637,8673],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9104,9141],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":295,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":295,"endColumn":35,"fix":{"range":[9347,9356],"text":"{return 0;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":303,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":303,"endColumn":35,"fix":{"range":[9652,9661],"text":"{return 0;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'sumXX' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":308,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":308,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sumXX' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":308,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":308,"endColumn":14},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":314,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":314,"endColumn":35,"fix":{"range":[10058,10067],"text":"{return 0;}"}}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/financial/profits\n * 获取利润分析数据\n * \n * Query Parameters:\n * - periodType: 期间类型 (daily/weekly/monthly/quarterly)\n * - startDate: 开始日期\n * - endDate: 结束日期\n * - limit: 限制返回记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const periodType = searchParams.get('periodType') || 'daily';\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const limit = parseInt(searchParams.get('limit') || '100');\n\n    let query = supabase\n      .from('profit_analysis')\n      .select('*')\n      .eq('product_id', null) // 只获取总体利润分析\n      .order('date', { ascending: false })\n      .limit(limit);\n\n    if (startDate && endDate) {\n      query = query\n        .gte('date', startDate)\n        .lte('date', endDate);\n    } else {\n      // 默认获取最近30天的数据\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      query = query.gte('date', thirtyDaysAgo.toISOString().split('T')[0]);\n    }\n\n    const { data: profitData, error } = await query;\n\n    if (error) {\n      console.error('查询利润分析数据失败:', error);\n      return NextResponse.json(\n        { error: '查询利润分析数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 计算汇总统计\n    const totalStats = profitData?.reduce((acc, curr) => {\n      acc.grossRevenue += parseFloat(curr.revenue.toString());\n      acc.productCosts += parseFloat(curr.product_cost.toString());\n      acc.platformFees += parseFloat(curr.platform_fee.toString());\n      acc.operationCosts += parseFloat(curr.operation_cost.toString());\n      acc.grossProfit += parseFloat(curr.gross_profit.toString());\n      acc.netProfit += parseFloat(curr.net_profit.toString());\n      return acc;\n    }, {\n      grossRevenue: 0,\n      productCosts: 0,\n      platformFees: 0,\n      operationCosts: 0,\n      grossProfit: 0,\n      netProfit: 0\n    }) || {};\n\n    // 计算总体指标\n    const totalCosts = totalStats.productCosts + totalStats.platformFees + totalStats.operationCosts;\n    const overallMargin = totalStats.grossRevenue > 0 ? (totalStats.netProfit / totalStats.grossRevenue) * 100 : 0;\n    const costRatio = totalStats.grossRevenue > 0 ? (totalCosts / totalStats.grossRevenue) * 100 : 0;\n\n    // 趋势数据\n    const trendData = profitData?.slice(0, 30).reverse().map(item => ({\n      date: item.date,\n      revenue: parseFloat(item.revenue.toString()),\n      productCost: parseFloat(item.product_cost.toString()),\n      platformFee: parseFloat(item.platform_fee.toString()),\n      operationCost: parseFloat(item.operation_cost.toString()),\n      grossProfit: parseFloat(item.gross_profit.toString()),\n      netProfit: parseFloat(item.net_profit.toString()),\n      profitMargin: item.profit_margin ? parseFloat(item.profit_margin.toString()) : 0,\n      roi: item.roi ? parseFloat(item.roi.toString()) : 0\n    })) || [];\n\n    // 成本构成分析\n    const costBreakdown = {\n      productCosts: totalStats.productCosts,\n      platformFees: totalStats.platformFees,\n      operationCosts: totalStats.operationCosts,\n      totalCosts,\n      percentages: {\n        productCosts: totalCosts > 0 ? (totalStats.productCosts / totalCosts) * 100 : 0,\n        platformFees: totalCosts > 0 ? (totalStats.platformFees / totalCosts) * 100 : 0,\n        operationCosts: totalCosts > 0 ? (totalStats.operationCosts / totalCosts) * 100 : 0\n      }\n    };\n\n    // 利润分析\n    const profitAnalysis = {\n      grossProfit: totalStats.grossProfit,\n      netProfit: totalStats.netProfit,\n      grossProfitMargin: totalStats.grossRevenue > 0 ? (totalStats.grossProfit / totalStats.grossRevenue) * 100 : 0,\n      netProfitMargin: totalStats.grossRevenue > 0 ? (totalStats.netProfit / totalStats.grossRevenue) * 100 : 0,\n      costEfficiency: totalCosts > 0 ? (totalStats.netProfit / totalCosts) * 100 : 0\n    };\n\n    const response = {\n      data: profitData || [],\n      summary: {\n        period: `${startDate || ''} - ${endDate || ''}`,\n        grossRevenue: totalStats.grossRevenue,\n        totalCosts,\n        grossProfit: totalStats.grossProfit,\n        netProfit: totalStats.netProfit,\n        overallMargin,\n        costRatio,\n        periodType\n      },\n      costBreakdown,\n      profitAnalysis,\n      trendData,\n      keyMetrics: {\n        averageDailyRevenue: trendData.length > 0 ? totalStats.grossRevenue / trendData.length : 0,\n        averageDailyProfit: trendData.length > 0 ? totalStats.netProfit / trendData.length : 0,\n        profitVolatility: calculateVolatility(trendData.map(t => t.netProfit)),\n        costTrend: calculateTrend(trendData.map(t => t.productCost + t.platformFee + t.operationCost)),\n        revenueGrowth: calculateGrowth(trendData.map(t => t.revenue))\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取利润分析API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/financial/profits\n * 计算并保存利润分析数据\n * \n * Body:\n * {\n *   \"date\": \"2025-10-31\"\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      date = new Date().toISOString().split('T')[0]\n    } = body;\n\n    // 计算收入数据\n    const startDate = `${date}T00:00:00`;\n    const endDate = `${date}T23:59:59`;\n\n    // 从订单表计算总收入\n    const { data: ordersData } = await supabase\n      .from('orders')\n      .select('total_amount')\n      .eq('payment_status', 'completed')\n      .gte('created_at', startDate)\n      .lte('created_at', endDate);\n\n    const revenue = ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0) || 0;\n\n    // 计算产品成本（基于抽奖参与）\n    const { data: participationsData } = await supabase\n      .from('participations')\n      .select('cost')\n      .gte('created_at', startDate)\n      .lte('created_at', endDate);\n\n    const productCost = participationsData?.reduce((sum, participation) => \n      sum + parseFloat(participation.cost.toString()), 0) || 0;\n\n    // 计算平台费用（假设为收入的5%）\n    const platformFee = revenue * 0.05;\n\n    // 计算运营成本（新手任务、签到奖励等）\n    const { data: taskData } = await supabase\n      .from('user_task_progress')\n      .select('reward_amount')\n      .eq('status', 'claimed')\n      .gte('created_at', startDate)\n      .lte('created_at', endDate);\n\n    const { data: checkinData } = await supabase\n      .from('check_in_records')\n      .select('reward_amount')\n      .eq('status', 'claimed')\n      .gte('created_at', startDate)\n      .lte('created_at', endDate);\n\n    const { data: firstRechargeData } = await supabase\n      .from('first_recharge_rewards')\n      .select('reward_amount')\n      .eq('status', 'claimed')\n      .gte('created_at', startDate)\n      .lte('created_at', endDate);\n\n    const operationCost = [\n      ...(taskData?.map(t => parseFloat(t.reward_amount.toString())) || []),\n      ...(checkinData?.map(c => parseFloat(c.reward_amount.toString())) || []),\n      ...(firstRechargeData?.map(f => parseFloat(f.reward_amount.toString())) || [])\n    ].reduce((sum, amount) => sum + amount, 0);\n\n    // 计算毛利润和净利润\n    const grossProfit = revenue - productCost;\n    const netProfit = grossProfit - platformFee - operationCost;\n\n    // 计算指标\n    const roi = productCost > 0 ? (netProfit / productCost) * 100 : 0;\n    const profitMargin = revenue > 0 ? (netProfit / revenue) * 100 : 0;\n    const costRatio = revenue > 0 ? ((productCost + platformFee + operationCost) / revenue) * 100 : 0;\n\n    // 插入数据\n    const { data, error } = await supabase\n      .from('profit_analysis')\n      .insert({\n        date,\n        revenue,\n        product_cost: productCost,\n        platform_fee: platformFee,\n        operation_cost: operationCost,\n        gross_profit: grossProfit,\n        net_profit: netProfit,\n        roi,\n        profit_margin: profitMargin,\n        cost_ratio: costRatio\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('保存利润分析数据失败:', error);\n      return NextResponse.json(\n        { error: '保存利润分析数据失败' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: '利润分析数据计算完成',\n      data: {\n        date,\n        revenue,\n        productCost,\n        platformFee,\n        operationCost,\n        grossProfit,\n        netProfit,\n        roi,\n        profitMargin,\n        costRatio\n      }\n    });\n\n  } catch (error) {\n    console.error('计算利润分析API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n// 辅助函数：计算波动性\nfunction calculateVolatility(values: number[]): number {\n  if (values.length < 2) return 0;\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n  return Math.sqrt(variance);\n}\n\n// 辅助函数：计算趋势\nfunction calculateTrend(values: number[]): number {\n  if (values.length < 2) return 0;\n  const n = values.length;\n  const sumX = n * (n - 1) / 2;\n  const sumY = values.reduce((sum, val) => sum + val, 0);\n  const sumXY = values.reduce((sum, val, index) => sum + val * index, 0);\n  const sumXX = n * (n - 1) * (2 * n - 1) / 6;\n  return n * sumXY - sumX * sumY > 0 ? 1 : -1; // 简化处理，只返回趋势方向\n}\n\n// 辅助函数：计算增长率\nfunction calculateGrowth(values: number[]): number {\n  if (values.length < 2) return 0;\n  const first = values[0];\n  const last = values[values.length - 1];\n  return first > 0 ? ((last - first) / first) * 100 : 0;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/financial/reports/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1081,1106],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1081,1106],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1081,1106],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1107,1109],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":40,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1274,1284],"text":"reportType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1274,1284],"text":"reportType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1274,1284],"text":"Boolean(reportType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1354,1360],"text":"status != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1354,1360],"text":"status ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1354,1360],"text":"Boolean(status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1491,1527],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":59,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1678,2200],"text":"(Boolean((reportsData?.reduce((acc, curr) => {\n      if (!acc[curr.report_type]) {\n        acc[curr.report_type] = {\n          count: 0,\n          published: 0,\n          draft: 0,\n          archived: 0\n        };\n      }\n      acc[curr.report_type].count++;\n      if (curr.status === 'published') acc[curr.report_type].published++;\n      else if (curr.status === 'draft') acc[curr.report_type].draft++;\n      else if (curr.status === 'archived') acc[curr.report_type].archived++;\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":60,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":67,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[1721,1889],"text":"acc[curr.report_type] ??= {\n          count: 0,\n          published: 0,\n          draft: 0,\n          archived: 0\n        };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":60,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":60,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1726,1747],"text":"(Boolean(acc[curr.report_type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":69,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":69,"endColumn":74,"fix":{"range":[1966,2000],"text":"{acc[curr.report_type].published++;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":70,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":70,"endColumn":71,"fix":{"range":[2041,2071],"text":"{acc[curr.report_type].draft++;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":71,"column":44,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":71,"endColumn":77,"fix":{"range":[2115,2148],"text":"{acc[curr.report_type].archived++;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2195,2198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2195,2198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2201,2203],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":76,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":85,"endColumn":8},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":88,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":88,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2817,2854],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":120,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":263,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":120,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":120,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":130,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":130,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3418,3430],"text":"(Boolean(reportPeriod))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":192,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":192,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5317,5319],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":193,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":193,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5379,5381],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":194,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":194,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5447,5449],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":195,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":195,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5527,5529],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5717,5719],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5735,5737],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5751,5753],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":210,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":210,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6010,6015],"text":"(Boolean(title))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":210,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":210,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6016,6018],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6637,6671],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7076,7113],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7277,7280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7277,7280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":276,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":276,"endColumn":41,"fix":{"range":[7445,7460],"text":"{return summary;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":284,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":284,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7915,7931],"text":"Boolean(item.growth_rate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[7907,7911],"text":"(item): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8193,8196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8193,8196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":301,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":301,"endColumn":41,"fix":{"range":[8342,8357],"text":"{return summary;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":308,"column":8,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":308,"endColumn":15,"fix":{"range":[8632,8858],"text":"for (const item of data) {\n    const type = item.user_type || 'unknown';\n    if (!summary.costByType[type]) {\n      summary.costByType[type] = 0;\n    }\n    summary.costByType[type] += parseFloat(item.cost_amount.toString());\n  }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":309,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":309,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8672,8686],"text":"(Boolean(item.user_type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":309,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":309,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8687,8689],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":310,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":312,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[8705,8779],"text":"summary.costByType[type] ??= 0;"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":310,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":310,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8710,8734],"text":"(Boolean(summary.costByType[type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":310,"column":10,"nodeType":"MemberExpression","endLine":310,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":311,"column":7,"nodeType":"MemberExpression","endLine":311,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":313,"column":5,"nodeType":"MemberExpression","endLine":313,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8934,8937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8934,8937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":329,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":329,"endColumn":41,"fix":{"range":[9098,9113],"text":"{return summary;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":338,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":338,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9556,9564],"text":"Boolean(item.roi)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[9548,9552],"text":"(item): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9794,9797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9794,9797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":356,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":356,"endColumn":41,"fix":{"range":[9954,9969],"text":"{return summary;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10688,10691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10688,10691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10699,10702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10699,10702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10712,10715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10712,10715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10729,10732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10729,10732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11757,11760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11757,11760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11772,11775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11772,11775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11785,11788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11785,11788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":417,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":417,"endColumn":42,"fix":{"range":[12303,12319],"text":"{return 'stable';}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":419,"column":67,"nodeType":"MemberExpression","endLine":419,"endColumn":80},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":420,"column":67,"nodeType":"MemberExpression","endLine":420,"endColumn":80},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":422,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":422,"endColumn":58,"fix":{"range":[12541,12561],"text":"{return 'increasing';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":423,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":423,"endColumn":58,"fix":{"range":[12599,12619],"text":"{return 'decreasing';}"}},{"ruleId":"complexity","severity":2,"message":"Function 'generateRecommendations' has a complexity of 11. Maximum allowed is 10.","line":428,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":470,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":428,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12697,12700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12697,12700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":428,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12710,12713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12710,12713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13812,13815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13812,13815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13825,13828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13825,13828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'metrics' is defined but never used. Allowed unused args must match /^_/u.","line":473,"column":101,"nodeType":"Identifier","messageId":"unusedVar","endLine":473,"endColumn":113},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'metrics' is defined but never used. Allowed unused args must match /^_/u.","line":473,"column":101,"nodeType":null,"messageId":"unusedVar","endLine":473,"endColumn":108},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13839,13842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13839,13842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":485,"column":28,"nodeType":"MemberExpression","endLine":485,"endColumn":47}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":10,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/financial/reports\n * 获取财务报告列表\n * \n * Query Parameters:\n * - reportType: 报告类型 (monthly/quarterly/yearly)\n * - status: 状态 (draft/published/archived)\n * - limit: 限制返回记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const reportType = searchParams.get('reportType');\n    const status = searchParams.get('status');\n    const limit = parseInt(searchParams.get('limit') || '50');\n\n    let query = supabase\n      .from('financial_reports')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .limit(limit);\n\n    if (reportType) {\n      query = query.eq('report_type', reportType);\n    }\n\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    const { data: reportsData, error } = await query;\n\n    if (error) {\n      console.error('查询财务报告数据失败:', error);\n      return NextResponse.json(\n        { error: '查询财务报告数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 按报告类型分组统计\n    const reportTypeStats = reportsData?.reduce((acc, curr) => {\n      if (!acc[curr.report_type]) {\n        acc[curr.report_type] = {\n          count: 0,\n          published: 0,\n          draft: 0,\n          archived: 0\n        };\n      }\n      acc[curr.report_type].count++;\n      if (curr.status === 'published') acc[curr.report_type].published++;\n      else if (curr.status === 'draft') acc[curr.report_type].draft++;\n      else if (curr.status === 'archived') acc[curr.report_type].archived++;\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    // 最新报告摘要\n    const latestReports = reportsData?.slice(0, 5).map(report => ({\n      id: report.id,\n      reportType: report.report_type,\n      reportPeriod: report.report_period,\n      title: report.title,\n      status: report.status,\n      publishedAt: report.published_at,\n      createdAt: report.created_at,\n      summary: report.summary\n    })) || [];\n\n    const response = {\n      data: reportsData || [],\n      summary: {\n        totalReports: reportsData?.length || 0,\n        reportTypeStats,\n        latestReports\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取财务报告API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/financial/reports\n * 生成新的财务报告\n * \n * Body:\n * {\n *   \"reportType\": \"monthly\",\n *   \"reportPeriod\": \"2024-10\",\n *   \"title\": \"2024年10月财务报告\"\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      reportType = 'monthly',\n      reportPeriod,\n      title,\n      generatedBy = 'system'\n    } = body;\n\n    if (!reportPeriod) {\n      return NextResponse.json(\n        { error: 'reportPeriod 为必填参数' },\n        { status: 400 }\n      );\n    }\n\n    // 根据报告类型和期间解析日期范围\n    let startDate: Date;\n    let endDate: Date;\n\n    if (reportType === 'monthly') {\n      const [year, month] = reportPeriod.split('-');\n      startDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n      endDate = new Date(parseInt(year), parseInt(month), 0);\n    } else if (reportType === 'quarterly') {\n      const [year, quarter] = reportPeriod.split('-Q');\n      const quarterNum = parseInt(quarter);\n      startDate = new Date(parseInt(year), (quarterNum - 1) * 3, 1);\n      endDate = new Date(parseInt(year), quarterNum * 3, 0);\n    } else if (reportType === 'yearly') {\n      startDate = new Date(parseInt(reportPeriod), 0, 1);\n      endDate = new Date(parseInt(reportPeriod), 11, 31);\n    } else {\n      return NextResponse.json(\n        { error: '不支持的报告类型' },\n        { status: 400 }\n      );\n    }\n\n    const startISO = startDate.toISOString().split('T')[0];\n    const endISO = endDate.toISOString().split('T')[0];\n\n    // 获取收入数据\n    const { data: revenueData } = await supabase\n      .from('revenue_statistics')\n      .select('*')\n      .gte('period_start', startISO)\n      .lte('period_end', endISO);\n\n    // 获取成本数据\n    const { data: costData } = await supabase\n      .from('cost_breakdown')\n      .select('*')\n      .gte('breakdown_date', startISO)\n      .lte('breakdown_date', endISO);\n\n    // 获取利润数据\n    const { data: profitData } = await supabase\n      .from('profit_analysis')\n      .select('*')\n      .gte('date', startISO)\n      .lte('date', endISO);\n\n    // 获取提现数据\n    const { data: withdrawalData } = await supabase\n      .from('withdrawal_records')\n      .select('*')\n      .gte('period_start', startISO)\n      .lte('period_end', endISO);\n\n    // 计算汇总数据\n    const revenueSummary = calculateRevenueSummary(revenueData || []);\n    const costSummary = calculateCostSummary(costData || []);\n    const profitSummary = calculateProfitSummary(profitData || []);\n    const withdrawalSummary = calculateWithdrawalSummary(withdrawalData || []);\n\n    // 生成关键指标\n    const keyMetrics = generateKeyMetrics(revenueSummary, costSummary, profitSummary, withdrawalSummary);\n\n    // 生成趋势分析\n    const trends = generateTrends(revenueData || [], profitData || [], costData || []);\n\n    // 生成建议\n    const recommendations = generateRecommendations(keyMetrics, trends);\n\n    // 生成报告摘要\n    const summary = generateReportSummary(reportType, reportPeriod, revenueSummary, profitSummary, keyMetrics);\n\n    // 确定默认标题\n    const finalTitle = title || generateDefaultTitle(reportType, reportPeriod);\n\n    // 插入报告数据\n    const { data, error } = await supabase\n      .from('financial_reports')\n      .insert({\n        report_type: reportType,\n        report_period: reportPeriod,\n        title: finalTitle,\n        summary,\n        revenue_data: revenueSummary,\n        cost_data: costSummary,\n        profit_data: profitSummary,\n        withdrawal_data: withdrawalSummary,\n        key_metrics: keyMetrics,\n        trends,\n        recommendations,\n        status: 'draft',\n        generated_by: generatedBy\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('生成财务报告失败:', error);\n      return NextResponse.json(\n        { error: '生成财务报告失败' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: '财务报告生成完成',\n      data: {\n        id: data.id,\n        reportType,\n        reportPeriod,\n        title: finalTitle,\n        summary,\n        keyMetrics,\n        trends,\n        recommendations\n      }\n    });\n\n  } catch (error) {\n    console.error('生成财务报告API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n// 辅助函数：计算收入摘要\nfunction calculateRevenueSummary(data: any[]) {\n  const summary = {\n    totalRevenue: 0,\n    actualReceived: 0,\n    totalOrders: 0,\n    averageOrderValue: 0,\n    growthRate: 0\n  };\n\n  if (data.length === 0) return summary;\n\n  summary.totalRevenue = data.reduce((sum, item) => sum + parseFloat(item.total_revenue.toString()), 0);\n  summary.actualReceived = data.reduce((sum, item) => sum + parseFloat(item.actual_received.toString()), 0);\n  summary.totalOrders = data.reduce((sum, item) => sum + item.order_count, 0);\n  summary.averageOrderValue = summary.totalOrders > 0 ? summary.totalRevenue / summary.totalOrders : 0;\n\n  // 计算平均增长率\n  const growthRates = data.filter(item => item.growth_rate).map(item => parseFloat(item.growth_rate.toString()));\n  summary.growthRate = growthRates.length > 0 \n    ? growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length \n    : 0;\n\n  return summary;\n}\n\n// 辅助函数：计算成本摘要\nfunction calculateCostSummary(data: any[]) {\n  const summary = {\n    totalCost: 0,\n    costByType: {},\n    averageCostPerUser: 0,\n    costTrend: 'stable'\n  };\n\n  if (data.length === 0) return summary;\n\n  summary.totalCost = data.reduce((sum, item) => sum + parseFloat(item.cost_amount.toString()), 0);\n  const totalUsers = data.reduce((sum, item) => sum + item.user_count, 0);\n  summary.averageCostPerUser = totalUsers > 0 ? summary.totalCost / totalUsers : 0;\n\n  // 按类型分组\n  data.forEach(item => {\n    const type = item.user_type || 'unknown';\n    if (!summary.costByType[type]) {\n      summary.costByType[type] = 0;\n    }\n    summary.costByType[type] += parseFloat(item.cost_amount.toString());\n  });\n\n  return summary;\n}\n\n// 辅助函数：计算利润摘要\nfunction calculateProfitSummary(data: any[]) {\n  const summary = {\n    grossProfit: 0,\n    netProfit: 0,\n    profitMargin: 0,\n    roi: 0,\n    profitabilityTrend: 'stable'\n  };\n\n  if (data.length === 0) return summary;\n\n  summary.grossProfit = data.reduce((sum, item) => sum + parseFloat(item.gross_profit.toString()), 0);\n  summary.netProfit = data.reduce((sum, item) => sum + parseFloat(item.net_profit.toString()), 0);\n  \n  const totalRevenue = data.reduce((sum, item) => sum + parseFloat(item.revenue.toString()), 0);\n  summary.profitMargin = totalRevenue > 0 ? (summary.netProfit / totalRevenue) * 100 : 0;\n\n  // 计算平均ROI\n  const rois = data.filter(item => item.roi).map(item => parseFloat(item.roi.toString()));\n  summary.roi = rois.length > 0 \n    ? rois.reduce((sum, roi) => sum + roi, 0) / rois.length \n    : 0;\n\n  return summary;\n}\n\n// 辅助函数：计算提现摘要\nfunction calculateWithdrawalSummary(data: any[]) {\n  const summary = {\n    totalAmount: 0,\n    totalUsers: 0,\n    averageAmount: 0,\n    successRate: 0,\n    platformFee: 0\n  };\n\n  if (data.length === 0) return summary;\n\n  summary.totalAmount = data.reduce((sum, item) => sum + parseFloat(item.total_amount.toString()), 0);\n  summary.totalUsers = data.reduce((sum, item) => sum + item.total_users, 0);\n  summary.platformFee = data.reduce((sum, item) => sum + parseFloat(item.platform_fee.toString()), 0);\n  \n  const totalWithdrawals = data.reduce((sum, item) => sum + item.withdrawal_count, 0);\n  const totalSuccess = data.reduce((sum, item) => sum + item.success_count, 0);\n  summary.successRate = totalWithdrawals > 0 ? (totalSuccess / totalWithdrawals) * 100 : 0;\n  summary.averageAmount = summary.totalUsers > 0 ? summary.totalAmount / summary.totalUsers : 0;\n\n  return summary;\n}\n\n// 辅助函数：生成关键指标\nfunction generateKeyMetrics(revenue: any, cost: any, profit: any, withdrawal: any) {\n  return {\n    revenue: {\n      total: revenue.totalRevenue,\n      actualReceived: revenue.actualReceived,\n      growthRate: revenue.growthRate,\n      averageOrderValue: revenue.averageOrderValue\n    },\n    costs: {\n      total: cost.totalCost,\n      averagePerUser: cost.averageCostPerUser,\n      costRatio: revenue.totalRevenue > 0 ? (cost.totalCost / revenue.totalRevenue) * 100 : 0\n    },\n    profits: {\n      gross: profit.grossProfit,\n      net: profit.netProfit,\n      margin: profit.profitMargin,\n      roi: profit.roi\n    },\n    withdrawals: {\n      total: withdrawal.totalAmount,\n      users: withdrawal.totalUsers,\n      successRate: withdrawal.successRate,\n      platformRevenue: withdrawal.platformFee\n    },\n    overall: {\n      profitability: profit.netProfit > 0 ? 'profitable' : 'loss',\n      efficiency: profit.roi > 0 ? 'good' : 'poor',\n      riskLevel: withdrawal.successRate > 95 ? 'low' : withdrawal.successRate > 90 ? 'medium' : 'high'\n    }\n  };\n}\n\n// 辅助函数：生成趋势分析\nfunction generateTrends(revenue: any[], profit: any[], cost: any[]) {\n  return {\n    revenue: calculateArrayTrend(revenue.map(r => parseFloat(r.total_revenue.toString()))),\n    profit: calculateArrayTrend(profit.map(p => parseFloat(p.net_profit.toString()))),\n    cost: calculateArrayTrend(cost.map(c => parseFloat(c.cost_amount.toString()))),\n    orders: calculateArrayTrend(revenue.map(r => r.order_count)),\n    customers: calculateArrayTrend(cost.map(c => c.user_count))\n  };\n}\n\n// 辅助函数：计算数组趋势\nfunction calculateArrayTrend(values: number[]): string {\n  if (values.length < 2) return 'stable';\n  \n  const increasing = values.slice(1).filter((val, index) => val > values[index]).length;\n  const decreasing = values.slice(1).filter((val, index) => val < values[index]).length;\n  \n  if (increasing > decreasing * 1.5) return 'increasing';\n  if (decreasing > increasing * 1.5) return 'decreasing';\n  return 'stable';\n}\n\n// 辅助函数：生成建议\nfunction generateRecommendations(metrics: any, trends: any): string[] {\n  const recommendations = [];\n\n  // 收入相关建议\n  if (metrics.revenue.growthRate < 0) {\n    recommendations.push('收入出现负增长，建议加强营销推广活动');\n  }\n  if (metrics.revenue.averageOrderValue < 10) {\n    recommendations.push('平均订单价值较低，建议推出高价值产品套餐');\n  }\n\n  // 成本相关建议\n  if (metrics.costs.costRatio > 70) {\n    recommendations.push('成本占比过高，建议优化运营效率和成本结构');\n  }\n\n  // 利润相关建议\n  if (metrics.profits.margin < 10) {\n    recommendations.push('利润率偏低，建议提高产品定价或降低运营成本');\n  }\n  if (metrics.profits.roi < 20) {\n    recommendations.push('投资回报率较低，建议优化营销策略');\n  }\n\n  // 提现相关建议\n  if (metrics.withdrawals.successRate < 95) {\n    recommendations.push('提现成功率需要改善，建议优化提现流程');\n  }\n\n  // 趋势相关建议\n  if (trends.profit === 'decreasing') {\n    recommendations.push('利润呈下降趋势，建议及时调整业务策略');\n  }\n  if (trends.revenue === 'stable' && trends.cost === 'increasing') {\n    recommendations.push('成本上升但收入稳定，需要控制成本增长');\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push('财务状况良好，继续保持当前运营策略');\n  }\n\n  return recommendations;\n}\n\n// 辅助函数：生成报告摘要\nfunction generateReportSummary(reportType: string, reportPeriod: string, revenue: any, profit: any, metrics: any): string {\n  return `${reportPeriod}期间财务概况：总收入${revenue.totalRevenue.toFixed(2)}TJS，净利润${profit.netProfit.toFixed(2)}TJS，利润率${profit.profitMargin.toFixed(2)}%。${profit.netProfit > 0 ? '盈利状况良好' : '出现亏损，需要关注'}`;\n}\n\n// 辅助函数：生成默认标题\nfunction generateDefaultTitle(reportType: string, reportPeriod: string): string {\n  const typeMap = {\n    monthly: '月',\n    quarterly: '季度',\n    yearly: '年'\n  };\n  \n  return `${reportPeriod}${typeMap[reportType]}财务报告`;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/financial/revenue/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 22. Maximum allowed is 10.","line":28,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":157,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":24,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[978,1008],"text":"(searchParams.get('periodType') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[978,1008],"text":"(searchParams.get('periodType') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[978,1008],"text":"(Boolean(searchParams.get('periodType')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1009,1011],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":34,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1150,1175],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1150,1175],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1150,1175],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":34,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":34,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1176,1178],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1384,1393],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1384,1393],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1384,1393],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1397,1404],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1397,1404],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1397,1404],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":47,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":47,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1520,1529],"text":"startDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1520,1529],"text":"startDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1520,1529],"text":"Boolean(startDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1600,1607],"text":"endDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1600,1607],"text":"endDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1600,1607],"text":"Boolean(endDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1962,1998],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":78,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2141,2465],"text":"(Boolean((revenueData?.reduce((acc, curr) => {\n      acc.totalRevenue += parseFloat(curr.total_revenue.toString());\n      acc.actualReceived += parseFloat(curr.actual_received.toString());\n      acc.totalOrders += curr.order_count;\n      return acc;\n    }, {\n      totalRevenue: 0,\n      actualReceived: 0,\n      totalOrders: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2466,2468],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":86,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":86,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":89,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":89,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2775,2783],"text":"(Boolean(previous))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":95,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":102,"endColumn":8},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":101,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3310,3326],"text":"(Boolean(item.growth_rate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":105,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":118,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3437,3904],"text":"(Boolean((revenueData?.reduce((acc, curr) => {\n      const period = curr.period_start;\n      if (!acc[period]) {\n        acc[period] = {\n          revenue: 0,\n          actualReceived: 0,\n          orders: 0\n        };\n      }\n      acc[period].revenue += parseFloat(curr.total_revenue.toString());\n      acc[period].actualReceived += parseFloat(curr.actual_received.toString());\n      acc[period].orders += curr.order_count;\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":107,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":113,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3520,3653],"text":"acc[period] ??= {\n          revenue: 0,\n          actualReceived: 0,\n          orders: 0\n        };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":107,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":107,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3525,3536],"text":"(Boolean(acc[period]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":107,"column":12,"nodeType":"MemberExpression","endLine":107,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":108,"column":9,"nodeType":"MemberExpression","endLine":108,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":114,"column":7,"nodeType":"MemberExpression","endLine":114,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":115,"column":7,"nodeType":"MemberExpression","endLine":115,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":116,"column":7,"nodeType":"MemberExpression","endLine":116,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3899,3902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3899,3902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3905,3907],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":121,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":121,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":123,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":123,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4003,4012],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4003,4012],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4003,4012],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4013,4015],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":123,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":123,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4024,4031],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4024,4031],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4024,4031],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4032,4034],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4961,4998],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 12. Maximum allowed is 10.","line":171,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":294,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":171,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":171,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":223,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":224,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7027,7120],"text":"((ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7027,7120],"text":"((ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7027,7120],"text":"(Boolean((ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":224,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":224,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7121,7123],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":229,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":229,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7229,7247],"text":"((ordersData?.length) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7229,7247],"text":"((ordersData?.length) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7229,7247],"text":"(Boolean((ordersData?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":229,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":229,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7248,7250],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":247,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":247,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":247,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8302,8338],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8770,8807],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":42,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/financial/revenue\n * 获取收入统计数据\n * \n * Query Parameters:\n * - periodType: 期间类型 (daily/weekly/monthly/quarterly)\n * - startDate: 开始日期\n * - endDate: 结束日期\n * - limit: 限制返回记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const periodType = searchParams.get('periodType') || 'daily';\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const limit = parseInt(searchParams.get('limit') || '100');\n\n    let query = supabase\n      .from('revenue_statistics')\n      .select('*')\n      .eq('period_type', periodType)\n      .order('period_start', { ascending: false })\n      .limit(limit);\n\n    if (startDate && endDate) {\n      query = query\n        .gte('period_start', startDate)\n        .lte('period_end', endDate);\n    } else if (startDate) {\n      query = query.gte('period_start', startDate);\n    } else if (endDate) {\n      query = query.lte('period_end', endDate);\n    } else {\n      // 默认获取最近30天的数据\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      query = query.gte('period_start', thirtyDaysAgo.toISOString().split('T')[0]);\n    }\n\n    const { data: revenueData, error } = await query;\n\n    if (error) {\n      console.error('查询收入统计数据失败:', error);\n      return NextResponse.json(\n        { error: '查询收入统计数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 计算汇总统计\n    const totalStats = revenueData?.reduce((acc, curr) => {\n      acc.totalRevenue += parseFloat(curr.total_revenue.toString());\n      acc.actualReceived += parseFloat(curr.actual_received.toString());\n      acc.totalOrders += curr.order_count;\n      return acc;\n    }, {\n      totalRevenue: 0,\n      actualReceived: 0,\n      totalOrders: 0\n    }) || {};\n\n    const averageOrderValue = totalStats.totalOrders > 0 \n      ? totalStats.totalRevenue / totalStats.totalOrders \n      : 0;\n\n    // 计算增长率\n    let growthRate = 0;\n    if (revenueData && revenueData.length > 1) {\n      const current = revenueData[0];\n      const previous = revenueData[1];\n      if (previous && previous.total_revenue > 0) {\n        growthRate = ((current.total_revenue - previous.total_revenue) / previous.total_revenue) * 100;\n      }\n    }\n\n    // 趋势数据\n    const trendData = revenueData?.slice(0, 30).reverse().map(item => ({\n      date: item.period_start,\n      totalRevenue: parseFloat(item.total_revenue.toString()),\n      actualReceived: parseFloat(item.actual_received.toString()),\n      orderCount: item.order_count,\n      averageOrderValue: parseFloat(item.average_order_value.toString()),\n      growthRate: item.growth_rate ? parseFloat(item.growth_rate.toString()) : null\n    })) || [];\n\n    // 按期间类型分组统计\n    const periodBreakdown = revenueData?.reduce((acc, curr) => {\n      const period = curr.period_start;\n      if (!acc[period]) {\n        acc[period] = {\n          revenue: 0,\n          actualReceived: 0,\n          orders: 0\n        };\n      }\n      acc[period].revenue += parseFloat(curr.total_revenue.toString());\n      acc[period].actualReceived += parseFloat(curr.actual_received.toString());\n      acc[period].orders += curr.order_count;\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    const response = {\n      data: revenueData || [],\n      summary: {\n        period: `${startDate || ''} - ${endDate || ''}`,\n        totalRevenue: totalStats.totalRevenue,\n        actualReceived: totalStats.actualReceived,\n        totalOrders: totalStats.totalOrders,\n        averageOrderValue,\n        platformFees: totalStats.totalRevenue - totalStats.actualReceived,\n        growthRate,\n        periodType\n      },\n      periodBreakdown,\n      trendData,\n      revenueDistribution: {\n        actualReceived: totalStats.actualReceived,\n        platformFees: totalStats.totalRevenue - totalStats.actualReceived,\n        percentage: {\n          actualReceived: totalStats.totalRevenue > 0 \n            ? (totalStats.actualReceived / totalStats.totalRevenue) * 100 \n            : 0,\n          platformFees: totalStats.totalRevenue > 0 \n            ? ((totalStats.totalRevenue - totalStats.actualReceived) / totalStats.totalRevenue) * 100 \n            : 0\n        }\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取收入统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/financial/revenue\n * 计算并保存收入统计数据\n * \n * Body:\n * {\n *   \"periodType\": \"daily\",\n *   \"date\": \"2025-10-31\"\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      periodType = 'daily',\n      date = new Date().toISOString().split('T')[0]\n    } = body;\n\n    let periodStart: Date;\n    let periodEnd: Date;\n\n    // 根据期间类型计算日期范围\n    if (periodType === 'daily') {\n      periodStart = new Date(date);\n      periodEnd = new Date(date);\n    } else if (periodType === 'weekly') {\n      const day = new Date(date);\n      const dayOfWeek = day.getDay();\n      periodStart = new Date(day);\n      periodStart.setDate(day.getDate() - dayOfWeek);\n      periodEnd = new Date(periodStart);\n      periodEnd.setDate(periodStart.getDate() + 6);\n    } else if (periodType === 'monthly') {\n      periodStart = new Date(date);\n      periodStart.setDate(1);\n      periodEnd = new Date(periodStart);\n      periodEnd.setMonth(periodStart.getMonth() + 1);\n      periodEnd.setDate(0);\n    } else if (periodType === 'quarterly') {\n      const day = new Date(date);\n      const quarter = Math.floor(day.getMonth() / 3);\n      periodStart = new Date(day.getFullYear(), quarter * 3, 1);\n      periodEnd = new Date(day.getFullYear(), (quarter + 1) * 3, 0);\n    } else {\n      return NextResponse.json(\n        { error: '不支持的期间类型' },\n        { status: 400 }\n      );\n    }\n\n    // 计算收入数据\n    const startISO = periodStart.toISOString().split('T')[0];\n    const endISO = periodEnd.toISOString().split('T')[0];\n\n    // 从订单表计算总收入\n    const { data: ordersData } = await supabase\n      .from('orders')\n      .select('total_amount, payment_status')\n      .eq('payment_status', 'completed')\n      .gte('created_at', `${startISO}T00:00:00`)\n      .lte('created_at', `${endISO}T23:59:59`);\n\n    const totalRevenue = ordersData?.reduce((sum, order) => \n      sum + parseFloat(order.total_amount.toString()), 0) || 0;\n\n    const actualReceived = totalRevenue * 0.95; // 假设平台收取5%手续费\n\n    // 计算订单数量\n    const orderCount = ordersData?.length || 0;\n    const averageOrderValue = orderCount > 0 ? totalRevenue / orderCount : 0;\n\n    // 获取上一期的数据用于计算增长率\n    let growthRate = null;\n    const { data: previousData } = await supabase\n      .from('revenue_statistics')\n      .select('total_revenue')\n      .eq('period_type', periodType)\n      .order('period_start', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (previousData && previousData.total_revenue > 0) {\n      growthRate = ((totalRevenue - previousData.total_revenue) / previousData.total_revenue) * 100;\n    }\n\n    // 插入或更新数据\n    const { data, error } = await supabase\n      .from('revenue_statistics')\n      .upsert({\n        period_type: periodType,\n        period_start: startISO,\n        period_end: endISO,\n        total_revenue: totalRevenue,\n        actual_received: actualReceived,\n        order_count: orderCount,\n        average_order_value: averageOrderValue,\n        growth_rate: growthRate\n      }, {\n        onConflict: 'period_type,period_start'\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('保存收入统计数据失败:', error);\n      return NextResponse.json(\n        { error: '保存收入统计数据失败' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: '收入统计数据计算完成',\n      data: {\n        periodType,\n        periodStart: startISO,\n        periodEnd: endISO,\n        totalRevenue,\n        actualReceived,\n        orderCount,\n        averageOrderValue,\n        growthRate\n      }\n    });\n\n  } catch (error) {\n    console.error('计算收入统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/financial/withdrawals/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":59},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 20. Maximum allowed is 10.","line":28,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":160,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":24,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[982,1012],"text":"(searchParams.get('periodType') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[982,1012],"text":"(searchParams.get('periodType') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[982,1012],"text":"(Boolean(searchParams.get('periodType')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1013,1015],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":34,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1154,1179],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1154,1179],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1154,1179],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":34,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":34,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1180,1182],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1388,1397],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1388,1397],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1388,1397],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1401,1408],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1401,1408],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1401,1408],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":47,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":47,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1524,1533],"text":"startDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1524,1533],"text":"startDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1524,1533],"text":"Boolean(startDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1604,1611],"text":"endDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1604,1611],"text":"endDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1604,1611],"text":"Boolean(endDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1969,2005],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":84,"endColumn":7,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2148,2667],"text":"(Boolean((withdrawalData?.reduce((acc, curr) => {\n      acc.totalAmount += parseFloat(curr.total_amount.toString());\n      acc.totalUsers += curr.total_users;\n      acc.totalCount += curr.withdrawal_count;\n      acc.successCount += curr.success_count;\n      acc.failureCount += curr.failure_count;\n      acc.platformFee += parseFloat(curr.platform_fee.toString());\n      return acc;\n    }, {\n      totalAmount: 0,\n      totalUsers: 0,\n      totalCount: 0,\n      successCount: 0,\n      failureCount: 0,\n      platformFee: 0\n    }))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":84,"column":8,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":84,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2668,2670],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":95,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":98,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2977,3092],"text":"(Boolean((withdrawalData?.reduce((acc, curr) => {\n      // 从提现请求表获取提现方式分布\n      return acc;\n    }, {} as Record<string, any>))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'curr' is defined but never used. Allowed unused args must match /^_/u.","line":95,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'curr' is defined but never used. Allowed unused args must match /^_/u.","line":95,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3087,3090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3087,3090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":98,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":98,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3093,3095],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":101,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorObject","endLine":111,"endColumn":8},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":124,"column":58,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":124,"endColumn":72},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":127,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":127,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":129,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":129,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4077,4086],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4077,4086],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4077,4086],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4087,4089],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":129,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":129,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4098,4105],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4098,4105],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4098,4105],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4106,4108],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4967,5004],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":174,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":174,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'pendingCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":245,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pendingCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":245,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":245,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":252,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":252,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8131,8150],"text":"(Boolean(req.withdraw_method))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":252,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":252,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8151,8153],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":253,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":255,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[8171,8263],"text":"acc[method] ??= { count: 0, amount: 0, users: new Set() };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":253,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":253,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8176,8187],"text":"(Boolean(acc[method]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":253,"column":12,"nodeType":"MemberExpression","endLine":253,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":254,"column":9,"nodeType":"MemberExpression","endLine":254,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":256,"column":7,"nodeType":"MemberExpression","endLine":256,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":257,"column":7,"nodeType":"MemberExpression","endLine":257,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8435,8438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8435,8438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":263,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":263,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":263,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9061,9097],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9616,9653],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":321,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9821,9824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9821,9824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":329,"column":8,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":329,"endColumn":15,"fix":{"range":[10161,10746],"text":"for (const record of data) {\n    const amount = parseFloat(record.total_amount.toString());\n    const users = record.total_users;\n\n    if (amount <= 100) {\n      distributions.small.count += users;\n      distributions.small.amount += amount;\n    } else if (amount <= 500) {\n      distributions.medium.count += users;\n      distributions.medium.amount += amount;\n    } else if (amount <= 1000) {\n      distributions.large.count += users;\n      distributions.large.amount += amount;\n    } else {\n      distributions.huge.count += users;\n      distributions.huge.amount += amount;\n    }\n  }"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":353,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":353,"endColumn":35,"fix":{"range":[10865,10874],"text":"{return 0;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'sumXX' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":358,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":358,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sumXX' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":358,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":358,"endColumn":14}],"suppressedMessages":[],"errorCount":43,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":1,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 获取数据库连接\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// 创建权限中间件\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n/**\n * GET /api/admin/financial/withdrawals\n * 获取提现统计数据\n * \n * Query Parameters:\n * - periodType: 期间类型 (daily/weekly/monthly/quarterly)\n * - startDate: 开始日期\n * - endDate: 结束日期\n * - limit: 限制返回记录数\n */\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const periodType = searchParams.get('periodType') || 'daily';\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const limit = parseInt(searchParams.get('limit') || '100');\n\n    let query = supabase\n      .from('withdrawal_records')\n      .select('*')\n      .eq('period_type', periodType)\n      .order('period_start', { ascending: false })\n      .limit(limit);\n\n    if (startDate && endDate) {\n      query = query\n        .gte('period_start', startDate)\n        .lte('period_end', endDate);\n    } else if (startDate) {\n      query = query.gte('period_start', startDate);\n    } else if (endDate) {\n      query = query.lte('period_end', endDate);\n    } else {\n      // 默认获取最近30天的数据\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      query = query.gte('period_start', thirtyDaysAgo.toISOString().split('T')[0]);\n    }\n\n    const { data: withdrawalData, error } = await query;\n\n    if (error) {\n      console.error('查询提现统计数据失败:', error);\n      return NextResponse.json(\n        { error: '查询提现统计数据失败' },\n        { status: 500 }\n      );\n    }\n\n    // 计算汇总统计\n    const totalStats = withdrawalData?.reduce((acc, curr) => {\n      acc.totalAmount += parseFloat(curr.total_amount.toString());\n      acc.totalUsers += curr.total_users;\n      acc.totalCount += curr.withdrawal_count;\n      acc.successCount += curr.success_count;\n      acc.failureCount += curr.failure_count;\n      acc.platformFee += parseFloat(curr.platform_fee.toString());\n      return acc;\n    }, {\n      totalAmount: 0,\n      totalUsers: 0,\n      totalCount: 0,\n      successCount: 0,\n      failureCount: 0,\n      platformFee: 0\n    }) || {};\n\n    const overallSuccessRate = totalStats.totalCount > 0 \n      ? (totalStats.successCount / totalStats.totalCount) * 100 \n      : 0;\n\n    const averageAmount = totalStats.totalUsers > 0 \n      ? totalStats.totalAmount / totalStats.totalUsers \n      : 0;\n\n    // 按提现方式分组统计\n    const methodBreakdown = withdrawalData?.reduce((acc, curr) => {\n      // 从提现请求表获取提现方式分布\n      return acc;\n    }, {} as Record<string, any>) || {};\n\n    // 趋势数据\n    const trendData = withdrawalData?.slice(0, 30).reverse().map(item => ({\n      date: item.period_start,\n      totalAmount: parseFloat(item.total_amount.toString()),\n      totalUsers: item.total_users,\n      averageAmount: parseFloat(item.average_amount.toString()),\n      platformFee: parseFloat(item.platform_fee.toString()),\n      withdrawalCount: item.withdrawal_count,\n      successCount: item.success_count,\n      failureCount: item.failure_count,\n      successRate: parseFloat(item.success_rate.toString())\n    })) || [];\n\n    // 提现状态分布\n    const statusDistribution = {\n      success: totalStats.successCount,\n      failure: totalStats.failureCount,\n      percentage: {\n        success: overallSuccessRate,\n        failure: 100 - overallSuccessRate\n      }\n    };\n\n    // 提现金额分布分析\n    const amountDistribution = analyzeAmountDistribution(withdrawalData || []);\n\n    const response = {\n      data: withdrawalData || [],\n      summary: {\n        period: `${startDate || ''} - ${endDate || ''}`,\n        totalAmount: totalStats.totalAmount,\n        totalUsers: totalStats.totalUsers,\n        totalCount: totalStats.totalCount,\n        averageAmount,\n        platformFee: totalStats.platformFee,\n        successRate: overallSuccessRate,\n        periodType\n      },\n      statusDistribution,\n      amountDistribution,\n      trendData,\n      methodBreakdown,\n      keyMetrics: {\n        averageDailyAmount: trendData.length > 0 ? totalStats.totalAmount / trendData.length : 0,\n        averageDailyUsers: trendData.length > 0 ? totalStats.totalUsers / trendData.length : 0,\n        successRateTrend: calculateTrend(trendData.map(t => t.successRate)),\n        amountTrend: calculateTrend(trendData.map(t => t.totalAmount)),\n        platformRevenue: totalStats.platformFee\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('获取提现统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n/**\n * POST /api/admin/financial/withdrawals\n * 计算并保存提现统计数据\n * \n * Body:\n * {\n *   \"periodType\": \"daily\",\n *   \"date\": \"2025-10-31\"\n * }\n */\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const {\n      periodType = 'daily',\n      date = new Date().toISOString().split('T')[0]\n    } = body;\n\n    let periodStart: Date;\n    let periodEnd: Date;\n\n    // 根据期间类型计算日期范围\n    if (periodType === 'daily') {\n      periodStart = new Date(date);\n      periodEnd = new Date(date);\n    } else if (periodType === 'weekly') {\n      const day = new Date(date);\n      const dayOfWeek = day.getDay();\n      periodStart = new Date(day);\n      periodStart.setDate(day.getDate() - dayOfWeek);\n      periodEnd = new Date(periodStart);\n      periodEnd.setDate(periodStart.getDate() + 6);\n    } else if (periodType === 'monthly') {\n      periodStart = new Date(date);\n      periodStart.setDate(1);\n      periodEnd = new Date(periodStart);\n      periodEnd.setMonth(periodStart.getMonth() + 1);\n      periodEnd.setDate(0);\n    } else if (periodType === 'quarterly') {\n      const day = new Date(date);\n      const quarter = Math.floor(day.getMonth() / 3);\n      periodStart = new Date(day.getFullYear(), quarter * 3, 1);\n      periodEnd = new Date(day.getFullYear(), (quarter + 1) * 3, 0);\n    } else {\n      return NextResponse.json(\n        { error: '不支持的期间类型' },\n        { status: 400 }\n      );\n    }\n\n    // 计算提现数据\n    const startISO = periodStart.toISOString().split('T')[0];\n    const endISO = periodEnd.toISOString().split('T')[0];\n    const startDateTime = `${startISO}T00:00:00`;\n    const endDateTime = `${endISO}T23:59:59`;\n\n    // 从提现请求表获取数据\n    const { data: withdrawalRequests } = await supabase\n      .from('withdraw_requests')\n      .select('amount, fee, status, withdraw_method')\n      .gte('created_at', startDateTime)\n      .lte('created_at', endDateTime);\n\n    if (!withdrawalRequests) {\n      return NextResponse.json(\n        { error: '获取提现请求数据失败' },\n        { status: 500 }\n      );\n    }\n\n    const totalAmount = withdrawalRequests.reduce((sum, req) => \n      sum + parseFloat(req.amount.toString()), 0);\n\n    const platformFee = withdrawalRequests.reduce((sum, req) => \n      sum + parseFloat(req.fee.toString()), 0);\n\n    const withdrawalCount = withdrawalRequests.length;\n    const totalUsers = new Set(withdrawalRequests.map(req => req.user_id)).size;\n\n    const successCount = withdrawalRequests.filter(req => req.status === 'completed').length;\n    const failureCount = withdrawalRequests.filter(req => req.status === 'rejected').length;\n    const pendingCount = withdrawalRequests.filter(req => req.status === 'pending').length;\n\n    const successRate = withdrawalCount > 0 ? (successCount / withdrawalCount) * 100 : 0;\n    const averageAmount = totalUsers > 0 ? totalAmount / totalUsers : 0;\n\n    // 按提现方式分组\n    const methodBreakdown = withdrawalRequests.reduce((acc, req) => {\n      const method = req.withdraw_method || 'unknown';\n      if (!acc[method]) {\n        acc[method] = { count: 0, amount: 0, users: new Set() };\n      }\n      acc[method].count++;\n      acc[method].amount += parseFloat(req.amount.toString());\n      // 注意：这里无法获取user_id，需要在查询时包含\n      return acc;\n    }, {} as Record<string, any>);\n\n    // 插入或更新数据\n    const { data, error } = await supabase\n      .from('withdrawal_records')\n      .upsert({\n        period_type: periodType,\n        period_start: startISO,\n        period_end: endISO,\n        total_amount: totalAmount,\n        total_users: totalUsers,\n        average_amount: averageAmount,\n        platform_fee: platformFee,\n        withdrawal_count: withdrawalCount,\n        success_count: successCount,\n        failure_count: failureCount,\n        success_rate: successRate\n      }, {\n        onConflict: 'period_type,period_start'\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('保存提现统计数据失败:', error);\n      return NextResponse.json(\n        { error: '保存提现统计数据失败' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: '提现统计数据计算完成',\n      data: {\n        periodType,\n        periodStart: startISO,\n        periodEnd: endISO,\n        totalAmount,\n        totalUsers,\n        averageAmount,\n        platformFee,\n        withdrawalCount,\n        successCount,\n        failureCount,\n        successRate,\n        methodBreakdown\n      }\n    });\n\n  } catch (error) {\n    console.error('计算提现统计API错误:', error);\n    return NextResponse.json(\n      { error: '服务器内部错误' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n// 辅助函数：分析提现金额分布\nfunction analyzeAmountDistribution(data: any[]) {\n  const distributions = {\n    small: { count: 0, amount: 0, range: '0-100' },      // 小额：0-100 TJS\n    medium: { count: 0, amount: 0, range: '100-500' },   // 中额：100-500 TJS\n    large: { count: 0, amount: 0, range: '500-1000' },   // 大额：500-1000 TJS\n    huge: { count: 0, amount: 0, range: '1000+' }        // 巨额：1000+ TJS\n  };\n\n  data.forEach(record => {\n    const amount = parseFloat(record.total_amount.toString());\n    const users = record.total_users;\n\n    if (amount <= 100) {\n      distributions.small.count += users;\n      distributions.small.amount += amount;\n    } else if (amount <= 500) {\n      distributions.medium.count += users;\n      distributions.medium.amount += amount;\n    } else if (amount <= 1000) {\n      distributions.large.count += users;\n      distributions.large.amount += amount;\n    } else {\n      distributions.huge.count += users;\n      distributions.huge.amount += amount;\n    }\n  });\n\n  return distributions;\n}\n\n// 辅助函数：计算趋势\nfunction calculateTrend(values: number[]): number {\n  if (values.length < 2) return 0;\n  const n = values.length;\n  const sumX = n * (n - 1) / 2;\n  const sumY = values.reduce((sum, val) => sum + val, 0);\n  const sumXY = values.reduce((sum, val, index) => sum + val * index, 0);\n  const sumXX = n * (n - 1) * (2 * n - 1) / 6;\n  return n * sumXY - sumX * sumY > 0 ? 1 : -1; // 简化处理，只返回趋势方向\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/growth/metrics/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":19,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":15,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[541,566],"text":"(searchParams.get('range') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[541,566],"text":"(searchParams.get('range') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[541,566],"text":"(Boolean(searchParams.get('range')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":15,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":15,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[567,569],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin-permission-manager';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware({\n    customPermissions: AdminPermissions.stats.read()\n  });\n\n  return withPermission(async (request, admin) => {\n\n    const { searchParams } = new URL(request.url);\n    const range = searchParams.get('range') || '7d';\n\n    // 计算日期范围\n    const days = range === '7d' ? 7 : range === '30d' ? 30 : 90;\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    // 获取增长指标数据\n    const metrics = await prisma.growthMetrics.findMany({\n      where: {\n        date: {\n          gte: startDate\n        }\n      },\n      orderBy: {\n        date: 'desc'\n      },\n      take: 1\n    });\n\n    // 如果没有数据，返回默认值\n    if (metrics.length === 0) {\n      return NextResponse.json({\n        success: true,\n        data: {\n          date: new Date().toISOString(),\n          newUsers: 0,\n          activeUsers: 0,\n          retainedUsers: 0,\n          conversionRate: 0,\n          referralCount: 0,\n          checkInCount: 0,\n          tasksCompleted: 0,\n          totalRewards: 0,\n          kFactor: 0\n        }\n      });\n    }\n\n    const latestMetric = metrics[0];\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        date: latestMetric.date,\n        newUsers: latestMetric.newUsers,\n        activeUsers: latestMetric.activeUsers,\n        retainedUsers: latestMetric.retainedUsers,\n        conversionRate: Number(latestMetric.conversionRate) || 0,\n        referralCount: latestMetric.referralCount,\n        checkInCount: latestMetric.checkInCount,\n        tasksCompleted: latestMetric.tasksCompleted,\n        totalRewards: Number(latestMetric.totalRewards) || 0,\n        kFactor: Number(latestMetric.kFactor) || 0\n      }\n    });\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/growth/segments/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":46}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin-permission-manager';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware({\n    customPermissions: AdminPermissions.stats.read()\n  });\n\n  return withPermission(async (request, admin) => {\n\n    // 获取用户总数\n    const totalUsers = await prisma.users.count();\n\n    // 获取最近7天注册的用户（新手用户）\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    \n    const newbieCount = await prisma.users.count({\n      where: {\n        createdAt: {\n          gte: sevenDaysAgo\n        }\n      }\n    });\n\n    // 获取最近30天有活动的用户（活跃用户）\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const activeCount = await prisma.users.count({\n      where: {\n        updatedAt: {\n          gte: thirtyDaysAgo\n        }\n      }\n    });\n\n    // 沉睡用户 = 总用户 - 新手用户 - 活跃用户\n    const dormantCount = totalUsers - newbieCount - activeCount;\n\n    // 计算百分比\n    const segments = [\n      {\n        segment: 'newbie',\n        count: newbieCount,\n        percentage: totalUsers > 0 ? Math.round((newbieCount / totalUsers) * 100) : 0\n      },\n      {\n        segment: 'active',\n        count: activeCount,\n        percentage: totalUsers > 0 ? Math.round((activeCount / totalUsers) * 100) : 0\n      },\n      {\n        segment: 'dormant',\n        count: dormantCount,\n        percentage: totalUsers > 0 ? Math.round((dormantCount / totalUsers) * 100) : 0\n      }\n    ];\n\n    return NextResponse.json({\n      success: true,\n      data: segments\n    });\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/init/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":9,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[240,278],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[240,278],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[240,278],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":9,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":9,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[240,336],"text":"(request.headers.get('x-forwarded-for') ?? \n                     request.headers.get('x-real-ip'))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":10,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":10,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[304,336],"text":"(request.headers.get('x-real-ip') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[304,336],"text":"(request.headers.get('x-real-ip') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[304,336],"text":"(Boolean(request.headers.get('x-real-ip')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":10,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":10,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[337,339],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":14,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":14,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[472,474],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1452,1455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1452,1455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1463,1496],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\n\n// 初始化管理员账号 - 仅供首次设置使用，增加IP白名单限制\nexport async function POST(request: Request) {\n  try {\n    // 检查请求来源IP\n    const clientIP = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     'unknown';\n    \n    // 只允许特定IP访问（默认localhost）\n    const allowedIPs = process.env.ALLOWED_INIT_IPS?.split(',') || ['127.0.0.1'];\n    if (!allowedIPs.includes(clientIP)) {\n      return NextResponse.json(\n        { error: '无权访问此端点' }, \n        { status: 403 }\n      );\n    }\n\n    // 检查是否已存在管理员\n    const existing = await prisma.admins.findFirst({\n      where: { username: 'admin' }\n    });\n\n    if (existing) {\n      return NextResponse.json({\n        success: true,\n        message: '管理员账号已存在'\n      });\n    }\n\n    // 生成随机密码而不是使用硬编码\n    const defaultPassword = `admin${Date.now().toString().slice(-6)}`;\n    const passwordHash = await bcrypt.hash(defaultPassword, 12);\n    \n    const admin = await prisma.admins.create({\n      data: {\n        username: 'admin',\n        passwordHash,\n        role: 'super_admin',\n        createdAt: new Date(),\n        isActive: true\n      }\n    });\n\n    // 不再在响应中返回默认密码，只返回成功信息\n    return NextResponse.json({\n      success: true,\n      message: '管理员账号创建成功',\n      data: {\n        username: 'admin',\n        // 不返回密码信息，避免泄露\n      }\n    });\n\n  } catch (error: any) {\n    console.error('创建管理员失败:', error);\n    // 统一错误处理，不暴露敏感信息\n    return NextResponse.json(\n      { error: '创建管理员账号失败' }, \n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/login/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":13,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":13,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[376,384],"text":"(Boolean(username))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":13,"column":23,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":13,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[389,397],"text":"(Boolean(password))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2007,2010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2007,2010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2018,2051],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 管理员登录\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyPassword, generateAdminToken } from '@/lib/auth';\nimport type { ApiResponse } from '@/types';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { username, password } = body;\n\n    // 验证参数\n    if (!username || !password) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '用户名和密码不能为空'\n      }, { status: 400 });\n    }\n\n    // 查询管理员（使用Prisma）\n    const admin = await prisma.admins.findFirst({\n      where: { username }\n    });\n\n    if (!admin) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '用户名或密码错误'\n      }, { status: 401 });\n    }\n\n    // 检查管理员是否激活\n    if (!admin.isActive) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '账户已被禁用'\n      }, { status: 403 });\n    }\n\n    // 验证密码\n    const isValid = await verifyPassword(password, admin.passwordHash);\n    if (!isValid) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '用户名或密码错误'\n      }, { status: 401 });\n    }\n\n    // 获取管理员权限\n    const permissions = await prisma.adminPermissions.findMany({\n      where: { adminId: admin.id }\n    });\n\n    // 构建权限数组\n    const permissionStrings = permissions.map(p => `${p.resource}:${p.action}`);\n\n    // 生成管理员 token（使用管理员专用JWT）\n    const token = generateAdminToken(\n      admin.id,\n      admin.username,\n      admin.role,\n      permissionStrings\n    );\n\n    // 更新最后登录时间\n    await prisma.admins.update({\n      where: { id: admin.id },\n      data: { lastLogin: new Date() }\n    });\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        token,\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          role: admin.role,\n          permissions: permissionStrings\n        }\n      },\n      message: '登录成功'\n    });\n\n  } catch (error: any) {\n    console.error('管理员登录失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '登录失败'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/lottery/data-fix/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":66,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { triggerImmediateDraw } from '@/lib/lottery';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.lottery.write()\n});\n\n// 数据一致性修复工具 - 边界情况处理和数据一致性检查\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const { action, roundId, dryRun = true } = body;\n\n    console.log(`[DataFix] 开始执行: ${action}, roundId: ${roundId}, dryRun: ${dryRun}`);\n\n    let result;\n    switch (action) {\n      case 'fix_sold_shares_mismatch':\n        result = await fixSoldSharesMismatch(roundId, dryRun);\n        break;\n      case 'complete_missing_draws':\n        result = await completeMissingDraws(roundId, dryRun);\n        break;\n      case 'recalculate_participants':\n        result = await recalculateParticipants(roundId, dryRun);\n        break;\n      case 'validate_number_ranges':\n        result = await validateNumberRanges(roundId, dryRun);\n        break;\n      case 'clean_orphaned_records':\n        result = await cleanOrphanedRecords(dryRun);\n        break;\n      case 'fix_duplicate_winners':\n        result = await fixDuplicateWinners(roundId, dryRun);\n        break;\n      case 'full_system_check':\n        result = await performFullSystemCheck(dryRun);\n        break;\n      default:\n        return NextResponse.json({ error: '不支持的操作' }, { status: 400 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      action,\n      dryRun,\n      result,\n      timestamp: new Date().toISOString()\n    });\n\n    } catch (error: any) {\n      console.error('DataFix error:', error);\n      return NextResponse.json(\n        { error: '数据修复失败', message: error.message },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n}\n\n// 修复售出份额不匹配问题\nasync function fixSoldSharesMismatch(roundId?: string, dryRun: boolean = true) {\n  const whereClause = roundId ? 'AND lr.id = $1' : '';\n  const params = roundId ? [roundId] : [];\n\n  const mismatchedRounds = await prisma.$queryRaw`\n    SELECT \n      lr.id,\n      lr.round_number,\n      lr.sold_shares,\n      COALESCE(SUM(p.shares_count), 0) as actual_shares,\n      lr.status\n    FROM lottery_rounds lr\n    LEFT JOIN participations p ON lr.id = p.round_id\n    WHERE 1=1 ${whereClause}\n    GROUP BY lr.id, lr.round_number, lr.sold_shares, lr.status\n    HAVING lr.sold_shares != COALESCE(SUM(p.shares_count), 0)\n  `;\n\n  const fixes = [];\n\n  for (const round of mismatchedRounds) {\n    if (dryRun) {\n      fixes.push({\n        roundId: round.id,\n        roundNumber: round.round_number,\n        currentSoldShares: round.sold_shares,\n        actualShares: round.actual_shares,\n        difference: round.actual_shares - round.sold_shares,\n        action: 'update_sold_shares',\n        status: '模拟修复'\n      });\n    } else {\n      try {\n        // 修正售出份额\n        await prisma.lotteryRounds.update({\n          where: { id: round.id },\n          data: { soldShares: round.actual_shares }\n        });\n\n        // 如果修正后应该满期，触发开奖\n        const updatedRound = await prisma.lotteryRounds.findUnique({\n          where: { id: round.id }\n        });\n\n        if (updatedRound && updatedRound.soldShares >= updatedRound.totalShares && updatedRound.status === 'ongoing') {\n          await prisma.lotteryRounds.update({\n            where: { id: round.id },\n            data: { status: 'full' }\n          });\n          \n          // 异步触发开奖\n          triggerImmediateDraw(round.id).catch(console.error);\n        }\n\n        fixes.push({\n          roundId: round.id,\n          roundNumber: round.round_number,\n          action: '已修复售出份额',\n          status: 'success'\n        });\n      } catch (error) {\n        fixes.push({\n          roundId: round.id,\n          roundNumber: round.round_number,\n          action: '修复失败',\n          error: error.message,\n          status: 'error'\n        });\n      }\n    }\n  }\n\n  return {\n    totalMismatched: mismatchedRounds.length,\n    fixes,\n    summary: {\n      success: fixes.filter(f => f.status === 'success').length,\n      errors: fixes.filter(f => f.status === 'error').length,\n      dryRun\n    }\n  };\n}\n\n// 完成缺失的开奖\nasync function completeMissingDraws(roundId?: string, dryRun: boolean = true) {\n  const missingDraws = await prisma.lotteryRounds.findMany({\n    where: {\n      status: 'full',\n      winnerUserId: null,\n      ...(roundId ? { id: roundId } : {})\n    },\n    include: {\n      participations: true,\n      product: true\n    }\n  });\n\n  const fixes = [];\n\n  for (const round of missingDraws) {\n    if (!round.participations || round.participations.length === 0) {\n      fixes.push({\n        roundId: round.id,\n        roundNumber: round.roundNumber,\n        issue: '无参与记录，无法开奖',\n        action: '标记为异常期次',\n        status: 'skipped'\n      });\n      continue;\n    }\n\n    if (dryRun) {\n      fixes.push({\n        roundId: round.id,\n        roundNumber: round.roundNumber,\n        issue: '需要执行开奖',\n        participantCount: round.participations.length,\n        action: '执行开奖',\n        status: '模拟修复'\n      });\n    } else {\n      try {\n        await triggerImmediateDraw(round.id);\n        fixes.push({\n          roundId: round.id,\n          roundNumber: round.roundNumber,\n          action: '开奖完成',\n          status: 'success'\n        });\n      } catch (error) {\n        fixes.push({\n          roundId: round.id,\n          roundNumber: round.roundNumber,\n          action: '开奖失败',\n          error: error.message,\n          status: 'error'\n        });\n      }\n    }\n  }\n\n  return {\n    totalMissingDraws: missingDraws.length,\n    fixes,\n    summary: {\n      success: fixes.filter(f => f.status === 'success').length,\n      errors: fixes.filter(f => f.status === 'error').length,\n      skipped: fixes.filter(f => f.status === 'skipped').length,\n      dryRun\n    }\n  };\n}\n\n// 重新计算参与者数量\nasync function recalculateParticipants(roundId?: string, dryRun: boolean = true) {\n  const rounds = await prisma.lotteryRounds.findMany({\n    where: roundId ? { id: roundId } : {},\n    include: {\n      participations: {\n        select: {\n          id: true,\n          userId: true\n        }\n      }\n    }\n  });\n\n  const fixes = [];\n\n  for (const round of rounds) {\n    const uniqueParticipants = new Set(round.participations.map(p => p.userId)).size;\n    const currentParticipants = round.participants;\n\n    if (uniqueParticipants !== currentParticipants) {\n      if (dryRun) {\n        fixes.push({\n          roundId: round.id,\n          roundNumber: round.roundNumber,\n          currentParticipants,\n          calculatedParticipants: uniqueParticipants,\n          difference: uniqueParticipants - currentParticipants,\n          action: '更新参与者数量',\n          status: '模拟修复'\n        });\n      } else {\n        try {\n          await prisma.lotteryRounds.update({\n            where: { id: round.id },\n            data: { participants: uniqueParticipants }\n          });\n\n          fixes.push({\n            roundId: round.id,\n            roundNumber: round.roundNumber,\n            action: '参与者数量已更新',\n            status: 'success'\n          });\n        } catch (error) {\n          fixes.push({\n            roundId: round.id,\n            roundNumber: round.roundNumber,\n            action: '更新失败',\n            error: error.message,\n            status: 'error'\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    totalRounds: rounds.length,\n    mismatchedRounds: fixes.length,\n    fixes,\n    summary: {\n      success: fixes.filter(f => f.status === 'success').length,\n      errors: fixes.filter(f => f.status === 'error').length,\n      dryRun\n    }\n  };\n}\n\n// 验证号码范围\nasync function validateNumberRanges(roundId?: string, dryRun: boolean = true) {\n  const participations = await prisma.participations.findMany({\n    where: roundId ? { roundId } : {},\n    include: {\n      round: {\n        select: {\n          id: true,\n          roundNumber: true,\n          totalShares: true\n        }\n      }\n    },\n    take: 100 // 限制处理数量\n  });\n\n  const issues = [];\n\n  for (const participation of participations) {\n    const { round, numbers } = participation;\n    const minNumber = 10000001;\n    const maxNumber = 10000000 + round.totalShares;\n\n    const invalidNumbers = numbers.filter(num => num < minNumber || num > maxNumber);\n\n    if (invalidNumbers.length > 0) {\n      issues.push({\n        participationId: participation.id,\n        roundId: round.id,\n        roundNumber: round.roundNumber,\n        invalidNumbers,\n        validRange: `${minNumber}-${maxNumber}`,\n        action: dryRun ? '模拟修复' : '需要手动处理',\n        status: dryRun ? '模拟发现问题' : '需要干预'\n      });\n    }\n  }\n\n  return {\n    totalChecked: participations.length,\n    issuesFound: issues.length,\n    issues,\n    summary: {\n      needsManualReview: issues.length,\n      dryRun\n    }\n  };\n}\n\n// 清理孤儿记录\nasync function cleanOrphanedRecords(dryRun: boolean = true) {\n  const fixes = [];\n\n  // 1. 清理孤儿参与记录\n  const orphanedParticipations = await prisma.participations.findMany({\n    where: {\n      roundId: {\n        notIn: await prisma.lotteryRounds.findMany({\n          select: { id: true }\n        }).then(rounds => rounds.map(r => r.id))\n      }\n    },\n    take: 50\n  });\n\n  if (orphanedParticipations.length > 0) {\n    if (dryRun) {\n      fixes.push({\n        type: 'orphan_participations',\n        count: orphanedParticipations.length,\n        action: '删除孤儿参与记录',\n        status: '模拟修复'\n      });\n    } else {\n      await prisma.participations.deleteMany({\n        where: {\n          id: { in: orphanedParticipations.map(p => p.id) }\n        }\n      });\n      fixes.push({\n        type: 'orphan_participations',\n        count: orphanedParticipations.length,\n        action: '已清理',\n        status: 'success'\n      });\n    }\n  }\n\n  // 2. 清理无效的通知记录\n  const invalidNotifications = await prisma.notifications.findMany({\n    where: {\n      userId: '00000000-0000-0000-0000-000000000000',\n      createdAt: { lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // 7天前的系统通知\n    },\n    take: 100\n  });\n\n  if (invalidNotifications.length > 0) {\n    if (dryRun) {\n      fixes.push({\n        type: 'old_system_notifications',\n        count: invalidNotifications.length,\n        action: '清理过期系统通知',\n        status: '模拟修复'\n      });\n    } else {\n      await prisma.notifications.deleteMany({\n        where: {\n          id: { in: invalidNotifications.map(n => n.id) }\n        }\n      });\n      fixes.push({\n        type: 'old_system_notifications',\n        count: invalidNotifications.length,\n        action: '已清理',\n        status: 'success'\n      });\n    }\n  }\n\n  return {\n    totalIssues: fixes.length,\n    fixes,\n    summary: {\n      success: fixes.filter(f => f.status === 'success').length,\n      errors: fixes.filter(f => f.status === 'error').length,\n      dryRun\n    }\n  };\n}\n\n// 修复重复中奖\nasync function fixDuplicateWinners(roundId?: string, dryRun: boolean = true) {\n  const duplicateWinners = await prisma.$queryRaw`\n    SELECT round_id, COUNT(*) as winner_count\n    FROM participations\n    WHERE is_winner = true\n    ${roundId ? 'AND round_id = $1' : ''}\n    GROUP BY round_id\n    HAVING COUNT(*) > 1\n  `;\n\n  const fixes = [];\n\n  for (const duplicate of duplicateWinners) {\n    const winners = await prisma.participations.findMany({\n      where: {\n        roundId: duplicate.round_id,\n        isWinner: true\n      }\n    });\n\n    if (winners.length > 1) {\n      // 保留最早的中奖记录\n      const sortedWinners = winners.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n      const winnerToKeep = sortedWinners[0];\n      const winnersToRemove = sortedWinners.slice(1);\n\n      if (dryRun) {\n        fixes.push({\n          roundId: duplicate.round_id,\n          duplicateCount: winners.length,\n          action: `移除${winnersToRemove.length}个重复中奖记录`,\n          winnerToKeep: winnerToKeep.id,\n          status: '模拟修复'\n        });\n      } else {\n        try {\n          // 移除重复的中奖标记\n          await prisma.participations.updateMany({\n            where: {\n              id: { in: winnersToRemove.map(w => w.id) }\n            },\n            data: { isWinner: false }\n          });\n\n          // 更新期次的中奖者\n          await prisma.lotteryRounds.update({\n            where: { id: duplicate.round_id },\n            data: {\n              winnerUserId: winnerToKeep.userId\n            }\n          });\n\n          fixes.push({\n            roundId: duplicate.round_id,\n            action: '重复中奖已处理',\n            status: 'success'\n          });\n        } catch (error) {\n          fixes.push({\n            roundId: duplicate.round_id,\n            action: '处理失败',\n            error: error.message,\n            status: 'error'\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    totalDuplicates: duplicateWinners.length,\n    fixes,\n    summary: {\n      success: fixes.filter(f => f.status === 'success').length,\n      errors: fixes.filter(f => f.status === 'error').length,\n      dryRun\n    }\n  };\n}\n\n// 全面系统检查\nasync function performFullSystemCheck(dryRun: boolean = true) {\n  const checks = await Promise.allSettled([\n    fixSoldSharesMismatch(undefined, true),\n    completeMissingDraws(undefined, true),\n    recalculateParticipants(undefined, true),\n    validateNumberRanges(undefined, true),\n    cleanOrphanedRecords(true),\n    fixDuplicateWinners(undefined, true)\n  ]);\n\n  const results = checks.map((check, index) => {\n    const actions = ['sold_shares_mismatch', 'missing_draws', 'participants', 'number_ranges', 'orphaned_records', 'duplicate_winners'];\n    return {\n      action: actions[index],\n      status: check.status,\n      result: check.status === 'fulfilled' ? check.value : { error: check.reason }\n    };\n  });\n\n  return {\n    totalChecks: results.length,\n    checks: results,\n    summary: {\n      completed: results.filter(r => r.status === 'fulfilled').length,\n      failed: results.filter(r => r.status === 'rejected').length,\n      totalIssues: results.reduce((sum, r) => {\n        if (r.status === 'fulfilled') {\n          return sum + (r.result.totalMismatched || r.result.totalMissingDraws || r.result.mismatchedRounds || r.result.issuesFound || r.result.totalIssues || r.result.totalDuplicates || 0);\n        }\n        return sum;\n      }, 0),\n      dryRun\n    }\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/lottery/draw/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":26,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[893,900],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":109,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":109,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2883,2896],"text":"winnerUserId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2884,2896],"text":"(winnerUserId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2883,2896],"text":"!Boolean(winnerUserId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3370,3373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3370,3373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5258,5261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5258,5261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5271,5314],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":201,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":201,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5387,5400],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5401,5403],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":244,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":244,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6497,6512],"text":"((product?.nameZh) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6497,6512],"text":"((product?.nameZh) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6497,6512],"text":"(Boolean((product?.nameZh)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":244,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":244,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6513,6515],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":245,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":245,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6561,6563],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":246,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":246,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6619,6621],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6991,6994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6991,6994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7004,7052],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":266,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":266,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7125,7138],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7139,7141],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { calculateSecureWinningNumber, generateSecureDrawProof, findWinner } from '@/lib/lottery-algorithm';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.lottery.write()\n});\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.lottery.read()\n});\n\n/**\n * 手动触发开奖API\n * 管理员可以手动触发某个已售罄的抽奖轮次的开奖\n */\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const { roundId } = body;\n\n    if (!roundId) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少轮次ID'\n      }, { status: 400 });\n    }\n\n    // 1. 查询轮次信息\n    const round = await prisma.lotteryRounds.findUnique({\n      where: { id: roundId }\n    });\n\n    if (!round) {\n      return NextResponse.json({\n        success: false,\n        error: '轮次不存在'\n      }, { status: 404 });\n    }\n\n    // 2. 检查轮次状态\n    if (round.status !== 'active') {\n      return NextResponse.json({\n        success: false,\n        error: `轮次状态为 ${round.status}，无法开奖`\n      }, { status: 400 });\n    }\n\n    // 3. 检查是否售罄\n    if (round.soldShares < round.totalShares) {\n      return NextResponse.json({\n        success: false,\n        error: `当前已售 ${round.soldShares}/${round.totalShares} 份，未售罄，无法开奖`\n      }, { status: 400 });\n    }\n\n    // 4. 查询产品信息\n    const product = await prisma.products.findUnique({\n      where: { id: round.productId }\n    });\n\n    if (!product) {\n      return NextResponse.json({\n        success: false,\n        error: '商品不存在'\n      }, { status: 404 });\n    }\n\n    // 5. 查询参与记录\n    const participations = await prisma.participations.findMany({\n      where: { roundId }\n    });\n\n    // 6. 检查是否有参与记录\n    if (participations.length === 0) {\n      return NextResponse.json({\n        success: false,\n        error: '无参与记录，无法开奖'\n      }, { status: 400 });\n    }\n\n    // 5. 执行开奖算法\n    const participationIds = participations.map(p => p.id);\n    const participationData = participations.map(p => ({\n      userId: p.userId,\n      numbers: p.numbers,\n      amount: Number(p.cost),\n      createdAt: p.createdAt\n    }));\n    \n    const drawResult = calculateSecureWinningNumber(\n      participationIds,\n      participationData,\n      round.productId,\n      round.totalShares\n    );\n\n    // 6. 查找中奖用户\n    const participationsWithNumbers = participations.map(p => ({\n      userId: p.userId,\n      numbers: p.numbers\n    }));\n    const winnerUserId = findWinner(participationsWithNumbers, drawResult.winningNumber);\n\n    if (!winnerUserId) {\n      return NextResponse.json({\n        success: false,\n        error: '未找到中奖用户，这不应该发生！'\n      }, { status: 500 });\n    }\n\n    // 7. 执行开奖事务\n    await prisma.$transaction(async (tx) => {\n      // 更新轮次状态\n      await tx.lotteryRounds.update({\n        where: { id: roundId },\n        data: {\n          status: 'completed',\n          winnerUserId,\n          winningNumber: drawResult.winningNumber,\n          drawTime: new Date(),\n          drawAlgorithmData: drawResult as any\n        }\n      });\n\n      // 标记中奖参与记录\n      await tx.participations.updateMany({\n        where: {\n          roundId,\n          userId: winnerUserId,\n          numbers: { has: drawResult.winningNumber }\n        },\n        data: {\n          isWinner: true\n        }\n      });\n\n      // 创建中奖订单\n      const orderNumber = `LM${Date.now()}${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n      await tx.orders.create({\n        data: {\n          orderNumber,\n          userId: winnerUserId,\n          roundId,\n          productId: round.productId,\n          type: 'lottery_win',\n          totalAmount: 0, // 中奖订单无需支付\n          paymentStatus: 'paid',\n          fulfillmentStatus: 'pending',\n          quantity: 1,\n          status: 'pending',\n          notes: JSON.stringify({\n            roundNumber: round.roundNumber,\n            winningNumber: drawResult.winningNumber,\n            drawTime: drawResult.timestamp\n          })\n        }\n      });\n\n      // 记录交易\n      await tx.transactions.create({\n        data: {\n          userId: winnerUserId,\n          type: 'lottery_win',\n          amount: Number(product.marketPrice),\n          balanceType: 'platform_balance',\n          description: `恭喜中奖：${product.nameZh} - 第${round.roundNumber}期，中奖号码 ${drawResult.winningNumber}`\n        }\n      });\n    });\n\n    // 8. 查询中奖用户信息\n    const winner = await prisma.users.findUnique({\n      where: { id: winnerUserId }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        roundId,\n        roundNumber: round.roundNumber,\n        productName: product.nameZh,\n        winningNumber: drawResult.winningNumber,\n        winner: {\n          userId: winnerUserId,\n          username: winner?.username,\n          firstName: winner?.firstName\n        },\n        drawResult,\n        proof: generateSecureDrawProof(drawResult)\n      }\n    });\n    } catch (error: any) {\n      console.error('Manual draw error:', error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '开奖失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * GET - 获取待开奖列表\n */\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    // 查询已售罄但未开奖的轮次（soldShares >= totalShares）\n    const allActiveRounds = await prisma.lotteryRounds.findMany({\n      where: { status: 'active' },\n      orderBy: { createdAt: 'asc' }\n    });\n    \n    // 筛选出已售罄的轮次\n    const readyRounds = allActiveRounds.filter(r => r.soldShares >= r.totalShares);\n\n    // 手动查询产品信息和参与人数\n    const roundsWithDetails = await Promise.all(\n      readyRounds.map(async (r) => {\n        const product = await prisma.products.findUnique({\n          where: { id: r.productId },\n          select: {\n            nameZh: true,\n            nameEn: true,\n            nameRu: true,\n            images: true,\n            marketPrice: true\n          }\n        });\n\n        const participantCount = await prisma.participations.count({\n          where: { roundId: r.id }\n        });\n\n        return {\n          id: r.id,\n          productId: r.productId,\n          productName: product?.nameZh || '',\n          productImages: product?.images || [],\n          marketPrice: Number(product?.marketPrice || 0),\n          roundNumber: r.roundNumber,\n          totalShares: r.totalShares,\n          soldShares: r.soldShares,\n          participants: participantCount,\n          createdAt: r.createdAt.toISOString()\n        };\n      })\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        rounds: roundsWithDetails\n      }\n    });\n    } catch (error: any) {\n      console.error('Get ready rounds error:', error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取待开奖列表失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/lottery/rounds/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'withWritePermission' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withWritePermission' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":23,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":23,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[796,822],"text":"(searchParams.get('status') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[796,822],"text":"(searchParams.get('status') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[796,822],"text":"(Boolean(searchParams.get('status')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":23,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":23,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[823,825],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[862,886],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[862,886],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[862,886],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[887,889],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":25,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[923,948],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[923,948],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[923,948],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":25,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":25,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[949,951],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":52,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":52,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1633,1647],"text":"r.winnerUserId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1633,1647],"text":"r.winnerUserId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1633,1647],"text":"Boolean(r.winnerUserId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":66,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":66,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1984,1999],"text":"((product?.nameZh) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1984,1999],"text":"((product?.nameZh) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1984,1999],"text":"(Boolean((product?.nameZh)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2000,2002],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":72,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2213,2229],"text":"((winner?.username) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2213,2229],"text":"((winner?.username) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2213,2229],"text":"(Boolean((winner?.username)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2230,2232],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":74,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":74,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2301,2326],"text":"((r.drawTime?.toISOString()) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2301,2326],"text":"((r.drawTime?.toISOString()) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2301,2326],"text":"(Boolean((r.drawTime?.toISOString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":74,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":74,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2327,2329],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2677,2680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2677,2680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2690,2732],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":96,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2805,2818],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":96,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":96,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2819,2821],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.lottery.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.lottery.write()\n});\n\n// GET - 获取开奖轮次列表\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status') || 'active';\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const skip = (page - 1) * limit;\n\n    // 查询轮次\n    const [rounds, total] = await Promise.all([\n      prisma.lotteryRounds.findMany({\n        where: { status },\n        skip,\n        take: limit,\n        orderBy: { createdAt: 'desc' }\n      }),\n      prisma.lotteryRounds.count({ where: { status } })\n    ]);\n\n    // 手动查询产品信息和中奖用户信息\n    const roundsWithDetails = await Promise.all(\n      rounds.map(async (r) => {\n        const product = await prisma.products.findUnique({\n          where: { id: r.productId },\n          select: {\n            nameZh: true,\n            nameEn: true,\n            nameRu: true\n          }\n        });\n\n        let winner = null;\n        if (r.winnerUserId) {\n          winner = await prisma.users.findUnique({\n            where: { id: r.winnerUserId },\n            select: {\n              id: true,\n              username: true,\n              firstName: true\n            }\n          });\n        }\n\n        return {\n          id: r.id,\n          productId: r.productId,\n          productName: product?.nameZh || '',\n          roundNumber: r.roundNumber,\n          totalShares: r.totalShares,\n          soldShares: r.soldShares,\n          status: r.status,\n          winnerUserId: r.winnerUserId,\n          winnerUsername: winner?.username || null,\n          winningNumber: r.winningNumber,\n          drawTime: r.drawTime?.toISOString() || null,\n          createdAt: r.createdAt.toISOString()\n        };\n      })\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        rounds: roundsWithDetails,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('Get rounds error:', error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取轮次失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/orders/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'createOrderValidationMiddleware' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createOrderValidationMiddleware' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'ORDER_VALIDATION_MIDDLEWARES' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ORDER_VALIDATION_MIDDLEWARES' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":40,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1375,1399],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1375,1399],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1375,1399],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1400,1402],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":41,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1436,1461],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1436,1461],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1436,1461],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":41,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":41,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1462,1464],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1543,1546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1543,1546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1561,1567],"text":"status != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1561,1567],"text":"status ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1561,1567],"text":"Boolean(status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 24. Maximum allowed is 10.","line":99,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":357,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":268,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":268,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6973,7004],"text":"(Boolean(order.users.referred_by_user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":269,"column":59,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":269,"endColumn":89,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7064,7094],"text":"(Boolean(order.users.has_first_purchase))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":327,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":327,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8863,8894],"text":"(Boolean(order.users.referred_by_user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":343,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9283,9286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9283,9286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":354,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":354,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9557,9570],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":354,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":354,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9571,9573],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 管理员 - 订单管理\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport type { ApiResponse } from '@/types';\nimport { rewardTrigger } from '@/lib/reward-trigger-manager';\nimport { getLogger } from '@/lib/logger';\nimport { getMonitor } from '@/lib/monitoring';\nimport { createOrderValidationMiddleware, ORDER_VALIDATION_MIDDLEWARES } from '@/lib/order-validation-middleware';\nimport { ErrorFactory } from '@/lib/errors';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 订单状态更新请求体\ninterface OrderUpdateRequest {\n  orderId: string;\n  trackingNumber?: string;\n  updateType?: 'ship' | 'complete';\n}\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.orders.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.orders.write()\n});\n\n// 获取订单列表\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n    \n    try {\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = (page - 1) * limit;\n\n    // 构建查询条件\n    const where: any = {};\n    if (status) {\n      where.status = status;\n    }\n\n    // 获取订单列表和总数\n    const [orders, total] = await Promise.all([\n      prisma.orders.findMany({\n        where,\n        include: {\n          users: {\n            select: {\n              id: true,\n              username: true,\n              email: true,\n              referred_by_user_id: true,\n              has_first_purchase: true\n            }\n          }\n        },\n        skip: offset,\n        take: limit,\n        orderBy: {\n          createdAt: 'desc'\n        }\n      }),\n      prisma.orders.count({ where })\n    ]);\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        orders,\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      }\n    });\n\n    } catch (error) {\n      logger.error('获取订单列表失败', error as Error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '获取订单列表失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// 更新订单状态\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n    const monitor = getMonitor();\n    const operationSpan = monitor.startSpan('order_ship');\n\n    try {\n\n    // 验证请求体\n    const body: OrderUpdateRequest = await request.json();\n    const { orderId, trackingNumber, updateType = 'ship' } = body;\n\n    // 验证必填参数\n    if (!orderId) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '缺少必填参数：orderId'\n      }, { status: 400 });\n    }\n\n    // 生成幂等性请求ID\n    const idempotencyKey = `order_update_${orderId}_${updateType}_${Date.now()}`;\n    \n    // 检查是否已经处理过该请求\n    const existingRequest = await prisma.processingLogs.findFirst({\n      where: {\n        entityId: orderId,\n        operationType: `order_${updateType}`,\n        status: 'completed'\n      }\n    });\n\n    if (existingRequest) {\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        message: '该订单操作已处理过',\n        data: { \n          idempotent: true,\n          message: '重复的订单操作已被忽略'\n        }\n      });\n    }\n\n    // 记录处理开始\n    const processingLog = await prisma.processingLogs.create({\n      data: {\n        entityId: orderId,\n        operationType: `order_${updateType}`,\n        status: 'processing',\n        requestId: idempotencyKey,\n        createdAt: new Date()\n      }\n    });\n\n    // 获取订单\n    const order = await prisma.orders.findUnique({\n      where: { id: orderId },\n      include: {\n        users: {\n          select: {\n            referred_by_user_id: true,\n            has_first_purchase: true\n          }\n        }\n      }\n    });\n\n    if (!order) {\n      // 标记处理失败\n      await prisma.processingLogs.update({\n        where: { id: processingLog.id },\n        data: { \n          status: 'failed',\n          errorMessage: '订单不存在'\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '订单不存在'\n      }, { status: 404 });\n    }\n\n    // 检查订单状态并使用原子操作更新，防止并发处理\n    let newStatus = order.status;\n    let shouldTriggerReward = false;\n\n    if (updateType === 'ship' && order.status === 'pending_shipment') {\n      // 使用原子操作检查和更新，防止并发发货\n      const updateResult = await prisma.orders.updateMany({\n        where: {\n          id: orderId,\n          status: 'pending_shipment'\n        },\n        data: {\n          status: 'shipped',\n          trackingNumber: trackingNumber,\n          updatedAt: new Date()\n        }\n      });\n\n      // 如果没有行被更新，说明状态已改变\n      if (updateResult.count === 0) {\n        await prisma.processingLogs.update({\n          where: { id: processingLog.id },\n          data: { \n            status: 'failed',\n            errorMessage: `订单状态异常，当前状态: ${order.status}`\n          }\n        });\n        \n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: `订单状态已变化，请刷新页面重试`\n        }, { status: 400 });\n      }\n\n      newStatus = 'shipped';\n      \n    } else if (updateType === 'complete' && order.status === 'shipped') {\n      // 使用原子操作检查和更新，防止并发完成\n      const updateResult = await prisma.orders.updateMany({\n        where: {\n          id: orderId,\n          status: 'shipped'\n        },\n        data: {\n          status: 'completed',\n          fulfillmentStatus: 'completed',\n          updatedAt: new Date()\n        }\n      });\n\n      // 如果没有行被更新，说明状态已改变\n      if (updateResult.count === 0) {\n        await prisma.processingLogs.update({\n          where: { id: processingLog.id },\n          data: { \n            status: 'failed',\n            errorMessage: `订单状态异常，当前状态: ${order.status}`\n          }\n        });\n        \n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: `订单状态已变化，请刷新页面重试`\n        }, { status: 400 });\n      }\n\n      newStatus = 'completed';\n      shouldTriggerReward = true;\n      \n    } else {\n      // 标记处理失败\n      await prisma.processingLogs.update({\n        where: { id: processingLog.id },\n        data: { \n          status: 'failed',\n          errorMessage: `无效的状态转换: ${order.status} -> ${updateType}`\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `无法执行此操作：当前订单状态为 ${order.status}，无法执行 ${updateType} 操作`\n      }, { status: 400 });\n    }\n\n    // 检查是否需要触发奖励（仅首次购买或被推荐用户完成订单时）\n    if (shouldTriggerReward) {\n      const hasReferral = !!order.users.referred_by_user_id;\n      const shouldTriggerReferralReward = hasReferral && !order.users.has_first_purchase;\n      \n      try {\n        const rewardResult = await rewardTrigger.triggerReward({\n          orderId: order.id,\n          userId: order.user_id,\n          triggerType: shouldTriggerReferralReward ? 'first_purchase' : 'order_completion',\n          referralCode: hasReferral ? order.users.referred_by_user_id : undefined\n        });\n\n        if (rewardResult.success) {\n          // 标记用户已完成首次购买\n          if (shouldTriggerReferralReward) {\n            await prisma.users.update({\n              where: { id: order.user_id },\n              data: { has_first_purchase: true }\n            });\n          }\n        }\n\n        monitor.increment(`order_reward_trigger_${shouldTriggerReferralReward ? 'first_purchase' : 'order_completion'}_success_total`, 1);\n        \n      } catch (rewardError) {\n        logger.warn('订单奖励触发失败', rewardError as Error, {\n          orderId: order.id,\n          userId: order.user_id,\n          rewardType: shouldTriggerReferralReward ? 'first_purchase' : 'order_completion'\n        });\n\n        monitor.increment(`order_reward_trigger_${shouldTriggerReferralReward ? 'first_purchase' : 'order_completion'}_error_total`, 1);\n      }\n    }\n\n    // 发送订单状态更新通知\n    try {\n      // 这里可以添加通知逻辑，比如发送邮件或推送通知\n      logger.info('订单状态更新成功', {\n        orderId: order.id,\n        oldStatus: order.status,\n        newStatus,\n        updateType\n      });\n    } catch (notificationError) {\n      logger.warn('发送通知失败', notificationError as Error, { orderId: order.id });\n    }\n\n    // 标记处理完成\n    await prisma.processingLogs.update({\n      where: { id: processingLog.id },\n      data: { \n        status: 'completed',\n        completedAt: new Date()\n      }\n    });\n\n    operationSpan.finish(true, {\n      orderId: order.id,\n      updateType,\n      hasReferral: !!order.users.referred_by_user_id,\n      shouldTriggerReward,\n      rewardTriggered: !!shouldTriggerReward\n    });\n\n    const successMessage = updateType === 'ship' ? '发货成功' : '订单完成';\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      message: successMessage,\n      data: {\n        orderId: order.id,\n        newStatus,\n        rewardTriggered: shouldTriggerReward\n      }\n    });\n\n    } catch (error: any) {\n      operationSpan.finish(false, {\n        error: error.message\n      });\n\n      monitor.increment('order_update_error_total', 1);\n\n      logger.error('订单状态更新失败', error as Error);\n\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: error.message || '订单状态更新失败'\n      }, { status: 500 });\n    }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/organization/admins/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1014,1049],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\n// GET - 获取所有管理员\nexport async function GET(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const admins = await prisma.admins.findMany({\n        orderBy: {\n          createdAt: 'desc'\n        },\n        select: {\n          id: true,\n          username: true,\n          role: true,\n          isActive: true,\n          lastLogin: true,\n          createdAt: true\n          // 不返回密码哈希\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: admins\n      });\n\n    } catch (error) {\n      console.error('获取管理员列表失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/organization/departments/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[934,966],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1784,1816],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\n// PATCH - 更新部门\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  return withPermission(async (request, admin) => {\n    try {\n      const body = await request.json();\n      const { id } = params;\n\n      const department = await prisma.orgDepartments.update({\n        where: { id },\n        data: body\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: department\n      });\n\n    } catch (error) {\n      console.error('更新部门失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n\n// DELETE - 删除部门\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  return withPermission(async (request, admin) => {\n    try {\n      const { id } = params;\n\n      // 检查是否有子部门\n      const children = await prisma.orgDepartments.count({\n        where: { parentId: id }\n      });\n\n      if (children > 0) {\n        return NextResponse.json(\n          { success: false, error: '该部门下还有子部门，无法删除' },\n          { status: 400 }\n        );\n      }\n\n      await prisma.orgDepartments.delete({\n        where: { id }\n      });\n\n      return NextResponse.json({\n        success: true,\n        message: '删除成功'\n      });\n\n    } catch (error) {\n      console.error('删除部门失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/organization/departments/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[833,867],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":46,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":46,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1262,1266],"text":"(Boolean(name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":68,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1784,1795],"text":"(Boolean(description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1796,1798],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":69,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1825,1833],"text":"(Boolean(parentId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1834,1836],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":70,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":70,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1864,1873],"text":"(Boolean(sortOrder))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1874,1876],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2046,2078],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\n// GET - 获取所有部门\nexport async function GET(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const departments = await prisma.orgDepartments.findMany({\n        orderBy: {\n          sortOrder: 'asc'\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: departments\n      });\n\n    } catch (error) {\n      console.error('获取部门列表失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n\n// POST - 创建新部门\nexport async function POST(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const body = await request.json();\n      const { name, description, parentId, sortOrder } = body;\n\n      // 验证必填字段\n      if (!name) {\n        return NextResponse.json(\n          { success: false, error: '部门名称不能为空' },\n          { status: 400 }\n        );\n      }\n\n      // 检查名称是否已存在\n      const existing = await prisma.orgDepartments.findUnique({\n        where: { name }\n      });\n\n      if (existing) {\n        return NextResponse.json(\n          { success: false, error: '部门名称已存在' },\n          { status: 400 }\n        );\n      }\n\n      const department = await prisma.orgDepartments.create({\n        data: {\n          name,\n          description: description || null,\n          parentId: parentId || null,\n          sortOrder: sortOrder || 0,\n          isActive: true\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: department\n      });\n\n    } catch (error) {\n      console.error('创建部门失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/organization/roles/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[815,849],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":45,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":45,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1234,1238],"text":"(Boolean(name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":66,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1719,1730],"text":"(Boolean(description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1731,1733],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":67,"column":25,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":67,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1764,1776],"text":"(Boolean(departmentId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1777,1779],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":68,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1809,1820],"text":"(Boolean(permissions))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1821,1823],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2012,2044],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\n// GET - 获取所有角色\nexport async function GET(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const roles = await prisma.orgRoles.findMany({\n        orderBy: {\n          sortOrder: 'asc'\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: roles\n      });\n\n    } catch (error) {\n      console.error('获取角色列表失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n\n// POST - 创建新角色\nexport async function POST(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const body = await request.json();\n      const { name, description, departmentId, permissions } = body;\n\n      if (!name) {\n        return NextResponse.json(\n          { success: false, error: '角色名称不能为空' },\n          { status: 400 }\n        );\n      }\n\n      const existing = await prisma.orgRoles.findUnique({\n        where: { name }\n      });\n\n      if (existing) {\n        return NextResponse.json(\n          { success: false, error: '角色名称已存在' },\n          { status: 400 }\n        );\n      }\n\n      const role = await prisma.orgRoles.create({\n        data: {\n          name,\n          description: description || null,\n          departmentId: departmentId || null,\n          permissions: permissions || {},\n          isActive: true,\n          sortOrder: 0\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: role\n      });\n\n    } catch (error) {\n      console.error('创建角色失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/permissions/my-permissions/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[802,834],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\n\nexport async function GET(request: NextRequest) {\n  const withPermission = AdminPermissionManager.createPermissionMiddleware();\n\n  return withPermission(async (request, admin) => {\n    try {\n      // 获取管理员最新权限\n      const permissions = await AdminPermissionManager.getAdminPermissions(admin.adminId);\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          adminId: admin.adminId,\n          username: admin.username,\n          role: admin.role,\n          permissions: admin.role === 'super_admin' ? ['*:*'] : permissions\n        },\n        permissions: admin.role === 'super_admin' ? ['*:*'] : permissions\n      });\n    } catch (error) {\n      console.error('获取权限失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取权限失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/products/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1644,1647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1644,1647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1657,1691],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.read()\n});\n\n// GET - 获取单个商品详情\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  return withReadPermission(async (request, admin) => {\n    try {\n    const productId = params.id;\n\n    const product = await prisma.products.findUnique({\n      where: { id: productId }\n    });\n\n    if (!product) {\n      return NextResponse.json({\n        success: false,\n        error: '商品不存在'\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        product: {\n          id: product.id,\n          nameZh: product.nameZh,\n          nameEn: product.nameEn,\n          nameRu: product.nameRu,\n          descriptionZh: product.descriptionZh,\n          descriptionEn: product.descriptionEn,\n          descriptionRu: product.descriptionRu,\n          images: product.images,\n          marketPrice: Number(product.marketPrice),\n          totalShares: product.totalShares,\n          pricePerShare: Number(product.pricePerShare),\n          category: product.category,\n          stock: product.stock,\n          status: product.status,\n          createdAt: product.createdAt.toISOString(),\n          updatedAt: product.updatedAt.toISOString()\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('获取商品详情失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取商品详情失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/products/conversion/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":318,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.write()\n});\n\n// GET - 获取转化漏斗分析数据\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const productId = searchParams.get('productId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n\n    // 构建查询条件\n    const where: any = {};\n    if (productId) {\n      where.product_id = productId;\n    }\n    if (startDate && endDate) {\n      where.date = {\n        gte: new Date(startDate),\n        lte: new Date(endDate)\n      };\n    }\n\n    // 获取分页数据\n    const [conversionData, totalCount] = await Promise.all([\n      prisma.conversionFunnel.findMany({\n        where,\n        orderBy: { date: 'desc' },\n        skip: (page - 1) * limit,\n        take: limit,\n        include: {\n          products: {\n            select: {\n              nameZh: true,\n              nameEn: true,\n              nameRu: true,\n              category: true\n            }\n          }\n        }\n      }),\n      prisma.conversionFunnel.count({ where })\n    ]);\n\n    // 统计汇总数据\n    const summary = await prisma.conversionFunnel.aggregate({\n      where,\n      _sum: {\n        page_views: true,\n        detail_page_views: true,\n        favorites: true,\n        add_to_cart: true,\n        purchases: true\n      },\n      _avg: {\n        view_to_detail_rate: true,\n        detail_to_favorite_rate: true,\n        favorite_to_cart_rate: true,\n        cart_to_purchase_rate: true,\n        overall_conversion_rate: true,\n        avg_dwell_time: true\n      }\n    });\n\n    // 获取实时数据（从基础表计算今日数据）\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayStr = today.toISOString().split('T')[0];\n\n    // 今日购买数据\n    const todayPurchases = await prisma.orders.count({\n      where: {\n        createdAt: {\n          gte: today\n        },\n        paymentStatus: 'completed'\n      }\n    });\n\n    // 今日参与抽奖数据\n    const todayParticipations = await prisma.participations.count({\n      where: {\n        createdAt: {\n          gte: today\n        }\n      }\n    });\n\n    // 计算转化率\n    const totalViews = Number(summary._sum.page_views || 0);\n    const totalDetailViews = Number(summary._sum.detail_page_views || 0);\n    const totalFavorites = Number(summary._sum.favorites || 0);\n    const totalCartAdds = Number(summary._sum.add_to_cart || 0);\n    const totalPurchases = Number(summary._sum.purchases || 0);\n\n    // 转换数据格式\n    const formattedData = conversionData.map(item => {\n      const pageViews = Number(item.page_views);\n      const detailViews = Number(item.detail_page_views);\n      const favorites = Number(item.favorites);\n      const cartAdds = Number(item.add_to_cart);\n      const purchases = Number(item.purchases);\n\n      return {\n        id: item.id,\n        productId: item.product_id,\n        productName: {\n          zh: item.products?.nameZh || '',\n          en: item.products?.nameEn || '',\n          ru: item.products?.nameRu || ''\n        },\n        category: item.products?.category || '',\n        date: item.date.toISOString().split('T')[0],\n        pageViews,\n        detailPageViews: detailViews,\n        favorites,\n        addToCart: cartAdds,\n        purchases,\n        viewToDetailRate: Number(item.view_to_detail_rate),\n        detailToFavoriteRate: Number(item.detail_to_favorite_rate),\n        favoriteToCartRate: Number(item.favorite_to_cart_rate),\n        cartToPurchaseRate: Number(item.cart_to_purchase_rate),\n        overallConversionRate: Number(item.overall_conversion_rate),\n        avgDwellTime: Number(item.avg_dwell_time),\n        createdAt: item.createdAt.toISOString(),\n        updatedAt: item.updatedAt.toISOString()\n      };\n    });\n\n    // 计算汇总转化率\n    const aggregatedRates = {\n      viewToDetailRate: totalViews > 0 ? (totalDetailViews / totalViews) * 100 : 0,\n      detailToFavoriteRate: totalDetailViews > 0 ? (totalFavorites / totalDetailViews) * 100 : 0,\n      favoriteToCartRate: totalFavorites > 0 ? (totalCartAdds / totalFavorites) * 100 : 0,\n      cartToPurchaseRate: totalCartAdds > 0 ? (totalPurchases / totalCartAdds) * 100 : 0,\n      overallConversionRate: totalViews > 0 ? (totalPurchases / totalViews) * 100 : 0\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        conversion: formattedData,\n        pagination: {\n          currentPage: page,\n          totalPages: Math.ceil(totalCount / limit),\n          totalCount,\n          hasNext: page * limit < totalCount,\n          hasPrev: page > 1\n        },\n        summary: {\n          totalPageViews: totalViews,\n          totalDetailViews: totalDetailViews,\n          totalFavorites: totalFavorites,\n          totalAddToCart: totalCartAdds,\n          totalPurchases: totalPurchases,\n          avgViewToDetailRate: Number(summary._avg.view_to_detail_rate || 0),\n          avgDetailToFavoriteRate: Number(summary._avg.detail_to_favorite_rate || 0),\n          avgFavoriteToCartRate: Number(summary._avg.favorite_to_cart_rate || 0),\n          avgCartToPurchaseRate: Number(summary._avg.cart_to_purchase_rate || 0),\n          avgOverallConversionRate: Number(summary._avg.overall_conversion_rate || 0),\n          avgDwellTime: Number(summary._avg.avg_dwell_time || 0)\n        },\n        aggregatedRates,\n        realTimeData: {\n          todayPurchases,\n          todayParticipations,\n          date: todayStr\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('获取转化漏斗数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取转化漏斗数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 创建或更新转化漏斗数据\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const {\n      productId,\n      date,\n      pageViews,\n      detailPageViews,\n      favorites,\n      addToCart,\n      purchases,\n      avgDwellTime\n    } = body;\n\n    // 验证必填字段\n    if (!productId || !date) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必填字段：productId, date'\n      }, { status: 400 });\n    }\n\n    // 检查商品是否存在\n    const product = await prisma.products.findUnique({\n      where: { id: productId }\n    });\n\n    if (!product) {\n      return NextResponse.json({\n        success: false,\n        error: '商品不存在'\n      }, { status: 404 });\n    }\n\n    // 计算转化率\n    const views = pageViews || 0;\n    const details = detailPageViews || 0;\n    const favs = favorites || 0;\n    const carts = addToCart || 0;\n    const purchases_count = purchases || 0;\n\n    const viewToDetailRate = views > 0 ? (details / views) * 100 : 0;\n    const detailToFavoriteRate = details > 0 ? (favs / details) * 100 : 0;\n    const favoriteToCartRate = favs > 0 ? (carts / favs) * 100 : 0;\n    const cartToPurchaseRate = carts > 0 ? (purchases_count / carts) * 100 : 0;\n    const overallConversionRate = views > 0 ? (purchases_count / views) * 100 : 0;\n\n    // 创建或更新数据\n    const conversionData = await prisma.conversionFunnel.upsert({\n      where: {\n        product_id_date: {\n          product_id: productId,\n          date: new Date(date)\n        }\n      },\n      create: {\n        product_id: productId,\n        date: new Date(date),\n        page_views: views,\n        detail_page_views: details,\n        favorites: favs,\n        add_to_cart: carts,\n        purchases: purchases_count,\n        view_to_detail_rate: viewToDetailRate,\n        detail_to_favorite_rate: detailToFavoriteRate,\n        favorite_to_cart_rate: favoriteToCartRate,\n        cart_to_purchase_rate: cartToPurchaseRate,\n        overall_conversion_rate: overallConversionRate,\n        avg_dwell_time: avgDwellTime || 0\n      },\n      update: {\n        page_views: views,\n        detail_page_views: details,\n        favorites: favs,\n        add_to_cart: carts,\n        purchases: purchases_count,\n        view_to_detail_rate: viewToDetailRate,\n        detail_to_favorite_rate: detailToFavoriteRate,\n        favorite_to_cart_rate: favoriteToCartRate,\n        cart_to_purchase_rate: cartToPurchaseRate,\n        overall_conversion_rate: overallConversionRate,\n        avg_dwell_time: avgDwellTime || 0,\n        updated_at: new Date()\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        conversionData: {\n          id: conversionData.id,\n          productId: conversionData.product_id,\n          date: conversionData.date.toISOString().split('T')[0],\n          pageViews: Number(conversionData.page_views),\n          detailPageViews: Number(conversionData.detail_page_views),\n          favorites: Number(conversionData.favorites),\n          addToCart: Number(conversionData.add_to_cart),\n          purchases: Number(conversionData.purchases),\n          viewToDetailRate: Number(conversionData.view_to_detail_rate),\n          detailToFavoriteRate: Number(conversionData.detail_to_favorite_rate),\n          favoriteToCartRate: Number(conversionData.favorite_to_cart_rate),\n          cartToPurchaseRate: Number(conversionData.cart_to_purchase_rate),\n          overallConversionRate: Number(conversionData.overall_conversion_rate),\n          avgDwellTime: Number(conversionData.avg_dwell_time)\n        },\n        message: '转化漏斗数据保存成功'\n      }\n    });\n    } catch (error: any) {\n      console.error('保存转化漏斗数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '保存转化漏斗数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/products/performance/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":255,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.write()\n});\n\n// GET - 获取商品表现统计数据\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const productId = searchParams.get('productId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n\n    // 构建查询条件\n    const where: any = {};\n    if (productId) {\n      where.product_id = productId;\n    }\n    if (startDate && endDate) {\n      where.date = {\n        gte: new Date(startDate),\n        lte: new Date(endDate)\n      };\n    }\n\n    // 获取分页数据\n    const [performanceData, totalCount] = await Promise.all([\n      prisma.productPerformance.findMany({\n        where,\n        orderBy: { date: 'desc' },\n        skip: (page - 1) * limit,\n        take: limit,\n        include: {\n          products: {\n            select: {\n              nameZh: true,\n              nameEn: true,\n              nameRu: true,\n              category: true\n            }\n          }\n        }\n      }),\n      prisma.productPerformance.count({ where })\n    ]);\n\n    // 统计汇总数据\n    const summary = await prisma.productPerformance.aggregate({\n      where,\n      _sum: {\n        participants_count: true,\n        sales_amount: true,\n        total_revenue: true\n      },\n      _avg: {\n        conversion_rate: true,\n        inventory_turnover: true,\n        avg_price_per_share: true\n      }\n    });\n\n    // 获取实时数据（从基础表计算今日数据）\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayStr = today.toISOString().split('T')[0];\n\n    // 今日参与人数\n    const todayParticipants = await prisma.participations.count({\n      where: {\n        createdAt: {\n          gte: today\n        }\n      }\n    });\n\n    // 今日销售额（从订单表计算）\n    const todaySales = await prisma.orders.aggregate({\n      where: {\n        createdAt: {\n          gte: today\n        },\n        paymentStatus: 'completed'\n      },\n      _sum: {\n        totalAmount: true\n      }\n    });\n\n    // 转换数据格式\n    const formattedData = performanceData.map(item => ({\n      id: item.id,\n      productId: item.product_id,\n      productName: {\n        zh: item.products?.nameZh || '',\n        en: item.products?.nameEn || '',\n        ru: item.products?.nameRu || ''\n      },\n      category: item.products?.category || '',\n      date: item.date.toISOString().split('T')[0],\n      participantsCount: Number(item.participants_count),\n      salesAmount: Number(item.sales_amount),\n      conversionRate: Number(item.conversion_rate),\n      inventoryTurnover: Number(item.inventory_turnover),\n      avgPricePerShare: Number(item.avg_price_per_share),\n      totalRevenue: Number(item.total_revenue),\n      createdAt: item.createdAt.toISOString(),\n      updatedAt: item.updatedAt.toISOString()\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        performance: formattedData,\n        pagination: {\n          currentPage: page,\n          totalPages: Math.ceil(totalCount / limit),\n          totalCount,\n          hasNext: page * limit < totalCount,\n          hasPrev: page > 1\n        },\n        summary: {\n          totalParticipants: Number(summary._sum.participants_count || 0),\n          totalSalesAmount: Number(summary._sum.sales_amount || 0),\n          totalRevenue: Number(summary._sum.total_revenue || 0),\n          avgConversionRate: Number(summary._avg.conversion_rate || 0),\n          avgInventoryTurnover: Number(summary._avg.inventory_turnover || 0),\n          avgPricePerShare: Number(summary._avg.avg_price_per_share || 0)\n        },\n        realTimeData: {\n          todayParticipants,\n          todaySalesAmount: Number(todaySales._sum.totalAmount || 0),\n          date: todayStr\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('获取商品表现数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取商品表现数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 创建或更新商品表现数据\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const {\n      productId,\n      date,\n      participantsCount,\n      salesAmount,\n      conversionRate,\n      inventoryTurnover,\n      avgPricePerShare\n    } = body;\n\n    // 验证必填字段\n    if (!productId || !date) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必填字段：productId, date'\n      }, { status: 400 });\n    }\n\n    // 检查商品是否存在\n    const product = await prisma.products.findUnique({\n      where: { id: productId }\n    });\n\n    if (!product) {\n      return NextResponse.json({\n        success: false,\n        error: '商品不存在'\n      }, { status: 404 });\n    }\n\n    // 计算总销售额\n    const totalRevenue = salesAmount || 0;\n\n    // 创建或更新数据\n    const performanceData = await prisma.productPerformance.upsert({\n      where: {\n        product_id_date: {\n          product_id: productId,\n          date: new Date(date)\n        }\n      },\n      create: {\n        product_id: productId,\n        date: new Date(date),\n        participants_count: participantsCount || 0,\n        sales_amount: salesAmount || 0,\n        conversion_rate: conversionRate || 0,\n        inventory_turnover: inventoryTurnover || 0,\n        avg_price_per_share: avgPricePerShare || 0,\n        total_revenue: totalRevenue\n      },\n      update: {\n        participants_count: participantsCount || 0,\n        sales_amount: salesAmount || 0,\n        conversion_rate: conversionRate || 0,\n        inventory_turnover: inventoryTurnover || 0,\n        avg_price_per_share: avgPricePerShare || 0,\n        total_revenue: totalRevenue,\n        updated_at: new Date()\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        performanceData: {\n          id: performanceData.id,\n          productId: performanceData.product_id,\n          date: performanceData.date.toISOString().split('T')[0],\n          participantsCount: Number(performanceData.participants_count),\n          salesAmount: Number(performanceData.sales_amount),\n          conversionRate: Number(performanceData.conversion_rate),\n          inventoryTurnover: Number(performanceData.inventory_turnover),\n          avgPricePerShare: Number(performanceData.avg_price_per_share),\n          totalRevenue: Number(performanceData.total_revenue)\n        },\n        message: '商品表现数据保存成功'\n      }\n    });\n    } catch (error: any) {\n      console.error('保存商品表现数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '保存商品表现数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/products/profit/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":450,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.write()\n});\n\n// GET - 获取利润分析数据\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const productId = searchParams.get('productId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n\n    // 构建查询条件\n    const where: any = {};\n    if (productId) {\n      where.product_id = productId;\n    }\n    if (startDate && endDate) {\n      where.date = {\n        gte: new Date(startDate),\n        lte: new Date(endDate)\n      };\n    }\n\n    // 获取分页数据\n    const [profitData, totalCount] = await Promise.all([\n      prisma.profitAnalysis.findMany({\n        where,\n        orderBy: { date: 'desc' },\n        skip: (page - 1) * limit,\n        take: limit,\n        include: {\n          products: {\n            select: {\n              nameZh: true,\n              nameEn: true,\n              nameRu: true,\n              category: true,\n              marketPrice: true\n            }\n          }\n        }\n      }),\n      prisma.profitAnalysis.count({ where })\n    ]);\n\n    // 统计汇总数据\n    const summary = await prisma.profitAnalysis.aggregate({\n      where,\n      _sum: {\n        revenue: true,\n        product_cost: true,\n        platform_fee: true,\n        operation_cost: true,\n        gross_profit: true,\n        net_profit: true\n      },\n      _avg: {\n        roi: true,\n        profit_margin: true,\n        cost_ratio: true\n      }\n    });\n\n    // 获取实时数据（从订单表计算今日数据）\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayStr = today.toISOString().split('T')[0];\n\n    // 今日收入\n    const todayRevenue = await prisma.orders.aggregate({\n      where: {\n        createdAt: {\n          gte: today\n        },\n        paymentStatus: 'completed'\n      },\n      _sum: {\n        totalAmount: true\n      }\n    });\n\n    // 今日平台费用\n    const todayPlatformFees = await prisma.resaleListings.aggregate({\n      where: {\n        listedAt: {\n          gte: today\n        },\n        status: 'sold'\n      },\n      _sum: {\n        platformFee: true\n      }\n    });\n\n    // 转换数据格式\n    const formattedData = profitData.map(item => {\n      const revenue = Number(item.revenue);\n      const productCost = Number(item.product_cost);\n      const platformFee = Number(item.platform_fee);\n      const operationCost = Number(item.operation_cost);\n      const grossProfit = Number(item.gross_profit);\n      const netProfit = Number(item.net_profit);\n\n      return {\n        id: item.id,\n        productId: item.product_id,\n        productName: {\n          zh: item.products?.nameZh || '',\n          en: item.products?.nameEn || '',\n          ru: item.products?.nameRu || ''\n        },\n        category: item.products?.category || '',\n        marketPrice: Number(item.products?.marketPrice || 0),\n        date: item.date.toISOString().split('T')[0],\n        revenue,\n        productCost,\n        platformFee,\n        operationCost,\n        grossProfit,\n        netProfit,\n        roi: Number(item.roi),\n        profitMargin: Number(item.profit_margin),\n        costRatio: Number(item.cost_ratio),\n        createdAt: item.createdAt.toISOString(),\n        updatedAt: item.updatedAt.toISOString()\n      };\n    });\n\n    // 计算汇总指标\n    const totalRevenue = Number(summary._sum.revenue || 0);\n    const totalProductCost = Number(summary._sum.product_cost || 0);\n    const totalPlatformFee = Number(summary._sum.platform_fee || 0);\n    const totalOperationCost = Number(summary._sum.operation_cost || 0);\n    const totalGrossProfit = Number(summary._sum.gross_profit || 0);\n    const totalNetProfit = Number(summary._sum.net_profit || 0);\n\n    const overallProfitMargin = totalRevenue > 0 ? (totalNetProfit / totalRevenue) * 100 : 0;\n    const overallCostRatio = totalRevenue > 0 ? ((totalProductCost + totalPlatformFee + totalOperationCost) / totalRevenue) * 100 : 0;\n    const overallROI = totalProductCost > 0 ? ((totalNetProfit - totalOperationCost) / totalProductCost) * 100 : 0;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        profit: formattedData,\n        pagination: {\n          currentPage: page,\n          totalPages: Math.ceil(totalCount / limit),\n          totalCount,\n          hasNext: page * limit < totalCount,\n          hasPrev: page > 1\n        },\n        summary: {\n          totalRevenue,\n          totalProductCost,\n          totalPlatformFee,\n          totalOperationCost,\n          totalGrossProfit,\n          totalNetProfit,\n          avgROI: Number(summary._avg.roi || 0),\n          avgProfitMargin: Number(summary._avg.profit_margin || 0),\n          avgCostRatio: Number(summary._avg.cost_ratio || 0)\n        },\n        overallMetrics: {\n          overallProfitMargin,\n          overallCostRatio,\n          overallROI\n        },\n        realTimeData: {\n          todayRevenue: Number(todayRevenue._sum.totalAmount || 0),\n          todayPlatformFees: Number(todayPlatformFees._sum.platformFee || 0),\n          date: todayStr\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('获取利润分析数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取利润分析数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 创建或更新利润分析数据\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const {\n      productId,\n      date,\n      revenue,\n      productCost,\n      platformFee,\n      operationCost\n    } = body;\n\n    // 验证必填字段\n    if (!productId || !date) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必填字段：productId, date'\n      }, { status: 400 });\n    }\n\n    // 检查商品是否存在\n    const product = await prisma.products.findUnique({\n      where: { id: productId }\n    });\n\n    if (!product) {\n      return NextResponse.json({\n        success: false,\n        error: '商品不存在'\n      }, { status: 404 });\n    }\n\n    // 计算利润指标\n    const revenue_amount = revenue || 0;\n    const product_cost = productCost || 0;\n    const platform_fee = platformFee || 0;\n    const operation_cost = operationCost || 0;\n\n    const grossProfit = revenue_amount - product_cost;\n    const netProfit = grossProfit - platform_fee - operation_cost;\n    const profitMargin = revenue_amount > 0 ? (netProfit / revenue_amount) * 100 : 0;\n    const costRatio = revenue_amount > 0 ? ((product_cost + platform_fee + operation_cost) / revenue_amount) * 100 : 0;\n    const roi = product_cost > 0 ? ((netProfit - operation_cost) / product_cost) * 100 : 0;\n\n    // 创建或更新数据\n    const profitData = await prisma.profitAnalysis.upsert({\n      where: {\n        product_id_date: {\n          product_id: productId,\n          date: new Date(date)\n        }\n      },\n      create: {\n        product_id: productId,\n        date: new Date(date),\n        revenue: revenue_amount,\n        product_cost: product_cost,\n        platform_fee: platform_fee,\n        operation_cost: operation_cost,\n        gross_profit: grossProfit,\n        net_profit: netProfit,\n        roi: roi,\n        profit_margin: profitMargin,\n        cost_ratio: costRatio\n      },\n      update: {\n        revenue: revenue_amount,\n        product_cost: product_cost,\n        platform_fee: platform_fee,\n        operation_cost: operation_cost,\n        gross_profit: grossProfit,\n        net_profit: netProfit,\n        roi: roi,\n        profit_margin: profitMargin,\n        cost_ratio: costRatio,\n        updated_at: new Date()\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        profitData: {\n          id: profitData.id,\n          productId: profitData.product_id,\n          date: profitData.date.toISOString().split('T')[0],\n          revenue: Number(profitData.revenue),\n          productCost: Number(profitData.product_cost),\n          platformFee: Number(profitData.platform_fee),\n          operationCost: Number(profitData.operation_cost),\n          grossProfit: Number(profitData.gross_profit),\n          netProfit: Number(profitData.net_profit),\n          roi: Number(profitData.roi),\n          profitMargin: Number(profitData.profit_margin),\n          costRatio: Number(profitData.cost_ratio)\n        },\n        message: '利润分析数据保存成功'\n      }\n    });\n    } catch (error: any) {\n      console.error('保存利润分析数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '保存利润分析数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// PUT - 批量更新利润数据\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const { updates } = body;\n\n    if (!updates || !Array.isArray(updates)) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少更新数据'\n      }, { status: 400 });\n    }\n\n    const results = [];\n\n    // 批量处理\n    for (const update of updates) {\n      try {\n        const {\n          productId,\n          date,\n          revenue,\n          productCost,\n          platformFee,\n          operationCost\n        } = update;\n\n        if (!productId || !date) {\n          results.push({\n            productId,\n            success: false,\n            error: '缺少必填字段'\n          });\n          continue;\n        }\n\n        // 检查商品是否存在\n        const product = await prisma.products.findUnique({\n          where: { id: productId }\n        });\n\n        if (!product) {\n          results.push({\n            productId,\n            success: false,\n            error: '商品不存在'\n          });\n          continue;\n        }\n\n        // 计算利润指标\n        const revenue_amount = revenue || 0;\n        const product_cost = productCost || 0;\n        const platform_fee = platformFee || 0;\n        const operation_cost = operationCost || 0;\n\n        const grossProfit = revenue_amount - product_cost;\n        const netProfit = grossProfit - platform_fee - operation_cost;\n        const profitMargin = revenue_amount > 0 ? (netProfit / revenue_amount) * 100 : 0;\n        const costRatio = revenue_amount > 0 ? ((product_cost + platform_fee + operation_cost) / revenue_amount) * 100 : 0;\n        const roi = product_cost > 0 ? ((netProfit - operation_cost) / product_cost) * 100 : 0;\n\n        // 更新数据\n        await prisma.profitAnalysis.upsert({\n          where: {\n            product_id_date: {\n              product_id: productId,\n              date: new Date(date)\n            }\n          },\n          create: {\n            product_id: productId,\n            date: new Date(date),\n            revenue: revenue_amount,\n            product_cost: product_cost,\n            platform_fee: platform_fee,\n            operation_cost: operation_cost,\n            gross_profit: grossProfit,\n            net_profit: netProfit,\n            roi: roi,\n            profit_margin: profitMargin,\n            cost_ratio: costRatio\n          },\n          update: {\n            revenue: revenue_amount,\n            product_cost: product_cost,\n            platform_fee: platform_fee,\n            operation_cost: operation_cost,\n            gross_profit: grossProfit,\n            net_profit: netProfit,\n            roi: roi,\n            profit_margin: profitMargin,\n            cost_ratio: costRatio,\n            updated_at: new Date()\n          }\n        });\n\n        results.push({\n          productId,\n          success: true,\n          message: '更新成功'\n        });\n      } catch (error: any) {\n        results.push({\n          productId: update.productId,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n\n    const successCount = results.filter(r => r.success).length;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        results,\n        summary: {\n          total: results.length,\n          success: successCount,\n          failed: results.length - successCount\n        },\n        message: `批量更新完成，成功 ${successCount} 条，失败 ${results.length - successCount} 条`\n      }\n    });\n    } catch (error: any) {\n      console.error('批量更新利润数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '批量更新利润数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/products/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'requireAdminPermission' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requireAdminPermission' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":24,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":24,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":32,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1118,1124],"text":"(status != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1118,1124],"text":"(status ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1118,1124],"text":"(Boolean(status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2128,2131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2128,2131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2141,2175],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 16. Maximum allowed is 10.","line":76,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":154,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":76,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":76,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2739,2745],"text":"(Boolean(nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2750,2756],"text":"(Boolean(nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":32,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2761,2767],"text":"(Boolean(nameRu))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":43,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2772,2783],"text":"(Boolean(marketPrice))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":59,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":70,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2788,2799],"text":"(Boolean(totalShares))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":109,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":109,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3066,3079],"text":"(Boolean(descriptionZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3080,3082],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":110,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":110,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3110,3123],"text":"(Boolean(descriptionEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":110,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":110,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3124,3126],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":111,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":111,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3154,3167],"text":"(Boolean(descriptionRu))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3168,3170],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":112,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":112,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3191,3197],"text":"(Boolean(images))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3198,3200],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":115,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":115,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3318,3331],"text":"(Boolean(pricePerShare))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":116,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":116,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3385,3393],"text":"(Boolean(category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":116,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":116,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3394,3396],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":117,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":117,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3418,3423],"text":"(Boolean(stock))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":129,"column":26,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":129,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3720,3733],"text":"(Boolean(pricePerShare))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3901,3962],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4162,4165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4162,4165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4175,4221],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 16. Maximum allowed is 10.","line":159,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":205,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":159,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":159,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":165,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":165,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4582,4591],"text":"(Boolean(productId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4740,4743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4740,4743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":174,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4758,4775],"text":"Boolean(updateData.nameZh)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":175,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":175,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4820,4837],"text":"Boolean(updateData.nameEn)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":176,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":176,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4882,4899],"text":"Boolean(updateData.nameRu)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":180,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":180,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5235,5252],"text":"Boolean(updateData.images)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":181,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":181,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5297,5319],"text":"Boolean(updateData.marketPrice)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":182,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":182,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5386,5408],"text":"Boolean(updateData.totalShares)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":183,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":183,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5473,5497],"text":"Boolean(updateData.pricePerShare)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":184,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":184,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5568,5587],"text":"Boolean(updateData.category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":186,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":186,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5719,5736],"text":"Boolean(updateData.status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5985,5988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5985,5988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5998,6044],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":210,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":210,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":216,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":216,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6429,6439],"text":"productId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6430,6439],"text":"(productId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6429,6439],"text":"!Boolean(productId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7066,7069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7066,7069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7079,7125],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":46,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { requireAdminPermission } from '@/lib/admin-auth-middleware';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.write()\n});\n\nconst withDeletePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.delete()\n});\n\n// GET - 获取所有商品\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n\n    // 获取所有商品\n    const products = await prisma.products.findMany({\n      where: status ? { status } : undefined,\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        products: products.map(p => ({\n          id: p.id,\n          nameZh: p.nameZh,\n          nameEn: p.nameEn,\n          nameRu: p.nameRu,\n          descriptionZh: p.descriptionZh,\n          descriptionEn: p.descriptionEn,\n          descriptionRu: p.descriptionRu,\n          images: p.images,\n          marketPrice: Number(p.marketPrice),\n          totalShares: p.totalShares,\n          pricePerShare: Number(p.pricePerShare),\n          category: p.category,\n          stock: p.stock,\n          status: p.status,\n          createdAt: p.createdAt.toISOString(),\n          updatedAt: p.updatedAt.toISOString()\n        })),\n        stats: {\n          total: products.length,\n          active: products.filter(p => p.status === 'active').length,\n          inactive: products.filter(p => p.status === 'inactive').length\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('获取商品列表失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取商品列表失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 创建商品\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const {\n      nameZh,\n      nameEn,\n      nameRu,\n      descriptionZh,\n      descriptionEn,\n      descriptionRu,\n      images,\n      marketPrice,\n      totalShares,\n      pricePerShare,\n      category,\n      stock\n    } = body;\n\n    // 验证必填字段\n    if (!nameZh || !nameEn || !nameRu || !marketPrice || !totalShares) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必填字段'\n      }, { status: 400 });\n    }\n\n    // 创建商品\n    const product = await prisma.products.create({\n      data: {\n        nameZh,\n        nameEn,\n        nameRu,\n        descriptionZh: descriptionZh || '',\n        descriptionEn: descriptionEn || '',\n        descriptionRu: descriptionRu || '',\n        images: images || [],\n        marketPrice: parseFloat(marketPrice),\n        totalShares: parseInt(totalShares),\n        pricePerShare: pricePerShare ? parseFloat(pricePerShare) : 1.0,\n        category: category || '默认',\n        stock: stock ? parseInt(stock) : 0,\n        status: 'active'\n      }\n    });\n\n    // 自动创建一个抽奖轮次（lottery_round）\n    try {\n      await prisma.lotteryRounds.create({\n        data: {\n          productId: product.id,\n          roundNumber: 1,\n          totalShares: parseInt(totalShares),\n          pricePerShare: pricePerShare ? parseFloat(pricePerShare) : 1.0,\n          soldShares: 0,\n          status: 'active',\n          participants: 0\n        }\n      });\n    } catch (roundError) {\n      console.error('Failed to create lottery round:', roundError);\n      // 即使创建轮次失败，商品也已创建成功，不影响返回\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        productId: product.id,\n        message: '商品创建成功'\n      }\n    });\n    } catch (error: any) {\n      console.error('Create product error:', error);\n      return NextResponse.json({\n        success: false,\n        error: '创建商品失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// PUT - 更新商品\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const { productId, ...updateData } = body;\n\n    if (!productId) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少商品ID'\n      }, { status: 400 });\n    }\n\n    // 构建更新数据\n    const data: any = {};\n    if (updateData.nameZh) {data.nameZh = updateData.nameZh;}\n    if (updateData.nameEn) {data.nameEn = updateData.nameEn;}\n    if (updateData.nameRu) {data.nameRu = updateData.nameRu;}\n    if (updateData.descriptionZh !== undefined) {data.descriptionZh = updateData.descriptionZh;}\n    if (updateData.descriptionEn !== undefined) {data.descriptionEn = updateData.descriptionEn;}\n    if (updateData.descriptionRu !== undefined) {data.descriptionRu = updateData.descriptionRu;}\n    if (updateData.images) {data.images = updateData.images;}\n    if (updateData.marketPrice) {data.marketPrice = parseFloat(updateData.marketPrice);}\n    if (updateData.totalShares) {data.totalShares = parseInt(updateData.totalShares);}\n    if (updateData.pricePerShare) {data.pricePerShare = parseFloat(updateData.pricePerShare);}\n    if (updateData.category) {data.category = updateData.category;}\n    if (updateData.stock !== undefined) {data.stock = parseInt(updateData.stock);}\n    if (updateData.status) {data.status = updateData.status;}\n\n    // 更新商品\n    await prisma.products.update({\n      where: { id: productId },\n      data\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: { message: '更新成功' }\n    });\n    } catch (error: any) {\n      console.error('Update product error:', error);\n      return NextResponse.json({\n        success: false,\n        error: '更新商品失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// DELETE - 删除商品\nexport async function DELETE(request: NextRequest) {\n  return withDeletePermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const productId = searchParams.get('productId');\n\n    if (!productId) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少商品ID'\n      }, { status: 400 });\n    }\n\n    // 检查商品是否有进行中的抽奖\n    const activeRounds = await prisma.lotteryRounds.findFirst({\n      where: {\n        productId,\n        status: 'active'\n      }\n    });\n\n    if (activeRounds) {\n      return NextResponse.json({\n        success: false,\n        error: '该商品有进行中的抽奖，无法删除'\n      }, { status: 400 });\n    }\n\n    // 删除商品\n    await prisma.products.delete({\n      where: { id: productId }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: { message: '删除成功' }\n    });\n    } catch (error: any) {\n      console.error('Delete product error:', error);\n      return NextResponse.json({\n        success: false,\n        error: '删除商品失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/products/trending/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":452,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.products.write()\n});\n\n// GET - 获取热销趋势数据\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const productId = searchParams.get('productId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const rankType = searchParams.get('rankType') || 'popularity'; // 'sales', 'popularity', 'search'\n\n    // 构建查询条件\n    const where: any = {};\n    if (productId) {\n      where.product_id = productId;\n    }\n    if (startDate && endDate) {\n      where.date = {\n        gte: new Date(startDate),\n        lte: new Date(endDate)\n      };\n    }\n\n    // 排序字段\n    let orderBy: any = { date: 'desc' };\n    switch (rankType) {\n      case 'sales':\n        orderBy = { sales_trend: 'desc' };\n        break;\n      case 'popularity':\n        orderBy = { popularity_score: 'desc' };\n        break;\n      case 'search':\n        orderBy = { search_volume: 'desc' };\n        break;\n    }\n\n    // 获取分页数据\n    const [trendingData, totalCount] = await Promise.all([\n      prisma.productTrending.findMany({\n        where,\n        orderBy,\n        skip: (page - 1) * limit,\n        take: limit,\n        include: {\n          products: {\n            select: {\n              nameZh: true,\n              nameEn: true,\n              nameRu: true,\n              category: true,\n              marketPrice: true,\n              status: true\n            }\n          }\n        }\n      }),\n      prisma.productTrending.count({ where })\n    ]);\n\n    // 统计汇总数据\n    const summary = await prisma.productTrending.aggregate({\n      where,\n      _sum: {\n        sales_trend: true,\n        search_volume: true,\n        social_mentions: true\n      },\n      _avg: {\n        popularity_score: true,\n        sales_trend: true,\n        rank_position: true\n      },\n      _max: {\n        popularity_score: true,\n        sales_trend: true\n      },\n      _min: {\n        popularity_score: true,\n        sales_trend: true\n      }\n    });\n\n    // 获取热销排行榜（今日数据）\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayStr = today.toISOString().split('T')[0];\n\n    const topProducts = await prisma.productTrending.findMany({\n      where: {\n        date: today\n      },\n      orderBy: { popularity_score: 'desc' },\n      take: 10,\n      include: {\n        products: {\n          select: {\n            nameZh: true,\n            nameEn: true,\n            nameRu: true,\n            category: true,\n            marketPrice: true\n          }\n        }\n      }\n    });\n\n    // 获取实时数据（从基础表计算今日数据）\n    const todayParticipations = await prisma.participations.count({\n      where: {\n        createdAt: {\n          gte: today\n        }\n      }\n    });\n\n    const todaySales = await prisma.orders.aggregate({\n      where: {\n        createdAt: {\n          gte: today\n        },\n        paymentStatus: 'completed'\n      },\n      _sum: {\n        totalAmount: true\n      },\n      _count: {\n        id: true\n      }\n    });\n\n    // 转换数据格式\n    const formattedData = trendingData.map(item => ({\n      id: item.id,\n      productId: item.product_id,\n      productName: {\n        zh: item.products?.nameZh || '',\n        en: item.products?.nameEn || '',\n        ru: item.products?.nameRu || ''\n      },\n      category: item.products?.category || '',\n      marketPrice: Number(item.products?.marketPrice || 0),\n      status: item.products?.status || 'active',\n      date: item.date.toISOString().split('T')[0],\n      rankPosition: Number(item.rank_position),\n      popularityScore: Number(item.popularity_score),\n      salesTrend: Number(item.sales_trend),\n      searchVolume: Number(item.search_volume),\n      socialMentions: Number(item.social_mentions),\n      competitorAnalysis: item.competitor_analysis,\n      marketPosition: item.market_position,\n      createdAt: item.createdAt.toISOString(),\n      updatedAt: item.updatedAt.toISOString()\n    }));\n\n    // 转换排行榜数据格式\n    const formattedTopProducts = topProducts.map(item => ({\n      id: item.id,\n      productId: item.product_id,\n      productName: {\n        zh: item.products?.nameZh || '',\n        en: item.products?.nameEn || '',\n        ru: item.products?.nameRu || ''\n      },\n      category: item.products?.category || '',\n      marketPrice: Number(item.products?.marketPrice || 0),\n      rankPosition: Number(item.rank_position),\n      popularityScore: Number(item.popularity_score),\n      salesTrend: Number(item.sales_trend)\n    }));\n\n    // 计算趋势分析\n    const trendAnalysis = {\n      avgPopularityScore: Number(summary._avg.popularity_score || 0),\n      maxPopularityScore: Number(summary._max.popularity_score || 0),\n      minPopularityScore: Number(summary._min.popularity_score || 0),\n      avgSalesTrend: Number(summary._avg.sales_trend || 0),\n      maxSalesTrend: Number(summary._max.sales_trend || 0),\n      minSalesTrend: Number(summary._min.sales_trend || 0),\n      totalSearchVolume: Number(summary._sum.search_volume || 0),\n      totalSocialMentions: Number(summary._sum.social_mentions || 0),\n      avgRankPosition: Number(summary._avg.rank_position || 0)\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        trending: formattedData,\n        pagination: {\n          currentPage: page,\n          totalPages: Math.ceil(totalCount / limit),\n          totalCount,\n          hasNext: page * limit < totalCount,\n          hasPrev: page > 1\n        },\n        topProducts: formattedTopProducts,\n        summary: {\n          totalSearchVolume: trendAnalysis.totalSearchVolume,\n          totalSocialMentions: trendAnalysis.totalSocialMentions,\n          avgRankPosition: trendAnalysis.avgRankPosition\n        },\n        trendAnalysis,\n        realTimeData: {\n          todayParticipations,\n          todaySalesAmount: Number(todaySales._sum.totalAmount || 0),\n          todaySalesCount: Number(todaySales._count.id || 0),\n          date: todayStr\n        }\n      }\n    });\n    } catch (error: any) {\n      console.error('获取热销趋势数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '获取热销趋势数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 创建或更新热销趋势数据\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const {\n      productId,\n      date,\n      rankPosition,\n      popularityScore,\n      salesTrend,\n      searchVolume,\n      socialMentions,\n      competitorAnalysis,\n      marketPosition\n    } = body;\n\n    // 验证必填字段\n    if (!productId || !date) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必填字段：productId, date'\n      }, { status: 400 });\n    }\n\n    // 检查商品是否存在\n    const product = await prisma.products.findUnique({\n      where: { id: productId }\n    });\n\n    if (!product) {\n      return NextResponse.json({\n        success: false,\n        error: '商品不存在'\n      }, { status: 404 });\n    }\n\n    // 创建或更新数据\n    const trendingData = await prisma.productTrending.upsert({\n      where: {\n        product_id_date: {\n          product_id: productId,\n          date: new Date(date)\n        }\n      },\n      create: {\n        product_id: productId,\n        date: new Date(date),\n        rank_position: rankPosition || 0,\n        popularity_score: popularityScore || 0,\n        sales_trend: salesTrend || 0,\n        search_volume: searchVolume || 0,\n        social_mentions: socialMentions || 0,\n        competitor_analysis: competitorAnalysis || {},\n        market_position: marketPosition || 'normal'\n      },\n      update: {\n        rank_position: rankPosition || 0,\n        popularity_score: popularityScore || 0,\n        sales_trend: salesTrend || 0,\n        search_volume: searchVolume || 0,\n        social_mentions: socialMentions || 0,\n        competitor_analysis: competitorAnalysis || {},\n        market_position: marketPosition || 'normal',\n        updated_at: new Date()\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        trendingData: {\n          id: trendingData.id,\n          productId: trendingData.product_id,\n          date: trendingData.date.toISOString().split('T')[0],\n          rankPosition: Number(trendingData.rank_position),\n          popularityScore: Number(trendingData.popularity_score),\n          salesTrend: Number(trendingData.sales_trend),\n          searchVolume: Number(trendingData.search_volume),\n          socialMentions: Number(trendingData.social_mentions),\n          competitorAnalysis: trendingData.competitor_analysis,\n          marketPosition: trendingData.market_position\n        },\n        message: '热销趋势数据保存成功'\n      }\n    });\n    } catch (error: any) {\n      console.error('保存热销趋势数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '保存热销趋势数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// PUT - 批量更新排行榜数据\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const { date, rankings } = body;\n\n    if (!date || !rankings || !Array.isArray(rankings)) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必要数据：date, rankings'\n      }, { status: 400 });\n    }\n\n    const results = [];\n    const targetDate = new Date(date);\n\n    // 批量处理排行榜更新\n    for (let i = 0; i < rankings.length; i++) {\n      const ranking = rankings[i];\n      try {\n        const { productId, popularityScore, salesTrend, searchVolume } = ranking;\n\n        if (!productId) {\n          results.push({\n            position: i + 1,\n            success: false,\n            error: '缺少商品ID'\n          });\n          continue;\n        }\n\n        // 检查商品是否存在\n        const product = await prisma.products.findUnique({\n          where: { id: productId }\n        });\n\n        if (!product) {\n          results.push({\n            position: i + 1,\n            productId,\n            success: false,\n            error: '商品不存在'\n          });\n          continue;\n        }\n\n        // 更新或创建趋势数据\n        await prisma.productTrending.upsert({\n          where: {\n            product_id_date: {\n              product_id: productId,\n              date: targetDate\n            }\n          },\n          create: {\n            product_id: productId,\n            date: targetDate,\n            rank_position: i + 1,\n            popularity_score: popularityScore || 0,\n            sales_trend: salesTrend || 0,\n            search_volume: searchVolume || 0,\n            social_mentions: 0,\n            competitor_analysis: {},\n            market_position: 'normal'\n          },\n          update: {\n            rank_position: i + 1,\n            popularity_score: popularityScore || 0,\n            sales_trend: salesTrend || 0,\n            search_volume: searchVolume || 0,\n            updated_at: new Date()\n          }\n        });\n\n        results.push({\n          position: i + 1,\n          productId,\n          success: true,\n          message: '更新成功'\n        });\n      } catch (error: any) {\n        results.push({\n          position: i + 1,\n          productId: ranking.productId,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n\n    const successCount = results.filter(r => r.success).length;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        results,\n        summary: {\n          total: results.length,\n          success: successCount,\n          failed: results.length - successCount\n        },\n        date,\n        message: `排行榜更新完成，成功 ${successCount} 条，失败 ${results.length - successCount} 条`\n      }\n    });\n    } catch (error: any) {\n      console.error('批量更新排行榜数据失败:', error);\n      return NextResponse.json({\n        success: false,\n        error: '批量更新排行榜数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/rate-limit/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'initializeRateLimitConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'initializeRateLimitConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":60},{"ruleId":"no-unused-vars","severity":2,"message":"'DEFAULT_ALERT_RULES' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DEFAULT_ALERT_RULES' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'logger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":19,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":19,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1059,1089],"text":"(url.searchParams.get('action') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1059,1089],"text":"(url.searchParams.get('action') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1059,1089],"text":"(Boolean(url.searchParams.get('action')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":19,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":19,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1090,1092],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":87,"column":25,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":87,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2836,2871],"text":"(url.searchParams.get('environment') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2836,2871],"text":"(url.searchParams.get('environment') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2836,2871],"text":"(Boolean(url.searchParams.get('environment')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":87,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":87,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2872,2874],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":215,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":215,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'logger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":216,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":216,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":252,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6924,6927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6924,6927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":255,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":255,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7013,7028],"text":"(Boolean(endpointPattern))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":255,"column":28,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":255,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7033,7039],"text":"(Boolean(config))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":261,"column":3,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":268,"endColumn":4,"fix":{"range":[7219,7400],"text":"return success ? NextResponse.json({\n      success: true,\n      message: '配置更新成功'\n    }) : NextResponse.json({ error: '配置更新失败' }, { status: 500 });"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7454,7457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7454,7457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":275,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":275,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7545,7560],"text":"(Boolean(endpointPattern))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":281,"column":3,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":288,"endColumn":4,"fix":{"range":[7775,7976],"text":"return success ? NextResponse.json({\n      success: true,\n      message: `配置已${isActive ? '启用' : '禁用'}`\n    }) : NextResponse.json({ error: '操作失败' }, { status: 500 });"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8028,8031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8028,8031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":295,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":295,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8109,8124],"text":"(Boolean(endpointPattern))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":301,"column":3,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":308,"endColumn":4,"fix":{"range":[8296,8477],"text":"return success ? NextResponse.json({\n      success: true,\n      message: '配置删除成功'\n    }) : NextResponse.json({ error: '配置删除失败' }, { status: 500 });"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":343,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9069,9072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9069,9072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":346,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":346,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9130,9137],"text":"(Boolean(alertId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":346,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":346,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9142,9156],"text":"(Boolean(acknowledgedBy))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9425,9428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9425,9428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":362,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":362,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9467,9471],"text":"(Boolean(rule))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { rateLimitConfigManager, initializeRateLimitConfigs } from '@/lib/rate-limit-config';\nimport { rateLimitMonitor, DEFAULT_ALERT_RULES } from '@/lib/rate-limit-monitor';\nimport { getRateLimitStats, resetRateLimitStats, cleanupRateLimits } from '@/lib/rate-limit-middleware';\nimport { getSystemConfiguration, getRateLimitSystemStatus, restartRateLimitSystem } from '@/lib/rate-limit-system';\nimport { getLogger } from '@/lib/logger';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.SETTINGS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.SETTINGS_WRITE);\n\n// 获取系统概览\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n\n    const url = new URL(request.url);\n    const action = url.searchParams.get('action') || 'overview';\n\n    switch (action) {\n      case 'overview':\n        return handleSystemOverview();\n      \n      case 'config':\n        return handleConfigList(request);\n      \n      case 'stats':\n        return handleStats();\n      \n      case 'alerts':\n        return handleAlerts();\n      \n      case 'monitoring':\n        return handleMonitoring();\n      \n      case 'health':\n        return handleHealthCheck();\n      \n      default:\n        return NextResponse.json({ error: '未知操作' }, { status: 400 });\n    }\n  })(request);\n}\n\n// 系统概览\nasync function handleSystemOverview() {\n  const logger = getLogger();\n  \n  try {\n    const systemConfig = getSystemConfiguration();\n    const systemStatus = getRateLimitSystemStatus();\n    const monitoringStatus = rateLimitMonitor.getMonitoringStatus();\n    const componentAvailability = {\n      redis: systemConfig.redis.connected,\n      config: systemStatus.components.config,\n      monitor: systemStatus.components.monitor,\n      cleanup: systemStatus.components.cleanup\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        system: {\n          ...systemConfig,\n          uptime: Date.now() - systemStatus.initializedAt.getTime(),\n          status: systemStatus.isInitialized ? 'healthy' : 'degraded'\n        },\n        components: componentAvailability,\n        monitoring: monitoringStatus,\n        cache: rateLimitConfigManager.getCacheStats()\n      }\n    });\n\n  } catch (error) {\n    logger.error('获取系统概览失败', error as Error);\n    return NextResponse.json({ error: '获取系统概览失败' }, { status: 500 });\n  }\n}\n\n// 配置列表\nasync function handleConfigList(request: NextRequest) {\n  const logger = getLogger();\n  \n  try {\n    const url = new URL(request.url);\n    const environment = url.searchParams.get('environment') || 'production';\n    \n    const configs = await rateLimitConfigManager.getAllConfigs(environment);\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        configs,\n        environment,\n        total: configs.length\n      }\n    });\n\n  } catch (error) {\n    logger.error('获取配置列表失败', error as Error);\n    return NextResponse.json({ error: '获取配置列表失败' }, { status: 500 });\n  }\n}\n\n// 统计信息\nasync function handleStats() {\n  const logger = getLogger();\n  \n  try {\n    const rateLimitStats = getRateLimitStats();\n    const monitoringStatus = rateLimitMonitor.getMonitoringStatus();\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        rateLimits: rateLimitStats,\n        monitoring: monitoringStatus\n      }\n    });\n\n  } catch (error) {\n    logger.error('获取统计信息失败', error as Error);\n    return NextResponse.json({ error: '获取统计信息失败' }, { status: 500 });\n  }\n}\n\n// 告警信息\nasync function handleAlerts() {\n  const logger = getLogger();\n  \n  try {\n    const alertEvents = rateLimitMonitor.getAlertEvents(50);\n    const activeAlerts = alertEvents.filter(alert => alert.status === 'active');\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        alerts: alertEvents,\n        activeCount: activeAlerts.length,\n        totalCount: alertEvents.length\n      }\n    });\n\n  } catch (error) {\n    logger.error('获取告警信息失败', error as Error);\n    return NextResponse.json({ error: '获取告警信息失败' }, { status: 500 });\n  }\n}\n\n// 监控状态\nasync function handleMonitoring() {\n  const logger = getLogger();\n  \n  try {\n    const status = rateLimitMonitor.getMonitoringStatus();\n    const recentAlerts = rateLimitMonitor.getAlertEvents(10);\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        status,\n        recentAlerts,\n        isCollecting: status.isActive\n      }\n    });\n\n  } catch (error) {\n    logger.error('获取监控状态失败', error as Error);\n    return NextResponse.json({ error: '获取监控状态失败' }, { status: 500 });\n  }\n}\n\n// 健康检查\nasync function handleHealthCheck() {\n  const logger = getLogger();\n  \n  try {\n    const status = getRateLimitSystemStatus();\n    const componentAvailability = {\n      redis: status.components.redis,\n      config: status.components.config,\n      monitor: status.components.monitor,\n      cleanup: status.components.cleanup\n    };\n    \n    const healthyComponents = Object.values(componentAvailability).filter(Boolean).length;\n    const totalComponents = Object.keys(componentAvailability).length;\n    const healthScore = (healthyComponents / totalComponents) * 100;\n    \n    const isHealthy = healthScore >= 75; // 至少75%的组件正常\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        status: isHealthy ? 'healthy' : 'degraded',\n        healthScore,\n        components: componentAvailability,\n        issues: status.errors,\n        uptime: Date.now() - status.initializedAt.getTime()\n      }\n    });\n\n  } catch (error) {\n    logger.error('健康检查失败', error as Error);\n    return NextResponse.json({ \n      status: 'error',\n      error: '健康检查失败'\n    }, { status: 500 });\n  }\n}\n\n// 更新配置\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n    const body = await request.json();\n    const { action } = body;\n\n    switch (action) {\n      case 'update_config':\n        return handleUpdateConfig(body);\n      \n      case 'toggle_config':\n        return handleToggleConfig(body);\n      \n      case 'delete_config':\n        return handleDeleteConfig(body);\n      \n      case 'reset_stats':\n        return handleResetStats();\n      \n      case 'cleanup':\n        return handleCleanup();\n      \n      case 'restart':\n        return handleRestart();\n      \n      case 'acknowledge_alert':\n        return handleAcknowledgeAlert(body);\n      \n      case 'add_alert_rule':\n        return handleAddAlertRule(body);\n      \n      default:\n        return NextResponse.json({ error: '未知操作' }, { status: 400 });\n    }\n  })(request);\n}\n\n// 更新配置\nasync function handleUpdateConfig(data: any) {\n  const { endpointPattern, config, environment = 'production' } = data;\n  \n  if (!endpointPattern || !config) {\n    return NextResponse.json({ error: '参数不完整' }, { status: 400 });\n  }\n\n  const success = await rateLimitConfigManager.updateConfig(endpointPattern, config, environment);\n  \n  if (success) {\n    return NextResponse.json({\n      success: true,\n      message: '配置更新成功'\n    });\n  } else {\n    return NextResponse.json({ error: '配置更新失败' }, { status: 500 });\n  }\n}\n\n// 切换配置状态\nasync function handleToggleConfig(data: any) {\n  const { endpointPattern, isActive, environment = 'production' } = data;\n  \n  if (!endpointPattern || typeof isActive !== 'boolean') {\n    return NextResponse.json({ error: '参数不完整' }, { status: 400 });\n  }\n\n  const success = await rateLimitConfigManager.toggleConfig(endpointPattern, isActive, environment);\n  \n  if (success) {\n    return NextResponse.json({\n      success: true,\n      message: `配置已${isActive ? '启用' : '禁用'}`\n    });\n  } else {\n    return NextResponse.json({ error: '操作失败' }, { status: 500 });\n  }\n}\n\n// 删除配置\nasync function handleDeleteConfig(data: any) {\n  const { endpointPattern, environment = 'production' } = data;\n  \n  if (!endpointPattern) {\n    return NextResponse.json({ error: '参数不完整' }, { status: 400 });\n  }\n\n  const success = await rateLimitConfigManager.deleteConfig(endpointPattern, environment);\n  \n  if (success) {\n    return NextResponse.json({\n      success: true,\n      message: '配置删除成功'\n    });\n  } else {\n    return NextResponse.json({ error: '配置删除失败' }, { status: 500 });\n  }\n}\n\n// 重置统计\nasync function handleResetStats() {\n  resetRateLimitStats();\n  \n  return NextResponse.json({\n    success: true,\n    message: '统计信息已重置'\n  });\n}\n\n// 清理数据\nasync function handleCleanup() {\n  await cleanupRateLimits();\n  \n  return NextResponse.json({\n    success: true,\n    message: '清理完成'\n  });\n}\n\n// 重启系统\nasync function handleRestart() {\n  const status = await restartRateLimitSystem();\n  \n  return NextResponse.json({\n    success: status.isInitialized,\n    message: status.isInitialized ? '系统重启成功' : '系统重启失败',\n    status\n  });\n}\n\n// 确认告警\nasync function handleAcknowledgeAlert(data: any) {\n  const { alertId, acknowledgedBy } = data;\n  \n  if (!alertId || !acknowledgedBy) {\n    return NextResponse.json({ error: '参数不完整' }, { status: 400 });\n  }\n\n  rateLimitMonitor.acknowledgeAlert(alertId, acknowledgedBy);\n  \n  return NextResponse.json({\n    success: true,\n    message: '告警已确认'\n  });\n}\n\n// 添加告警规则\nasync function handleAddAlertRule(data: any) {\n  const { rule } = data;\n  \n  if (!rule) {\n    return NextResponse.json({ error: '参数不完整' }, { status: 400 });\n  }\n\n  rateLimitMonitor.addAlertRule(rule);\n  \n  return NextResponse.json({\n    success: true,\n    message: '告警规则添加成功'\n  });\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/risk-events/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":51,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":105,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":51,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":51,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":54,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":54,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1394,1418],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1394,1418],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1394,1418],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":54,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":54,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1419,1421],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":55,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":55,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1455,1480],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1455,1480],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1455,1480],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1481,1483],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":64,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":64,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1754,1763],"text":"(riskLevel != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1754,1763],"text":"(riskLevel ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1754,1763],"text":"(Boolean(riskLevel))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":68,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":68,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1891,1897],"text":"(status != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1891,1897],"text":"(status ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1891,1897],"text":"(Boolean(status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":72,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2016,2025],"text":"(eventType != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2016,2025],"text":"(eventType ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2016,2025],"text":"(Boolean(eventType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":76,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2153,2159],"text":"search != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2153,2159],"text":"search ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2153,2159],"text":"Boolean(search)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2801,2835],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":109,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":109,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":114,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":114,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3200,3206],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":114,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":114,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3211,3220],"text":"(Boolean(eventType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":114,"column":35,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":114,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3225,3236],"text":"(Boolean(description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3834,3868],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n// 模拟风险事件数据\nconst mockRiskEvents = [\n  {\n    id: 'RE001',\n    userId: 'U1001',\n    userName: '张三',\n    eventType: '异常登录',\n    riskLevel: 'high',\n    status: 'pending',\n    description: '用户从非常用设备登录，IP地址异常',\n    timestamp: '2025-10-31T15:30:00Z',\n    riskScore: 85\n  },\n  {\n    id: 'RE002',\n    userId: 'U1002',\n    userName: '李四',\n    eventType: '大额交易',\n    riskLevel: 'medium',\n    status: 'approved',\n    description: '单笔交易金额超过用户历史平均值的3倍',\n    timestamp: '2025-10-31T14:15:00Z',\n    riskScore: 72\n  },\n  {\n    id: 'RE003',\n    userId: 'U1003',\n    userName: '王五',\n    eventType: '频繁操作',\n    riskLevel: 'critical',\n    status: 'manual_review',\n    description: '短时间内进行大量账户操作，疑似机器人行为',\n    timestamp: '2025-10-31T13:45:00Z',\n    riskScore: 95\n  }\n];\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const riskLevel = searchParams.get('riskLevel');\n    const status = searchParams.get('status');\n    const eventType = searchParams.get('eventType');\n    const search = searchParams.get('search');\n\n    // 筛选数据\n    let filteredEvents = mockRiskEvents;\n\n    if (riskLevel && riskLevel !== 'all') {\n      filteredEvents = filteredEvents.filter(event => event.riskLevel === riskLevel);\n    }\n\n    if (status && status !== 'all') {\n      filteredEvents = filteredEvents.filter(event => event.status === status);\n    }\n\n    if (eventType && eventType !== 'all') {\n      filteredEvents = filteredEvents.filter(event => event.eventType === eventType);\n    }\n\n    if (search) {\n      filteredEvents = filteredEvents.filter(event => \n        event.userName.toLowerCase().includes(search.toLowerCase()) ||\n        event.id.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n\n    // 分页\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedEvents = filteredEvents.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        events: paginatedEvents,\n        total: filteredEvents.length,\n        page,\n        limit,\n        totalPages: Math.ceil(filteredEvents.length / limit)\n      }\n    });\n  } catch (error) {\n    console.error('获取风险事件失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取数据失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const { userId, eventType, riskLevel, description, riskScore } = body;\n\n    if (!userId || !eventType || !description || riskScore === undefined) {\n      return NextResponse.json(\n        { success: false, error: '缺少必需参数' },\n        { status: 400 }\n      );\n    }\n\n    const newEvent = {\n      id: `RE${String(mockRiskEvents.length + 1).padStart(3, '0')}`,\n      userId,\n      userName: `用户${userId}`,\n      eventType,\n      riskLevel,\n      status: 'pending',\n      description,\n      timestamp: new Date().toISOString(),\n      riskScore\n    };\n\n    mockRiskEvents.push(newEvent);\n\n    return NextResponse.json({\n      success: true,\n      data: newEvent,\n      message: '风险事件创建成功'\n    });\n  } catch (error) {\n    console.error('创建风险事件失败:', error);\n    return NextResponse.json(\n      { success: false, error: '创建失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/risk-rules/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":66,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":66,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1767,1791],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1767,1791],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1767,1791],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1792,1794],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":67,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":67,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1828,1853],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1828,1853],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1828,1853],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1854,1856],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":75,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":75,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2074,2082],"text":"(category != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2074,2082],"text":"(category ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2074,2082],"text":"(Boolean(category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":84,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":84,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2383,2389],"text":"search != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2383,2389],"text":"search ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2383,2389],"text":"Boolean(search)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3025,3059],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":122,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3449,3453],"text":"(Boolean(name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":122,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3458,3469],"text":"(Boolean(description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":35,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":122,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3474,3482],"text":"(Boolean(riskType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":48,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":122,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3487,3496],"text":"(Boolean(condition))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":134,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":134,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3823,3831],"text":"(Boolean(category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":134,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":134,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3832,3834],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":138,"column":15,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":138,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3908,3914],"text":"(Boolean(action))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":138,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":138,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3915,3917],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4229,4263],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":164,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":164,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":164,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":169,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":169,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4590,4596],"text":"(Boolean(ruleId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":169,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":169,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4601,4608],"text":"(Boolean(updates))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":185,"column":10,"nodeType":"MemberExpression","endLine":185,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":190,"column":5,"nodeType":"MemberExpression","endLine":190,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5260,5294],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":208,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":208,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":208,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":213,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":213,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5642,5649],"text":"ruleId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5643,5649],"text":"(ruleId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5642,5649],"text":"!Boolean(ruleId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6140,6174],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read // 风控规则暂用stats:read\n]);\n\n// 模拟风控规则数据\nconst mockRiskRules = [\n  {\n    id: 'RR001',\n    name: '异常登录检测',\n    description: '检测用户从异常地理位置或设备登录',\n    category: 'login',\n    riskType: '异常登录',\n    condition: 'IP地址不在常用范围内 或 设备指纹不匹配',\n    threshold: 70,\n    action: 'alert',\n    isActive: true,\n    createdAt: '2025-10-01T10:00:00Z',\n    lastModified: '2025-10-30T14:30:00Z',\n    executionCount: 156,\n    successRate: 92.5\n  },\n  {\n    id: 'RR002',\n    name: '大额交易监控',\n    description: '监控单笔交易金额异常的行为',\n    category: 'transaction',\n    riskType: '大额交易',\n    condition: '单笔交易金额 > 用户历史平均值的3倍',\n    threshold: 80,\n    action: 'review',\n    isActive: true,\n    createdAt: '2025-10-02T09:00:00Z',\n    lastModified: '2025-10-29T16:20:00Z',\n    executionCount: 89,\n    successRate: 87.2\n  },\n  {\n    id: 'RR003',\n    name: '频繁操作检测',\n    description: '检测用户在短时间内进行大量操作',\n    category: 'behavior',\n    riskType: '频繁操作',\n    condition: '5分钟内操作次数 > 20次',\n    threshold: 85,\n    action: 'block',\n    isActive: true,\n    createdAt: '2025-10-03T11:30:00Z',\n    lastModified: '2025-10-28T10:15:00Z',\n    executionCount: 234,\n    successRate: 95.8\n  }\n];\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const category = searchParams.get('category');\n    const isActive = searchParams.get('isActive');\n    const search = searchParams.get('search');\n\n    // 筛选数据\n    let filteredRules = mockRiskRules;\n\n    if (category && category !== 'all') {\n      filteredRules = filteredRules.filter(rule => rule.category === category);\n    }\n\n    if (isActive !== null && isActive !== 'all') {\n      const active = isActive === 'active';\n      filteredRules = filteredRules.filter(rule => rule.isActive === active);\n    }\n\n    if (search) {\n      filteredRules = filteredRules.filter(rule => \n        rule.name.toLowerCase().includes(search.toLowerCase()) ||\n        rule.description.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n\n    // 分页\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedRules = filteredRules.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        rules: paginatedRules,\n        total: filteredRules.length,\n        page,\n        limit,\n        totalPages: Math.ceil(filteredRules.length / limit)\n      }\n    });\n  } catch (error) {\n    console.error('获取风控规则失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取数据失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const { name, description, category, riskType, condition, threshold, action, isActive } = body;\n\n    if (!name || !description || !riskType || !condition || threshold === undefined) {\n      return NextResponse.json(\n        { success: false, error: '缺少必需参数' },\n        { status: 400 }\n      );\n    }\n\n    const now = new Date().toISOString();\n    const newRule = {\n      id: `RR${String(mockRiskRules.length + 1).padStart(3, '0')}`,\n      name,\n      description,\n      category: category || 'login',\n      riskType,\n      condition,\n      threshold,\n      action: action || 'alert',\n      isActive: isActive !== false,\n      createdAt: now,\n      lastModified: now,\n      executionCount: 0,\n      successRate: 0\n    };\n\n    mockRiskRules.push(newRule);\n\n    return NextResponse.json({\n      success: true,\n      data: newRule,\n      message: '风控规则创建成功'\n    });\n  } catch (error) {\n    console.error('创建风控规则失败:', error);\n    return NextResponse.json(\n      { success: false, error: '创建失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\nexport async function PATCH(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const { ruleId, updates } = body;\n\n    if (!ruleId || !updates) {\n      return NextResponse.json(\n        { success: false, error: '缺少必需参数' },\n        { status: 400 }\n      );\n    }\n\n    const ruleIndex = mockRiskRules.findIndex(rule => rule.id === ruleId);\n    if (ruleIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: '规则不存在' },\n        { status: 404 }\n      );\n    }\n\n    const updatedRule = {\n      ...mockRiskRules[ruleIndex],\n      ...updates,\n      lastModified: new Date().toISOString()\n    };\n\n    mockRiskRules[ruleIndex] = updatedRule;\n\n    return NextResponse.json({\n      success: true,\n      data: updatedRule,\n      message: '风控规则更新成功'\n    });\n  } catch (error) {\n    console.error('更新风控规则失败:', error);\n    return NextResponse.json(\n      { success: false, error: '更新失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\nexport async function DELETE(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const ruleId = searchParams.get('ruleId');\n\n    if (!ruleId) {\n      return NextResponse.json(\n        { success: false, error: '缺少规则ID' },\n        { status: 400 }\n      );\n    }\n\n    const ruleIndex = mockRiskRules.findIndex(rule => rule.id === ruleId);\n    if (ruleIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: '规则不存在' },\n        { status: 404 }\n      );\n    }\n\n    mockRiskRules.splice(ruleIndex, 1);\n\n    return NextResponse.json({\n      success: true,\n      message: '风控规则删除成功'\n    });\n  } catch (error) {\n    console.error('删除风控规则失败:', error);\n    return NextResponse.json(\n      { success: false, error: '删除失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/risk-stats/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":76,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":76,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":79,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":79,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2399,2425],"text":"(searchParams.get('period') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2399,2425],"text":"(searchParams.get('period') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2399,2425],"text":"(Boolean(searchParams.get('period')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2426,2428],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refresh' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":80,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'refresh' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":80,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3237,3273],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":122,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3628,3634],"text":"(Boolean(metric))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":134,"column":45,"nodeType":"MemberExpression","endLine":134,"endColumn":64},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":135,"column":11,"nodeType":"MemberExpression","endLine":135,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3974,3977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3974,3977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":139,"column":45,"nodeType":"MemberExpression","endLine":139,"endColumn":64},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":140,"column":11,"nodeType":"MemberExpression","endLine":140,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4141,4144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4141,4144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4354,4388],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withStatsPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n// 模拟风控统计数据\nconst mockDashboardData = {\n  todayRiskEvents: 23,\n  riskEventsTrend: [15, 12, 18, 25, 20, 22, 28],\n  riskLevelDistribution: [\n    { label: '低风险', value: 45, color: '#10B981' },\n    { label: '中风险', value: 30, color: '#F59E0B' },\n    { label: '高风险', value: 20, color: '#EF4444' },\n    { label: '严重风险', value: 5, color: '#7C2D12' }\n  ],\n  rulesExecuted: 156,\n  autoProcessingSuccess: 89.5,\n  totalRules: 24,\n  activeRules: 18,\n  // 新增统计数据\n  highRiskUsers: 12,\n  frozenAccounts: 3,\n  limitedAccounts: 7,\n  averageRiskScore: 67,\n  userStats: {\n    totalUsers: 1250,\n    activeUsers: 987,\n    newUsersToday: 15\n  },\n  transactionStats: {\n    totalTransactions: 3456,\n    flaggedTransactions: 89,\n    blockedTransactions: 12\n  },\n  // 时间序列数据\n  hourlyRiskEvents: [\n    { hour: '00:00', count: 2 },\n    { hour: '01:00', count: 1 },\n    { hour: '02:00', count: 0 },\n    { hour: '03:00', count: 1 },\n    { hour: '04:00', count: 3 },\n    { hour: '05:00', count: 2 },\n    { hour: '06:00', count: 4 },\n    { hour: '07:00', count: 6 },\n    { hour: '08:00', count: 8 },\n    { hour: '09:00', count: 12 },\n    { hour: '10:00', count: 15 },\n    { hour: '11:00', count: 18 },\n    { hour: '12:00', count: 22 },\n    { hour: '13:00', count: 25 },\n    { hour: '14:00', count: 20 },\n    { hour: '15:00', count: 23 },\n    { hour: '16:00', count: 19 },\n    { hour: '17:00', count: 16 },\n    { hour: '18:00', count: 14 },\n    { hour: '19:00', count: 11 },\n    { hour: '20:00', count: 9 },\n    { hour: '21:00', count: 7 },\n    { hour: '22:00', count: 5 },\n    { hour: '23:00', count: 3 }\n  ],\n  // 风险类型分布\n  riskTypeDistribution: [\n    { type: '异常登录', count: 45, percentage: 35.2 },\n    { type: '大额交易', count: 32, percentage: 25.0 },\n    { type: '频繁操作', count: 28, percentage: 21.9 },\n    { type: '设备异常', count: 15, percentage: 11.7 },\n    { type: 'IP异常', count: 8, percentage: 6.2 }\n  ]\n};\n\nexport async function GET(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const period = searchParams.get('period') || 'today'; // today, week, month\n    const refresh = searchParams.get('refresh') === 'true';\n\n    // 在实际应用中，这里会根据 period 参数获取不同时间段的数据\n    // refresh 参数用于强制刷新缓存\n    \n    // 模拟数据加载延迟\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        ...mockDashboardData,\n        period,\n        timestamp: new Date().toISOString(),\n        // 根据时间段调整数据\n        ...(period === 'week' && {\n          todayRiskEvents: mockDashboardData.todayRiskEvents * 7,\n          rulesExecuted: mockDashboardData.rulesExecuted * 7\n        }),\n        ...(period === 'month' && {\n          todayRiskEvents: mockDashboardData.todayRiskEvents * 30,\n          rulesExecuted: mockDashboardData.rulesExecuted * 30\n        })\n      }\n    });\n  } catch (error) {\n    console.error('获取风控统计数据失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取数据失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\n// 获取实时统计数据（用于WebSocket或轮询）\nexport async function POST(request: NextRequest) {\n  return withStatsPermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const { metric, action } = body;\n\n    if (!metric) {\n      return NextResponse.json(\n        { success: false, error: '缺少指标参数' },\n        { status: 400 }\n      );\n    }\n\n    // 模拟实时数据更新\n    const updatedData = { ...mockDashboardData };\n\n    switch (action) {\n      case 'increment':\n        if (metric in updatedData && typeof updatedData[metric] === 'number') {\n          (updatedData as any)[metric]++;\n        }\n        break;\n      case 'reset':\n        if (metric in updatedData && typeof updatedData[metric] === 'number') {\n          (updatedData as any)[metric] = 0;\n        }\n        break;\n      default:\n        break;\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: updatedData,\n      message: '数据更新成功'\n    });\n  } catch (error) {\n    console.error('更新统计数据失败:', error);\n    return NextResponse.json(\n      { success: false, error: '更新失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/risk-users/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":68,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":68,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":71,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":71,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2165,2189],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2165,2189],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2165,2189],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2190,2192],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":72,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2226,2251],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2226,2251],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2226,2251],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2252,2254],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":80,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":80,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2484,2493],"text":"(riskLevel != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2484,2493],"text":"(riskLevel ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2484,2493],"text":"(Boolean(riskLevel))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":84,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":84,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2617,2630],"text":"(accountStatus != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2617,2630],"text":"(accountStatus ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2617,2630],"text":"(Boolean(accountStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":88,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":88,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2766,2772],"text":"search != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2766,2772],"text":"search ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2766,2772],"text":"Boolean(search)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3470,3504],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":122,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":122,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":127,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":127,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3832,3838],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":127,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":127,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3843,3849],"text":"(Boolean(action))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":163,"column":5,"nodeType":"MemberExpression","endLine":163,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":167,"column":13,"nodeType":"MemberExpression","endLine":167,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4881,4915],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware([\n  AdminPermissions.stats.read\n]);\n\n// 模拟风险用户数据\nconst mockRiskUsers = [\n  {\n    id: 'U1001',\n    userName: '张三',\n    email: 'zhangsan@example.com',\n    totalScore: 85,\n    riskLevel: 'high',\n    accountStatus: 'active',\n    registrationDate: '2025-09-15T10:00:00Z',\n    lastLoginDate: '2025-10-31T14:30:00Z',\n    recentActivity: '异常登录行为',\n    totalEvents: 12,\n    riskHistory: [\n      { date: '2025-10-31T15:30:00Z', event: '异常登录', score: 85 },\n      { date: '2025-10-30T09:15:00Z', event: 'IP地理位置异常', score: 65 },\n      { date: '2025-10-29T16:45:00Z', event: '设备指纹异常', score: 72 }\n    ]\n  },\n  {\n    id: 'U1002',\n    userName: '李四',\n    email: 'lisi@example.com',\n    totalScore: 45,\n    riskLevel: 'medium',\n    accountStatus: 'active',\n    registrationDate: '2025-08-20T08:30:00Z',\n    lastLoginDate: '2025-10-31T12:00:00Z',\n    recentActivity: '正常',\n    totalEvents: 5,\n    riskHistory: [\n      { date: '2025-10-28T14:20:00Z', event: '大额交易', score: 45 },\n      { date: '2025-10-25T11:10:00Z', event: '频繁操作', score: 38 }\n    ]\n  },\n  {\n    id: 'U1003',\n    userName: '王五',\n    email: 'wangwu@example.com',\n    totalScore: 95,\n    riskLevel: 'critical',\n    accountStatus: 'frozen',\n    registrationDate: '2025-07-10T14:20:00Z',\n    lastLoginDate: '2025-10-31T08:45:00Z',\n    recentActivity: '频繁异常操作',\n    totalEvents: 25,\n    riskHistory: [\n      { date: '2025-10-31T13:45:00Z', event: '频繁操作', score: 95 },\n      { date: '2025-10-30T22:30:00Z', event: '异常登录', score: 88 },\n      { date: '2025-10-29T19:20:00Z', event: '设备指纹异常', score: 90 }\n    ]\n  }\n];\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const riskLevel = searchParams.get('riskLevel');\n    const accountStatus = searchParams.get('accountStatus');\n    const search = searchParams.get('search');\n\n    // 筛选数据\n    let filteredUsers = mockRiskUsers;\n\n    if (riskLevel && riskLevel !== 'all') {\n      filteredUsers = filteredUsers.filter(user => user.riskLevel === riskLevel);\n    }\n\n    if (accountStatus && accountStatus !== 'all') {\n      filteredUsers = filteredUsers.filter(user => user.accountStatus === accountStatus);\n    }\n\n    if (search) {\n      filteredUsers = filteredUsers.filter(user => \n        user.userName.toLowerCase().includes(search.toLowerCase()) ||\n        user.email.toLowerCase().includes(search.toLowerCase()) ||\n        user.id.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n\n    // 分页\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedUsers = filteredUsers.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        users: paginatedUsers,\n        total: filteredUsers.length,\n        page,\n        limit,\n        totalPages: Math.ceil(filteredUsers.length / limit)\n      }\n    });\n  } catch (error) {\n    console.error('获取风险用户失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取数据失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}\n\nexport async function PATCH(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n  try {\n    const body = await request.json();\n    const { userId, action } = body;\n\n    if (!userId || !action) {\n      return NextResponse.json(\n        { success: false, error: '缺少必需参数' },\n        { status: 400 }\n      );\n    }\n\n    const userIndex = mockRiskUsers.findIndex(user => user.id === userId);\n    if (userIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: '用户不存在' },\n        { status: 404 }\n      );\n    }\n\n    let newStatus: 'active' | 'frozen' | 'limited' | 'banned';\n    switch (action) {\n      case 'freeze':\n        newStatus = 'frozen';\n        break;\n      case 'unfreeze':\n        newStatus = 'active';\n        break;\n      case 'limit':\n        newStatus = 'limited';\n        break;\n      case 'ban':\n        newStatus = 'banned';\n        break;\n      default:\n        return NextResponse.json(\n          { success: false, error: '无效的操作' },\n          { status: 400 }\n        );\n    }\n\n    mockRiskUsers[userIndex].accountStatus = newStatus;\n\n    return NextResponse.json({\n      success: true,\n      data: mockRiskUsers[userIndex],\n      message: '用户状态更新成功'\n    });\n  } catch (error) {\n    console.error('更新用户状态失败:', error);\n    return NextResponse.json(\n      { success: false, error: '更新失败' },\n      { status: 500 }\n    );\n  }\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/settings/features/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[495,498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[495,498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[826,829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[826,829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getAllFeatureFlags' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAllFeatureFlags' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1066,1072],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":38,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":38,"endColumn":29,"fix":{"range":[1074,1088],"text":"{return cached;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1319,1353],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1427,1430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1427,1430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":68,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2167,2182],"text":"(Boolean(data.is_enabled))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2183,2185],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":40,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":68,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2196,2216],"text":"(Boolean(data.enabled_for_all))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2217,2219],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":69,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2286,2309],"text":"(Boolean(data.rollout_percentage))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2310,2312],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":71,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":71,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2481,2496],"text":"(Boolean(data.start_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2545,2558],"text":"(Boolean(data.end_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2605,2618],"text":"(Boolean(data.timezone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2619,2621],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":74,"endColumn":81,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2729,2742],"text":"(Boolean(data.priority))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":74,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":74,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2743,2745],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2891,2925],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3011,3014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3011,3014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":111,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":111,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4012,4027],"text":"(Boolean(data.start_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":112,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":112,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4086,4099],"text":"(Boolean(data.end_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4542,4576],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5008,5042],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":161,"column":27,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":161,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5359,5365],"text":"(reason != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5359,5365],"text":"(reason ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5359,5365],"text":"(Boolean(reason))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5366,5368],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5543,5577],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":176,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":251,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":176,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":176,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":182,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":182,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5995,6023],"text":"(url.searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5995,6023],"text":"(url.searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5995,6023],"text":"(Boolean(url.searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":182,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":182,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6024,6026],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":183,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":183,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6060,6089],"text":"(url.searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6060,6089],"text":"(url.searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6060,6089],"text":"(Boolean(url.searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":183,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":183,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6090,6092],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6215,6218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6215,6218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":189,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":189,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6236,6244],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6236,6244],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6236,6244],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":204,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":204,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6617,6624],"text":"flagKey != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6617,6624],"text":"flagKey ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6617,6624],"text":"Boolean(flagKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7050,7053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7050,7053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":218,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":218,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7071,7079],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7071,7079],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7071,7079],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":233,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7497,7504],"text":"flagKey != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7497,7504],"text":"flagKey ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7497,7504],"text":"Boolean(flagKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":259,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":259,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8128,8142],"text":"(Boolean(data.flag_name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":259,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":259,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8147,8160],"text":"(Boolean(data.flag_key))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":259,"column":47,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":259,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8165,8178],"text":"(Boolean(data.category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":291,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":291,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8994,8996],"text":"(Boolean(id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":313,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":313,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9510,9513],"text":"id == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9511,9513],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9510,9513],"text":"!Boolean(id)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":335,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":335,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10013,10015],"text":"(Boolean(id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.FEATURES_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.FEATURES_WRITE);\n\n// 缓存功能开关以提高性能\nlet featuresCache: { data: any; timestamp: number } | null = null;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\n// 获取缓存的功能开关\nasync function getCachedFeatures() {\n  const now = Date.now();\n  if (featuresCache && (now - featuresCache.timestamp) < CACHE_DURATION) {\n    return featuresCache.data;\n  }\n  return null;\n}\n\n// 更新缓存\nfunction updateCache(features: any) {\n  featuresCache = {\n    data: features,\n    timestamp: Date.now()\n  };\n}\n\n// 清除缓存\nfunction clearCache() {\n  featuresCache = null;\n}\n\n// 获取所有功能开关\nasync function getAllFeatureFlags() {\n  const cached = await getCachedFeatures();\n  if (cached) return cached;\n\n  try {\n    const flags = await prisma.$queryRaw`\n      SELECT * FROM feature_flags WHERE is_active = true ORDER BY category, priority DESC, flag_name\n    `;\n    \n    updateCache(flags);\n    return flags;\n  } catch (error) {\n    console.error('获取功能开关失败:', error);\n    throw error;\n  }\n}\n\n// 创建功能开关\nasync function createFeatureFlag(data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      INSERT INTO feature_flags (\n        flag_name, flag_key, name_zh, name_en, name_ru,\n        description_zh, description_en, description_ru,\n        is_enabled, enabled_for_all, user_whitelist, user_blacklist,\n        rollout_percentage, target_version, min_version, max_version,\n        experiment_group, control_group, test_duration_hours,\n        start_time, end_time, timezone, category, tags,\n        is_active, priority, operator_id, change_reason\n      ) VALUES (\n        ${data.flag_name}, ${data.flag_key}, ${data.name_zh}, ${data.name_en}, ${data.name_ru},\n        ${data.description_zh}, ${data.description_en}, ${data.description_ru},\n        ${data.is_enabled || false}, ${data.enabled_for_all || false}, ${data.user_whitelist}, ${data.user_blacklist},\n        ${data.rollout_percentage || 0.0}, ${data.target_version}, ${data.min_version}, ${data.max_version},\n        ${data.experiment_group}, ${data.control_group}, ${data.test_duration_hours},\n        ${data.start_time ? new Date(data.start_time) : null}, \n        ${data.end_time ? new Date(data.end_time) : null}, \n        ${data.timezone || 'UTC'}, ${data.category}, ${data.tags},\n        ${data.is_active !== undefined ? data.is_active : true}, ${data.priority || 0},\n        ${operatorId}, ${data.change_reason}\n      ) RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('创建功能开关失败:', error);\n    throw error;\n  }\n}\n\n// 更新功能开关\nasync function updateFeatureFlag(id: string, data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE feature_flags SET\n        flag_name = ${data.flag_name},\n        flag_key = ${data.flag_key},\n        name_zh = ${data.name_zh},\n        name_en = ${data.name_en},\n        name_ru = ${data.name_ru},\n        description_zh = ${data.description_zh},\n        description_en = ${data.description_en},\n        description_ru = ${data.description_ru},\n        is_enabled = ${data.is_enabled},\n        enabled_for_all = ${data.enabled_for_all},\n        user_whitelist = ${data.user_whitelist},\n        user_blacklist = ${data.user_blacklist},\n        rollout_percentage = ${data.rollout_percentage},\n        target_version = ${data.target_version},\n        min_version = ${data.min_version},\n        max_version = ${data.max_version},\n        experiment_group = ${data.experiment_group},\n        control_group = ${data.control_group},\n        test_duration_hours = ${data.test_duration_hours},\n        start_time = ${data.start_time ? new Date(data.start_time) : null},\n        end_time = ${data.end_time ? new Date(data.end_time) : null},\n        timezone = ${data.timezone},\n        category = ${data.category},\n        tags = ${data.tags},\n        is_active = ${data.is_active},\n        priority = ${data.priority},\n        operator_id = ${operatorId},\n        change_reason = ${data.change_reason},\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('更新功能开关失败:', error);\n    throw error;\n  }\n}\n\n// 删除功能开关（软删除）\nasync function deleteFeatureFlag(id: string, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE feature_flags SET\n        is_active = false,\n        operator_id = ${operatorId},\n        change_reason = '软删除功能开关',\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('删除功能开关失败:', error);\n    throw error;\n  }\n}\n\n// 切换功能开关状态\nasync function toggleFeatureFlag(id: string, enabled: boolean, operatorId: string, reason?: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE feature_flags SET\n        is_enabled = ${enabled},\n        operator_id = ${operatorId},\n        change_reason = ${reason || (enabled ? '启用功能' : '禁用功能')},\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('切换功能开关失败:', error);\n    throw error;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const category = url.searchParams.get('category');\n    const isEnabled = url.searchParams.get('is_enabled');\n    const isActive = url.searchParams.get('is_active');\n    const flagKey = url.searchParams.get('flag_key');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = (page - 1) * limit;\n\n    let query = `SELECT * FROM feature_flags WHERE 1=1`;\n    const params: any[] = [];\n\n    if (category) {\n      query += ` AND category = $${params.length + 1}`;\n      params.push(category);\n    }\n\n    if (isEnabled !== null) {\n      query += ` AND is_enabled = $${params.length + 1}`;\n      params.push(isEnabled === 'true');\n    }\n\n    if (isActive !== null) {\n      query += ` AND is_active = $${params.length + 1}`;\n      params.push(isActive === 'true');\n    }\n\n    if (flagKey) {\n      query += ` AND flag_key = $${params.length + 1}`;\n      params.push(flagKey);\n    }\n\n    query += ` ORDER BY category, priority DESC, flag_name LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(limit, offset);\n\n    const flags = await prisma.$queryRawUnsafe(query, ...params);\n\n    // 获取总数\n    let countQuery = `SELECT COUNT(*) as total FROM feature_flags WHERE 1=1`;\n    const countParams: any[] = [];\n\n    if (category) {\n      countQuery += ` AND category = $${countParams.length + 1}`;\n      countParams.push(category);\n    }\n\n    if (isEnabled !== null) {\n      countQuery += ` AND is_enabled = $${countParams.length + 1}`;\n      countParams.push(isEnabled === 'true');\n    }\n\n    if (isActive !== null) {\n      countQuery += ` AND is_active = $${countParams.length + 1}`;\n      countParams.push(isActive === 'true');\n    }\n\n    if (flagKey) {\n      countQuery += ` AND flag_key = $${countParams.length + 1}`;\n      countParams.push(flagKey);\n    }\n\n    const countResult = await prisma.$queryRawUnsafe(countQuery, ...countParams);\n    const total = parseInt(countResult[0].total);\n\n    return NextResponse.json({ \n      success: true,\n      data: flags,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n\n    // 验证必填字段\n    if (!data.flag_name || !data.flag_key || !data.category) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少必填字段：flag_name, flag_key, category' \n      }, { status: 400 });\n    }\n\n    // 验证推出百分比\n    if (data.rollout_percentage !== undefined) {\n      if (data.rollout_percentage < 0 || data.rollout_percentage > 100) {\n        return NextResponse.json({ \n          success: false,\n          error: '推出百分比必须在0-100之间' \n        }, { status: 400 });\n      }\n    }\n\n    const flag = await createFeatureFlag(data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '功能开关创建成功',\n      data: flag\n    }, { status: 201 });\n  })(request);\n}\n\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { id } = data;\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少功能开关ID' \n      }, { status: 400 });\n    }\n\n    const flag = await updateFeatureFlag(id, data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '功能开关更新成功',\n      data: flag\n    });\n  })(request);\n}\n\nexport async function DELETE(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少功能开关ID' \n      }, { status: 400 });\n    }\n\n    await deleteFeatureFlag(id, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '功能开关删除成功'\n    });\n  })(request);\n}\n\n// PATCH方法用于快速切换功能开关状态\nexport async function PATCH(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { id, enabled, reason } = data;\n\n    if (!id || typeof enabled !== 'boolean') {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少必需参数：id, enabled' \n      }, { status: 400 });\n    }\n\n    const flag = await toggleFeatureFlag(id, enabled, admin.username, reason);\n\n    return NextResponse.json({\n      success: true,\n      message: `功能开关${enabled ? '启用' : '禁用'}成功`,\n      data: flag\n    });\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/settings/operation/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[500,503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[500,503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[850,853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[850,853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getAllOperationConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAllOperationConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1112,1118],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":38,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":38,"endColumn":29,"fix":{"range":[1120,1134],"text":"{return cached;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1377,1411],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1489,1492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1489,1492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2788,2803],"text":"(Boolean(data.start_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":74,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2852,2865],"text":"(Boolean(data.end_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":75,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2912,2925],"text":"(Boolean(data.timezone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":75,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":75,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2926,2928],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":76,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":76,"endColumn":81,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3004,3017],"text":"(Boolean(data.priority))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3018,3020],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3166,3200],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3290,3293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3290,3293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":118,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":118,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4606,4621],"text":"(Boolean(data.start_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":119,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":119,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4680,4693],"text":"(Boolean(data.end_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5070,5104],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5544,5578],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":165,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":165,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5853,5862],"text":"excludeId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5853,5862],"text":"excludeId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5853,5862],"text":"Boolean(excludeId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6074,6108],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":179,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":179,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":184,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":184,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6473,6501],"text":"(url.searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6473,6501],"text":"(url.searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6473,6501],"text":"(Boolean(url.searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":184,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":184,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6502,6504],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":185,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":185,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6538,6567],"text":"(url.searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6538,6567],"text":"(url.searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6538,6567],"text":"(Boolean(url.searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":185,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":185,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6568,6570],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6697,6700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6697,6700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":191,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":191,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6718,6726],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6718,6726],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6718,6726],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":196,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":196,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6830,6839],"text":"promoCode != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6830,6839],"text":"promoCode ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6830,6839],"text":"Boolean(promoCode)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7410,7413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7410,7413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":215,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":215,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7431,7439],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7431,7439],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7431,7439],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":220,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":220,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7558,7567],"text":"promoCode != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7558,7567],"text":"promoCode ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7558,7567],"text":"Boolean(promoCode)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 13. Maximum allowed is 10.","line":247,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":307,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":251,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":251,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8345,8361],"text":"(Boolean(data.config_name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":251,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":251,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8366,8379],"text":"(Boolean(data.category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":259,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":259,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8547,8562],"text":"Boolean(data.promo_code)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":280,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":280,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9095,9122],"text":"Boolean(data.fee_calculation_method)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 12. Maximum allowed is 10.","line":311,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":371,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":315,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":315,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10064,10066],"text":"(Boolean(id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":323,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":323,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10222,10237],"text":"Boolean(data.promo_code)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":344,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":344,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10774,10801],"text":"Boolean(data.fee_calculation_method)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":379,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":379,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11749,11752],"text":"id == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11750,11752],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11749,11752],"text":"!Boolean(id)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":397,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":397,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":397,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":397,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":402,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":402,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12315,12325],"text":"promoCode == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12316,12325],"text":"(promoCode ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12315,12325],"text":"!Boolean(promoCode)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":409,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":409,"endColumn":66,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12504,12513],"text":"(excludeId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12504,12513],"text":"(excludeId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12504,12513],"text":"(Boolean(excludeId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":409,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":409,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12514,12516],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.OPERATIONS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.OPERATIONS_WRITE);\n\n// 缓存运营配置以提高性能\nlet operationCache: { data: any; timestamp: number } | null = null;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\n// 获取缓存的运营配置\nasync function getCachedOperationConfigs() {\n  const now = Date.now();\n  if (operationCache && (now - operationCache.timestamp) < CACHE_DURATION) {\n    return operationCache.data;\n  }\n  return null;\n}\n\n// 更新缓存\nfunction updateCache(operationConfigs: any) {\n  operationCache = {\n    data: operationConfigs,\n    timestamp: Date.now()\n  };\n}\n\n// 清除缓存\nfunction clearCache() {\n  operationCache = null;\n}\n\n// 获取所有运营配置\nasync function getAllOperationConfigs() {\n  const cached = await getCachedOperationConfigs();\n  if (cached) return cached;\n\n  try {\n    const configs = await prisma.$queryRaw`\n      SELECT * FROM operation_configs WHERE is_active = true ORDER BY category, priority DESC, config_name\n    `;\n    \n    updateCache(configs);\n    return configs;\n  } catch (error) {\n    console.error('获取运营配置失败:', error);\n    throw error;\n  }\n}\n\n// 创建运营配置\nasync function createOperationConfig(data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      INSERT INTO operation_configs (\n        config_name, category, name_zh, name_en, name_ru,\n        description_zh, description_en, description_ru,\n        discount_percentage, discount_amount, promo_code, usage_limit,\n        min_purchase_amount, max_discount_amount, daily_limit, monthly_limit,\n        user_level_restrictions, platform_fee_rate, minimum_fee, maximum_fee,\n        fee_calculation_method, target_audience, channel_restrictions,\n        geographic_targeting, start_time, end_time, timezone,\n        is_active, priority, operator_id, change_reason\n      ) VALUES (\n        ${data.config_name}, ${data.category}, ${data.name_zh}, ${data.name_en}, ${data.name_ru},\n        ${data.description_zh}, ${data.description_en}, ${data.description_ru},\n        ${data.discount_percentage}, ${data.discount_amount}, ${data.promo_code}, ${data.usage_limit},\n        ${data.min_purchase_amount}, ${data.max_discount_amount}, ${data.daily_limit}, ${data.monthly_limit},\n        ${data.user_level_restrictions}, ${data.platform_fee_rate}, ${data.minimum_fee}, ${data.maximum_fee},\n        ${data.fee_calculation_method}, ${data.target_audience}, ${data.channel_restrictions},\n        ${data.geographic_targeting}, ${data.start_time ? new Date(data.start_time) : null}, \n        ${data.end_time ? new Date(data.end_time) : null}, \n        ${data.timezone || 'UTC'},\n        ${data.is_active !== undefined ? data.is_active : true}, ${data.priority || 0},\n        ${operatorId}, ${data.change_reason}\n      ) RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('创建运营配置失败:', error);\n    throw error;\n  }\n}\n\n// 更新运营配置\nasync function updateOperationConfig(id: string, data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE operation_configs SET\n        config_name = ${data.config_name},\n        category = ${data.category},\n        name_zh = ${data.name_zh},\n        name_en = ${data.name_en},\n        name_ru = ${data.name_ru},\n        description_zh = ${data.description_zh},\n        description_en = ${data.description_en},\n        description_ru = ${data.description_ru},\n        discount_percentage = ${data.discount_percentage},\n        discount_amount = ${data.discount_amount},\n        promo_code = ${data.promo_code},\n        usage_limit = ${data.usage_limit},\n        min_purchase_amount = ${data.min_purchase_amount},\n        max_discount_amount = ${data.max_discount_amount},\n        daily_limit = ${data.daily_limit},\n        monthly_limit = ${data.monthly_limit},\n        user_level_restrictions = ${data.user_level_restrictions},\n        platform_fee_rate = ${data.platform_fee_rate},\n        minimum_fee = ${data.minimum_fee},\n        maximum_fee = ${data.maximum_fee},\n        fee_calculation_method = ${data.fee_calculation_method},\n        target_audience = ${data.target_audience},\n        channel_restrictions = ${data.channel_restrictions},\n        geographic_targeting = ${data.geographic_targeting},\n        start_time = ${data.start_time ? new Date(data.start_time) : null},\n        end_time = ${data.end_time ? new Date(data.end_time) : null},\n        timezone = ${data.timezone},\n        is_active = ${data.is_active},\n        priority = ${data.priority},\n        operator_id = ${operatorId},\n        change_reason = ${data.change_reason},\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('更新运营配置失败:', error);\n    throw error;\n  }\n}\n\n// 删除运营配置（软删除）\nasync function deleteOperationConfig(id: string, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE operation_configs SET\n        is_active = false,\n        operator_id = ${operatorId},\n        change_reason = '软删除运营配置',\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('删除运营配置失败:', error);\n    throw error;\n  }\n}\n\n// 验证促销代码唯一性\nasync function validatePromoCode(promoCode: string, excludeId?: string) {\n  try {\n    let query = `SELECT COUNT(*) as count FROM operation_configs WHERE promo_code = $1 AND is_active = true`;\n    const params = [promoCode];\n    \n    if (excludeId) {\n      query += ` AND id != $2`;\n      params.push(excludeId);\n    }\n    \n    const result = await prisma.$queryRawUnsafe(query, ...params);\n    return parseInt(result[0].count) === 0;\n  } catch (error) {\n    console.error('验证促销代码失败:', error);\n    return false;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const category = url.searchParams.get('category');\n    const promoCode = url.searchParams.get('promo_code');\n    const isActive = url.searchParams.get('is_active');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = (page - 1) * limit;\n\n    let query = `SELECT * FROM operation_configs WHERE 1=1`;\n    const params: any[] = [];\n\n    if (category) {\n      query += ` AND category = $${params.length + 1}`;\n      params.push(category);\n    }\n\n    if (promoCode) {\n      query += ` AND promo_code = $${params.length + 1}`;\n      params.push(promoCode);\n    }\n\n    if (isActive !== null) {\n      query += ` AND is_active = $${params.length + 1}`;\n      params.push(isActive === 'true');\n    }\n\n    query += ` ORDER BY category, priority DESC, config_name LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(limit, offset);\n\n    const configs = await prisma.$queryRawUnsafe(query, ...params);\n\n    // 获取总数\n    let countQuery = `SELECT COUNT(*) as total FROM operation_configs WHERE 1=1`;\n    const countParams: any[] = [];\n\n    if (category) {\n      countQuery += ` AND category = $${countParams.length + 1}`;\n      countParams.push(category);\n    }\n\n    if (promoCode) {\n      countQuery += ` AND promo_code = $${countParams.length + 1}`;\n      countParams.push(promoCode);\n    }\n\n    if (isActive !== null) {\n      countQuery += ` AND is_active = $${countParams.length + 1}`;\n      countParams.push(isActive === 'true');\n    }\n\n    const countResult = await prisma.$queryRawUnsafe(countQuery, ...countParams);\n    const total = parseInt(countResult[0].total);\n\n    return NextResponse.json({ \n      success: true,\n      data: configs,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n\n    // 验证必填字段\n    if (!data.config_name || !data.category) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少必填字段：config_name, category' \n      }, { status: 400 });\n    }\n\n    // 验证促销代码唯一性\n    if (data.promo_code) {\n      const isUnique = await validatePromoCode(data.promo_code);\n      if (!isUnique) {\n        return NextResponse.json({ \n          success: false,\n          error: '促销代码已存在' \n        }, { status: 400 });\n      }\n    }\n\n    // 验证折扣百分比\n    if (data.discount_percentage !== undefined) {\n      if (data.discount_percentage < 0 || data.discount_percentage > 100) {\n        return NextResponse.json({ \n          success: false,\n          error: '折扣百分比必须在0-100之间' \n        }, { status: 400 });\n      }\n    }\n\n    // 验证费率计算方法\n    if (data.fee_calculation_method) {\n      const validMethods = ['percentage', 'fixed', 'tiered'];\n      if (!validMethods.includes(data.fee_calculation_method)) {\n        return NextResponse.json({ \n          success: false,\n          error: '无效的费率计算方法' \n        }, { status: 400 });\n      }\n    }\n\n    // 验证平台费率\n    if (data.platform_fee_rate !== undefined) {\n      if (data.platform_fee_rate < 0 || data.platform_fee_rate > 1) {\n        return NextResponse.json({ \n          success: false,\n          error: '平台费率必须在0-1之间（表示0%-100%）' \n        }, { status: 400 });\n      }\n    }\n\n    const config = await createOperationConfig(data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '运营参数创建成功',\n      data: config\n    }, { status: 201 });\n  })(request);\n}\n\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { id } = data;\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少运营配置ID' \n      }, { status: 400 });\n    }\n\n    // 验证促销代码唯一性（排除当前记录）\n    if (data.promo_code) {\n      const isUnique = await validatePromoCode(data.promo_code, id);\n      if (!isUnique) {\n        return NextResponse.json({ \n          success: false,\n          error: '促销代码已存在' \n        }, { status: 400 });\n      }\n    }\n\n    // 验证折扣百分比\n    if (data.discount_percentage !== undefined) {\n      if (data.discount_percentage < 0 || data.discount_percentage > 100) {\n        return NextResponse.json({ \n          success: false,\n          error: '折扣百分比必须在0-100之间' \n        }, { status: 400 });\n      }\n    }\n\n    // 验证费率计算方法\n    if (data.fee_calculation_method) {\n      const validMethods = ['percentage', 'fixed', 'tiered'];\n      if (!validMethods.includes(data.fee_calculation_method)) {\n        return NextResponse.json({ \n          success: false,\n          error: '无效的费率计算方法' \n        }, { status: 400 });\n      }\n    }\n\n    // 验证平台费率\n    if (data.platform_fee_rate !== undefined) {\n      if (data.platform_fee_rate < 0 || data.platform_fee_rate > 1) {\n        return NextResponse.json({ \n          success: false,\n          error: '平台费率必须在0-1之间（表示0%-100%）' \n        }, { status: 400 });\n      }\n    }\n\n    const config = await updateOperationConfig(id, data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '运营参数更新成功',\n      data: config\n    });\n  })(request);\n}\n\nexport async function DELETE(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少运营配置ID' \n      }, { status: 400 });\n    }\n\n    await deleteOperationConfig(id, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '运营参数删除成功'\n    });\n  })(request);\n}\n\n// 验证促销代码的专用接口\nexport async function OPTIONS(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const promoCode = url.searchParams.get('code');\n    const excludeId = url.searchParams.get('exclude_id');\n\n    if (!promoCode) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少促销代码参数' \n      }, { status: 400 });\n    }\n\n    const isUnique = await validatePromoCode(promoCode, excludeId || undefined);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        promo_code: promoCode,\n        is_unique: isUnique\n      }\n    });\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/settings/rewards/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[492,495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[492,495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[818,821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[818,821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getAllRewardConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAllRewardConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":35},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1055,1061],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":38,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":38,"endColumn":29,"fix":{"range":[1063,1077],"text":"{return cached;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1317,1351],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1426,1429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1426,1429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":69,"endColumn":81,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2331,2344],"text":"(Boolean(data.priority))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2345,2347],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":70,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":70,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2363,2378],"text":"(Boolean(data.start_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":71,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":71,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2427,2440],"text":"(Boolean(data.end_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2487,2500],"text":"(Boolean(data.timezone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2501,2503],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2653,2687],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2774,2777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2774,2777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":108,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":108,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3675,3690],"text":"(Boolean(data.start_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":109,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":109,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3749,3762],"text":"(Boolean(data.end_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4063,4097],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4531,4565],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":148,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":148,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":152,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":152,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4871,4899],"text":"(url.searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4871,4899],"text":"(url.searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4871,4899],"text":"(Boolean(url.searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":152,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":152,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4900,4902],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":153,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":153,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4936,4965],"text":"(url.searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4936,4965],"text":"(url.searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4936,4965],"text":"(Boolean(url.searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":153,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":153,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4966,4968],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5092,5095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5092,5095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":159,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":159,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5113,5121],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5113,5121],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5113,5121],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5686,5689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5686,5689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":178,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":178,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5707,5715],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5707,5715],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5707,5715],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":209,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":209,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6490,6506],"text":"(Boolean(data.config_name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":209,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":209,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6511,6524],"text":"(Boolean(data.category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":209,"column":49,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":209,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6529,6545],"text":"(Boolean(data.reward_type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":240,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":240,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7356,7358],"text":"(Boolean(id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":262,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":262,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7877,7880],"text":"id == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7878,7880],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7877,7880],"text":"!Boolean(id)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.REWARDS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.REWARDS_WRITE);\n\n// 缓存奖励配置以提高性能\nlet rewardsCache: { data: any; timestamp: number } | null = null;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\n// 获取缓存的奖励配置\nasync function getCachedRewards() {\n  const now = Date.now();\n  if (rewardsCache && (now - rewardsCache.timestamp) < CACHE_DURATION) {\n    return rewardsCache.data;\n  }\n  return null;\n}\n\n// 更新缓存\nfunction updateCache(rewards: any) {\n  rewardsCache = {\n    data: rewards,\n    timestamp: Date.now()\n  };\n}\n\n// 清除缓存\nfunction clearCache() {\n  rewardsCache = null;\n}\n\n// 获取所有奖励配置\nasync function getAllRewardConfigs() {\n  const cached = await getCachedRewards();\n  if (cached) return cached;\n\n  try {\n    const rewards = await prisma.$queryRaw`\n      SELECT * FROM reward_configs WHERE is_active = true ORDER BY category, priority DESC, config_name\n    `;\n    \n    updateCache(rewards);\n    return rewards;\n  } catch (error) {\n    console.error('获取奖励配置失败:', error);\n    throw error;\n  }\n}\n\n// 创建奖励配置\nasync function createRewardConfig(data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      INSERT INTO reward_configs (\n        config_name, category, name_zh, name_en, name_ru,\n        description_zh, description_en, description_ru,\n        reward_type, reward_amount, reward_percentage,\n        min_threshold, max_amount, daily_limit, total_limit, valid_days,\n        is_active, priority, start_time, end_time, timezone,\n        operator_id, change_reason\n      ) VALUES (\n        ${data.config_name}, ${data.category}, ${data.name_zh}, ${data.name_en}, ${data.name_ru},\n        ${data.description_zh}, ${data.description_en}, ${data.description_ru},\n        ${data.reward_type}, ${data.reward_amount}, ${data.reward_percentage},\n        ${data.min_threshold}, ${data.max_amount}, ${data.daily_limit}, ${data.total_limit}, ${data.valid_days},\n        ${data.is_active !== undefined ? data.is_active : true}, ${data.priority || 0}, \n        ${data.start_time ? new Date(data.start_time) : null}, \n        ${data.end_time ? new Date(data.end_time) : null}, \n        ${data.timezone || 'UTC'},\n        ${operatorId}, ${data.change_reason}\n      ) RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('创建奖励配置失败:', error);\n    throw error;\n  }\n}\n\n// 更新奖励配置\nasync function updateRewardConfig(id: string, data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE reward_configs SET\n        config_name = ${data.config_name},\n        category = ${data.category},\n        name_zh = ${data.name_zh},\n        name_en = ${data.name_en},\n        name_ru = ${data.name_ru},\n        description_zh = ${data.description_zh},\n        description_en = ${data.description_en},\n        description_ru = ${data.description_ru},\n        reward_type = ${data.reward_type},\n        reward_amount = ${data.reward_amount},\n        reward_percentage = ${data.reward_percentage},\n        min_threshold = ${data.min_threshold},\n        max_amount = ${data.max_amount},\n        daily_limit = ${data.daily_limit},\n        total_limit = ${data.total_limit},\n        valid_days = ${data.valid_days},\n        is_active = ${data.is_active},\n        priority = ${data.priority},\n        start_time = ${data.start_time ? new Date(data.start_time) : null},\n        end_time = ${data.end_time ? new Date(data.end_time) : null},\n        timezone = ${data.timezone},\n        operator_id = ${operatorId},\n        change_reason = ${data.change_reason},\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('更新奖励配置失败:', error);\n    throw error;\n  }\n}\n\n// 删除奖励配置（软删除）\nasync function deleteRewardConfig(id: string, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE reward_configs SET\n        is_active = false,\n        operator_id = ${operatorId},\n        change_reason = '软删除奖励配置',\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('删除奖励配置失败:', error);\n    throw error;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const category = url.searchParams.get('category');\n    const isActive = url.searchParams.get('is_active');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = (page - 1) * limit;\n\n    let query = `SELECT * FROM reward_configs WHERE 1=1`;\n    const params: any[] = [];\n\n    if (category) {\n      query += ` AND category = $${params.length + 1}`;\n      params.push(category);\n    }\n\n    if (isActive !== null) {\n      query += ` AND is_active = $${params.length + 1}`;\n      params.push(isActive === 'true');\n    }\n\n    query += ` ORDER BY category, priority DESC, config_name LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(limit, offset);\n\n    const rewards = await prisma.$queryRawUnsafe(query, ...params);\n\n    // 获取总数\n    let countQuery = `SELECT COUNT(*) as total FROM reward_configs WHERE 1=1`;\n    const countParams: any[] = [];\n\n    if (category) {\n      countQuery += ` AND category = $${countParams.length + 1}`;\n      countParams.push(category);\n    }\n\n    if (isActive !== null) {\n      countQuery += ` AND is_active = $${countParams.length + 1}`;\n      countParams.push(isActive === 'true');\n    }\n\n    const countResult = await prisma.$queryRawUnsafe(countQuery, ...countParams);\n    const total = parseInt(countResult[0].total);\n\n    return NextResponse.json({ \n      success: true,\n      data: rewards,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n\n    // 验证必填字段\n    if (!data.config_name || !data.category || !data.reward_type) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少必填字段：config_name, category, reward_type' \n      }, { status: 400 });\n    }\n\n    // 验证奖励类型\n    const validRewardTypes = ['coins', 'balance', 'vip_days', 'percentage'];\n    if (!validRewardTypes.includes(data.reward_type)) {\n      return NextResponse.json({ \n        success: false,\n        error: '无效的奖励类型' \n      }, { status: 400 });\n    }\n\n    const reward = await createRewardConfig(data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '奖励参数创建成功',\n      data: reward\n    }, { status: 201 });\n  })(request);\n}\n\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { id } = data;\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少奖励配置ID' \n      }, { status: 400 });\n    }\n\n    const reward = await updateRewardConfig(id, data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '奖励参数更新成功',\n      data: reward\n    });\n  })(request);\n}\n\nexport async function DELETE(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少奖励配置ID' \n      }, { status: 400 });\n    }\n\n    await deleteRewardConfig(id, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '奖励参数删除成功'\n    });\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/settings/risk/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[483,486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[483,486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[808,811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[808,811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getAllRiskConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAllRiskConfigs' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1045,1051],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":38,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":38,"endColumn":29,"fix":{"range":[1053,1067],"text":"{return cached;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1305,1339],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1412,1415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1412,1415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":65,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1978,1995],"text":"(Boolean(data.max_attempts))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1996,1998],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":65,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2005,2029],"text":"(Boolean(data.time_window_minutes))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2030,2032],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":67,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":67,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2179,2207],"text":"(Boolean(data.action_duration_minutes))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2208,2210],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":67,"column":50,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":67,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2218,2244],"text":"(Boolean(data.notification_required))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2245,2247],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":67,"column":90,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":67,"endColumn":111,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2258,2279],"text":"(Boolean(data.escalation_level))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":112,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":114,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2280,2282],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":68,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2297,2314],"text":"(Boolean(data.weight_score))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2315,2317],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":97,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":68,"endColumn":110,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2383,2396],"text":"(Boolean(data.priority))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":111,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":113,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2397,2399],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2545,2579],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2664,2667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2664,2667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3829,3863],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4293,4327],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":140,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":215,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":140,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":140,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":146,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":146,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4749,4777],"text":"(url.searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4749,4777],"text":"(url.searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4749,4777],"text":"(Boolean(url.searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4778,4780],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":147,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":147,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4814,4843],"text":"(url.searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4814,4843],"text":"(url.searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4814,4843],"text":"(Boolean(url.searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":147,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":147,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4844,4846],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4968,4971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4968,4971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":153,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":153,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4989,4997],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4989,4997],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4989,4997],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":158,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":158,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5101,5109],"text":"riskType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5101,5109],"text":"riskType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5101,5109],"text":"Boolean(riskType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":163,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":163,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5214,5224],"text":"autoAction != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5214,5224],"text":"autoAction ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5214,5224],"text":"Boolean(autoAction)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5792,5795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5792,5795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":182,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":182,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5813,5821],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5813,5821],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5813,5821],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":187,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":187,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5940,5948],"text":"riskType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5940,5948],"text":"riskType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5940,5948],"text":"Boolean(riskType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":192,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":192,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6068,6078],"text":"autoAction != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6068,6078],"text":"autoAction ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6068,6078],"text":"Boolean(autoAction)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 13. Maximum allowed is 10.","line":219,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":271,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":223,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":223,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6858,6874],"text":"(Boolean(data.config_name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":223,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":223,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6879,6892],"text":"(Boolean(data.category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":223,"column":49,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":223,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6897,6911],"text":"(Boolean(data.risk_type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":241,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":241,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7416,7432],"text":"(Boolean(data.auto_action))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":249,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7622,7643],"text":"(Boolean(data.escalation_level))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":257,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":257,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7852,7869],"text":"(Boolean(data.weight_score))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":279,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":279,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8444,8446],"text":"(Boolean(id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":301,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":301,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8963,8966],"text":"id == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8964,8966],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8963,8966],"text":"!Boolean(id)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":42,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.RISK_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.RISK_WRITE);\n\n// 缓存风控配置以提高性能\nlet riskCache: { data: any; timestamp: number } | null = null;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\n// 获取缓存的风控配置\nasync function getCachedRiskConfigs() {\n  const now = Date.now();\n  if (riskCache && (now - riskCache.timestamp) < CACHE_DURATION) {\n    return riskCache.data;\n  }\n  return null;\n}\n\n// 更新缓存\nfunction updateCache(riskConfigs: any) {\n  riskCache = {\n    data: riskConfigs,\n    timestamp: Date.now()\n  };\n}\n\n// 清除缓存\nfunction clearCache() {\n  riskCache = null;\n}\n\n// 获取所有风控配置\nasync function getAllRiskConfigs() {\n  const cached = await getCachedRiskConfigs();\n  if (cached) return cached;\n\n  try {\n    const configs = await prisma.$queryRaw`\n      SELECT * FROM risk_configs WHERE is_active = true ORDER BY category, priority DESC, config_name\n    `;\n    \n    updateCache(configs);\n    return configs;\n  } catch (error) {\n    console.error('获取风控配置失败:', error);\n    throw error;\n  }\n}\n\n// 创建风控配置\nasync function createRiskConfig(data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      INSERT INTO risk_configs (\n        config_name, category, risk_type, threshold_value,\n        max_attempts, time_window_minutes, min_amount, max_amount,\n        geographic_restrictions, device_restrictions, auto_action,\n        action_duration_minutes, notification_required, escalation_level,\n        weight_score, is_active, priority, operator_id, change_reason\n      ) VALUES (\n        ${data.config_name}, ${data.category}, ${data.risk_type}, ${data.threshold_value},\n        ${data.max_attempts || 3}, ${data.time_window_minutes || 60}, ${data.min_amount}, ${data.max_amount},\n        ${data.geographic_restrictions}, ${data.device_restrictions}, ${data.auto_action},\n        ${data.action_duration_minutes || 60}, ${data.notification_required || false}, ${data.escalation_level || 1},\n        ${data.weight_score || 1.0}, ${data.is_active !== undefined ? data.is_active : true}, ${data.priority || 0},\n        ${operatorId}, ${data.change_reason}\n      ) RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('创建风控配置失败:', error);\n    throw error;\n  }\n}\n\n// 更新风控配置\nasync function updateRiskConfig(id: string, data: any, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE risk_configs SET\n        config_name = ${data.config_name},\n        category = ${data.category},\n        risk_type = ${data.risk_type},\n        threshold_value = ${data.threshold_value},\n        max_attempts = ${data.max_attempts},\n        time_window_minutes = ${data.time_window_minutes},\n        min_amount = ${data.min_amount},\n        max_amount = ${data.max_amount},\n        geographic_restrictions = ${data.geographic_restrictions},\n        device_restrictions = ${data.device_restrictions},\n        auto_action = ${data.auto_action},\n        action_duration_minutes = ${data.action_duration_minutes},\n        notification_required = ${data.notification_required},\n        escalation_level = ${data.escalation_level},\n        weight_score = ${data.weight_score},\n        is_active = ${data.is_active},\n        priority = ${data.priority},\n        operator_id = ${operatorId},\n        change_reason = ${data.change_reason},\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('更新风控配置失败:', error);\n    throw error;\n  }\n}\n\n// 删除风控配置（软删除）\nasync function deleteRiskConfig(id: string, operatorId: string) {\n  try {\n    const result = await prisma.$queryRaw`\n      UPDATE risk_configs SET\n        is_active = false,\n        operator_id = ${operatorId},\n        change_reason = '软删除风控配置',\n        updated_at = NOW()\n      WHERE id = ${id}\n      RETURNING *\n    `;\n    \n    clearCache();\n    return result[0];\n  } catch (error) {\n    console.error('删除风控配置失败:', error);\n    throw error;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const category = url.searchParams.get('category');\n    const riskType = url.searchParams.get('risk_type');\n    const autoAction = url.searchParams.get('auto_action');\n    const isActive = url.searchParams.get('is_active');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = (page - 1) * limit;\n\n    let query = `SELECT * FROM risk_configs WHERE 1=1`;\n    const params: any[] = [];\n\n    if (category) {\n      query += ` AND category = $${params.length + 1}`;\n      params.push(category);\n    }\n\n    if (riskType) {\n      query += ` AND risk_type = $${params.length + 1}`;\n      params.push(riskType);\n    }\n\n    if (autoAction) {\n      query += ` AND auto_action = $${params.length + 1}`;\n      params.push(autoAction);\n    }\n\n    if (isActive !== null) {\n      query += ` AND is_active = $${params.length + 1}`;\n      params.push(isActive === 'true');\n    }\n\n    query += ` ORDER BY category, priority DESC, config_name LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(limit, offset);\n\n    const configs = await prisma.$queryRawUnsafe(query, ...params);\n\n    // 获取总数\n    let countQuery = `SELECT COUNT(*) as total FROM risk_configs WHERE 1=1`;\n    const countParams: any[] = [];\n\n    if (category) {\n      countQuery += ` AND category = $${countParams.length + 1}`;\n      countParams.push(category);\n    }\n\n    if (riskType) {\n      countQuery += ` AND risk_type = $${countParams.length + 1}`;\n      countParams.push(riskType);\n    }\n\n    if (autoAction) {\n      countQuery += ` AND auto_action = $${countParams.length + 1}`;\n      countParams.push(autoAction);\n    }\n\n    if (isActive !== null) {\n      countQuery += ` AND is_active = $${countParams.length + 1}`;\n      countParams.push(isActive === 'true');\n    }\n\n    const countResult = await prisma.$queryRawUnsafe(countQuery, ...countParams);\n    const total = parseInt(countResult[0].total);\n\n    return NextResponse.json({ \n      success: true,\n      data: configs,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n\n    // 验证必填字段\n    if (!data.config_name || !data.category || !data.risk_type) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少必填字段：config_name, category, risk_type' \n      }, { status: 400 });\n    }\n\n    // 验证风险类型\n    const validRiskTypes = ['threshold', 'frequency', 'amount', 'geographic'];\n    if (!validRiskTypes.includes(data.risk_type)) {\n      return NextResponse.json({ \n        success: false,\n        error: '无效的风险类型' \n      }, { status: 400 });\n    }\n\n    // 验证自动处理动作\n    const validActions = ['block', 'review', 'alert', 'limit'];\n    if (data.auto_action && !validActions.includes(data.auto_action)) {\n      return NextResponse.json({ \n        success: false,\n        error: '无效的自动处理动作' \n      }, { status: 400 });\n    }\n\n    // 验证升级级别\n    if (data.escalation_level && (data.escalation_level < 1 || data.escalation_level > 5)) {\n      return NextResponse.json({ \n        success: false,\n        error: '升级级别必须在1-5之间' \n      }, { status: 400 });\n    }\n\n    // 验证权重分数\n    if (data.weight_score && (data.weight_score < 0.1 || data.weight_score > 5.0)) {\n      return NextResponse.json({ \n        success: false,\n        error: '权重分数必须在0.1-5.0之间' \n      }, { status: 400 });\n    }\n\n    const config = await createRiskConfig(data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '风控参数创建成功',\n      data: config\n    }, { status: 201 });\n  })(request);\n}\n\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { id } = data;\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少风控配置ID' \n      }, { status: 400 });\n    }\n\n    const config = await updateRiskConfig(id, data, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '风控参数更新成功',\n      data: config\n    });\n  })(request);\n}\n\nexport async function DELETE(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        success: false,\n        error: '缺少风控配置ID' \n      }, { status: 400 });\n    }\n\n    await deleteRiskConfig(id, admin.username);\n\n    return NextResponse.json({\n      success: true,\n      message: '风控参数删除成功'\n    });\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/settings/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[922,925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[922,925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":25,"column":16,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":25,"endColumn":28,"fix":{"range":[988,1000],"text":"{return null;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1375,1378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1375,1378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":77,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":77,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1983,1992],"text":"oldestKey != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1983,1992],"text":"oldestKey ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1983,1992],"text":"Boolean(oldestKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2718,2721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2718,2721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":116,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":116,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2876,2882],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2982,2985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2982,2985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":121,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":121,"endColumn":19,"fix":{"range":[2997,3392],"text":"for (const setting of settings) {\n    let value = setting.settingValue;\n    \n    // 根据类型转换值\n    switch (setting.settingType) {\n      case 'number':\n        value = parseFloat(value);\n        break;\n      case 'boolean':\n        value = value === 'true';\n        break;\n      case 'json':\n        value = JSON.parse(value);\n        break;\n    }\n    \n    settingsMap[setting.settingKey] = value;\n  }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3508,3511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3508,3511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":182,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":182,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":182,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":182,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":50},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 28. Maximum allowed is 10.","line":193,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":301,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":193,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":193,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":51}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.SETTINGS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.SETTINGS_WRITE);\n\n// 缓存系统设置以提高性能（修复内存泄漏）\nclass SettingsCache {\n  private cache: Map<string, { data: any; timestamp: number; accessCount: number }>;\n  private maxSize: number;\n  private maxAge: number;\n  private maxAccessCount: number;\n\n  constructor(maxSize: number = 100, maxAge: number = 5 * 60 * 1000, maxAccessCount: number = 1000) {\n    this.cache = new Map();\n    this.maxSize = maxSize;\n    this.maxAge = maxAge;\n    this.maxAccessCount = maxAccessCount;\n  }\n\n  get(key: string): any | null {\n    const item = this.cache.get(key);\n    if (!item) return null;\n\n    const now = Date.now();\n    \n    // 检查是否过期\n    if (now - item.timestamp > this.maxAge) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    // 检查访问次数\n    if (item.accessCount >= this.maxAccessCount) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    // 增加访问计数\n    item.accessCount++;\n    \n    return item.data;\n  }\n\n  set(key: string, data: any): void {\n    const now = Date.now();\n    \n    // 如果缓存已满，删除最旧的条目\n    if (this.cache.size >= this.maxSize) {\n      this.removeOldest();\n    }\n    \n    this.cache.set(key, {\n      data,\n      timestamp: now,\n      accessCount: 0\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  private removeOldest(): void {\n    let oldestKey: string | null = null;\n    let oldestTime = Date.now();\n    \n    for (const [key, item] of this.cache.entries()) {\n      if (item.timestamp < oldestTime || oldestKey === null) {\n        oldestTime = item.timestamp;\n        oldestKey = key;\n      }\n    }\n    \n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n    }\n  }\n\n  // 获取缓存统计信息\n  getStats(): { size: number; maxSize: number; hitRate: number } {\n    const size = this.cache.size;\n    let totalAccess = 0;\n    let hits = 0;\n    \n    for (const item of this.cache.values()) {\n      totalAccess += item.accessCount;\n      hits += Math.min(item.accessCount, 1); // 假设所有访问都是命中\n    }\n    \n    return {\n      size,\n      maxSize: this.maxSize,\n      hitRate: totalAccess > 0 ? hits / totalAccess : 0\n    };\n  }\n}\n\nconst settingsCache = new SettingsCache(50, 5 * 60 * 1000, 1000); // 最大50个条目，5分钟过期，最多1000次访问\n\n// 获取缓存的系统设置\nasync function getCachedSettings() {\n  return settingsCache.get('system_settings');\n}\n\n// 更新缓存\nfunction updateCache(settings: any) {\n  settingsCache.set('system_settings', settings);\n}\n\n// 从数据库获取所有设置\nasync function getAllSettings() {\n  const cached = await getCachedSettings();\n  if (cached) {return cached;}\n\n  const settings = await prisma.systemSettings.findMany();\n  const settingsMap: any = {};\n  \n  settings.forEach(setting => {\n    let value = setting.settingValue;\n    \n    // 根据类型转换值\n    switch (setting.settingType) {\n      case 'number':\n        value = parseFloat(value);\n        break;\n      case 'boolean':\n        value = value === 'true';\n        break;\n      case 'json':\n        value = JSON.parse(value);\n        break;\n    }\n    \n    settingsMap[setting.settingKey] = value;\n  });\n  \n  updateCache(settingsMap);\n  return settingsMap;\n}\n\n// 更新单个设置\nasync function updateSetting(key: string, value: any, type: string = 'string') {\n  let stringValue = value;\n  \n  // 根据类型转换值\n  switch (type) {\n    case 'number':\n      stringValue = value.toString();\n      break;\n    case 'boolean':\n      stringValue = value.toString();\n      break;\n    case 'json':\n      stringValue = JSON.stringify(value);\n      break;\n    default:\n      stringValue = value.toString();\n  }\n  \n  await prisma.systemSettings.upsert({\n    where: { settingKey: key },\n    update: { \n      settingValue: stringValue,\n      settingType: type,\n      updatedAt: new Date()\n    },\n    create: {\n      settingKey: key,\n      settingValue: stringValue,\n      settingType: type\n    }\n  });\n  \n  // 清除缓存\n  settingsCache.clear();\n}\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const settings = await getAllSettings();\n\n    return NextResponse.json({ \n      success: true,\n      settings \n    });\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n\n    // 批量更新设置\n    const updatePromises = [];\n    \n    // 基础设置\n    if (data.siteName !== undefined) {\n      updatePromises.push(updateSetting('site_name', data.siteName, 'string'));\n    }\n    if (typeof data.minRechargeAmount === 'number') {\n      updatePromises.push(updateSetting('min_recharge_amount', data.minRechargeAmount, 'number'));\n    }\n    if (typeof data.maxRechargeAmount === 'number') {\n      updatePromises.push(updateSetting('max_recharge_amount', data.maxRechargeAmount, 'number'));\n    }\n    if (typeof data.minWithdrawAmount === 'number') {\n      updatePromises.push(updateSetting('min_withdraw_amount', data.minWithdrawAmount, 'number'));\n    }\n    if (typeof data.maxWithdrawAmount === 'number') {\n      updatePromises.push(updateSetting('max_withdraw_amount', data.maxWithdrawAmount, 'number'));\n    }\n    if (typeof data.withdrawFeeRate === 'number') {\n      updatePromises.push(updateSetting('withdraw_fee_rate', data.withdrawFeeRate, 'number'));\n    }\n    if (typeof data.freeDrawsPerDay === 'number') {\n      updatePromises.push(updateSetting('free_draws_per_day', data.freeDrawsPerDay, 'number'));\n    }\n    \n    // 转售价格限制设置\n    if (typeof data.resale_min_discount_rate === 'number') {\n      updatePromises.push(updateSetting('resale_min_discount_rate', data.resale_min_discount_rate, 'number'));\n    }\n    if (typeof data.resale_max_discount_rate === 'number') {\n      updatePromises.push(updateSetting('resale_max_discount_rate', data.resale_max_discount_rate, 'number'));\n    }\n    if (typeof data.resale_min_price === 'number') {\n      updatePromises.push(updateSetting('resale_min_price', data.resale_min_price, 'number'));\n    }\n    if (typeof data.resale_max_price === 'number') {\n      updatePromises.push(updateSetting('resale_max_price', data.resale_max_price, 'number'));\n    }\n    if (typeof data.resale_platform_fee_rate === 'number') {\n      updatePromises.push(updateSetting('resale_platform_fee_rate', data.resale_platform_fee_rate, 'number'));\n    }\n    \n    // 输入验证设置\n    if (typeof data.max_account_length === 'number') {\n      updatePromises.push(updateSetting('max_account_length', data.max_account_length, 'number'));\n    }\n    if (typeof data.max_description_length === 'number') {\n      updatePromises.push(updateSetting('max_description_length', data.max_description_length, 'number'));\n    }\n    if (typeof data.max_phone_length === 'number') {\n      updatePromises.push(updateSetting('max_phone_length', data.max_phone_length, 'number'));\n    }\n    if (typeof data.max_address_length === 'number') {\n      updatePromises.push(updateSetting('max_address_length', data.max_address_length, 'number'));\n    }\n    \n    // 功能开关\n    if (typeof data.enableNotifications === 'boolean') {\n      updatePromises.push(updateSetting('enable_notifications', data.enableNotifications, 'boolean'));\n    }\n    if (typeof data.enableTelegramBot === 'boolean') {\n      updatePromises.push(updateSetting('enable_telegram_bot', data.enableTelegramBot, 'boolean'));\n    }\n    if (typeof data.maintenanceMode === 'boolean') {\n      updatePromises.push(updateSetting('maintenance_mode', data.maintenanceMode, 'boolean'));\n    }\n    if (typeof data.enable_price_limits === 'boolean') {\n      updatePromises.push(updateSetting('enable_price_limits', data.enable_price_limits, 'boolean'));\n    }\n    if (typeof data.enable_input_sanitization === 'boolean') {\n      updatePromises.push(updateSetting('enable_input_sanitization', data.enable_input_sanitization, 'boolean'));\n    }\n    if (typeof data.enable_amount_validation === 'boolean') {\n      updatePromises.push(updateSetting('enable_amount_validation', data.enable_amount_validation, 'boolean'));\n    }\n    \n    // 银行充值信息（需要加密存储）\n    if (data.rechargeBankName !== undefined) {\n      updatePromises.push(updateSetting('recharge_bank_name', data.rechargeBankName, 'string'));\n    }\n    if (data.rechargeBankAccountNumber !== undefined) {\n      updatePromises.push(updateSetting('recharge_bank_account_number', data.rechargeBankAccountNumber, 'string'));\n    }\n    if (data.rechargeBankAccountHolder !== undefined) {\n      updatePromises.push(updateSetting('recharge_bank_account_holder', data.rechargeBankAccountHolder, 'string'));\n    }\n    if (data.rechargeBankBranch !== undefined) {\n      updatePromises.push(updateSetting('recharge_bank_branch', data.rechargeBankBranch, 'string'));\n    }\n    if (data.rechargeInstructions !== undefined) {\n      updatePromises.push(updateSetting('recharge_instructions', data.rechargeInstructions, 'string'));\n    }\n\n    // 等待所有更新完成\n    await Promise.all(updatePromises);\n\n    // 获取更新后的设置\n    const updatedSettings = await getAllSettings();\n\n    return NextResponse.json({\n      success: true,\n      message: '系统设置更新成功',\n      settings: updatedSettings\n    });\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/settings/system/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[495,498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[495,498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[826,829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[826,829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":42,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":42,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1177,1216],"text":"((request?.headers.get('x-forwarded-for')) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1177,1216],"text":"((request?.headers.get('x-forwarded-for')) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1177,1216],"text":"(Boolean((request?.headers.get('x-forwarded-for'))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":42,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":42,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1177,1275],"text":"(request?.headers.get('x-forwarded-for') ?? \n                     request?.headers.get('x-real-ip'))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":43,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1242,1275],"text":"((request?.headers.get('x-real-ip')) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1242,1275],"text":"((request?.headers.get('x-real-ip')) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1242,1275],"text":"(Boolean((request?.headers.get('x-real-ip'))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":43,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":43,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1276,1278],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":45,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1334,1368],"text":"((request?.headers.get('user-agent')) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1334,1368],"text":"((request?.headers.get('user-agent')) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1334,1368],"text":"(Boolean((request?.headers.get('user-agent'))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":45,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":45,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1369,1371],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1759,1793],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":60,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":60,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1903,1909],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":60,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":60,"endColumn":29,"fix":{"range":[1911,1925],"text":"{return cached;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2105,2108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2105,2108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":69,"column":14,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":69,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2151,2154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2151,2154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `e` should be named `error`.","line":83,"column":20,"nodeType":"Identifier","messageId":"catch-error-name","endLine":83,"endColumn":21,"fix":{"range":[2513,2581],"text":"error) {\n            console.error('解析JSON设置失败:', setting.setting_key, error"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2530,2583],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3155,3189],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3287,3290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3287,3290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":164,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":164,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4715,4725],"text":"(operatorId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4715,4725],"text":"(operatorId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4715,4725],"text":"(Boolean(operatorId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":164,"column":23,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":164,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4729,4741],"text":"(operatorName != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4729,4741],"text":"(operatorName ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4729,4741],"text":"(Boolean(operatorName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5047,5081],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":187,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":187,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":191,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":191,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5393,5421],"text":"(url.searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5393,5421],"text":"(url.searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5393,5421],"text":"(Boolean(url.searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5422,5424],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":192,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":192,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5458,5487],"text":"(url.searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5458,5487],"text":"(url.searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5458,5487],"text":"(Boolean(url.searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":192,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":192,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5488,5490],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5640,5643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5640,5643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":200,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":200,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5661,5669],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5661,5669],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5661,5669],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":205,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":205,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5773,5784],"text":"subCategory != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5773,5784],"text":"subCategory ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5773,5784],"text":"Boolean(subCategory)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6237,6240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6237,6240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":219,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":219,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6258,6266],"text":"category != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6258,6266],"text":"category ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6258,6266],"text":"Boolean(category)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":224,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":224,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6385,6396],"text":"subCategory != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6385,6396],"text":"subCategory ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6385,6396],"text":"Boolean(subCategory)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":250,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":250,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7091,7099],"text":"(Boolean(settings))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7299,7302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7299,7302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":261,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":261,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7387,7399],"text":"(Boolean(setting.type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7400,7402],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":262,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":262,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7421,7437],"text":"(Boolean(setting.category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":262,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":262,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7438,7440],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":264,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":264,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7490,7501],"text":"(Boolean(operator_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":264,"column":21,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":264,"endColumn":23,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7502,7504],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":265,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":265,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7529,7542],"text":"(Boolean(operator_name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":265,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":265,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7543,7545],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":289,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":289,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8099,8102],"text":"(Boolean(key))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":299,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":299,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8285,8289],"text":"(Boolean(type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":299,"column":12,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":299,"endColumn":14,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8290,8292],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":300,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":300,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8309,8317],"text":"(Boolean(category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":300,"column":16,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":300,"endColumn":18,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8318,8320],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":320,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":320,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8745,8749],"text":"key == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8746,8749],"text":"(key ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8745,8749],"text":"!Boolean(key)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.SETTINGS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.SETTINGS_WRITE);\n\n// 缓存系统设置以提高性能\nlet settingsCache: { data: any; timestamp: number } | null = null;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\n// 获取缓存的系统设置\nasync function getCachedSettings() {\n  const now = Date.now();\n  if (settingsCache && (now - settingsCache.timestamp) < CACHE_DURATION) {\n    return settingsCache.data;\n  }\n  return null;\n}\n\n// 更新缓存\nfunction updateCache(settings: any) {\n  settingsCache = {\n    data: settings,\n    timestamp: Date.now()\n  };\n}\n\n// 记录操作日志\nasync function logSettingChange(\n  settingKey: string,\n  oldValue: string | null,\n  newValue: string | null,\n  changeType: string,\n  operatorId: string,\n  operatorName: string,\n  changeReason?: string,\n  request?: NextRequest\n) {\n  try {\n    const ipAddress = request?.headers.get('x-forwarded-for') || \n                     request?.headers.get('x-real-ip') || \n                     'unknown';\n    const userAgent = request?.headers.get('user-agent') || 'unknown';\n\n    await prisma.$executeRaw`\n      INSERT INTO system_setting_logs \n      (setting_key, old_value, new_value, change_type, operator_id, operator_name, change_reason, ip_address, user_agent)\n      VALUES (${settingKey}, ${oldValue}, ${newValue}, ${changeType}, ${operatorId}, ${operatorName}, ${changeReason}, ${ipAddress}::inet, ${userAgent})\n    `;\n  } catch (error) {\n    console.error('记录操作日志失败:', error);\n  }\n}\n\n// 获取所有系统参数\nasync function getAllSystemSettings() {\n  const cached = await getCachedSettings();\n  if (cached) return cached;\n\n  try {\n    const settings = await prisma.$queryRaw`\n      SELECT * FROM system_settings WHERE is_active = true ORDER BY category, setting_key\n    `;\n    \n    const settingsMap: any = {};\n    \n    settings.forEach((setting: any) => {\n      let value = setting.setting_value;\n      \n      // 根据类型转换值\n      switch (setting.setting_type) {\n        case 'number':\n          value = parseFloat(value);\n          break;\n        case 'boolean':\n          value = value === 'true';\n          break;\n        case 'json':\n          try {\n            value = JSON.parse(value);\n          } catch (e) {\n            console.error('解析JSON设置失败:', setting.setting_key, e);\n          }\n          break;\n      }\n      \n      settingsMap[setting.setting_key] = {\n        value,\n        type: setting.setting_type,\n        category: setting.category,\n        sub_category: setting.sub_category,\n        description: setting.description,\n        is_encrypted: setting.is_encrypted,\n        operator_id: setting.operator_id,\n        change_reason: setting.change_reason,\n        created_at: setting.created_at,\n        updated_at: setting.updated_at\n      };\n    });\n    \n    updateCache(settingsMap);\n    return settingsMap;\n  } catch (error) {\n    console.error('获取系统设置失败:', error);\n    throw error;\n  }\n}\n\n// 更新单个系统参数\nasync function updateSystemSetting(\n  key: string, \n  value: any, \n  type: string = 'string',\n  category: string = 'general',\n  subCategory?: string,\n  operatorId?: string,\n  operatorName?: string,\n  changeReason?: string,\n  request?: NextRequest\n) {\n  try {\n    // 获取旧值\n    const oldSetting = await prisma.$queryRaw`\n      SELECT setting_value FROM system_settings WHERE setting_key = ${key}\n    `;\n    const oldValue = oldSetting.length > 0 ? oldSetting[0].setting_value : null;\n\n    let stringValue = value;\n    \n    // 根据类型转换值\n    switch (type) {\n      case 'number':\n        stringValue = value.toString();\n        break;\n      case 'boolean':\n        stringValue = value.toString();\n        break;\n      case 'json':\n        stringValue = JSON.stringify(value);\n        break;\n      default:\n        stringValue = value.toString();\n    }\n    \n    // 执行更新或插入\n    await prisma.$queryRaw`\n      INSERT INTO system_settings \n      (setting_key, setting_value, setting_type, category, sub_category, operator_id, change_reason, is_active)\n      VALUES (${key}, ${stringValue}, ${type}, ${category}, ${subCategory}, ${operatorId}, ${changeReason}, true)\n      ON CONFLICT (setting_key) \n      DO UPDATE SET \n        setting_value = ${stringValue},\n        setting_type = ${type},\n        category = ${category},\n        sub_category = ${subCategory},\n        operator_id = ${operatorId},\n        change_reason = ${changeReason},\n        updated_at = NOW()\n    `;\n    \n    // 记录操作日志\n    if (operatorId && operatorName) {\n      await logSettingChange(\n        key,\n        oldValue,\n        stringValue,\n        oldSetting.length > 0 ? 'update' : 'create',\n        operatorId,\n        operatorName,\n        changeReason,\n        request\n      );\n    }\n    \n    // 清除缓存\n    settingsCache = null;\n    \n  } catch (error) {\n    console.error('更新系统设置失败:', error);\n    throw error;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const category = url.searchParams.get('category');\n    const subCategory = url.searchParams.get('sub_category');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = (page - 1) * limit;\n\n    let query = `\n      SELECT * FROM system_settings WHERE is_active = true\n    `;\n    const params: any[] = [];\n\n    if (category) {\n      query += ` AND category = $${params.length + 1}`;\n      params.push(category);\n    }\n\n    if (subCategory) {\n      query += ` AND sub_category = $${params.length + 1}`;\n      params.push(subCategory);\n    }\n\n    query += ` ORDER BY category, sub_category, setting_key LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(limit, offset);\n\n    const settings = await prisma.$queryRawUnsafe(query, ...params);\n\n    // 获取总数\n    let countQuery = `SELECT COUNT(*) as total FROM system_settings WHERE is_active = true`;\n    const countParams: any[] = [];\n\n    if (category) {\n      countQuery += ` AND category = $${countParams.length + 1}`;\n      countParams.push(category);\n    }\n\n    if (subCategory) {\n      countQuery += ` AND sub_category = $${countParams.length + 1}`;\n      countParams.push(subCategory);\n    }\n\n    const countResult = await prisma.$queryRawUnsafe(countQuery, ...countParams);\n    const total = parseInt(countResult[0].total);\n\n    return NextResponse.json({ \n      success: true,\n      data: settings,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  })(request);\n}\n\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { settings, operator_id, operator_name, change_reason } = data;\n\n    if (!settings || !Array.isArray(settings)) {\n      return NextResponse.json({ \n        success: false,\n        error: '无效的设置数据' \n      }, { status: 400 });\n    }\n\n    const updatePromises = settings.map((setting: any) => \n      updateSystemSetting(\n        setting.key,\n        setting.value,\n        setting.type || 'string',\n        setting.category || 'general',\n        setting.sub_category,\n        operator_id || admin.username,\n        operator_name || admin.username,\n        change_reason,\n        request\n      )\n    );\n\n    await Promise.all(updatePromises);\n\n    // 获取更新后的设置\n    const updatedSettings = await getAllSystemSettings();\n\n    return NextResponse.json({\n      success: true,\n      message: '系统参数更新成功',\n      data: updatedSettings\n    });\n  })(request);\n}\n\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const data = await request.json();\n    const { key, value, type, category, sub_category, change_reason } = data;\n\n    if (!key) {\n      return NextResponse.json({ \n        success: false,\n        error: '设置键不能为空' \n      }, { status: 400 });\n    }\n\n    await updateSystemSetting(\n      key,\n      value,\n      type || 'string',\n      category || 'general',\n      sub_category,\n      admin.username,\n      admin.username,\n      change_reason,\n      request\n    );\n\n    return NextResponse.json({\n      success: true,\n      message: '系统参数更新成功'\n    });\n  })(request);\n}\n\nexport async function DELETE(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const url = new URL(request.url);\n    const key = url.searchParams.get('key');\n\n    if (!key) {\n      return NextResponse.json({ \n        success: false,\n        error: '设置键不能为空' \n      }, { status: 400 });\n    }\n\n    // 获取旧值用于日志记录\n    const oldSetting = await prisma.$queryRaw`\n      SELECT setting_value FROM system_settings WHERE setting_key = ${key}\n    `;\n    const oldValue = oldSetting.length > 0 ? oldSetting[0].setting_value : null;\n\n    // 软删除 - 设置为不活跃状态\n    await prisma.$queryRaw`\n      UPDATE system_settings \n      SET is_active = false, updated_at = NOW()\n      WHERE setting_key = ${key}\n    `;\n\n    // 记录删除日志\n    if (oldSetting.length > 0) {\n      await logSettingChange(\n        key,\n        oldValue,\n        null,\n        'delete',\n        admin.username,\n        admin.username,\n        '软删除系统参数',\n        request\n      );\n    }\n\n    // 清除缓存\n    settingsCache = null;\n\n    return NextResponse.json({\n      success: true,\n      message: '系统参数删除成功'\n    });\n  })(request);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/analytics/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":13,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":13,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[534,562],"text":"(url.searchParams.get('days') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[534,562],"text":"(url.searchParams.get('days') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[534,562],"text":"(Boolean(url.searchParams.get('days')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":13,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":13,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[563,565],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[635,638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[635,638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1354,1357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1354,1357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1808,1811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1808,1811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2338,2341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2338,2341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2862,2865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2862,2865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":97,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":97,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3416,3428],"text":"(Boolean(baseStats[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":97,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":97,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3429,3431],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":98,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":98,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3453,3465],"text":"(Boolean(userStats[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":98,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":98,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3466,3468],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3626,3660],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.STATS_READ);\n\n// 获取晒单数据统计\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n      const url = new URL(request.url);\n      const days = parseInt(url.searchParams.get('days') || '30');\n\n      // 基础统计\n      const baseStats = await prisma.$queryRaw<any[]>`\n        SELECT \n          COUNT(*) FILTER (WHERE TRUE) as total_posts,\n          COUNT(*) FILTER (WHERE status = 'pending') as pending_posts,\n          COUNT(*) FILTER (WHERE status = 'approved') as approved_posts,\n          COUNT(*) FILTER (WHERE status = 'rejected') as rejected_posts,\n          SUM(like_count) as total_likes,\n          SUM(comment_count) as total_comments,\n          SUM(view_count) as total_views,\n          AVG(CASE \n            WHEN view_count > 0 \n            THEN ((like_count + comment_count * 2)::decimal / view_count) * 100\n            ELSE 0\n          END) as avg_engagement_rate\n        FROM show_off_posts\n      `;\n\n      // 用户行为统计\n      const userStats = await prisma.$queryRaw<any[]>`\n        SELECT \n          COUNT(DISTINCT user_id) as unique_users,\n          COUNT(*)::decimal / NULLIF(COUNT(DISTINCT user_id), 0) as posts_per_user,\n          AVG(like_count::decimal / NULLIF(view_count, 0)) as avg_like_rate,\n          AVG(comment_count::decimal / NULLIF(view_count, 0)) as avg_comment_rate\n        FROM show_off_posts\n        WHERE status = 'approved'\n      `;\n\n      // 日趋势数据\n      const dailyTrends = await prisma.$queryRaw<any[]>`\n        SELECT \n          DATE(created_at) as date,\n          COUNT(*) as total_posts,\n          COUNT(*) FILTER (WHERE status = 'approved') as approved_posts,\n          SUM(like_count) as total_likes,\n          SUM(comment_count) as total_comments,\n          SUM(view_count) as total_views\n        FROM show_off_posts\n        WHERE created_at >= NOW() - INTERVAL '${days} days'\n        GROUP BY DATE(created_at)\n        ORDER BY date DESC\n      `;\n\n      // 热门晒单 (表现最佳)\n      const topPerformers = await prisma.$queryRaw<any[]>`\n        SELECT \n          p.id,\n          p.content,\n          p.images,\n          p.like_count,\n          p.comment_count,\n          p.view_count,\n          p.hotness_score,\n          p.created_at,\n          u.first_name || ' ' || COALESCE(u.last_name, '') as user_name\n        FROM show_off_posts p\n        JOIN users u ON p.user_id = u.id\n        WHERE p.status = 'approved'\n        ORDER BY p.hotness_score DESC\n        LIMIT 10\n      `;\n\n      // 分类统计 (按产品分类)\n      const categoryStats = await prisma.$queryRaw<any[]>`\n        SELECT \n          COALESCE(pr.category, 'unknown') as category,\n          COUNT(*) as post_count,\n          AVG(p.hotness_score) as avg_hotness,\n          SUM(p.like_count) as total_likes\n        FROM show_off_posts p\n        JOIN lottery_rounds lr ON p.round_id = lr.id\n        JOIN products pr ON lr.product_id = pr.id\n        WHERE p.status = 'approved'\n        GROUP BY pr.category\n        ORDER BY post_count DESC\n      `;\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          summary: {\n            ...(baseStats[0] || {}),\n            ...(userStats[0] || {})\n          },\n          trends: dailyTrends,\n          topPerformers,\n          categories: categoryStats\n        }\n      });\n    } catch (error) {\n      console.error('获取统计数据失败:', error);\n      return NextResponse.json(\n        { success: false, error: '获取统计数据失败' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/audit/batch/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":14,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":14,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[553,560],"text":"(Boolean(postIds))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":28,"column":34,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":28,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[933,939],"text":"(Boolean(reason))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":39,"column":13,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":43,"endColumn":14,"fix":{"range":[1222,1417],"text":"return await (action === 'approve' ? processApproval(postId, admin.id) : processRejection(postId, admin.id, reason));"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1940,1972],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2284,2287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2284,2287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":80,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":80,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4316,4319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4316,4319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":167,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":167,"endColumn":14}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { prisma } from '@/lib/prisma';\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_WRITE);\n\n// 批量审核晒单\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const body = await request.json();\n    const { postIds, action, reason } = body;\n\n    if (!postIds || !Array.isArray(postIds) || postIds.length === 0) {\n      return NextResponse.json(\n        { success: false, error: '参数不完整' },\n        { status: 400 }\n      );\n    }\n\n    if (!['approve', 'reject'].includes(action)) {\n      return NextResponse.json(\n        { success: false, error: '无效的审核操作' },\n        { status: 400 }\n      );\n    }\n\n    if (action === 'reject' && (!reason || reason.trim().length === 0)) {\n      return NextResponse.json(\n        { success: false, error: '拒绝审核必须提供原因' },\n        { status: 400 }\n      );\n    }\n\n    try {\n      const results = await Promise.all(\n        postIds.map(async (postId: string) => {\n          try {\n            if (action === 'approve') {\n              return await processApproval(postId, admin.id);\n            } else {\n              return await processRejection(postId, admin.id, reason);\n            }\n          } catch (error) {\n            return {\n              postId,\n              success: false,\n              error: error instanceof Error ? error.message : '处理失败'\n            };\n          }\n        })\n      );\n\n      const successCount = results.filter(r => r.success !== false).length;\n      const failCount = results.length - successCount;\n\n      return NextResponse.json({\n        success: true,\n        message: `批量审核完成：成功 ${successCount}，失败 ${failCount}`,\n        results\n      });\n    } catch (error) {\n      console.error('批量审核失败:', error);\n      return NextResponse.json(\n        { success: false, error: '批量审核失败' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n\n// 处理审核通过\nasync function processApproval(postId: string, adminId: string) {\n  return await prisma.$transaction(async (tx) => {\n    // 获取晒单信息\n    const post = await tx.$queryRaw<any[]>`\n      SELECT * FROM show_off_posts WHERE id = ${postId}::uuid AND status = 'pending'\n    `;\n\n    if (!post || post.length === 0) {\n      throw new Error('晒单不存在或已审核');\n    }\n\n    const postData = post[0];\n\n    // 更新晒单状态\n    await tx.$executeRaw`\n      UPDATE show_off_posts \n      SET status = 'approved',\n          reviewed_by = ${adminId},\n          reviewed_at = NOW(),\n          auto_review_passed = true,\n          updated_at = NOW()\n      WHERE id = ${postId}::uuid\n    `;\n\n    // 发放3幸运币奖励\n    await tx.$executeRaw`\n      UPDATE users \n      SET lucky_coins = lucky_coins + 3.0,\n          lucky_coins_version = lucky_coins_version + 1\n      WHERE id = ${postData.user_id}::uuid\n    `;\n\n    // 记录交易\n    await tx.$executeRaw`\n      INSERT INTO wallet_transactions (\n        user_id, type, amount, lucky_coins, currency, description, \n        status, metadata, created_at\n      ) VALUES (\n        ${postData.user_id}::uuid,\n        'show_off_reward',\n        0,\n        3.0,\n        'TJS',\n        '晒单审核通过奖励',\n        'completed',\n        ${{\n          postId,\n          rewardType: 'show_off_post',\n          rewardAmount: 3.0,\n          reviewedBy: adminId\n        }}::jsonb,\n        NOW()\n      )\n    `;\n\n    // 更新晒单的奖励状态\n    await tx.$executeRaw`\n      UPDATE show_off_posts \n      SET coin_rewarded = true, coin_rewarded_at = NOW()\n      WHERE id = ${postId}::uuid\n    `;\n\n    // 记录审核日志\n    await tx.$executeRaw`\n      INSERT INTO show_off_audit_logs (\n        post_id, admin_id, action, previous_status, new_status, created_at\n      ) VALUES (\n        ${postId}::uuid,\n        ${adminId},\n        'approve',\n        'pending',\n        'approved',\n        NOW()\n      )\n    `;\n\n    return {\n      postId,\n      success: true,\n      status: 'approved',\n      coinReward: 3.0,\n      message: '审核通过，已发放3幸运币奖励'\n    };\n  });\n}\n\n// 处理审核拒绝\nasync function processRejection(postId: string, adminId: string, reason: string) {\n  return await prisma.$transaction(async (tx) => {\n    // 获取晒单信息\n    const post = await tx.$queryRaw<any[]>`\n      SELECT * FROM show_off_posts WHERE id = ${postId}::uuid AND status = 'pending'\n    `;\n\n    if (!post || post.length === 0) {\n      throw new Error('晒单不存在或已审核');\n    }\n\n    // 更新晒单状态\n    await tx.$executeRaw`\n      UPDATE show_off_posts \n      SET status = 'rejected',\n          reviewed_by = ${adminId},\n          reviewed_at = NOW(),\n          reject_reason = ${reason},\n          updated_at = NOW()\n      WHERE id = ${postId}::uuid\n    `;\n\n    // 记录审核日志\n    await tx.$executeRaw`\n      INSERT INTO show_off_audit_logs (\n        post_id, admin_id, action, reason, previous_status, new_status, created_at\n      ) VALUES (\n        ${postId}::uuid,\n        ${adminId},\n        'reject',\n        ${reason},\n        'pending',\n        'rejected',\n        NOW()\n      )\n    `;\n\n    return {\n      postId,\n      success: true,\n      status: 'rejected',\n      rejectReason: reason,\n      message: '审核拒绝'\n    };\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/content-quality/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Function 'calculateQualityScore' has a complexity of 18. Maximum allowed is 10.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":44,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[473,476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[473,476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'maxScore' is never reassigned. Use 'const' instead.","line":14,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":14,"endColumn":15,"fix":{"range":[507,526],"text":"const maxScore = 100;"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":17,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":17,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[571,591],"text":"(Boolean((post.content?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[592,594],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":18,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":18,"endColumn":40,"fix":{"range":[625,637],"text":"{score += 20;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":19,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":19,"endColumn":44,"fix":{"range":[669,681],"text":"{score += 15;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":20,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":20,"endColumn":44,"fix":{"range":[713,725],"text":"{score += 10;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":21,"column":8,"nodeType":"IfStatement","messageId":"missingCurlyAfter","endLine":21,"endColumn":19,"fix":{"range":[733,744],"text":"{score += 5;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":24,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[786,805],"text":"(Boolean((post.images?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[806,808],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":25,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":25,"endColumn":36,"fix":{"range":[835,847],"text":"{score += 30;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":26,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":26,"endColumn":41,"fix":{"range":[876,888],"text":"{score += 20;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":27,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":27,"endColumn":41,"fix":{"range":[917,929],"text":"{score += 10;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":30,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":30,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[972,987],"text":"(Boolean(post.likesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[988,990],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":30,"column":48,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":30,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[997,1015],"text":"(Boolean(post.commentsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1016,1018],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":31,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":31,"endColumn":36,"fix":{"range":[1050,1062],"text":"{score += 30;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":32,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":32,"endColumn":41,"fix":{"range":[1091,1103],"text":"{score += 20;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":33,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":33,"endColumn":40,"fix":{"range":[1131,1143],"text":"{score += 10;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":34,"column":8,"nodeType":"IfStatement","messageId":"missingCurlyAfter","endLine":34,"endColumn":19,"fix":{"range":[1151,1162],"text":"{score += 5;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":37,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":37,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1207,1235],"text":"(Boolean((post.user?.showOffPostsCount)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":37,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":37,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1236,1238],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":38,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":38,"endColumn":39,"fix":{"range":[1268,1280],"text":"{score += 20;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":39,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":39,"endColumn":43,"fix":{"range":[1311,1323],"text":"{score += 15;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":40,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":40,"endColumn":43,"fix":{"range":[1354,1366],"text":"{score += 10;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":41,"column":8,"nodeType":"IfStatement","messageId":"missingCurlyAfter","endLine":41,"endColumn":19,"fix":{"range":[1374,1385],"text":"{score += 5;}"}},{"ruleId":"complexity","severity":2,"message":"Function 'detectSuspiciousContent' has a complexity of 14. Maximum allowed is 10.","line":49,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":87,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1483,1486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1483,1486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":53,"column":8,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":53,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1552,1572],"text":"(Boolean((post.content?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":53,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":53,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1573,1575],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":58,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":58,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1636,1647],"text":"(Boolean(post.images))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":63,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":63,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1747,1774],"text":"(Boolean((post.content?.toLowerCase())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1775,1777],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2046,2068],"text":"Boolean(content.includes(word))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":82,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":82,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2300,2315],"text":"(Boolean(post.likesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":82,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":82,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2316,2318],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":82,"column":64,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":82,"endColumn":82,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2332,2350],"text":"(Boolean(post.commentsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":82,"column":83,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":82,"endColumn":85,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2351,2353],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":94,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":94,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":96,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":96,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2648,2674],"text":"(searchParams.get('filter') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2648,2674],"text":"(searchParams.get('filter') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2648,2674],"text":"(Boolean(searchParams.get('filter')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":96,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":96,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2675,2677],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":97,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":97,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2744,2769],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2744,2769],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2744,2769],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":97,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":97,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2770,2772],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":260,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":260,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6768,6780],"text":"(Boolean(result.count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":260,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":260,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6781,6783],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":270,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":270,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":270,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":51}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":16,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin/permission-manager';\n\n// 创建权限中间件\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_WRITE);\n\n/**\n * 内容质量评分算法\n */\nfunction calculateQualityScore(post: any): number {\n  let score = 0;\n  let maxScore = 100;\n\n  // 1. 内容长度 (20分)\n  const contentLength = post.content?.length || 0;\n  if (contentLength > 100) score += 20;\n  else if (contentLength > 50) score += 15;\n  else if (contentLength > 20) score += 10;\n  else score += 5;\n\n  // 2. 图片质量 (30分)\n  const imageCount = post.images?.length || 0;\n  if (imageCount >= 3) score += 30;\n  else if (imageCount >= 2) score += 20;\n  else if (imageCount >= 1) score += 10;\n\n  // 3. 用户互动 (30分)\n  const engagement = (post.likesCount || 0) + (post.commentsCount || 0) * 2;\n  if (engagement > 50) score += 30;\n  else if (engagement > 20) score += 20;\n  else if (engagement > 5) score += 10;\n  else score += 5;\n\n  // 4. 用户信誉 (20分)\n  const userPostCount = post.user?.showOffPostsCount || 0;\n  if (userPostCount > 10) score += 20;\n  else if (userPostCount > 5) score += 15;\n  else if (userPostCount > 1) score += 10;\n  else score += 5;\n\n  return Math.min(score, maxScore);\n}\n\n/**\n * 检测可疑内容\n */\nfunction detectSuspiciousContent(post: any): string[] {\n  const issues: string[] = [];\n\n  // 1. 内容过短\n  if ((post.content?.length || 0) < 10) {\n    issues.push('内容过短');\n  }\n\n  // 2. 无图片\n  if (!post.images || post.images.length === 0) {\n    issues.push('缺少图片');\n  }\n\n  // 3. 重复内容检测（简单版）\n  const content = post.content?.toLowerCase() || '';\n  const repetitivePatterns = /(.{5,})\\1{3,}/; // 检测5个字符以上重复3次\n  if (repetitivePatterns.test(content)) {\n    issues.push('疑似重复内容');\n  }\n\n  // 4. 敏感词检测（需要配置敏感词库）\n  const sensitiveWords = ['广告', '推广', '微信', 'QQ', '代理'];\n  for (const word of sensitiveWords) {\n    if (content.includes(word)) {\n      issues.push(`包含敏感词: ${word}`);\n      break;\n    }\n  }\n\n  // 5. 互动异常低\n  const daysSinceCreated = Math.floor(\n    (Date.now() - new Date(post.createdAt).getTime()) / (1000 * 60 * 60 * 24)\n  );\n  if (daysSinceCreated > 7 && (post.likesCount || 0) === 0 && (post.commentsCount || 0) === 0) {\n    issues.push('互动异常低');\n  }\n\n  return issues;\n}\n\n/**\n * GET /api/admin/show-off/content-quality\n * 获取内容质量分析\n */\nexport async function GET(req: NextRequest) {\n  return withReadPermission(req, async (adminUser) => {\n    const { searchParams } = new URL(req.url);\n    const filter = searchParams.get('filter') || 'all'; // all, low_quality, suspicious\n    const limit = parseInt(searchParams.get('limit') || '50');\n\n    // 获取晒单数据\n    const posts = await prisma.showOffPost.findMany({\n      where: {\n        status: 'approved',\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            username: true,\n            avatar: true,\n            _count: {\n              select: {\n                showOffPosts: true,\n              },\n            },\n          },\n        },\n        prize: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit * 2, // 取多一些，后面筛选\n    });\n\n    // 计算质量分数和检测问题\n    const analyzedPosts = posts.map(post => {\n      const qualityScore = calculateQualityScore({\n        ...post,\n        user: {\n          showOffPostsCount: post.user._count.showOffPosts,\n        },\n      });\n\n      const issues = detectSuspiciousContent(post);\n\n      return {\n        id: post.id,\n        content: post.content,\n        images: post.images,\n        likesCount: post.likesCount,\n        commentsCount: post.commentsCount,\n        viewsCount: post.viewsCount,\n        createdAt: post.createdAt,\n        user: {\n          id: post.user.id,\n          username: post.user.username,\n          avatar: post.user.avatar,\n          postsCount: post.user._count.showOffPosts,\n        },\n        prize: post.prize,\n        qualityScore,\n        issues,\n      };\n    });\n\n    // 根据筛选条件过滤\n    let filteredPosts = analyzedPosts;\n    if (filter === 'low_quality') {\n      filteredPosts = analyzedPosts.filter(p => p.qualityScore < 60);\n    } else if (filter === 'suspicious') {\n      filteredPosts = analyzedPosts.filter(p => p.issues.length > 0);\n    }\n\n    // 限制返回数量\n    filteredPosts = filteredPosts.slice(0, limit);\n\n    // 统计信息\n    const stats = {\n      total: analyzedPosts.length,\n      highQuality: analyzedPosts.filter(p => p.qualityScore >= 80).length,\n      mediumQuality: analyzedPosts.filter(p => p.qualityScore >= 60 && p.qualityScore < 80).length,\n      lowQuality: analyzedPosts.filter(p => p.qualityScore < 60).length,\n      suspicious: analyzedPosts.filter(p => p.issues.length > 0).length,\n      averageScore: Math.round(\n        analyzedPosts.reduce((sum, p) => sum + p.qualityScore, 0) / analyzedPosts.length\n      ),\n    };\n\n    return NextResponse.json({\n      posts: filteredPosts,\n      stats,\n    });\n  });\n}\n\n/**\n * POST /api/admin/show-off/content-quality\n * 批量处理低质量内容\n */\nexport async function POST(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { action, postIds } = body; // action: hide, delete, flag\n\n    if (!['hide', 'delete', 'flag'].includes(action)) {\n      return NextResponse.json({ error: '无效的操作类型' }, { status: 400 });\n    }\n\n    let result;\n    switch (action) {\n      case 'hide':\n        // 隐藏低质量内容\n        result = await prisma.showOffPost.updateMany({\n          where: {\n            id: { in: postIds },\n          },\n          data: {\n            status: 'hidden',\n            updatedAt: new Date(),\n          },\n        });\n        break;\n\n      case 'delete':\n        // 删除低质量内容\n        result = await prisma.showOffPost.deleteMany({\n          where: {\n            id: { in: postIds },\n          },\n        });\n        break;\n\n      case 'flag':\n        // 标记为需要人工审核\n        result = await prisma.showOffPost.updateMany({\n          where: {\n            id: { in: postIds },\n          },\n          data: {\n            status: 'flagged',\n            updatedAt: new Date(),\n          },\n        });\n        break;\n    }\n\n    // 记录操作日志\n    await prisma.operationLogs.create({\n      data: {\n        adminId: adminUser.id,\n        action: `batch_${action}_low_quality`,\n        resource: 'show_off_post',\n        resourceId: postIds.join(','),\n        details: {\n          action,\n          postIds,\n          count: postIds.length,\n        },\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      action,\n      affected: result.count || postIds.length,\n    });\n  });\n}\n\n/**\n * PUT /api/admin/show-off/content-quality\n * 更新内容质量规则配置\n */\nexport async function PUT(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { rules } = body;\n\n    // 保存质量规则配置\n    await prisma.systemSettings.upsert({\n      where: {\n        key: 'show_off_quality_rules',\n      },\n      create: {\n        key: 'show_off_quality_rules',\n        value: rules,\n        description: '晒单内容质量评分规则',\n      },\n      update: {\n        value: rules,\n        updatedAt: new Date(),\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: '质量规则已更新',\n    });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/hotness/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[643,672],"text":"(searchParams.get('timeRange') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[643,672],"text":"(searchParams.get('timeRange') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[643,672],"text":"(Boolean(searchParams.get('timeRange')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":16,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":16,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[673,675],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[725,750],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[725,750],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[725,750],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[751,753],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":79,"column":21,"nodeType":"TSAsExpression","messageId":"conditionErrorAny","endLine":79,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2066,2093],"text":"(Boolean((hotnessConfig?.value as any)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2090,2093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2090,2093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2094,2096],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":100,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":100,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2646,2661],"text":"(Boolean(post.likesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":100,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":100,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2662,2664],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":101,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2706,2724],"text":"(Boolean(post.commentsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":101,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":101,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2725,2727],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":102,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":102,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2769,2784],"text":"(Boolean(post.viewsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":102,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":102,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2785,2787],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":119,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":119,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":140,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":140,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3591,3602],"text":"Boolean(recalculate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":155,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":155,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4054,4069],"text":"(Boolean(post.likesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":155,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":155,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4070,4072],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":156,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":156,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4107,4125],"text":"(Boolean(post.commentsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4126,4128],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":157,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":157,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4166,4181],"text":"(Boolean(post.viewsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":157,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":157,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4182,4184],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":173,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":173,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4530,4541],"text":"(Boolean(recalculate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":193,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":193,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4972,4976],"text":"(Boolean(post))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":197,"column":37,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":197,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5092,5109],"text":"(Boolean(post.hotnessScore))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":197,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":197,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5110,5112],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin/permission-manager';\n\n// 创建权限中间件\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_WRITE);\n\n/**\n * GET /api/admin/show-off/hotness\n * 获取热度排行和配置\n */\nexport async function GET(req: NextRequest) {\n  return withReadPermission(req, async (adminUser) => {\n    const { searchParams } = new URL(req.url);\n    const timeRange = searchParams.get('timeRange') || '7d'; // 7d, 30d, all\n    const limit = parseInt(searchParams.get('limit') || '50');\n\n    // 计算时间范围\n    let startDate: Date | undefined;\n    if (timeRange === '7d') {\n      startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    } else if (timeRange === '30d') {\n      startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    }\n\n    // 获取热度排行\n    const posts = await prisma.showOffPost.findMany({\n      where: {\n        status: 'approved',\n        ...(startDate && {\n          createdAt: {\n            gte: startDate,\n          },\n        }),\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            username: true,\n            avatar: true,\n          },\n        },\n        prize: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n      orderBy: {\n        hotnessScore: 'desc',\n      },\n      take: limit,\n    });\n\n    // 计算热度分布\n    const hotnessDistribution = await prisma.showOffPost.groupBy({\n      by: ['hotnessScore'],\n      _count: true,\n      where: {\n        status: 'approved',\n        ...(startDate && {\n          createdAt: {\n            gte: startDate,\n          },\n        }),\n      },\n    });\n\n    // 获取热度算法配置\n    const hotnessConfig = await prisma.systemSettings.findFirst({\n      where: {\n        key: 'show_off_hotness_weights',\n      },\n    });\n\n    const weights = hotnessConfig?.value as any || {\n      likes: 1.0,\n      comments: 2.0,\n      views: 0.1,\n      time_decay: 0.95, // 每天衰减5%\n    };\n\n    return NextResponse.json({\n      posts: posts.map(post => ({\n        id: post.id,\n        content: post.content,\n        images: post.images,\n        hotnessScore: post.hotnessScore,\n        likesCount: post.likesCount,\n        commentsCount: post.commentsCount,\n        viewsCount: post.viewsCount,\n        createdAt: post.createdAt,\n        user: post.user,\n        prize: post.prize,\n        // 计算热度组成\n        breakdown: {\n          likes: (post.likesCount || 0) * weights.likes,\n          comments: (post.commentsCount || 0) * weights.comments,\n          views: (post.viewsCount || 0) * weights.views,\n        },\n      })),\n      distribution: hotnessDistribution.map(d => ({\n        score: d.hotnessScore,\n        count: d._count,\n      })),\n      config: weights,\n    });\n  });\n}\n\n/**\n * POST /api/admin/show-off/hotness\n * 更新热度算法配置\n */\nexport async function POST(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { weights, recalculate } = body;\n\n    // 更新配置\n    await prisma.systemSettings.upsert({\n      where: {\n        key: 'show_off_hotness_weights',\n      },\n      create: {\n        key: 'show_off_hotness_weights',\n        value: weights,\n        description: '晒单热度算法权重配置',\n      },\n      update: {\n        value: weights,\n        updatedAt: new Date(),\n      },\n    });\n\n    // 如果需要重新计算所有晒单的热度\n    if (recalculate) {\n      const posts = await prisma.showOffPost.findMany({\n        where: {\n          status: 'approved',\n        },\n      });\n\n      // 批量更新热度分数\n      const updatePromises = posts.map(post => {\n        const daysSinceCreated = Math.floor(\n          (Date.now() - post.createdAt.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        const timeDecay = Math.pow(weights.time_decay, daysSinceCreated);\n\n        const newHotness = Math.round(\n          ((post.likesCount || 0) * weights.likes +\n            (post.commentsCount || 0) * weights.comments +\n            (post.viewsCount || 0) * weights.views) *\n            timeDecay\n        );\n\n        return prisma.showOffPost.update({\n          where: { id: post.id },\n          data: { hotnessScore: newHotness },\n        });\n      });\n\n      await Promise.all(updatePromises);\n    }\n\n    return NextResponse.json({\n      success: true,\n      updated: recalculate,\n      message: recalculate\n        ? `热度算法已更新，${recalculate}个晒单的热度已重新计算`\n        : '热度算法配置已更新',\n    });\n  });\n}\n\n/**\n * PATCH /api/admin/show-off/hotness\n * 手动调整特定晒单的热度\n */\nexport async function PATCH(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { postId, adjustment } = body;\n\n    const post = await prisma.showOffPost.findUnique({\n      where: { id: postId },\n    });\n\n    if (!post) {\n      return NextResponse.json({ error: '晒单不存在' }, { status: 404 });\n    }\n\n    const newHotness = Math.max(0, (post.hotnessScore || 0) + adjustment);\n\n    await prisma.showOffPost.update({\n      where: { id: postId },\n      data: { hotnessScore: newHotness },\n    });\n\n    // 记录操作日志\n    await prisma.operationLogs.create({\n      data: {\n        adminId: adminUser.id,\n        action: 'adjust_hotness',\n        resource: 'show_off_post',\n        resourceId: postId,\n        details: {\n          oldHotness: post.hotnessScore,\n          newHotness,\n          adjustment,\n        },\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      postId,\n      oldHotness: post.hotnessScore,\n      newHotness,\n    });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/posts/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":15,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[687,711],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[687,711],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[687,711],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":15,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":15,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[712,714],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[748,773],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[748,773],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[748,773],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":16,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":16,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[774,776],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[803,829],"text":"(searchParams.get('status') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[803,829],"text":"(searchParams.get('status') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[803,829],"text":"(Boolean(searchParams.get('status')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[830,832],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":67,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":67,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2125,2143],"text":"(Boolean(post.user.lastName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2144,2146],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":76,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":76,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2422,2458],"text":"(Boolean(post.round.products.nameMultilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2422,2503],"text":"(post.round.products.nameMultilingual ?? \n              post.round.products.nameZh)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":77,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":77,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2477,2503],"text":"(Boolean(post.round.products.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2477,2548],"text":"(post.round.products.nameZh ?? \n              post.round.products.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":78,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":78,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2522,2548],"text":"(Boolean(post.round.products.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2549,2551],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":120,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":186,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":125,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":125,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3707,3713],"text":"(Boolean(postId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":125,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":125,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3718,3724],"text":"(Boolean(action))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":139,"column":34,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":139,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4047,4053],"text":"(Boolean(reason))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":175,"column":5,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":179,"endColumn":6,"fix":{"range":[4791,4958],"text":"result = await (action === 'approve' ? processApproval(postId, admin.id) : processRejection(postId, admin.id, reason));"}},{"ruleId":"no-unused-vars","severity":2,"message":"'checkAdminPermission' is defined but never used. Allowed unused vars must match /^_/u.","line":286,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkAdminPermission' is defined but never used. Allowed unused vars must match /^_/u.","line":286,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":286,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":286,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":286,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":286,"endColumn":43}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AdminPermissionManager } from '@/lib/admin-permission-manager';\nimport { AdminPermissions } from '@/lib/admin-permissions';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_WRITE);\n\n// 获取待审核晒单列表\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const status = searchParams.get('status') || 'pending'; // pending, approved, rejected\n\n    const skip = (page - 1) * limit;\n\n    const [posts, total] = await Promise.all([\n      prisma.showOffPosts.findMany({\n        where: { status },\n        include: {\n          user: {\n            select: {\n              id: true,\n              firstName: true,\n              lastName: true,\n              avatarUrl: true,\n              vipLevel: true,\n              preferredLanguage: true\n            }\n          },\n          round: {\n            select: {\n              id: true,\n              roundNumber: true,\n              winningNumber: true,\n              drawTime: true,\n              products: {\n                select: {\n                  id: true,\n                  nameMultilingual: true,\n                  nameZh: true,\n                  nameEn: true,\n                  nameRu: true,\n                  images: true,\n                  marketPrice: true\n                }\n              }\n            }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip,\n        take: limit\n      }),\n      prisma.showOffPosts.count({ where: { status } })\n    ]);\n\n    // 格式化返回数据\n    const formattedPosts = posts.map(post => ({\n      id: post.id,\n      user: {\n        id: post.user.id,\n        name: `${post.user.firstName} ${post.user.lastName || ''}`.trim(),\n        avatar: post.user.avatarUrl,\n        vipLevel: post.user.vipLevel,\n        preferredLanguage: post.user.preferredLanguage\n      },\n      content: post.content,\n      images: post.images,\n      product: {\n        id: post.round.products.id,\n        name: post.round.products.nameMultilingual || \n              post.round.products.nameZh || \n              post.round.products.nameEn || \n              post.round.products.nameRu,\n        winningNumber: post.round.winningNumber,\n        drawTime: post.round.drawTime\n      },\n      stats: {\n        likeCount: post.likeCount,\n        commentCount: post.commentCount,\n        shareCount: post.shareCount,\n        viewCount: post.viewCount\n      },\n      review: {\n        autoReviewPassed: post.autoReviewPassed,\n        autoReviewReason: post.autoReviewReason,\n        reviewedBy: post.reviewedBy,\n        reviewedAt: post.reviewedAt,\n        rejectReason: post.rejectReason\n      },\n      createdAt: post.createdAt\n    }));\n\n    const totalPages = Math.ceil(total / limit);\n    const hasMore = page < totalPages;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        posts: formattedPosts,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages,\n          hasMore\n        }\n      }\n    });\n  })(request);\n}\n\n// 审核晒单\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const body = await request.json();\n    const { postId, action, reason } = body;\n\n    // 验证必需字段\n    if (!postId || !action) {\n      return NextResponse.json(\n        { success: false, error: '缺少必需字段' },\n        { status: 400 }\n      );\n    }\n\n    if (!['approve', 'reject'].includes(action)) {\n      return NextResponse.json(\n        { success: false, error: '无效的审核操作' },\n        { status: 400 }\n      );\n    }\n\n    if (action === 'reject' && (!reason || reason.trim().length === 0)) {\n      return NextResponse.json(\n        { success: false, error: '拒绝审核必须提供原因' },\n        { status: 400 }\n      );\n    }\n\n    // 获取晒单信息\n    const post = await prisma.showOffPosts.findUnique({\n      where: { id: postId },\n      include: {\n        user: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true\n          }\n        }\n      }\n    });\n\n    if (!post) {\n      return NextResponse.json(\n        { success: false, error: '晒单不存在' },\n        { status: 404 }\n      );\n    }\n\n    if (post.status !== 'pending') {\n      return NextResponse.json(\n        { success: false, error: '晒单已审核，不能重复审核' },\n        { status: 400 }\n      );\n    }\n\n    let result;\n    if (action === 'approve') {\n      result = await processApproval(postId, admin.id);\n    } else {\n      result = await processRejection(postId, admin.id, reason);\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      message: action === 'approve' ? '审核通过' : '审核拒绝'\n    });\n  })(request);\n}\n\n// 处理审核通过\nasync function processApproval(postId: string, reviewerId: string) {\n  return await prisma.$transaction(async (tx) => {\n    // 更新晒单状态\n    const updatedPost = await tx.showOffPosts.update({\n      where: { id: postId },\n      data: {\n        status: 'approved',\n        reviewedBy: reviewerId,\n        reviewedAt: new Date(),\n        autoReviewPassed: true\n      },\n      include: {\n        user: true\n      }\n    });\n\n    // 发放3幸运币奖励\n    await tx.users.update({\n      where: { id: updatedPost.userId },\n      data: {\n        luckyCoins: {\n          increment: 3.0\n        },\n        luckyCoinsVersion: {\n          increment: 1\n        }\n      }\n    });\n\n    // 记录交易\n    await tx.walletTransactions.create({\n      data: {\n        userId: updatedPost.userId,\n        type: 'show_off_reward',\n        amount: 0,\n        luckyCoins: 3.0,\n        currency: 'TJS',\n        description: '晒单审核通过奖励',\n        status: 'completed',\n        metadata: {\n          postId,\n          rewardType: 'show_off_post',\n          rewardAmount: 3.0,\n          reviewedBy: reviewerId\n        }\n      }\n    });\n\n    // 更新晒单的奖励状态\n    await tx.showOffPosts.update({\n      where: { id: postId },\n      data: {\n        coinRewarded: true,\n        coinRewardedAt: new Date()\n      }\n    });\n\n    // TODO: 发送通知给用户\n    // await sendNotification(updatedPost.userId, `您的晒单审核通过，已获得3幸运币`);\n\n    return {\n      id: updatedPost.id,\n      status: 'approved',\n      coinReward: 3.0,\n      message: '审核通过，已发放3幸运币奖励'\n    };\n  });\n}\n\n// 处理审核拒绝\nasync function processRejection(postId: string, reviewerId: string, reason: string) {\n  const updatedPost = await prisma.showOffPosts.update({\n    where: { id: postId },\n    data: {\n      status: 'rejected',\n      reviewedBy: reviewerId,\n      reviewedAt: new Date(),\n      rejectReason: reason\n    },\n    include: {\n      user: true\n    }\n  });\n\n  // TODO: 发送通知给用户\n  // await sendNotification(updatedPost.userId, `您的晒单审核未通过：${reason}`);\n\n  return {\n    id: updatedPost.id,\n    status: 'rejected',\n    rejectReason: reason,\n    message: '审核拒绝'\n  };\n}\n\n// 验证管理员权限（简化版本，实际项目中应该更严格）\nasync function checkAdminPermission(userId: string): Promise<boolean> {\n  // 这里应该查询管理员表或用户权限\n  // 暂时返回true，实际情况应该根据具体业务需求实现\n  return true;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/recommendations/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":20,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[811,819],"text":"(position != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[811,819],"text":"(position ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[811,819],"text":"(Boolean(position))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":50,"column":23,"nodeType":"TSAsExpression","messageId":"conditionErrorAny","endLine":50,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1488,1516],"text":"(Boolean((positionConfig?.value as any)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1513,1516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1513,1516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1517,1519],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":94,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":94,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2723,2727],"text":"(Boolean(post))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":107,"column":23,"nodeType":"TSAsExpression","messageId":"conditionErrorAny","endLine":107,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3107,3135],"text":"(Boolean((positionConfig?.value as any)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3132,3135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3132,3135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":107,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":107,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3136,3138],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":108,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":108,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3164,3193],"text":"(Boolean((positions[position]?.maxCount)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":108,"column":22,"nodeType":"MemberExpression","endLine":108,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":108,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":108,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3194,3196],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":129,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":129,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3647,3655],"text":"(Boolean(priority))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3656,3658],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":130,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":130,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3681,3690],"text":"(Boolean(startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":131,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":131,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3744,3751],"text":"(Boolean(endTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":190,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":190,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5008,5022],"text":"(Boolean(recommendation))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":198,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":198,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5266,5275],"text":"(Boolean(startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":199,"column":49,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":199,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5364,5371],"text":"(Boolean(endTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":253,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":253,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6570,6573],"text":"id == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6571,6573],"text":"(id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6570,6573],"text":"!Boolean(id)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7389,7392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7389,7392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7815,7818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7815,7818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin/permission-manager';\n\n// 创建权限中间件\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_READ);\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_WRITE);\n\n/**\n * GET /api/admin/show-off/recommendations\n * 获取推荐列表和配置\n */\nexport async function GET(req: NextRequest) {\n  return withReadPermission(req, async (adminUser) => {\n    const { searchParams } = new URL(req.url);\n    const position = searchParams.get('position'); // homepage, detail, profile\n\n    // 获取推荐配置\n    const recommendations = await prisma.showOffRecommendation.findMany({\n      where: position ? { position } : undefined,\n      include: {\n        post: {\n          include: {\n            user: {\n              select: {\n                id: true,\n                username: true,\n                avatar: true,\n              },\n            },\n            prize: {\n              select: {\n                id: true,\n                name: true,\n              },\n            },\n          },\n        },\n      },\n      orderBy: [{ priority: 'desc' }, { createdAt: 'desc' }],\n    });\n\n    // 获取推荐位配置\n    const positionConfig = await prisma.systemSettings.findFirst({\n      where: {\n        key: 'show_off_recommendation_positions',\n      },\n    });\n\n    const positions = positionConfig?.value as any || {\n      homepage: { maxCount: 5, description: '首页推荐位' },\n      detail: { maxCount: 3, description: '详情页推荐位' },\n      profile: { maxCount: 4, description: '个人页推荐位' },\n    };\n\n    return NextResponse.json({\n      recommendations: recommendations.map(rec => ({\n        id: rec.id,\n        position: rec.position,\n        priority: rec.priority,\n        startTime: rec.startTime,\n        endTime: rec.endTime,\n        isActive: rec.isActive,\n        post: {\n          id: rec.post.id,\n          content: rec.post.content,\n          images: rec.post.images,\n          likesCount: rec.post.likesCount,\n          commentsCount: rec.post.commentsCount,\n          hotnessScore: rec.post.hotnessScore,\n          user: rec.post.user,\n          prize: rec.post.prize,\n        },\n      })),\n      positions,\n    });\n  });\n}\n\n/**\n * POST /api/admin/show-off/recommendations\n * 添加推荐\n */\nexport async function POST(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { postId, position, priority, startTime, endTime } = body;\n\n    // 验证晒单是否存在且已审核\n    const post = await prisma.showOffPost.findUnique({\n      where: { id: postId },\n    });\n\n    if (!post) {\n      return NextResponse.json({ error: '晒单不存在' }, { status: 404 });\n    }\n\n    if (post.status !== 'approved') {\n      return NextResponse.json({ error: '只能推荐已审核通过的晒单' }, { status: 400 });\n    }\n\n    // 检查该位置的推荐数量是否已满\n    const positionConfig = await prisma.systemSettings.findFirst({\n      where: { key: 'show_off_recommendation_positions' },\n    });\n\n    const positions = positionConfig?.value as any || {};\n    const maxCount = positions[position]?.maxCount || 5;\n\n    const currentCount = await prisma.showOffRecommendation.count({\n      where: {\n        position,\n        isActive: true,\n      },\n    });\n\n    if (currentCount >= maxCount) {\n      return NextResponse.json(\n        { error: `该推荐位已满 (最多${maxCount}个)` },\n        { status: 400 }\n      );\n    }\n\n    // 创建推荐\n    const recommendation = await prisma.showOffRecommendation.create({\n      data: {\n        postId,\n        position,\n        priority: priority || 0,\n        startTime: startTime ? new Date(startTime) : new Date(),\n        endTime: endTime ? new Date(endTime) : undefined,\n        isActive: true,\n      },\n      include: {\n        post: {\n          include: {\n            user: {\n              select: {\n                id: true,\n                username: true,\n                avatar: true,\n              },\n            },\n            prize: {\n              select: {\n                id: true,\n                name: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // 记录操作日志\n    await prisma.operationLogs.create({\n      data: {\n        adminId: adminUser.id,\n        action: 'add_recommendation',\n        resource: 'show_off_recommendation',\n        resourceId: recommendation.id,\n        details: {\n          postId,\n          position,\n          priority,\n        },\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      recommendation,\n    });\n  });\n}\n\n/**\n * PATCH /api/admin/show-off/recommendations\n * 更新推荐\n */\nexport async function PATCH(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { id, priority, startTime, endTime, isActive } = body;\n\n    const recommendation = await prisma.showOffRecommendation.findUnique({\n      where: { id },\n    });\n\n    if (!recommendation) {\n      return NextResponse.json({ error: '推荐不存在' }, { status: 404 });\n    }\n\n    const updated = await prisma.showOffRecommendation.update({\n      where: { id },\n      data: {\n        ...(priority !== undefined && { priority }),\n        ...(startTime && { startTime: new Date(startTime) }),\n        ...(endTime !== undefined && { endTime: endTime ? new Date(endTime) : null }),\n        ...(isActive !== undefined && { isActive }),\n        updatedAt: new Date(),\n      },\n      include: {\n        post: {\n          include: {\n            user: {\n              select: {\n                id: true,\n                username: true,\n                avatar: true,\n              },\n            },\n            prize: {\n              select: {\n                id: true,\n                name: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // 记录操作日志\n    await prisma.operationLogs.create({\n      data: {\n        adminId: adminUser.id,\n        action: 'update_recommendation',\n        resource: 'show_off_recommendation',\n        resourceId: id,\n        details: {\n          changes: { priority, startTime, endTime, isActive },\n        },\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      recommendation: updated,\n    });\n  });\n}\n\n/**\n * DELETE /api/admin/show-off/recommendations\n * 删除推荐\n */\nexport async function DELETE(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const { searchParams } = new URL(req.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ error: '缺少推荐ID' }, { status: 400 });\n    }\n\n    await prisma.showOffRecommendation.delete({\n      where: { id },\n    });\n\n    // 记录操作日志\n    await prisma.operationLogs.create({\n      data: {\n        adminId: adminUser.id,\n        action: 'delete_recommendation',\n        resource: 'show_off_recommendation',\n        resourceId: id,\n        details: {},\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: '推荐已删除',\n    });\n  });\n}\n\n/**\n * PUT /api/admin/show-off/recommendations\n * 批量更新推荐优先级\n */\nexport async function PUT(req: NextRequest) {\n  return withWritePermission(req, async (adminUser) => {\n    const body = await req.json();\n    const { recommendations } = body; // [{ id, priority }]\n\n    const updatePromises = recommendations.map((rec: any) =>\n      prisma.showOffRecommendation.update({\n        where: { id: rec.id },\n        data: { priority: rec.priority },\n      })\n    );\n\n    await Promise.all(updatePromises);\n\n    // 记录操作日志\n    await prisma.operationLogs.create({\n      data: {\n        adminId: adminUser.id,\n        action: 'batch_update_recommendation_priority',\n        resource: 'show_off_recommendation',\n        resourceId: recommendations.map((r: any) => r.id).join(','),\n        details: {\n          recommendations,\n        },\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: `已更新${recommendations.length}个推荐的优先级`,\n    });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/show-off/users/[id]/posts/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 13. Maximum allowed is 10.","line":16,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":167,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUser' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":58,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":58,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1543,1555],"text":"(Boolean(p.likesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":58,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":58,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1556,1558],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":59,"column":54,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":59,"endColumn":69,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1620,1635],"text":"(Boolean(p.commentsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":59,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":59,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1636,1638],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":60,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":60,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1697,1709],"text":"(Boolean(p.viewsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":60,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":60,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1710,1712],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":63,"column":56,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":63,"endColumn":70,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1823,1837],"text":"(Boolean(p.hotnessScore))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1838,1840],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":74,"column":11,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":74,"endColumn":18,"fix":{"range":[2054,2353],"text":"for (const post of posts) {\n      const avgEngagement = ((post.likesCount || 0) + (post.commentsCount || 0)) / 2;\n      if (avgEngagement > 20) qualityDistribution.highQuality++;\n      else if (avgEngagement >= 5) qualityDistribution.mediumQuality++;\n      else qualityDistribution.lowQuality++;\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":75,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2108,2123],"text":"(Boolean(post.likesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":75,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":75,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2124,2126],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":56,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":75,"endColumn":74,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2133,2151],"text":"(Boolean(post.commentsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":75,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":75,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2152,2154],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":76,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":76,"endColumn":65,"fix":{"range":[2194,2228],"text":"{qualityDistribution.highQuality++;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":77,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":77,"endColumn":72,"fix":{"range":[2264,2300],"text":"{qualityDistribution.mediumQuality++;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":78,"column":12,"nodeType":"IfStatement","messageId":"missingCurlyAfter","endLine":78,"endColumn":45,"fix":{"range":[2312,2345],"text":"{qualityDistribution.lowQuality++;}"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":85,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":85,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2487,2488],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":86,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":86,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2522,2536],"text":"(Boolean(p.prize!.value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":86,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":86,"endColumn":36,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2529,2530],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":86,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":86,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2537,2539],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":87,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":92,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[2551,2674],"text":"acc[prizeName] ??= {\n            count: 0,\n            totalValue: 0,\n          };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":87,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2556,2570],"text":"(Boolean(acc[prizeName]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":87,"column":14,"nodeType":"MemberExpression","endLine":87,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":88,"column":11,"nodeType":"MemberExpression","endLine":88,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":93,"column":9,"nodeType":"MemberExpression","endLine":93,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":94,"column":9,"nodeType":"MemberExpression","endLine":94,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":101,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":101,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3000,3032],"text":"acc[month] ??= 0;"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":101,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3005,3015],"text":"(Boolean(acc[month]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":101,"column":12,"nodeType":"MemberExpression","endLine":101,"endColumn":22},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":101,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":101,"endColumn":39,"fix":{"range":[3017,3032],"text":"{acc[month] = 0;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":101,"column":24,"nodeType":"MemberExpression","endLine":101,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":102,"column":7,"nodeType":"MemberExpression","endLine":102,"endColumn":17}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":4,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AdminPermissionManager, AdminPermissions } from '@/lib/admin/permission-manager';\n\n// 创建权限中间件\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware(AdminPermissions.USERS_READ);\n\n/**\n * GET /api/admin/show-off/users/[id]/posts\n * 获取用户的晒单历史和画像\n */\nexport async function GET(\n  req: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  return withReadPermission(req, async (adminUser) => {\n    const userId = params.id;\n\n    // 获取用户基本信息\n    const user = await prisma.users.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        username: true,\n        avatar: true,\n        createdAt: true,\n        telegramUsername: true,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json({ error: '用户不存在' }, { status: 404 });\n    }\n\n    // 获取用户所有晒单\n    const posts = await prisma.showOffPost.findMany({\n      where: { userId },\n      include: {\n        prize: {\n          select: {\n            id: true,\n            name: true,\n            value: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    // 计算用户晒单统计\n    const stats = {\n      totalPosts: posts.length,\n      approvedPosts: posts.filter(p => p.status === 'approved').length,\n      rejectedPosts: posts.filter(p => p.status === 'rejected').length,\n      pendingPosts: posts.filter(p => p.status === 'pending').length,\n      totalLikes: posts.reduce((sum, p) => sum + (p.likesCount || 0), 0),\n      totalComments: posts.reduce((sum, p) => sum + (p.commentsCount || 0), 0),\n      totalViews: posts.reduce((sum, p) => sum + (p.viewsCount || 0), 0),\n      averageHotness:\n        posts.length > 0\n          ? Math.round(posts.reduce((sum, p) => sum + (p.hotnessScore || 0), 0) / posts.length)\n          : 0,\n    };\n\n    // 计算内容质量分布\n    const qualityDistribution = {\n      highQuality: 0, // 平均互动 > 20\n      mediumQuality: 0, // 平均互动 5-20\n      lowQuality: 0, // 平均互动 < 5\n    };\n\n    posts.forEach(post => {\n      const avgEngagement = ((post.likesCount || 0) + (post.commentsCount || 0)) / 2;\n      if (avgEngagement > 20) qualityDistribution.highQuality++;\n      else if (avgEngagement >= 5) qualityDistribution.mediumQuality++;\n      else qualityDistribution.lowQuality++;\n    });\n\n    // 获奖奖品统计\n    const prizeStats = posts\n      .filter(p => p.prize)\n      .reduce((acc, p) => {\n        const prizeName = p.prize!.name;\n        const prizeValue = p.prize!.value || 0;\n        if (!acc[prizeName]) {\n          acc[prizeName] = {\n            count: 0,\n            totalValue: 0,\n          };\n        }\n        acc[prizeName].count++;\n        acc[prizeName].totalValue += prizeValue;\n        return acc;\n      }, {} as Record<string, { count: number; totalValue: number }>);\n\n    // 时间分布分析\n    const postsByMonth = posts.reduce((acc, p) => {\n      const month = new Date(p.createdAt).toISOString().slice(0, 7); // YYYY-MM\n      if (!acc[month]) acc[month] = 0;\n      acc[month]++;\n      return acc;\n    }, {} as Record<string, number>);\n\n    // 用户行为画像\n    const profile = {\n      activityLevel:\n        posts.length > 10 ? 'high' : posts.length > 3 ? 'medium' : 'low',\n      contentQuality:\n        qualityDistribution.highQuality / posts.length > 0.5\n          ? 'high'\n          : qualityDistribution.mediumQuality / posts.length > 0.3\n          ? 'medium'\n          : 'low',\n      engagementRate:\n        posts.length > 0\n          ? (stats.totalLikes + stats.totalComments) / posts.length\n          : 0,\n      approvalRate: posts.length > 0 ? stats.approvedPosts / posts.length : 0,\n      avgPostInterval:\n        posts.length > 1\n          ? Math.round(\n              (new Date(posts[0].createdAt).getTime() -\n                new Date(posts[posts.length - 1].createdAt).getTime()) /\n                (1000 * 60 * 60 * 24) /\n                (posts.length - 1)\n            )\n          : 0, // 平均发帖间隔（天）\n    };\n\n    // 风险指标\n    const riskIndicators = {\n      hasLowQualityPosts: qualityDistribution.lowQuality > posts.length * 0.5,\n      hasHighRejectionRate: profile.approvalRate < 0.6,\n      hasSuspiciousActivity: profile.avgPostInterval < 1 && posts.length > 5, // 一天多条\n      hasNoEngagement: stats.totalLikes === 0 && stats.totalComments === 0 && posts.length > 3,\n    };\n\n    return NextResponse.json({\n      user,\n      posts: posts.map(post => ({\n        id: post.id,\n        content: post.content,\n        images: post.images,\n        status: post.status,\n        likesCount: post.likesCount,\n        commentsCount: post.commentsCount,\n        viewsCount: post.viewsCount,\n        hotnessScore: post.hotnessScore,\n        createdAt: post.createdAt,\n        prize: post.prize,\n      })),\n      stats,\n      qualityDistribution,\n      prizeStats: Object.entries(prizeStats).map(([name, data]) => ({\n        prizeName: name,\n        count: data.count,\n        totalValue: data.totalValue,\n      })),\n      postsByMonth: Object.entries(postsByMonth)\n        .map(([month, count]) => ({ month, count }))\n        .sort((a, b) => a.month.localeCompare(b.month)),\n      profile,\n      riskIndicators,\n    });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/stats/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'withReadPermission' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withReadPermission' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":25},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 16. Maximum allowed is 10.","line":14,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":59,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":40,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":40,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1190,1207],"text":"(Boolean(stats.total_users))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1208,1210],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":41,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":41,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1243,1261],"text":"(Boolean(stats.total_orders))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":41,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":41,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1262,1264],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":42,"column":36,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":42,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1304,1329],"text":"(Boolean(stats.pending_withdrawals))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":42,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":42,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1330,1332],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":43,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":43,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1366,1385],"text":"(Boolean(stats.active_rounds))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":43,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":43,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1386,1388],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":44,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":44,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1420,1437],"text":"(Boolean(stats.today_users))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":44,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":44,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1438,1440],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":45,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":45,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1473,1491],"text":"(Boolean(stats.today_orders))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":45,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":45,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1492,1494],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":46,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":46,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1521,1552],"text":"(Boolean((stats.today_revenue?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1553,1555],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":47,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":47,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1583,1614],"text":"(Boolean((stats.total_revenue?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1615,1617],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":48,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1660,1688],"text":"(Boolean(stats.active_resale_listings))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1689,1691],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":49,"column":37,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":49,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1732,1758],"text":"(Boolean(stats.today_participations))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1759,1761],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1799,1802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1799,1802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1810,1851],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":56,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":56,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1918,1931],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":56,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":56,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1932,1934],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport QueryOptimizer from '@/lib/query-optimizer';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.stats.read()\n});\n\n// GET /api/admin/stats - 获取后台统计数据\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证管理员权限\n    const admin = getAdminFromRequest(request);\n    if (!admin) {\n      return NextResponse.json({\n        success: false,\n        error: '管理员权限验证失败'\n      }, { status: 403 });\n    }\n\n    // 检查统计查看权限\n    const hasPermission = admin.permissions.includes('stats:read') || admin.role === 'super_admin';\n    if (!hasPermission) {\n      return NextResponse.json({\n        success: false,\n        error: '权限不足：无法查看统计数据'\n      }, { status: 403 });\n    }\n\n    // 使用优化的统计查询\n    const stats = await QueryOptimizer.getDashboardStats();\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        totalUsers: Number(stats.total_users || 0),\n        totalOrders: Number(stats.total_orders || 0),\n        pendingWithdrawals: Number(stats.pending_withdrawals || 0),\n        activeRounds: Number(stats.active_rounds || 0),\n        todayUsers: Number(stats.today_users || 0),\n        todayOrders: Number(stats.today_orders || 0),\n        todayRevenue: stats.today_revenue?.toString() || '0',\n        totalRevenue: stats.total_revenue?.toString() || '0',\n        activeResaleListings: Number(stats.active_resale_listings || 0),\n        todayParticipations: Number(stats.today_participations || 0)\n      }\n    });\n  } catch (error: any) {\n    console.error('Stats API error:', error);\n    return NextResponse.json({\n      success: false,\n      error: error.message || 'Failed to fetch stats'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/telegram/history/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":30,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[646,671],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[646,671],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[646,671],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[672,674],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[949,983],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\nexport async function GET(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const { searchParams } = new URL(request.url);\n      const limit = parseInt(searchParams.get('limit') || '50');\n\n      const history = await prisma.botPushHistory.findMany({\n        take: limit,\n        orderBy: {\n          sendTime: 'desc'\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: history\n      });\n\n    } catch (error) {\n      console.error('获取推送历史失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/telegram/status/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1278,1313],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\nexport async function GET(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      // 获取第一个Bot的状态（如果有多个Bot，需要修改逻辑）\n      const status = await prisma.botStatus.findFirst({\n        orderBy: {\n          updatedAt: 'desc'\n        }\n      });\n\n      if (!status) {\n        // 如果没有Bot状态记录，返回默认值\n        return NextResponse.json({\n          success: true,\n          data: {\n            id: 'default',\n            botUsername: 'LuckyMartBot',\n            isOnline: false,\n            lastHeartbeat: null,\n            apiCallsCount: 0,\n            errorCount: 0,\n            pushSuccessCount: 0,\n            pushFailureCount: 0,\n            uptime: 0\n          }\n        });\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: status\n      });\n\n    } catch (error) {\n      console.error('获取Bot状态失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/telegram/templates/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[817,851],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\nconst prisma = new PrismaClient();\n\n// 创建权限中间件\nconst withPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.system.manage()\n});\n\nexport async function GET(request: NextRequest) {\n  return withPermission(async (request, admin) => {\n    try {\n      const templates = await prisma.botPushTemplates.findMany({\n        orderBy: {\n          messageType: 'asc'\n        }\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: templates\n      });\n\n    } catch (error) {\n      console.error('获取推送模板失败:', error);\n      return NextResponse.json(\n        { success: false, error: '服务器错误' },\n        { status: 500 }\n      );\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":84,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":84,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2433,2448],"text":"((product?.nameZh) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2433,2448],"text":"((product?.nameZh) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2433,2448],"text":"(Boolean((product?.nameZh)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":84,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":84,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2449,2451],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":90,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":90,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2647,2665],"text":"((round?.roundNumber) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2647,2665],"text":"((round?.roundNumber) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2647,2665],"text":"(Boolean((round?.roundNumber)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2666,2668],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":91,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":91,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2697,2710],"text":"((round?.status) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2697,2710],"text":"((round?.status) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2697,2710],"text":"(Boolean((round?.status)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":91,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":91,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2711,2713],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":92,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":92,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2745,2765],"text":"((round?.winningNumber) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2745,2765],"text":"((round?.winningNumber) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2745,2765],"text":"(Boolean((round?.winningNumber)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":92,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":92,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2766,2768],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4634,4637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4634,4637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4647,4687],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":149,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":149,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4760,4773],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4774,4776],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":160,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":160,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":166,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":166,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5143,5149],"text":"(Boolean(amount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":190,"column":35,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":190,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5759,5763],"text":"(Boolean(note))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":190,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":190,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5764,5766],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5967,5970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5967,5970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5980,6025],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":206,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":206,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6098,6111],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":206,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":206,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6112,6114],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 创建权限中间件\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户详情\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  return withReadPermission(async (request, admin) => {\n    try {\n      const userId = params.id;\n\n      const user = await prisma.users.findUnique({\n        where: { id: userId }\n      });\n\n      if (!user) {\n        return NextResponse.json({\n          success: false,\n          error: '用户不存在'\n        }, { status: 404 });\n      }\n\n      // 手动查询关联数据\n      const [participations, orders, transactions, withdrawRequests] = await Promise.all([\n        prisma.participations.findMany({\n          where: { userId },\n          orderBy: { createdAt: 'desc' },\n          take: 10\n        }),\n        prisma.orders.findMany({\n          where: { userId },\n          orderBy: { createdAt: 'desc' },\n          take: 10\n        }),\n        prisma.transactions.findMany({\n          where: { userId },\n          orderBy: { createdAt: 'desc' },\n          take: 20\n        }),\n        prisma.withdrawRequests.findMany({\n          where: { userId },\n          orderBy: { createdAt: 'desc' },\n          take: 10\n        })\n      ]);\n\n      // 获取参与记录的详细信息\n      const participationsWithDetails = await Promise.all(\n        participations.map(async (p) => {\n          const [product, round] = await Promise.all([\n            prisma.products.findUnique({\n              where: { id: p.productId },\n              select: {\n                nameZh: true,\n                nameEn: true,\n                nameRu: true,\n                images: true\n              }\n            }),\n            prisma.lotteryRounds.findUnique({\n              where: { id: p.roundId },\n              select: {\n                roundNumber: true,\n                status: true,\n                winningNumber: true\n              }\n            })\n          ]);\n\n          return {\n            id: p.id,\n            productName: product?.nameZh || '',\n            numbers: p.numbers,\n            sharesCount: p.sharesCount,\n            type: p.type,\n            cost: Number(p.cost),\n            isWinner: p.isWinner,\n            roundNumber: round?.roundNumber || 0,\n            roundStatus: round?.status || '',\n            winningNumber: round?.winningNumber || null,\n            createdAt: p.createdAt.toISOString()\n          };\n        })\n      );\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          user: {\n            id: user.id,\n            telegramId: user.telegramId.toString(),\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            avatarUrl: user.avatarUrl,\n            language: user.language,\n            balance: Number(user.balance),\n            platformBalance: Number(user.platformBalance),\n            vipLevel: user.vipLevel,\n            totalSpent: Number(user.totalSpent),\n            freeDailyCount: user.freeDailyCount,\n            lastFreeResetDate: user.lastFreeResetDate.toISOString(),\n            createdAt: user.createdAt.toISOString(),\n            participations: participationsWithDetails,\n            orders: orders.map(o => ({\n              id: o.id,\n              orderNumber: o.orderNumber,\n              type: o.type,\n              totalAmount: Number(o.totalAmount),\n              paymentStatus: o.paymentStatus,\n              fulfillmentStatus: o.fulfillmentStatus,\n              createdAt: o.createdAt.toISOString()\n            })),\n            transactions: transactions.map(t => ({\n              id: t.id,\n              type: t.type,\n              amount: Number(t.amount),\n              balanceType: t.balanceType,\n              description: t.description,\n              createdAt: t.createdAt.toISOString()\n            })),\n            withdrawRequests: withdrawRequests.map(w => ({\n              id: w.id,\n              amount: Number(w.amount),\n              fee: Number(w.fee),\n              actualAmount: Number(w.actualAmount),\n              status: w.status,\n              createdAt: w.createdAt.toISOString()\n            }))\n          }\n        }\n      });\n    } catch (error: any) {\n      console.error('Get user error:', error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户详情失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 手动充值夺宝币\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  return withWritePermission(async (request, admin) => {\n    try {\n      const userId = params.id;\n      const body = await request.json();\n      const { amount, note } = body;\n\n      if (!amount || amount <= 0) {\n        return NextResponse.json({\n          success: false,\n          error: '充值金额必须大于0'\n        }, { status: 400 });\n      }\n\n      // 执行充值\n      await prisma.$transaction(async (tx) => {\n        // 更新用户余额\n        await tx.users.update({\n          where: { id: userId },\n          data: {\n            balance: { increment: amount }\n          }\n        });\n\n        // 记录交易\n        await tx.transactions.create({\n          data: {\n            userId,\n            type: 'admin_recharge',\n            amount: amount,\n            balanceType: 'lottery_coin',\n            description: `管理员充值：${note || '手动充值'}`\n          }\n        });\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          message: '充值成功',\n          amount\n        }\n      });\n    } catch (error: any) {\n      console.error('Recharge user error:', error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '充值失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/behavior/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":20,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":114,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":30,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1083,1108],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1083,1108],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1083,1108],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1109,1111],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1147,1173],"text":"(searchParams.get('offset') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1147,1173],"text":"(searchParams.get('offset') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1147,1173],"text":"(Boolean(searchParams.get('offset')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1174,1176],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1225,1228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1225,1228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":36,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":36,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1248,1254],"text":"userId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1248,1254],"text":"userId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1248,1254],"text":"Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":40,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1317,1329],"text":"behaviorType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1317,1329],"text":"behaviorType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1317,1329],"text":"Boolean(behaviorType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1404,1413],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1404,1413],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1404,1413],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1417,1424],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1417,1424],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1417,1424],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1477,1486],"text":"startDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1477,1486],"text":"startDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1477,1486],"text":"Boolean(startDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1570,1577],"text":"endDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1570,1577],"text":"endDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1570,1577],"text":"Boolean(endDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2957,2960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2957,2960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":111,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":111,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3086,3099],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3100,3102],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":119,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":119,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":141,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":141,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3662,3668],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":141,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":141,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3673,3685],"text":"(Boolean(behaviorType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":174,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4400,4406],"text":"(Boolean(amount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4749,4752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4749,4752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":197,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":197,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4876,4889],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":197,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":197,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4890,4892],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5029,5032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5029,5032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":241,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":241,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5766,5789],"text":"(Boolean(whereConditions.user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6281,6284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6281,6284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":266,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":266,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6506,6529],"text":"(Boolean(whereConditions.user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户行为统计\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const behaviorType = searchParams.get('behaviorType');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    // 构建查询条件\n    const whereConditions: any = {};\n    \n    if (userId) {\n      whereConditions.user_id = userId;\n    }\n    \n    if (behaviorType) {\n      whereConditions.behavior_type = behaviorType;\n    }\n    \n    if (startDate || endDate) {\n      whereConditions.created_at = {};\n      if (startDate) {\n        whereConditions.created_at.gte = new Date(startDate);\n      }\n      if (endDate) {\n        whereConditions.created_at.lte = new Date(endDate);\n      }\n    }\n\n    // 获取行为日志数据\n    const [behaviorLogs, totalCount] = await Promise.all([\n      prisma.userBehaviorLogs.findMany({\n        where: whereConditions,\n        orderBy: { created_at: 'desc' },\n        take: limit,\n        skip: offset,\n        include: {\n          users: {\n            select: {\n              id: true,\n              firstName: true,\n              username: true,\n              telegramId: true\n            }\n          }\n        }\n      }),\n      prisma.userBehaviorLogs.count({ where: whereConditions })\n    ]);\n\n    // 获取统计数据\n    const stats = await getBehaviorStatistics(whereConditions);\n\n    // 获取行为类型分布\n    const behaviorTypeStats = await prisma.userBehaviorLogs.groupBy({\n      by: ['behavior_type'],\n      where: whereConditions,\n      _count: {\n        behavior_type: true\n      },\n      _count: true\n    });\n\n    // 获取用户行为热度图数据\n    const heatmapData = await getBehaviorHeatmapData(whereConditions);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        behaviorLogs,\n        pagination: {\n          total: totalCount,\n          limit,\n          offset,\n          hasMore: offset + limit < totalCount\n        },\n        statistics: stats,\n        behaviorTypeDistribution: behaviorTypeStats,\n        heatmap: heatmapData\n      }\n    });\n\n    } catch (error: any) {\n      logger.error('获取用户行为统计失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户行为统计失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 记录用户行为\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n    const body = await request.json();\n    const {\n      userId,\n      behaviorType,\n      behaviorSubtype,\n      sessionId,\n      deviceInfo,\n      locationInfo,\n      ipAddress,\n      userAgent,\n      referenceId,\n      referenceType,\n      amount,\n      durationSeconds,\n      metadata\n    } = body;\n\n    // 验证必需参数\n    if (!userId || !behaviorType) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必需参数：userId 和 behaviorType'\n      }, { status: 400 });\n    }\n\n    // 验证用户是否存在\n    const user = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { id: true }\n    });\n\n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 创建行为日志\n    const behaviorLog = await prisma.userBehaviorLogs.create({\n      data: {\n        userId,\n        behaviorType,\n        behaviorSubtype,\n        sessionId,\n        deviceInfo,\n        locationInfo,\n        ipAddress,\n        userAgent,\n        referenceId,\n        referenceType,\n        amount: amount ? parseFloat(amount) : null,\n        durationSeconds,\n        metadata\n      }\n    });\n\n    logger.info('用户行为记录成功', {\n      userId,\n      behaviorType,\n      behaviorSubtype,\n      logId: behaviorLog.id\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: behaviorLog,\n      message: '行为记录成功'\n    });\n\n    } catch (error: any) {\n      logger.error('记录用户行为失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '记录用户行为失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * 获取行为统计数据\n */\nasync function getBehaviorStatistics(whereConditions: any) {\n  // 获取总行为数\n  const totalBehaviors = await prisma.userBehaviorLogs.count({\n    where: whereConditions\n  });\n\n  // 获取唯一用户数\n  const uniqueUsers = await prisma.userBehaviorLogs.findMany({\n    where: whereConditions,\n    select: { userId: true },\n    distinct: ['userId']\n  });\n\n  // 获取最活跃的用户\n  const mostActiveUsers = await prisma.userBehaviorLogs.groupBy({\n    by: ['userId'],\n    where: whereConditions,\n    _count: {\n      userId: true\n    },\n    orderBy: {\n      _count: {\n        userId: 'desc'\n      }\n    },\n    take: 10\n  });\n\n  // 获取行为趋势（最近30天）\n  const behaviorTrends = await prisma.$queryRaw`\n    SELECT \n      DATE(created_at) as date,\n      behavior_type,\n      COUNT(*) as count\n    FROM user_behavior_logs \n    WHERE ${whereConditions.user_id ? `user_id = '${whereConditions.user_id}' AND` : ''}\n      created_at >= NOW() - INTERVAL '30 days'\n    GROUP BY DATE(created_at), behavior_type\n    ORDER BY date DESC, count DESC\n  `;\n\n  return {\n    totalBehaviors,\n    uniqueUsersCount: uniqueUsers.length,\n    mostActiveUsers,\n    behaviorTrends,\n    averageBehaviorsPerUser: uniqueUsers.length > 0 ? (totalBehaviors / uniqueUsers.length).toFixed(2) : 0\n  };\n}\n\n/**\n * 获取行为热力图数据\n */\nasync function getBehaviorHeatmapData(whereConditions: any) {\n  const heatmapData = await prisma.$queryRaw`\n    SELECT \n      EXTRACT(hour FROM created_at) as hour,\n      EXTRACT(dow FROM created_at) as day_of_week,\n      COUNT(*) as count\n    FROM user_behavior_logs\n    WHERE ${whereConditions.user_id ? `user_id = '${whereConditions.user_id}' AND` : ''}\n      created_at >= NOW() - INTERVAL '30 days'\n    GROUP BY EXTRACT(hour FROM created_at), EXTRACT(dow FROM created_at)\n    ORDER BY hour, day_of_week\n  `;\n\n  return heatmapData;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/engagement/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":20,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":117,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":30,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1072,1098],"text":"(searchParams.get('sortBy') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1072,1098],"text":"(searchParams.get('sortBy') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1072,1098],"text":"(Boolean(searchParams.get('sortBy')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1099,1101],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1144,1173],"text":"(searchParams.get('sortOrder') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1144,1173],"text":"(searchParams.get('sortOrder') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1144,1173],"text":"(Boolean(searchParams.get('sortOrder')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1174,1176],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1212,1237],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1212,1237],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1212,1237],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1238,1240],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":33,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1276,1302],"text":"(searchParams.get('offset') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1276,1302],"text":"(searchParams.get('offset') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1276,1302],"text":"(Boolean(searchParams.get('offset')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1303,1305],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1354,1357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1354,1357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":38,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":38,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1377,1383],"text":"userId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1377,1383],"text":"userId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1377,1383],"text":"Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":42,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":42,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1446,1450],"text":"date != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1446,1450],"text":"date ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1446,1450],"text":"Boolean(date)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1514,1523],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1514,1523],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1514,1523],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1527,1534],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1527,1534],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1527,1534],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":45,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1548,1557],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1548,1557],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1548,1557],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":45,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1561,1568],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1561,1568],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1561,1568],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":50,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":50,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1702,1711],"text":"startDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1702,1711],"text":"startDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1702,1711],"text":"Boolean(startDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":52,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":52,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1793,1800],"text":"endDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1793,1800],"text":"endDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1793,1800],"text":"Boolean(endDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3262,3265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3262,3265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":114,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":114,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3392,3405],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3406,3408],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":122,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":216,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":122,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":122,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":138,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":138,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3865,3871],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":138,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":138,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3876,3880],"text":"(Boolean(date))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":160,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":160,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4349,4359],"text":"(Boolean(loginCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":160,"column":18,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":160,"endColumn":20,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4360,4362],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":161,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":161,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4372,4392],"text":"(Boolean(totalSessionDuration))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4393,4395],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":162,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":162,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4405,4414],"text":"(Boolean(pageViews))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":17,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":19,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4415,4417],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":163,"column":7,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":163,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4427,4444],"text":"(Boolean(interactionsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":163,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":163,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4445,4447],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":186,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":186,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4940,4950],"text":"(Boolean(loginCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":186,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":186,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4951,4953],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":187,"column":31,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":187,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4987,5007],"text":"(Boolean(totalSessionDuration))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":187,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":187,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5008,5010],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":188,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":188,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5033,5042],"text":"(Boolean(pageViews))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":188,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":188,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5043,5045],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":189,"column":28,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":189,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5076,5093],"text":"(Boolean(interactionsCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5094,5096],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":190,"column":23,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":190,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5122,5134],"text":"(Boolean(featuresUsed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":190,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":190,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5135,5137],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5483,5486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5483,5486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":213,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":213,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5613,5626],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":213,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":213,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5627,5629],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6258,6261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6258,6261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":285,"column":40,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":285,"endColumn":80,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7080,7120],"text":"(Boolean((summary._avg.engagementScore?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":285,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":285,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7121,7123],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":286,"column":35,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":286,"endColumn":70,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7164,7199],"text":"(Boolean((summary._avg.loginCount?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":286,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":286,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7200,7202],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":287,"column":40,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":287,"endColumn":85,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7248,7293],"text":"(Boolean((summary._avg.totalSessionDuration?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":287,"column":86,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":287,"endColumn":88,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7294,7296],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":288,"column":34,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":288,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7336,7370],"text":"(Boolean((summary._avg.pageViews?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":288,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":288,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7371,7373],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":289,"column":37,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":289,"endColumn":79,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7416,7458],"text":"(Boolean((summary._avg.interactionsCount?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7459,7461],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":290,"column":36,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":290,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7503,7543],"text":"(Boolean((summary._max.engagementScore?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":290,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":290,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7544,7546],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":291,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":291,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7572,7595],"text":"(Boolean(summary._max.loginCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":291,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":291,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7596,7598],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":292,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":292,"endColumn":58,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7626,7659],"text":"(Boolean(summary._max.totalSessionDuration))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":292,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":292,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7660,7662],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":293,"column":36,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":293,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7701,7741],"text":"(Boolean((summary._min.engagementScore?.toFixed(2))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":293,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":293,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7742,7744],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7960,7963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7960,7963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":317,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":317,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8470,8493],"text":"(Boolean(whereConditions.user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":318,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":318,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8555,8575],"text":"(Boolean(whereConditions.date))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9116,9119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9116,9119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":354,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":354,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9737,9760],"text":"(Boolean(whereConditions.user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9948,9951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9948,9951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":383,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":383,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10644,10667],"text":"(Boolean(whereConditions.user_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":72,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户参与度分析\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const date = searchParams.get('date'); // 指定某一天的统计\n    const sortBy = searchParams.get('sortBy') || 'engagement_score';\n    const sortOrder = searchParams.get('sortOrder') || 'desc';\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    // 构建查询条件\n    const whereConditions: any = {};\n    \n    if (userId) {\n      whereConditions.user_id = userId;\n    }\n    \n    if (date) {\n      whereConditions.date = new Date(date);\n    } else if (startDate || endDate) {\n      if (startDate && endDate) {\n        whereConditions.date = {\n          gte: new Date(startDate),\n          lte: new Date(endDate)\n        };\n      } else if (startDate) {\n        whereConditions.date = { gte: new Date(startDate) };\n      } else if (endDate) {\n        whereConditions.date = { lte: new Date(endDate) };\n      }\n    }\n\n    // 获取参与度统计数据\n    const [engagementStats, totalCount] = await Promise.all([\n      prisma.userEngagementStats.findMany({\n        where: whereConditions,\n        orderBy: {\n          [sortBy]: sortOrder as 'asc' | 'desc'\n        },\n        take: limit,\n        skip: offset,\n        include: {\n          users: {\n            select: {\n              id: true,\n              firstName: true,\n              username: true,\n              telegramId: true,\n              vipLevel: true\n            }\n          }\n        }\n      }),\n      prisma.userEngagementStats.count({ where: whereConditions })\n    ]);\n\n    // 获取汇总统计\n    const summaryStats = await getEngagementSummaryStats(whereConditions);\n\n    // 获取参与度分布\n    const engagementDistribution = await getEngagementDistribution(whereConditions);\n\n    // 获取趋势数据\n    const trendData = await getEngagementTrendData(whereConditions);\n\n    // 获取用户分群数据\n    const userSegmentation = await getUserSegmentation(whereConditions);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        engagementStats,\n        pagination: {\n          total: totalCount,\n          limit,\n          offset,\n          hasMore: offset + limit < totalCount\n        },\n        summary: summaryStats,\n        distribution: engagementDistribution,\n        trends: trendData,\n        segmentation: userSegmentation\n      }\n    });\n\n    } catch (error: any) {\n      logger.error('获取用户参与度分析失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户参与度分析失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// PUT - 更新用户参与度统计\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n    const body = await request.json();\n    const {\n      userId,\n      date,\n      loginCount,\n      totalSessionDuration,\n      pageViews,\n      interactionsCount,\n      featuresUsed\n    } = body;\n\n    // 验证必需参数\n    if (!userId || !date) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必需参数：userId 和 date'\n      }, { status: 400 });\n    }\n\n    // 验证用户是否存在\n    const user = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { id: true }\n    });\n\n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 计算参与度评分\n    const engagementScore = calculateEngagementScore(\n      loginCount || 0,\n      totalSessionDuration || 0,\n      pageViews || 0,\n      interactionsCount || 0\n    );\n\n    // 更新或创建参与度统计\n    const engagementStats = await prisma.userEngagementStats.upsert({\n      where: {\n        user_id_date: {\n          userId,\n          date: new Date(date)\n        }\n      },\n      update: {\n        loginCount,\n        totalSessionDuration,\n        pageViews,\n        interactionsCount,\n        featuresUsed,\n        engagementScore,\n        lastActivityTime: new Date()\n      },\n      create: {\n        userId,\n        date: new Date(date),\n        loginCount: loginCount || 0,\n        totalSessionDuration: totalSessionDuration || 0,\n        pageViews: pageViews || 0,\n        interactionsCount: interactionsCount || 0,\n        featuresUsed: featuresUsed || [],\n        engagementScore,\n        lastActivityTime: new Date()\n      }\n    });\n\n    logger.info('用户参与度统计更新成功', {\n      userId,\n      date,\n      engagementScore,\n      statsId: engagementStats.id\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: engagementStats,\n      message: '参与度统计更新成功'\n    });\n\n    } catch (error: any) {\n      logger.error('更新用户参与度统计失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '更新用户参与度统计失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * 计算参与度评分\n */\nfunction calculateEngagementScore(\n  loginCount: number,\n  sessionDuration: number,\n  pageViews: number,\n  interactions: number\n): number {\n  let score = 0;\n  \n  // 基于登录次数的评分 (0-30分)\n  score += Math.min(loginCount * 5, 30);\n  \n  // 基于会话时长的评分 (0-25分)\n  score += Math.min(sessionDuration / 60, 25);\n  \n  // 基于页面浏览的评分 (0-25分)\n  score += Math.min(pageViews * 2, 25);\n  \n  // 基于交互次数的评分 (0-20分)\n  score += Math.min(interactions, 20);\n  \n  return Math.min(score, 100);\n}\n\n/**\n * 获取参与度汇总统计\n */\nasync function getEngagementSummaryStats(whereConditions: any) {\n  const summary = await prisma.userEngagementStats.aggregate({\n    where: whereConditions,\n    _avg: {\n      engagementScore: true,\n      loginCount: true,\n      totalSessionDuration: true,\n      pageViews: true,\n      interactionsCount: true\n    },\n    _max: {\n      engagementScore: true,\n      loginCount: true,\n      totalSessionDuration: true\n    },\n    _min: {\n      engagementScore: true\n    }\n  });\n\n  // 获取活跃用户数（参与度评分 > 50）\n  const activeUsers = await prisma.userEngagementStats.count({\n    where: {\n      ...whereConditions,\n      engagementScore: { gt: 50 }\n    }\n  });\n\n  // 获取高参与度用户数（参与度评分 > 80）\n  const highlyEngagedUsers = await prisma.userEngagementStats.count({\n    where: {\n      ...whereConditions,\n      engagementScore: { gt: 80 }\n    }\n  });\n\n  return {\n    averageEngagementScore: parseFloat(summary._avg.engagementScore?.toFixed(2) || '0'),\n    averageLoginCount: parseFloat(summary._avg.loginCount?.toFixed(2) || '0'),\n    averageSessionDuration: parseFloat(summary._avg.totalSessionDuration?.toFixed(2) || '0'),\n    averagePageViews: parseFloat(summary._avg.pageViews?.toFixed(2) || '0'),\n    averageInteractions: parseFloat(summary._avg.interactionsCount?.toFixed(2) || '0'),\n    maxEngagementScore: parseFloat(summary._max.engagementScore?.toFixed(2) || '0'),\n    maxLoginCount: summary._max.loginCount || 0,\n    maxSessionDuration: summary._max.totalSessionDuration || 0,\n    minEngagementScore: parseFloat(summary._min.engagementScore?.toFixed(2) || '0'),\n    activeUsers,\n    highlyEngagedUsers,\n    totalUsers: await prisma.userEngagementStats.count({ where: whereConditions })\n  };\n}\n\n/**\n * 获取参与度分布\n */\nasync function getEngagementDistribution(whereConditions: any) {\n  const distribution = await prisma.$queryRaw`\n    SELECT \n      CASE \n        WHEN engagement_score >= 80 THEN 'high'\n        WHEN engagement_score >= 50 THEN 'medium'\n        WHEN engagement_score >= 20 THEN 'low'\n        ELSE 'very_low'\n      END as engagement_level,\n      COUNT(*) as user_count,\n      ROUND(AVG(engagement_score), 2) as avg_score,\n      ROUND(AVG(login_count), 2) as avg_login_count,\n      ROUND(AVG(total_session_duration), 2) as avg_duration\n    FROM user_engagement_stats\n    ${whereConditions.user_id ? `WHERE user_id = '${whereConditions.user_id}'` : ''}\n    ${whereConditions.date ? `AND date = '${whereConditions.date}'` : ''}\n    GROUP BY \n      CASE \n        WHEN engagement_score >= 80 THEN 'high'\n        WHEN engagement_score >= 50 THEN 'medium'\n        WHEN engagement_score >= 20 THEN 'low'\n        ELSE 'very_low'\n      END\n    ORDER BY \n      CASE \n        WHEN engagement_score >= 80 THEN 4\n        WHEN engagement_score >= 50 THEN 3\n        WHEN engagement_score >= 20 THEN 2\n        ELSE 1\n      END\n  `;\n\n  return distribution;\n}\n\n/**\n * 获取参与度趋势数据\n */\nasync function getEngagementTrendData(whereConditions: any) {\n  const trends = await prisma.$queryRaw`\n    SELECT \n      date,\n      COUNT(*) as total_users,\n      AVG(engagement_score) as avg_engagement_score,\n      AVG(login_count) as avg_login_count,\n      AVG(total_session_duration) as avg_session_duration,\n      COUNT(CASE WHEN engagement_score >= 80 THEN 1 END) as high_engagement_users,\n      COUNT(CASE WHEN engagement_score >= 50 AND engagement_score < 80 THEN 1 END) as medium_engagement_users,\n      COUNT(CASE WHEN engagement_score < 50 THEN 1 END) as low_engagement_users\n    FROM user_engagement_stats\n    WHERE date >= CURRENT_DATE - INTERVAL '30 days'\n    ${whereConditions.user_id ? `AND user_id = '${whereConditions.user_id}'` : ''}\n    GROUP BY date\n    ORDER BY date\n  `;\n\n  return trends;\n}\n\n/**\n * 获取用户分群数据\n */\nasync function getUserSegmentation(whereConditions: any) {\n  const segmentation = await prisma.$queryRaw`\n    WITH user_segments AS (\n      SELECT \n        ues.user_id,\n        ues.engagement_score,\n        u.vip_level,\n        CASE \n          WHEN ues.engagement_score >= 80 AND u.vip_level > 0 THEN 'vip_active'\n          WHEN ues.engagement_score >= 80 THEN 'power_user'\n          WHEN ues.engagement_score >= 50 AND u.vip_level > 0 THEN 'vip_regular'\n          WHEN ues.engagement_score >= 50 THEN 'regular_user'\n          WHEN ues.engagement_score >= 20 THEN 'casual_user'\n          ELSE 'at_risk'\n        END as segment\n      FROM user_engagement_stats ues\n      JOIN users u ON ues.user_id = u.id\n      WHERE ues.date = CURRENT_DATE\n      ${whereConditions.user_id ? `AND ues.user_id = '${whereConditions.user_id}'` : ''}\n    )\n    SELECT \n      segment,\n      COUNT(*) as user_count,\n      ROUND(AVG(engagement_score), 2) as avg_engagement_score,\n      ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) as percentage\n    FROM user_segments\n    GROUP BY segment\n    ORDER BY \n      CASE segment\n        WHEN 'vip_active' THEN 1\n        WHEN 'power_user' THEN 2\n        WHEN 'vip_regular' THEN 3\n        WHEN 'regular_user' THEN 4\n        WHEN 'casual_user' THEN 5\n        WHEN 'at_risk' THEN 6\n      END\n  `;\n\n  return segmentation;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/retention/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ',' expected.","line":312,"column":11,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户留存分析\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const cohortType = searchParams.get('cohortType') || 'weekly'; // 'weekly' 或 'monthly'\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const analysisType = searchParams.get('analysisType') || 'overview'; // 'overview', 'cohort', 'user'\n\n    // 根据分析类型返回不同数据\n    switch (analysisType) {\n      case 'cohort':\n        return await getCohortAnalysis(admin, cohortType, startDate, endDate);\n      case 'user':\n        return await getUserRetentionAnalysis(admin, userId);\n      default:\n        return await getRetentionOverview(admin, cohortType, startDate, endDate);\n    }\n\n    } catch (error: any) {\n      logger.error('获取用户留存分析失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户留存分析失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 更新用户留存分析\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n    const body = await request.json();\n    const {\n      userId,\n      registrationDate,\n      cohortType = 'weekly'\n    } = body;\n\n    // 验证必需参数\n    if (!userId || !registrationDate) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必需参数：userId 和 registrationDate'\n      }, { status: 400 });\n    }\n\n    // 验证用户是否存在\n    const user = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { id: true, createdAt: true }\n    });\n\n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 计算留存状态\n    const retentionData = await calculateRetentionData(\n      userId,\n      new Date(registrationDate),\n      cohortType\n    );\n\n    // 更新或创建留存分析记录\n    const retentionAnalysis = await prisma.retentionAnalysis.upsert({\n      where: { user_id: userId },\n      update: {\n        ...retentionData,\n        updatedAt: new Date()\n      },\n      create: {\n        userId,\n        registrationDate: new Date(registrationDate),\n        cohortDate: retentionData.cohortDate,\n        cohortType,\n        ...retentionData\n      }\n    });\n\n    logger.info('用户留存分析更新成功', {\n      userId,\n      cohortType,\n      day7Retention: retentionData.day_7_retention,\n      analysisId: retentionAnalysis.id\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: retentionAnalysis,\n      message: '留存分析更新成功'\n    });\n\n    } catch (error: any) {\n      logger.error('更新用户留存分析失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '更新用户留存分析失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * 获取留存概览\n */\nasync function getRetentionOverview(\n  admin: any,\n  cohortType: string,\n  startDate?: string | null,\n  endDate?: string | null\n) {\n  const { searchParams } = new URL(admin.url);\n  \n  // 构建日期范围\n  const dateFilter = buildDateFilter(startDate, endDate, cohortType);\n\n  // 获取总体留存统计\n  const overallStats = await getOverallRetentionStats(dateFilter);\n\n  // 获取留存趋势\n  const retentionTrends = await getRetentionTrends(cohortType, dateFilter);\n\n  // 获取留存漏斗\n  const retentionFunnel = await getRetentionFunnel(dateFilter);\n\n  // 获取用户分群留存对比\n  const segmentComparison = await getSegmentRetentionComparison(dateFilter);\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      overview: overallStats,\n      trends: retentionTrends,\n      funnel: retentionFunnel,\n      segmentComparison\n    }\n  });\n}\n\n/**\n * 获取同期群分析\n */\nasync function getCohortAnalysis(\n  admin: any,\n  cohortType: string,\n  startDate?: string | null,\n  endDate?: string | null\n) {\n  const { searchParams } = new URL(admin.url);\n  const limit = parseInt(searchParams.get('limit') || '12');\n  \n  const cohorts = await prisma.$queryRaw`\n    WITH cohort_data AS (\n      SELECT \n        ${cohortType === 'monthly' ? \n          'DATE_TRUNC(\\'month\\', registration_date)' : \n          'DATE_TRUNC(\\'week\\', registration_date)'\n        } as cohort_date,\n        registration_date,\n        COUNT(*) as cohort_size,\n        COUNT(CASE WHEN day_1_retention THEN 1 END) * 100.0 / COUNT(*) as day_1_rate,\n        COUNT(CASE WHEN day_3_retention THEN 1 END) * 100.0 / COUNT(*) as day_3_rate,\n        COUNT(CASE WHEN day_7_retention THEN 1 END) * 100.0 / COUNT(*) as day_7_rate,\n        COUNT(CASE WHEN day_14_retention THEN 1 END) * 100.0 / COUNT(*) as day_14_rate,\n        COUNT(CASE WHEN day_30_retention THEN 1 END) * 100.0 / COUNT(*) as day_30_rate,\n        COUNT(CASE WHEN day_60_retention THEN 1 END) * 100.0 / COUNT(*) as day_60_rate,\n        COUNT(CASE WHEN day_90_retention THEN 1 END) * 100.0 / COUNT(*) as day_90_rate,\n        AVG(total_active_days) as avg_active_days\n      FROM retention_analysis\n      WHERE registration_date >= CURRENT_DATE - INTERVAL '${limit} ${cohortType}s'\n      GROUP BY ${cohortType === 'monthly' ? \n        'DATE_TRUNC(\\'month\\', registration_date)' : \n        'DATE_TRUNC(\\'week\\', registration_date)'\n      }, registration_date\n    )\n    SELECT * FROM cohort_data\n    ORDER BY cohort_date DESC\n    LIMIT ${limit}\n  `;\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      cohortType,\n      cohorts,\n      totalCohorts: cohorts.length\n    }\n  });\n}\n\n/**\n * 获取单个用户留存分析\n */\nasync function getUserRetentionAnalysis(admin: any, userId?: string | null) {\n  if (!userId) {\n    return NextResponse.json({\n      success: false,\n      error: '缺少用户ID参数'\n    }, { status: 400 });\n  }\n\n  const userRetention = await prisma.retentionAnalysis.findUnique({\n    where: { userId },\n    include: {\n      users: {\n        select: {\n          id: true,\n          firstName: true,\n          username: true,\n          telegramId: true,\n          createdAt: true\n        }\n      }\n    }\n  });\n\n  if (!userRetention) {\n    return NextResponse.json({\n      success: false,\n      error: '用户留存分析数据不存在'\n    }, { status: 404 });\n  }\n\n  // 获取用户行为时间线\n  const behaviorTimeline = await prisma.userBehaviorLogs.findMany({\n    where: { userId },\n    orderBy: { created_at: 'asc' },\n    take: 100\n  });\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      userRetention,\n      behaviorTimeline\n    }\n  });\n}\n\n/**\n * 计算留存数据\n */\nasync function calculateRetentionData(\n  userId: string,\n  registrationDate: Date,\n  cohortType: string\n) {\n  const cohortDate = cohortType === 'monthly' \n    ? new Date(registrationDate.getFullYear(), registrationDate.getMonth(), 1)\n    : new Date(registrationDate.getFullYear(), registrationDate.getMonth(), registrationDate.getDate() - registrationDate.getDay());\n\n  // 计算各时间点的留存状态\n  const retentionChecks = await Promise.all([\n    // Day 0 (注册当天)\n    checkDayRetention(userId, registrationDate, registrationDate),\n    // Day 1\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 24 * 60 * 60 * 1000)),\n    // Day 3\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 3 * 24 * 60 * 60 * 1000)),\n    // Day 7\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 7 * 24 * 60 * 60 * 1000)),\n    // Day 14\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 14 * 24 * 60 * 60 * 1000)),\n    // Day 30\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 30 * 24 * 60 * 60 * 1000)),\n    // Day 60\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 60 * 24 * 60 * 60 * 1000)),\n    // Day 90\n    checkDayRetention(userId, registrationDate, new Date(registrationDate.getTime() + 90 * 24 * 60 * 60 * 1000))\n  ]);\n\n  // 获取最后活动日期和总活跃天数\n  const activityStats = await prisma.userBehaviorLogs.aggregate({\n    where: { userId },\n    _max: { createdAt: true },\n    _count: { _all: true }\n  });\n\n  const uniqueActiveDays = await prisma.$queryRaw`\n    SELECT COUNT(DISTINCT DATE(created_at)) as active_days\n    FROM user_behavior_logs\n    WHERE user_id = $1\n  `, userId);\n\n  return {\n    cohortDate,\n    day_0_retention: retentionChecks[0],\n    day_1_retention: retentionChecks[1],\n    day_3_retention: retentionChecks[2],\n    day_7_retention: retentionChecks[3],\n    day_14_retention: retentionChecks[4],\n    day_30_retention: retentionChecks[5],\n    day_60_retention: retentionChecks[6],\n    day_90_retention: retentionChecks[7],\n    lastActivityDate: activityStats._max.createdAt ? new Date(activityStats._max.createdAt) : null,\n    totalActiveDays: parseInt(uniqueActiveDays[0]?.active_days || '0')\n  };\n}\n\n/**\n * 检查特定日期的留存状态\n */\nasync function checkDayRetention(\n  userId: string,\n  registrationDate: Date,\n  checkDate: Date\n): Promise<boolean> {\n  const nextDay = new Date(checkDate.getTime() + 24 * 60 * 60 * 1000);\n  \n  const behaviorExists = await prisma.userBehaviorLogs.findFirst({\n    where: {\n      userId,\n      createdAt: {\n        gte: checkDate,\n        lt: nextDay\n      }\n    },\n    select: { id: true }\n  });\n\n  return !!behaviorExists;\n}\n\n/**\n * 构建日期过滤条件\n */\nfunction buildDateFilter(startDate?: string | null, endDate?: string | null, cohortType?: string) {\n  const filter: any = {};\n  \n  if (startDate && endDate) {\n    filter.registration_date = {\n      gte: new Date(startDate),\n      lte: new Date(endDate)\n    };\n  } else if (startDate) {\n    filter.registration_date = { gte: new Date(startDate) };\n  } else if (endDate) {\n    filter.registration_date = { lte: new Date(endDate) };\n  } else {\n    // 默认最近6个月的数据\n    filter.registration_date = {\n      gte: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000)\n    };\n  }\n\n  return filter;\n}\n\n/**\n * 获取总体留存统计\n */\nasync function getOverallRetentionStats(dateFilter: any) {\n  const stats = await prisma.retentionAnalysis.aggregate({\n    where: dateFilter,\n    _count: { _all: true },\n    _avg: {\n      day_1_retention: true,\n      day_3_retention: true,\n      day_7_retention: true,\n      day_14_retention: true,\n      day_30_retention: true,\n      totalActiveDays: true\n    }\n  });\n\n  const totalUsers = stats._count._all || 0;\n\n  return {\n    totalUsers,\n    day1Retention: parseFloat((stats._avg.day_1_retention ? (stats._avg.day_1_retention * 100).toFixed(2) : '0')),\n    day3Retention: parseFloat((stats._avg.day_3_retention ? (stats._avg.day_3_retention * 100).toFixed(2) : '0')),\n    day7Retention: parseFloat((stats._avg.day_7_retention ? (stats._avg.day_7_retention * 100).toFixed(2) : '0')),\n    day14Retention: parseFloat((stats._avg.day_14_retention ? (stats._avg.day_14_retention * 100).toFixed(2) : '0')),\n    day30Retention: parseFloat((stats._avg.day_30_retention ? (stats._avg.day_30_retention * 100).toFixed(2) : '0')),\n    averageActiveDays: parseFloat((stats._avg.totalActiveDays?.toFixed(2) || '0'))\n  };\n}\n\n/**\n * 获取留存趋势\n */\nasync function getRetentionTrends(cohortType: string, dateFilter: any) {\n  const trends = await prisma.$queryRaw`\n    SELECT \n      ${cohortType === 'monthly' ? \n        'DATE_TRUNC(\\'month\\', registration_date)' : \n        'DATE_TRUNC(\\'week\\', registration_date)'\n      } as period,\n      COUNT(*) as cohort_size,\n      ROUND(AVG(day_1_retention) * 100, 2) as day_1_rate,\n      ROUND(AVG(day_7_retention) * 100, 2) as day_7_rate,\n      ROUND(AVG(day_30_retention) * 100, 2) as day_30_rate\n    FROM retention_analysis\n    WHERE registration_date >= CURRENT_DATE - INTERVAL '12 ${cohortType}s'\n    GROUP BY ${cohortType === 'monthly' ? \n      'DATE_TRUNC(\\'month\\', registration_date)' : \n      'DATE_TRUNC(\\'week\\', registration_date)'\n    }\n    ORDER BY period DESC\n    LIMIT 12\n  `;\n\n  return trends;\n}\n\n/**\n * 获取留存漏斗\n */\nasync function getRetentionFunnel(dateFilter: any) {\n  const funnel = await prisma.$queryRaw`\n    SELECT \n      'Day 0' as stage,\n      COUNT(*) as users,\n      ROUND(COUNT(*) * 100.0 / COUNT(*), 2) as retention_rate\n    FROM retention_analysis\n    WHERE registration_date >= CURRENT_DATE - INTERVAL '90 days'\n    \n    UNION ALL\n    \n    SELECT \n      'Day 1' as stage,\n      COUNT(CASE WHEN day_1_retention THEN 1 END) as users,\n      ROUND(COUNT(CASE WHEN day_1_retention THEN 1 END) * 100.0 / COUNT(*), 2) as retention_rate\n    FROM retention_analysis\n    WHERE registration_date >= CURRENT_DATE - INTERVAL '90 days'\n    \n    UNION ALL\n    \n    SELECT \n      'Day 7' as stage,\n      COUNT(CASE WHEN day_7_retention THEN 1 END) as users,\n      ROUND(COUNT(CASE WHEN day_7_retention THEN 1 END) * 100.0 / COUNT(*), 2) as retention_rate\n    FROM retention_analysis\n    WHERE registration_date >= CURRENT_DATE - INTERVAL '90 days'\n    \n    UNION ALL\n    \n    SELECT \n      'Day 30' as stage,\n      COUNT(CASE WHEN day_30_retention THEN 1 END) as users,\n      ROUND(COUNT(CASE WHEN day_30_retention THEN 1 END) * 100.0 / COUNT(*), 2) as retention_rate\n    FROM retention_analysis\n    WHERE registration_date >= CURRENT_DATE - INTERVAL '90 days'\n  `;\n\n  return funnel;\n}\n\n/**\n * 获取分群留存对比\n */\nasync function getSegmentRetentionComparison(dateFilter: any) {\n  const comparison = await prisma.$queryRaw`\n    WITH user_segments AS (\n      SELECT \n        ra.user_id,\n        ra.registration_date,\n        ra.day_1_retention,\n        ra.day_7_retention,\n        ra.day_30_retention,\n        u.vip_level,\n        CASE \n          WHEN u.vip_level > 0 THEN 'VIP'\n          ELSE 'Regular'\n        END as user_segment\n      FROM retention_analysis ra\n      JOIN users u ON ra.user_id = u.id\n      WHERE ra.registration_date >= CURRENT_DATE - INTERVAL '90 days'\n    )\n    SELECT \n      user_segment,\n      COUNT(*) as total_users,\n      ROUND(AVG(day_1_retention) * 100, 2) as day_1_retention,\n      ROUND(AVG(day_7_retention) * 100, 2) as day_7_retention,\n      ROUND(AVG(day_30_retention) * 100, 2) as day_30_retention\n    FROM user_segments\n    GROUP BY user_segment\n    ORDER BY \n      CASE user_segment\n        WHEN 'VIP' THEN 1\n        WHEN 'Regular' THEN 2\n      END\n  `;\n\n  return comparison;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@/lib/auth' import is duplicated.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":5,"endColumn":57},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":27,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":27,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1066,1090],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1066,1090],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1066,1090],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":27,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":27,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1091,1093],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":28,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1127,1152],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1127,1152],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1127,1152],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1153,1155],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1182,1208],"text":"(searchParams.get('search') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1182,1208],"text":"(searchParams.get('search') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1182,1208],"text":"(Boolean(searchParams.get('search')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1209,1211],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1453,1456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1453,1456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1466,1507],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":46,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":46,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1580,1593],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1594,1596],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 17. Maximum allowed is 10.","line":54,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":242,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":54,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":54,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'deviceFingerprint' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deviceFingerprint' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'ipAddress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ipAddress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":74,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2195,2205],"text":"(Boolean(telegramId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":25,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2210,2219],"text":"(Boolean(firstName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":83,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":83,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2419,2431],"text":"Boolean(referralCode)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":105,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":105,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3003,3025],"text":"Boolean(referrer.is_suspicious)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":143,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":143,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3919,3933],"text":"referrerUserId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3919,3933],"text":"referrerUserId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3919,3933],"text":"Boolean(referrerUserId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":152,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":152,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4095,4109],"text":"referrerUserId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4095,4109],"text":"referrerUserId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4095,4109],"text":"Boolean(referrerUserId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":168,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":168,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4557,4590],"text":"((rewardResult.result?.totalRewards) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4557,4590],"text":"((rewardResult.result?.totalRewards) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4557,4590],"text":"(Boolean((rewardResult.result?.totalRewards)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":168,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":168,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4591,4593],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":180,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":180,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4860,4875],"text":"(referrerUserId == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4861,4875],"text":"(referrerUserId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4860,4875],"text":"(!Boolean(referrerUserId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":184,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":184,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4948,4962],"text":"referrerUserId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4948,4962],"text":"referrerUserId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4948,4962],"text":"Boolean(referrerUserId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":191,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":191,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5127,5142],"text":"(referrerUserId == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5128,5142],"text":"(referrerUserId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5127,5142],"text":"(!Boolean(referrerUserId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":207,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":207,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5533,5547],"text":"(referrerUserId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5533,5547],"text":"(referrerUserId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5533,5547],"text":"(Boolean(referrerUserId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5605,5608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5605,5608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":230,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":230,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6038,6069],"text":"(Boolean(error.message.includes('邀请码无效')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":230,"column":44,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":230,"endColumn":73,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6073,6102],"text":"(Boolean(error.message.includes('推荐人')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":239,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":239,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6297,6310],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":239,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":239,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6311,6313],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":7,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":10,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6448,6451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6448,6451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":276,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":276,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7082,7111],"text":"(Boolean((referrer?.referred_by_user_id)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport QueryOptimizer from '@/lib/query-optimizer';\nimport { validateReferralCodeFormat } from '@/lib/auth';\nimport { rewardTrigger } from '@/lib/reward-trigger-manager';\nimport { getLogger } from '@/lib/logger';\nimport { getMonitor } from '@/lib/monitoring';\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n// 创建权限中间件\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户列表\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const search = searchParams.get('search') || '';\n\n    // 使用优化后的查询方法\n    const result = await QueryOptimizer.getOptimizedUsersList({\n      page,\n      limit,\n      search\n    });\n\n      return NextResponse.json({\n        success: true,\n        data: result\n      });\n    } catch (error: any) {\n      console.error('Get users error:', error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户列表失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 创建用户（支持邀请奖励触发）\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n    const monitor = getMonitor();\n    const operationSpan = monitor.startSpan('user_create');\n\n    try {\n      const body = await request.json();\n      const { \n      telegramId, \n      firstName, \n      lastName, \n      username, \n      avatarUrl,\n      language = 'zh',\n      referralCode,\n      deviceFingerprint,\n      ipAddress\n    } = body;\n\n    // 验证必需参数\n    if (!telegramId || !firstName) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必需参数：telegramId 和 firstName'\n      }, { status: 400 });\n    }\n\n    // 验证邀请码（如果提供）\n    let referrerUserId = null;\n    if (referralCode) {\n      const validation = validateReferralCodeFormat(referralCode);\n      if (!validation.isValid) {\n        return NextResponse.json({\n          success: false,\n          error: `邀请码格式无效: ${validation.error}`\n        }, { status: 400 });\n      }\n\n      // 查找推荐人\n      const referrer = await prisma.users.findUnique({\n        where: { referralCode },\n        select: { id: true, is_suspicious: true }\n      });\n\n      if (!referrer) {\n        return NextResponse.json({\n          success: false,\n          error: '邀请码无效'\n        }, { status: 404 });\n      }\n\n      if (referrer.is_suspicious) {\n        return NextResponse.json({\n          success: false,\n          error: '推荐人账户存在可疑行为'\n        }, { status: 403 });\n      }\n\n      referrerUserId = referrer.id;\n    }\n\n    // 在事务中创建用户和触发奖励\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 检查用户是否已存在\n      const existingUser = await tx.users.findUnique({\n        where: { telegramId: telegramId.toString() },\n        select: { id: true }\n      });\n\n      if (existingUser) {\n        throw new Error('用户已存在');\n      }\n\n      // 2. 创建用户\n      const user = await tx.users.create({\n        data: {\n          telegramId: telegramId.toString(),\n          firstName,\n          lastName,\n          username,\n          avatarUrl,\n          language,\n          referred_by_user_id: referrerUserId,\n          trust_score: 50, // 默认信任分数\n          is_suspicious: false\n        }\n      });\n\n      // 3. 如果有推荐人，创建推荐关系\n      if (referrerUserId) {\n        // 创建推荐关系（最多3级）\n        await createReferralRelationships(tx, user.id, referrerUserId);\n      }\n\n      return user;\n    });\n\n    // 4. 触发注册奖励\n    if (referrerUserId) {\n      try {\n        const rewardResult = await rewardTrigger.triggerReward({\n          type: 'USER_REGISTRATION',\n          userId: result.id,\n          data: {\n            referrerId: referrerUserId,\n            referralCode\n          },\n          timestamp: new Date()\n        });\n\n        logger.info('用户注册奖励触发结果', {\n          userId: result.id,\n          referralCode,\n          rewardSuccess: rewardResult.success,\n          totalRewards: rewardResult.result?.totalRewards || 0\n        });\n      } catch (rewardError) {\n        logger.warn('注册奖励触发失败，但不影响用户创建', rewardError as Error, {\n          userId: result.id,\n          referralCode\n        });\n      }\n    }\n\n    operationSpan.finish(true, {\n      userId: result.id,\n      hasReferral: !!referrerUserId\n    });\n\n    monitor.increment('user_create_success_total', 1);\n    if (referrerUserId) {\n      monitor.increment('user_create_with_referral_total', 1);\n    }\n\n    logger.info('用户创建成功', {\n      userId: result.id,\n      telegramId,\n      hasReferral: !!referrerUserId,\n      referralCode\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        user: {\n          id: result.id,\n          telegramId: result.telegramId,\n          firstName: result.firstName,\n          referred_by_user_id: result.referred_by_user_id,\n          trust_score: result.trust_score,\n          createdAt: result.createdAt\n        }\n      },\n      message: referrerUserId ? '用户创建成功，邀请奖励已发放' : '用户创建成功'\n    });\n\n  } catch (error: any) {\n    operationSpan.finish(false, {\n      error: error.message\n    });\n\n    monitor.increment('user_create_error_total', 1);\n\n    logger.error('用户创建失败', error as Error, {\n      telegramId: body?.telegramId,\n      referralCode: body?.referralCode\n    });\n\n    // 处理特定错误\n    if (error.message === '用户已存在') {\n      return NextResponse.json({\n        success: false,\n        error: '用户已存在'\n      }, { status: 409 });\n    }\n\n    if (error.message.includes('邀请码无效') || error.message.includes('推荐人')) {\n      return NextResponse.json({\n        success: false,\n        error: error.message\n      }, { error: 404 });\n    }\n\n      return NextResponse.json({\n        success: false,\n        error: error.message || '用户创建失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * 创建推荐关系（最多3级）\n */\nasync function createReferralRelationships(\n  tx: any,\n  refereeUserId: string,\n  referrerUserId: string\n): Promise<void> {\n  const relationships: Array<{\n    referee_user_id: string;\n    referrer_user_id: string;\n    referral_level: number;\n  }> = [];\n\n  let currentReferrerId = referrerUserId;\n  let level = 1;\n\n  // 构建推荐链并创建关系\n  while (currentReferrerId && level <= 3) {\n    relationships.push({\n      referee_user_id: refereeUserId,\n      referrer_user_id: currentReferrerId,\n      referral_level: level\n    });\n\n    // 获取上一级推荐人\n    const referrer = await tx.users.findUnique({\n      where: { id: currentReferrerId },\n      select: { referred_by_user_id: true }\n    });\n\n    if (!referrer?.referred_by_user_id) {\n      break;\n    }\n\n    currentReferrerId = referrer.referred_by_user_id;\n    level++;\n  }\n\n  // 批量创建推荐关系\n  if (relationships.length > 0) {\n    await tx.referralRelationships.createMany({\n      data: relationships,\n      skipDuplicates: true\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/segments/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAdminFromRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1303,1328],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1303,1328],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1303,1328],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1329,1331],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1367,1393],"text":"(searchParams.get('offset') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1367,1393],"text":"(searchParams.get('offset') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1367,1393],"text":"(Boolean(searchParams.get('offset')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1394,1396],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1445,1448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1445,1448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":37,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":37,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1468,1474],"text":"userId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1468,1474],"text":"userId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1468,1474],"text":"Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1537,1548],"text":"segmentType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1537,1548],"text":"segmentType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1537,1548],"text":"Boolean(segmentType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":45,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1621,1636],"text":"engagementLevel != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1621,1636],"text":"engagementLevel ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1621,1636],"text":"Boolean(engagementLevel)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1717,1730],"text":"spendingLevel != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1717,1730],"text":"spendingLevel ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1717,1730],"text":"Boolean(spendingLevel)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":53,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1807,1816],"text":"riskLevel != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1807,1816],"text":"riskLevel ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1807,1816],"text":"Boolean(riskLevel)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3202,3205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3202,3205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":116,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":116,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3331,3344],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":116,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":116,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3345,3347],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":124,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":124,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":132,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3694,3700],"text":"Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4387,4390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4387,4390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":165,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":165,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4514,4527],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":165,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":165,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4528,4530],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":173,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'admin' is defined but never used. Allowed unused args must match /^_/u.","line":173,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":192,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":192,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5029,5035],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":192,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":192,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5040,5051],"text":"(Boolean(segmentType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":192,"column":37,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":192,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5056,5067],"text":"(Boolean(segmentName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6368,6371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6368,6371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":260,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":260,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6495,6508],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":260,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":260,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6509,6511],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":383,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":383,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9219,9265],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9372,9375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9372,9375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9393,9396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9393,9396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":395,"column":33,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":395,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9458,9472],"text":"(Boolean(latestBehavior))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":399,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":399,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9617,9649],"text":"(Boolean((engagementStats?.engagementScore)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":399,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":399,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9650,9652],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":445,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10611,10614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10611,10614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":446,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":446,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10642,10674],"text":"(Boolean((engagementStats?.engagementScore)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":446,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":446,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10675,10677],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":448,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":448,"endColumn":34,"fix":{"range":[10703,10717],"text":"{return 'high';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":449,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":449,"endColumn":36,"fix":{"range":[10737,10753],"text":"{return 'medium';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":450,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":450,"endColumn":33,"fix":{"range":[10773,10786],"text":"{return 'low';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10876,10879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10876,10879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":458,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":458,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10898,10911],"text":"(Boolean(spendingStats))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":458,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":458,"endColumn":36,"fix":{"range":[10913,10926],"text":"{return 'low';}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":460,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":460,"endColumn":69,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10962,10998],"text":"(Boolean((spendingStats.totalSpent?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":460,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":460,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10999,11001],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":462,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":462,"endColumn":41,"fix":{"range":[11037,11051],"text":"{return 'high';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":463,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":463,"endColumn":42,"fix":{"range":[11077,11093],"text":"{return 'medium';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11184,11187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11184,11187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11205,11208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11205,11208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":471,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":471,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11241,11268],"text":"(Boolean((engagementStats?.loginCount)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11269,11271],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":472,"column":33,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":472,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11307,11321],"text":"(Boolean(latestBehavior))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":476,"column":54,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":476,"endColumn":69,"fix":{"range":[11490,11505],"text":"{return 'daily';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":477,"column":54,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":477,"endColumn":70,"fix":{"range":[11559,11575],"text":"{return 'weekly';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":478,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":478,"endColumn":53,"fix":{"range":[11611,11628],"text":"{return 'monthly';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":485,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":485,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11710,11713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11710,11713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":485,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":485,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11732,11735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11732,11735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":486,"column":32,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":486,"endColumn":73,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11778,11819],"text":"(Boolean((spendingStats?.churnRiskScore?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":486,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":486,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11820,11822],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":487,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":487,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11855,11887],"text":"(Boolean((engagementStats?.engagementScore)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":487,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":487,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11888,11890],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":489,"column":48,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":489,"endColumn":62,"fix":{"range":[11944,11958],"text":"{return 'high';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":490,"column":48,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":490,"endColumn":64,"fix":{"range":[12006,12022],"text":"{return 'medium';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12095,12098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12095,12098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12117,12120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12117,12120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12137,12140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12137,12140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":501,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":501,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12197,12210],"text":"(Boolean(user.vipLevel))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":501,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":501,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12211,12213],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":504,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":504,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12270,12297],"text":"(Boolean((user.totalSpent?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":504,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":504,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12298,12300],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":508,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":508,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12389,12421],"text":"(Boolean((engagementStats?.engagementScore)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":508,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":508,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12422,12424],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":512,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":512,"endColumn":74,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12504,12552],"text":"(Boolean((spendingStats?.customerLifetimeValue?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":512,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":512,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12553,12555],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":63,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":11,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户分群数据\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const segmentType = searchParams.get('segmentType'); // 'behavior_segment', 'spending_segment', 'engagement_segment'\n    const engagementLevel = searchParams.get('engagementLevel'); // 'high', 'medium', 'low'\n    const spendingLevel = searchParams.get('spendingLevel'); // 'high', 'medium', 'low'\n    const riskLevel = searchParams.get('riskLevel'); // 'low', 'medium', 'high'\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    // 构建查询条件\n    const whereConditions: any = {};\n    \n    if (userId) {\n      whereConditions.user_id = userId;\n    }\n    \n    if (segmentType) {\n      whereConditions.segment_type = segmentType;\n    }\n    \n    if (engagementLevel) {\n      whereConditions.engagement_level = engagementLevel;\n    }\n    \n    if (spendingLevel) {\n      whereConditions.spending_level = spendingLevel;\n    }\n    \n    if (riskLevel) {\n      whereConditions.risk_level = riskLevel;\n    }\n\n    // 获取用户分群数据\n    const [segmentUsers, totalCount] = await Promise.all([\n      prisma.userSegments.findMany({\n        where: whereConditions,\n        orderBy: {\n          value_score: 'desc'\n        },\n        take: limit,\n        skip: offset,\n        include: {\n          users: {\n            select: {\n              id: true,\n              firstName: true,\n              username: true,\n              telegramId: true,\n              vipLevel: true,\n              luckyCoins: true,\n              createdAt: true\n            }\n          }\n        }\n      }),\n      prisma.userSegments.count({ where: whereConditions })\n    ]);\n\n    // 获取分群分布统计\n    const segmentDistribution = await getSegmentDistribution();\n\n    // 获取用户行为分群分析\n    const behaviorSegmentation = await getBehaviorSegmentation();\n\n    // 获取消费分群分析\n    const spendingSegmentation = await getSpendingSegmentation();\n\n    // 获取分群转换漏斗\n    const segmentFunnel = await getSegmentFunnel();\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        segmentUsers,\n        pagination: {\n          total: totalCount,\n          limit,\n          offset,\n          hasMore: offset + limit < totalCount\n        },\n        segmentDistribution,\n        behaviorSegmentation,\n        spendingSegmentation,\n        segmentFunnel\n      }\n    });\n\n    } catch (error: any) {\n      logger.error('获取用户分群数据失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户分群数据失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 自动更新用户分群\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const body = await request.json();\n    const { userId, segmentType = 'behavior_segment' } = body;\n\n    if (userId) {\n      // 更新特定用户的分群\n      const updatedUser = await updateUserSegmentation(userId);\n      logger.info('用户分群更新成功', {\n        userId,\n        segmentType,\n        userSegmentsId: updatedUser.id\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: updatedUser,\n        message: '用户分群更新成功'\n      });\n    } else {\n      // 批量更新所有用户的分群\n      const updatedCount = await batchUpdateUserSegmentation();\n      logger.info('批量用户分群更新完成', {\n        updatedCount,\n        segmentType\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: { updatedCount },\n        message: `批量更新完成，共更新 ${updatedCount} 个用户`\n      });\n    }\n\n    } catch (error: any) {\n      logger.error('更新用户分群失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '更新用户分群失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// PUT - 手动设置用户分群\nexport async function PUT(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const body = await request.json();\n    const {\n      userId,\n      segmentType,\n      segmentName,\n      segmentCriteria,\n      engagementLevel,\n      spendingLevel,\n      activityFrequency,\n      riskLevel,\n      valueScore\n    } = body;\n\n    // 验证必需参数\n    if (!userId || !segmentType || !segmentName) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必需参数：userId, segmentType, segmentName'\n      }, { status: 400 });\n    }\n\n    // 验证用户是否存在\n    const user = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { id: true }\n    });\n\n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 更新或创建用户分群\n    const userSegment = await prisma.userSegments.upsert({\n      where: {\n        user_id_segment_type: {\n          userId,\n          segmentType\n        }\n      },\n      update: {\n        segmentName,\n        segmentCriteria,\n        engagementLevel,\n        spendingLevel,\n        activityFrequency,\n        riskLevel,\n        valueScore,\n        updatedAt: new Date()\n      },\n      create: {\n        userId,\n        segmentType,\n        segmentName,\n        segmentCriteria,\n        engagementLevel,\n        spendingLevel,\n        activityFrequency,\n        riskLevel,\n        valueScore\n      }\n    });\n\n    logger.info('用户分群手动设置成功', {\n      userId,\n      segmentType,\n      segmentName,\n      userSegmentsId: userSegment.id\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: userSegment,\n      message: '用户分群设置成功'\n    });\n\n    } catch (error: any) {\n      logger.error('设置用户分群失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '设置用户分群失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * 更新单个用户的分群\n */\nasync function updateUserSegmentation(userId: string) {\n  // 获取用户基础信息\n  const user = await prisma.users.findUnique({\n    where: { id: userId },\n    select: {\n      id: true,\n      vipLevel: true,\n      totalSpent: true,\n      luckyCoins: true,\n      createdAt: true\n    }\n  });\n\n  if (!user) {\n    throw new Error('用户不存在');\n  }\n\n  // 获取用户的参与度数据\n  const engagementStats = await prisma.userEngagementStats.findFirst({\n    where: { userId },\n    orderBy: { date: 'desc' },\n    select: {\n      engagementScore: true,\n      loginCount: true,\n      totalSessionDuration: true\n    }\n  });\n\n  // 获取用户的消费数据\n  const spendingStats = await prisma.spendingAnalysis.findUnique({\n    where: { userId },\n    select: {\n      totalSpent: true,\n      customerLifetimeValue: true,\n      spendingSegment: true,\n      churnRiskScore: true,\n      totalOrders: true\n    }\n  });\n\n  // 获取用户最近活动时间\n  const latestBehavior = await prisma.userBehaviorLogs.findFirst({\n    where: { userId },\n    orderBy: { createdAt: 'desc' },\n    select: { createdAt: true }\n  });\n\n  // 计算行为分群\n  const behaviorSegment = calculateBehaviorSegment(engagementStats, latestBehavior);\n\n  // 计算参与度等级\n  const engagementLevel = calculateEngagementLevel(engagementStats);\n\n  // 计算消费等级\n  const spendingLevel = calculateSpendingLevel(spendingStats);\n\n  // 计算活动频率\n  const activityFrequency = calculateActivityFrequency(engagementStats, latestBehavior);\n\n  // 计算风险等级\n  const riskLevel = calculateRiskLevel(spendingStats, engagementStats);\n\n  // 计算价值评分\n  const valueScore = calculateValueScore(user, engagementStats, spendingStats);\n\n  // 更新行为分群\n  const userSegments = await prisma.userSegments.upsert({\n    where: {\n      user_id_segment_type: {\n        userId,\n        segmentType: 'behavior_segment'\n      }\n    },\n    update: {\n      segmentName: behaviorSegment.name,\n      segmentCriteria: behaviorSegment.criteria,\n      engagementLevel,\n      spendingLevel,\n      activityFrequency,\n      riskLevel,\n      valueScore,\n      updatedAt: new Date()\n    },\n    create: {\n      userId,\n      segmentType: 'behavior_segment',\n      segmentName: behaviorSegment.name,\n      segmentCriteria: behaviorSegment.criteria,\n      engagementLevel,\n      spendingLevel,\n      activityFrequency,\n      riskLevel,\n      valueScore\n    }\n  });\n\n  return userSegments;\n}\n\n/**\n * 批量更新所有用户的分群\n */\nasync function batchUpdateUserSegmentation(): Promise<number> {\n  const users = await prisma.users.findMany({\n    select: { id: true }\n  });\n\n  let updatedCount = 0;\n\n  for (const user of users) {\n    try {\n      await updateUserSegmentation(user.id);\n      updatedCount++;\n    } catch (error) {\n      console.error(`更新用户 ${user.id} 分群失败:`, error);\n    }\n  }\n\n  return updatedCount;\n}\n\n/**\n * 计算行为分群\n */\nfunction calculateBehaviorSegment(engagementStats: any, latestBehavior: any) {\n  const now = new Date();\n  const daysSinceLastActivity = latestBehavior \n    ? Math.floor((now.getTime() - new Date(latestBehavior.createdAt).getTime()) / (1000 * 60 * 60 * 24))\n    : 999;\n\n  const engagementScore = engagementStats?.engagementScore || 0;\n\n  if (daysSinceLastActivity <= 1 && engagementScore >= 80) {\n    return {\n      name: '超级活跃用户',\n      criteria: {\n        daysSinceLastActivity: `<=1天`,\n        engagementScore: `>=80`\n      }\n    };\n  } else if (daysSinceLastActivity <= 7 && engagementScore >= 50) {\n    return {\n      name: '活跃用户',\n      criteria: {\n        daysSinceLastActivity: `<=7天`,\n        engagementScore: `>=50`\n      }\n    };\n  } else if (daysSinceLastActivity <= 30 && engagementScore >= 20) {\n    return {\n      name: '一般用户',\n      criteria: {\n        daysSinceLastActivity: `<=30天`,\n        engagementScore: `>=20`\n      }\n    };\n  } else if (daysSinceLastActivity <= 90) {\n    return {\n      name: '沉默用户',\n      criteria: {\n        daysSinceLastActivity: `31-90天`\n      }\n    };\n  } else {\n    return {\n      name: '流失用户',\n      criteria: {\n        daysSinceLastActivity: `>90天`\n      }\n    };\n  }\n}\n\n/**\n * 计算参与度等级\n */\nfunction calculateEngagementLevel(engagementStats: any): string {\n  const score = engagementStats?.engagementScore || 0;\n  \n  if (score >= 80) return 'high';\n  if (score >= 50) return 'medium';\n  if (score >= 20) return 'low';\n  return 'very_low';\n}\n\n/**\n * 计算消费等级\n */\nfunction calculateSpendingLevel(spendingStats: any): string {\n  if (!spendingStats) return 'low';\n  \n  const totalSpent = parseFloat(spendingStats.totalSpent?.toString() || '0');\n  \n  if (totalSpent >= 1000) return 'high';\n  if (totalSpent >= 200) return 'medium';\n  return 'low';\n}\n\n/**\n * 计算活动频率\n */\nfunction calculateActivityFrequency(engagementStats: any, latestBehavior: any): string {\n  const loginCount = engagementStats?.loginCount || 0;\n  const daysSinceLastActivity = latestBehavior \n    ? Math.floor((Date.now() - new Date(latestBehavior.createdAt).getTime()) / (1000 * 60 * 60 * 24))\n    : 999;\n\n  if (loginCount >= 5 && daysSinceLastActivity <= 1) return 'daily';\n  if (loginCount >= 3 && daysSinceLastActivity <= 7) return 'weekly';\n  if (daysSinceLastActivity <= 30) return 'monthly';\n  return 'rare';\n}\n\n/**\n * 计算风险等级\n */\nfunction calculateRiskLevel(spendingStats: any, engagementStats: any): string {\n  const churnRisk = parseFloat(spendingStats?.churnRiskScore?.toString() || '0');\n  const engagementScore = engagementStats?.engagementScore || 0;\n  \n  if (churnRisk >= 70 || engagementScore < 20) return 'high';\n  if (churnRisk >= 40 || engagementScore < 50) return 'medium';\n  return 'low';\n}\n\n/**\n * 计算价值评分\n */\nfunction calculateValueScore(user: any, engagementStats: any, spendingStats: any): number {\n  let score = 0;\n  \n  // VIP等级加分\n  score += (user.vipLevel || 0) * 10;\n  \n  // 消费金额加分\n  const totalSpent = parseFloat(user.totalSpent?.toString() || '0');\n  score += Math.min(totalSpent / 10, 50);\n  \n  // 参与度加分\n  const engagementScore = engagementStats?.engagementScore || 0;\n  score += engagementScore * 0.3;\n  \n  // 生命周期价值加分\n  const clv = parseFloat(spendingStats?.customerLifetimeValue?.toString() || '0');\n  score += Math.min(clv / 20, 30);\n  \n  return Math.min(Math.round(score), 100);\n}\n\n/**\n * 获取分群分布统计\n */\nasync function getSegmentDistribution() {\n  const distribution = await prisma.$queryRaw`\n    SELECT \n      segment_type,\n      segment_name,\n      COUNT(*) as user_count,\n      ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) as percentage\n    FROM user_segments\n    GROUP BY segment_type, segment_name\n    ORDER BY \n      CASE segment_type\n        WHEN 'behavior_segment' THEN 1\n        WHEN 'spending_segment' THEN 2\n        WHEN 'engagement_segment' THEN 3\n        ELSE 4\n      END,\n      user_count DESC\n  `;\n\n  return distribution;\n}\n\n/**\n * 获取用户行为分群分析\n */\nasync function getBehaviorSegmentation() {\n  const behaviorSegmentation = await prisma.$queryRaw`\n    SELECT \n      us.segment_name,\n      us.engagement_level,\n      us.activity_frequency,\n      COUNT(*) as user_count,\n      ROUND(AVG(ues.engagement_score), 2) as avg_engagement_score,\n      ROUND(AVG(ues.login_count), 2) as avg_login_count\n    FROM user_segments us\n    LEFT JOIN user_engagement_stats ues ON us.user_id = ues.user_id \n      AND ues.date = CURRENT_DATE\n    WHERE us.segment_type = 'behavior_segment'\n    GROUP BY us.segment_name, us.engagement_level, us.activity_frequency\n    ORDER BY user_count DESC\n  `;\n\n  return behaviorSegmentation;\n}\n\n/**\n * 获取消费分群分析\n */\nasync function getSpendingSegmentation() {\n  const spendingSegmentation = await prisma.$queryRaw`\n    SELECT \n      us.segment_name,\n      us.spending_level,\n      COUNT(*) as user_count,\n      ROUND(AVG(sa.total_spent), 2) as avg_spent,\n      ROUND(AVG(sa.customer_lifetime_value), 2) as avg_clv,\n      ROUND(AVG(sa.total_orders), 2) as avg_orders,\n      ROUND(AVG(sa.churn_risk_score), 2) as avg_churn_risk\n    FROM user_segments us\n    LEFT JOIN spending_analysis sa ON us.user_id = sa.user_id\n    WHERE us.segment_type = 'behavior_segment'\n    GROUP BY us.segment_name, us.spending_level\n    ORDER BY user_count DESC\n  `;\n\n  return spendingSegmentation;\n}\n\n/**\n * 获取分群转换漏斗\n */\nasync function getSegmentFunnel() {\n  const funnel = await prisma.$queryRaw`\n    WITH user_progression AS (\n      SELECT \n        u.id,\n        u.created_at as registration_date,\n        -- 新用户 (注册0-7天)\n        CASE WHEN u.created_at >= CURRENT_DATE - INTERVAL '7 days' THEN 1 ELSE 0 END as is_new_user,\n        -- 活跃用户 (最近7天有登录)\n        CASE WHEN EXISTS (\n          SELECT 1 FROM user_engagement_stats \n          WHERE user_id = u.id AND date >= CURRENT_DATE - INTERVAL '7 days' AND login_count > 0\n        ) THEN 1 ELSE 0 END as is_active_user,\n        -- 消费用户 (有订单记录)\n        CASE WHEN EXISTS (\n          SELECT 1 FROM orders \n          WHERE user_id = u.id AND payment_status = 'completed'\n        ) THEN 1 ELSE 0 END as is_spending_user,\n        -- VIP用户 (VIP等级 > 0)\n        CASE WHEN u.vip_level > 0 THEN 1 ELSE 0 END as is_vip_user\n      FROM users u\n    )\n    SELECT \n      '注册用户' as stage,\n      COUNT(*) as users,\n      ROUND(COUNT(*) * 100.0 / COUNT(*), 2) as conversion_rate\n    FROM user_progression\n    \n    UNION ALL\n    \n    SELECT \n      '活跃用户' as stage,\n      COUNT(*) as users,\n      ROUND(COUNT(*) * 100.0 / SUM(is_new_user) OVER (), 2) as conversion_rate\n    FROM user_progression\n    WHERE is_new_user = 1 AND is_active_user = 1\n    \n    UNION ALL\n    \n    SELECT \n      '消费用户' as stage,\n      COUNT(*) as users,\n      ROUND(COUNT(*) * 100.0 / SUM(is_new_user) OVER (), 2) as conversion_rate\n    FROM user_progression\n    WHERE is_new_user = 1 AND is_spending_user = 1\n    \n    UNION ALL\n    \n    SELECT \n      'VIP用户' as stage,\n      COUNT(*) as users,\n      ROUND(COUNT(*) * 100.0 / SUM(is_new_user) OVER (), 2) as conversion_rate\n    FROM user_progression\n    WHERE is_new_user = 1 AND is_vip_user = 1\n  `;\n\n  return funnel;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/users/spending/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ',' expected.","line":706,"column":11,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.users.write()\n});\n\n// GET - 获取用户消费行为分析\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const analysisType = searchParams.get('analysisType') || 'overview'; // 'overview', 'user', 'segments'\n    const spendingSegment = searchParams.get('spendingSegment'); // 'low', 'medium', 'high', 'vip'\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const sortBy = searchParams.get('sortBy') || 'total_spent';\n    const sortOrder = searchParams.get('sortOrder') || 'desc';\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    // 根据分析类型返回不同数据\n    switch (analysisType) {\n      case 'user':\n        return await getUserSpendingAnalysis(admin, userId);\n      case 'segments':\n        return await getSpendingSegmentsAnalysis(admin, spendingSegment, startDate, endDate, sortBy, sortOrder, limit, offset);\n      default:\n        return await getSpendingOverview(admin, startDate, endDate);\n    }\n\n    } catch (error: any) {\n      logger.error('获取用户消费行为分析失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '获取用户消费行为分析失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// POST - 更新用户消费分析\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    const logger = getLogger();\n\n    try {\n    const body = await request.json();\n    const { userId } = body;\n\n    // 验证必需参数\n    if (!userId) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少必需参数：userId'\n      }, { status: 400 });\n    }\n\n    // 验证用户是否存在\n    const user = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { id: true, createdAt: true, totalSpent: true }\n    });\n\n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 计算消费数据\n    const spendingData = await calculateUserSpendingData(userId);\n\n    // 更新或创建消费分析记录\n    const spendingAnalysis = await prisma.spendingAnalysis.upsert({\n      where: { user_id: userId },\n      update: {\n        ...spendingData,\n        updatedAt: new Date()\n      },\n      create: {\n        userId,\n        registrationDate: user.createdAt,\n        ...spendingData\n      }\n    });\n\n    logger.info('用户消费分析更新成功', {\n      userId,\n      totalSpent: spendingData.totalSpent,\n      clv: spendingData.customerLifetimeValue,\n      segment: spendingData.spendingSegment,\n      analysisId: spendingAnalysis.id\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: spendingAnalysis,\n      message: '消费分析更新成功'\n    });\n\n    } catch (error: any) {\n      logger.error('更新用户消费分析失败', error as Error);\n      return NextResponse.json({\n        success: false,\n        error: error.message || '更新用户消费分析失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n/**\n * 获取消费概览\n */\nasync function getSpendingOverview(admin: any, startDate?: string | null, endDate?: string | null) {\n  const { searchParams } = new URL(admin.url);\n\n  // 构建日期过滤条件\n  const dateFilter = buildSpendingDateFilter(startDate, endDate);\n\n  // 获取总体消费统计\n  const overallStats = await getOverallSpendingStats(dateFilter);\n\n  // 获取消费趋势\n  const spendingTrends = await getSpendingTrends(dateFilter);\n\n  // 获取消费分群统计\n  const segmentStats = await getSpendingSegmentStats(dateFilter);\n\n  // 获取RFM分析\n  const rfmAnalysis = await getRFMAnalysis(dateFilter);\n\n  // 获取高价值客户\n  const highValueCustomers = await getHighValueCustomers();\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      overview: overallStats,\n      trends: spendingTrends,\n      segments: segmentStats,\n      rfmAnalysis,\n      highValueCustomers\n    }\n  });\n}\n\n/**\n * 获取单个用户消费分析\n */\nasync function getUserSpendingAnalysis(admin: any, userId?: string | null) {\n  if (!userId) {\n    return NextResponse.json({\n      success: false,\n      error: '缺少用户ID参数'\n    }, { status: 400 });\n  }\n\n  const userSpending = await prisma.spendingAnalysis.findUnique({\n    where: { userId },\n    include: {\n      users: {\n        select: {\n          id: true,\n          firstName: true,\n          username: true,\n          telegramId: true,\n          vipLevel: true,\n          totalSpent: true,\n          luckyCoins: true\n        }\n      }\n    }\n  });\n\n  if (!userSpending) {\n    return NextResponse.json({\n      success: false,\n      error: '用户消费分析数据不存在'\n    }, { status: 404 });\n  }\n\n  // 获取用户交易历史\n  const transactionHistory = await prisma.walletTransactions.findMany({\n    where: { userId },\n    orderBy: { created_at: 'desc' },\n    take: 50\n  });\n\n  // 获取订单历史\n  const orderHistory = await prisma.orders.findMany({\n    where: { userId },\n    orderBy: { created_at: 'desc' },\n    take: 20,\n    include: {\n      products: {\n        select: {\n          nameZh: true,\n          nameEn: true,\n          nameRu: true\n        }\n      }\n    }\n  });\n\n  // 获取消费时间线\n  const spendingTimeline = await getSpendingTimeline(userId);\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      userSpending,\n      transactionHistory,\n      orderHistory,\n      spendingTimeline\n    }\n  });\n}\n\n/**\n * 获取消费分群分析\n */\nasync function getSpendingSegmentsAnalysis(\n  admin: any,\n  spendingSegment?: string | null,\n  startDate?: string | null,\n  endDate?: string | null,\n  sortBy?: string,\n  sortOrder?: string,\n  limit?: number,\n  offset?: number\n) {\n  const { searchParams } = new URL(admin.url);\n  const dateFilter = buildSpendingDateFilter(startDate, endDate);\n\n  // 构建查询条件\n  const whereConditions: any = {\n    ...dateFilter\n  };\n\n  if (spendingSegment) {\n    whereConditions.spending_segment = spendingSegment;\n  }\n\n  // 获取分群用户数据\n  const [segmentUsers, totalCount] = await Promise.all([\n    prisma.spendingAnalysis.findMany({\n      where: whereConditions,\n      orderBy: {\n        [sortBy || 'total_spent']: (sortOrder || 'desc') as 'asc' | 'desc'\n      },\n      take: limit || 50,\n      skip: offset || 0,\n      include: {\n        users: {\n          select: {\n            id: true,\n            firstName: true,\n            username: true,\n            telegramId: true,\n            vipLevel: true\n          }\n        }\n      }\n    }),\n    prisma.spendingAnalysis.count({ where: whereConditions })\n  ]);\n\n  // 获取分群统计信息\n  const segmentStats = await getSegmentStatistics(spendingSegment);\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      segmentUsers,\n      pagination: {\n        total: totalCount,\n        limit: limit || 50,\n        offset: offset || 0,\n        hasMore: (offset || 0) + (limit || 50) < totalCount\n      },\n      segmentStats\n    }\n  });\n}\n\n/**\n * 计算用户消费数据\n */\nasync function calculateUserSpendingData(userId: string) {\n  // 获取用户基本信息和交易数据\n  const user = await prisma.users.findUnique({\n    where: { id: userId },\n    select: {\n      id: true,\n      createdAt: true,\n      totalSpent: true\n    }\n  });\n\n  if (!user) {\n    throw new Error('用户不存在');\n  }\n\n  // 获取订单数据\n  const orders = await prisma.orders.findMany({\n    where: { \n      userId,\n      paymentStatus: 'completed'\n    },\n    select: {\n      id: true,\n      totalAmount: true,\n      status: true,\n      createdAt: true,\n      type: true\n    },\n    orderBy: { created_at: 'asc' }\n  });\n\n  // 获取充值数据\n  const recharges = await prisma.walletTransactions.findMany({\n    where: {\n      userId,\n      type: 'recharge'\n    },\n    select: {\n      amount: true,\n      createdAt: true\n    },\n    orderBy: { created_at: 'asc' }\n  });\n\n  // 计算各种指标\n  const totalOrders = orders.length;\n  const completedOrders = orders.filter(o => o.status === 'completed').length;\n  const cancelledOrders = orders.filter(o => o.status === 'cancelled').length;\n  const totalSpent = orders.reduce((sum, order) => sum + parseFloat(order.totalAmount.toString()), 0);\n  const totalRechargeAmount = recharges.reduce((sum, recharge) => sum + parseFloat(recharge.amount?.toString() || '0'), 0);\n\n  // 计算首次和最后购买日期\n  const firstPurchaseDate = orders.length > 0 ? orders[0].createdAt : null;\n  const lastPurchaseDate = orders.length > 0 ? orders[orders.length - 1].createdAt : null;\n\n  // 计算平均订单价值\n  const averageOrderValue = completedOrders > 0 ? totalSpent / completedOrders : 0;\n\n  // 计算购买频率\n  let purchaseFrequencyDays = null;\n  if (orders.length > 1 && firstPurchaseDate && lastPurchaseDate) {\n    const timeDiff = lastPurchaseDate.getTime() - firstPurchaseDate.getTime();\n    purchaseFrequencyDays = Math.floor(timeDiff / (1000 * 60 * 60 * 24 * (orders.length - 1)));\n  }\n\n  // 计算距离最后购买天数\n  const daysSinceLastPurchase = lastPurchaseDate \n    ? Math.floor((Date.now() - lastPurchaseDate.getTime()) / (1000 * 60 * 60 * 24))\n    : null;\n\n  // 计算客户生命周期价值（简化版）\n  const customerLifetimeValue = calculateCLV(\n    totalSpent,\n    averageOrderValue,\n    purchaseFrequencyDays || 30,\n    user.createdAt\n  );\n\n  // 判断高价值客户\n  const highValueCustomer = totalSpent >= 1000; // 消费超过1000为高价值客户\n\n  // 分配消费分群\n  const spendingSegment = determineSpendingSegment(totalSpent, totalOrders, averageOrderValue);\n\n  // 计算流失风险评分\n  const churnRiskScore = calculateChurnRisk(\n    daysSinceLastPurchase || 0,\n    0, // 这里可以后续添加参与度数据\n    customerLifetimeValue\n  );\n\n  // 最后充值金额\n  const lastRechargeAmount = recharges.length > 0 \n    ? parseFloat(recharges[recharges.length - 1].amount?.toString() || '0')\n    : 0;\n\n  return {\n    firstPurchaseDate,\n    lastPurchaseDate,\n    totalTransactions: orders.length,\n    totalSpent,\n    totalOrders,\n    completedOrders,\n    cancelledOrders,\n    averageOrderValue,\n    customerLifetimeValue,\n    purchaseFrequencyDays,\n    daysSinceLastPurchase: daysSinceLastPurchase || 0,\n    highValueCustomer,\n    spendingSegment,\n    churnRiskScore,\n    lastRechargeAmount,\n    totalRechargeAmount\n  };\n}\n\n/**\n * 计算客户生命周期价值\n */\nfunction calculateCLV(\n  totalSpent: number,\n  averageOrderValue: number,\n  purchaseFrequencyDays: number,\n  registrationDate: Date\n): number {\n  // 如果没有购买数据，返回0\n  if (totalSpent === 0 || averageOrderValue === 0) {\n    return 0;\n  }\n\n  // 计算客户生命周期（天数）\n  const customerLifespanDays = Math.floor(\n    (Date.now() - registrationDate.getTime()) / (1000 * 60 * 60 * 24)\n  );\n\n  // 简化的CLV计算\n  // CLV = (平均订单价值 * 购买频率 * 客户生命周期) / 365\n  const annualPurchaseFrequency = 365 / purchaseFrequencyDays;\n  const projectedLifetimeValue = averageOrderValue * annualPurchaseFrequency * (customerLifespanDays / 365);\n\n  return Math.max(totalSpent, projectedLifetimeValue);\n}\n\n/**\n * 分配消费分群\n */\nfunction determineSpendingSegment(\n  totalSpent: number,\n  totalOrders: number,\n  averageOrderValue: number\n): string {\n  if (totalSpent >= 5000 || totalOrders >= 50) {\n    return 'vip';\n  } else if (totalSpent >= 1000 || totalOrders >= 10) {\n    return 'high';\n  } else if (totalSpent >= 200 || totalOrders >= 3) {\n    return 'medium';\n  } else {\n    return 'low';\n  }\n}\n\n/**\n * 计算流失风险评分\n */\nfunction calculateChurnRisk(\n  daysSinceLastPurchase: number,\n  engagementScore: number,\n  customerLifetimeValue: number\n): number {\n  let riskScore = 0;\n\n  // 基于最后购买时间的风险\n  if (daysSinceLastPurchase > 90) {\n    riskScore += 60;\n  } else if (daysSinceLastPurchase > 30) {\n    riskScore += 40;\n  } else if (daysSinceLastPurchase > 14) {\n    riskScore += 20;\n  }\n\n  // 基于客户价值的反向风险（高价值客户风险较低）\n  if (customerLifetimeValue < 100) {\n    riskScore += 20;\n  }\n\n  return Math.min(riskScore, 100);\n}\n\n/**\n * 构建消费分析的日期过滤条件\n */\nfunction buildSpendingDateFilter(startDate?: string | null, endDate?: string | null) {\n  const filter: any = {};\n  \n  if (startDate && endDate) {\n    filter.registration_date = {\n      gte: new Date(startDate),\n      lte: new Date(endDate)\n    };\n  } else if (startDate) {\n    filter.registration_date = { gte: new Date(startDate) };\n  } else if (endDate) {\n    filter.registration_date = { lte: new Date(endDate) };\n  }\n\n  return filter;\n}\n\n/**\n * 获取总体消费统计\n */\nasync function getOverallSpendingStats(dateFilter: any) {\n  const stats = await prisma.spendingAnalysis.aggregate({\n    where: dateFilter,\n    _count: { _all: true },\n    _avg: {\n      totalSpent: true,\n      averageOrderValue: true,\n      customerLifetimeValue: true,\n      totalOrders: true\n    },\n    _max: {\n      totalSpent: true,\n      customerLifetimeValue: true\n    },\n    _sum: {\n      totalSpent: true\n    }\n  });\n\n  const totalUsers = stats._count._all || 0;\n  const totalRevenue = parseFloat(stats._sum.totalSpent?.toString() || '0');\n\n  return {\n    totalUsers,\n    totalRevenue,\n    averageSpentPerUser: totalUsers > 0 ? parseFloat((totalRevenue / totalUsers).toFixed(2)) : 0,\n    averageOrderValue: parseFloat(stats._avg.averageOrderValue?.toFixed(2) || '0'),\n    averageCLV: parseFloat(stats._avg.customerLifetimeValue?.toFixed(2) || '0'),\n    maxSpent: parseFloat(stats._max.totalSpent?.toString() || '0'),\n    maxCLV: parseFloat(stats._max.customerLifetimeValue?.toString() || '0'),\n    averageOrdersPerUser: parseFloat(stats._avg.totalOrders?.toFixed(2) || '0')\n  };\n}\n\n/**\n * 获取消费趋势\n */\nasync function getSpendingTrends(dateFilter: any) {\n  const trends = await prisma.$queryRaw`\n    SELECT \n      DATE_TRUNC('month', registration_date) as month,\n      COUNT(*) as new_users,\n      SUM(total_spent) as total_revenue,\n      AVG(total_spent) as avg_spent_per_user,\n      AVG(customer_lifetime_value) as avg_clv,\n      COUNT(CASE WHEN spending_segment = 'high' OR spending_segment = 'vip' THEN 1 END) as high_value_users\n    FROM spending_analysis\n    WHERE registration_date >= CURRENT_DATE - INTERVAL '12 months'\n    GROUP BY DATE_TRUNC('month', registration_date)\n    ORDER BY month DESC\n    LIMIT 12\n  `;\n\n  return trends;\n}\n\n/**\n * 获取消费分群统计\n */\nasync function getSpendingSegmentStats(dateFilter: any) {\n  const segmentStats = await prisma.$queryRaw`\n    SELECT \n      spending_segment,\n      COUNT(*) as user_count,\n      ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) as percentage,\n      ROUND(AVG(total_spent), 2) as avg_spent,\n      ROUND(AVG(customer_lifetime_value), 2) as avg_clv,\n      ROUND(AVG(total_orders), 2) as avg_orders,\n      ROUND(SUM(total_spent), 2) as total_revenue\n    FROM spending_analysis\n    WHERE spending_segment IS NOT NULL\n    GROUP BY spending_segment\n    ORDER BY \n      CASE spending_segment\n        WHEN 'vip' THEN 1\n        WHEN 'high' THEN 2\n        WHEN 'medium' THEN 3\n        WHEN 'low' THEN 4\n      END\n  `;\n\n  return segmentStats;\n}\n\n/**\n * 获取RFM分析\n */\nasync function getRFMAnalysis(dateFilter: any) {\n  const rfmData = await prisma.$queryRaw`\n    SELECT \n      CASE \n        WHEN days_since_last_purchase <= 30 THEN 'R1'\n        WHEN days_since_last_purchase <= 60 THEN 'R2'\n        WHEN days_since_last_purchase <= 90 THEN 'R3'\n        ELSE 'R4'\n      END as recency,\n      CASE \n        WHEN total_orders >= 10 THEN 'F1'\n        WHEN total_orders >= 5 THEN 'F2'\n        WHEN total_orders >= 2 THEN 'F3'\n        ELSE 'F4'\n      END as frequency,\n      CASE \n        WHEN total_spent >= 1000 THEN 'M1'\n        WHEN total_spent >= 500 THEN 'M2'\n        WHEN total_spent >= 100 THEN 'M3'\n        ELSE 'M4'\n      END as monetary,\n      COUNT(*) as user_count,\n      ROUND(AVG(total_spent), 2) as avg_spent\n    FROM spending_analysis\n    WHERE total_spent > 0\n    GROUP BY recency, frequency, monetary\n    ORDER BY user_count DESC\n  `;\n\n  return rfmData;\n}\n\n/**\n * 获取高价值客户\n */\nasync function getHighValueCustomers() {\n  const highValueCustomers = await prisma.spendingAnalysis.findMany({\n    where: {\n      highValueCustomer: true\n    },\n    orderBy: {\n      customerLifetimeValue: 'desc'\n    },\n    take: 20,\n    include: {\n      users: {\n        select: {\n          id: true,\n          firstName: true,\n          username: true,\n          telegramId: true,\n          vipLevel: true\n        }\n      }\n    }\n  });\n\n  return highValueCustomers;\n}\n\n/**\n * 获取分群统计信息\n */\nasync function getSegmentStatistics(spendingSegment?: string | null) {\n  if (!spendingSegment) {\n    return null;\n  }\n\n  const stats = await prisma.spendingAnalysis.aggregate({\n    where: { spendingSegment },\n    _count: { _all: true },\n    _avg: {\n      totalSpent: true,\n      customerLifetimeValue: true,\n      churnRiskScore: true\n    }\n  });\n\n  return {\n    totalUsers: stats._count._all || 0,\n    averageSpent: parseFloat(stats._avg.totalSpent?.toFixed(2) || '0'),\n    averageCLV: parseFloat(stats._avg.customerLifetimeValue?.toFixed(2) || '0'),\n    averageChurnRisk: parseFloat(stats._avg.churnRiskScore?.toFixed(2) || '0')\n  };\n}\n\n/**\n * 获取消费时间线\n */\nasync function getSpendingTimeline(userId: string) {\n  const timeline = await prisma.$queryRaw`\n    SELECT \n      DATE(created_at) as date,\n      type,\n      SUM(COALESCE(amount, 0)) as daily_amount,\n      COUNT(*) as transaction_count\n    FROM wallet_transactions\n    WHERE user_id = $1 \n      AND type IN ('recharge', 'purchase', 'transfer_in', 'transfer_out')\n      AND created_at >= CURRENT_DATE - INTERVAL '30 days'\n    GROUP BY DATE(created_at), type\n    ORDER BY date DESC, type\n  `, userId);\n\n  return timeline;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/admin/withdrawals/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":288,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 管理员 - 提现审核\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getAdminFromRequest } from '@/lib/auth';\nimport type { ApiResponse } from '@/types';\n\nimport { AdminPermissionManager } from '@/lib/admin/permissions/AdminPermissionManager';\nimport { AdminPermissions } from '@/lib/admin/permissions/AdminPermissions';\n\n\nconst withReadPermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.withdrawals.read()\n});\n\nconst withWritePermission = AdminPermissionManager.createPermissionMiddleware({\n  customPermissions: AdminPermissions.withdrawals.write()\n});\n\n// 获取提现申请列表\nexport async function GET(request: NextRequest) {\n  return withReadPermission(async (request, admin) => {\n    try {\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = (page - 1) * limit;\n\n    // 构建查询条件\n    const where: any = {};\n    if (status && ['pending', 'processing', 'completed', 'rejected'].includes(status)) {\n      where.status = status;\n    }\n\n    // 获取提现列表和总数\n    const [withdrawals, total] = await Promise.all([\n      prisma.withdrawRequests.findMany({\n        where,\n        include: {\n          users: {\n            select: {\n              id: true,\n              username: true,\n              firstName: true,\n              telegramId: true\n            }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit\n      }),\n      prisma.withdrawRequests.count({ where })\n    ]);\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        withdrawals: withdrawals || [],\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n\n    } catch (error: any) {\n      console.error('获取提现列表失败:', error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: error.message || '获取提现列表失败'\n      }, { status: 500 });\n    }\n  })(request);\n}\n\n// 审核提现申请\nexport async function POST(request: NextRequest) {\n  return withWritePermission(async (request, admin) => {\n    try {\n\n    const body = await request.json();\n    const { withdrawId, action, adminNote } = body;\n\n    // 验证参数\n    if (!withdrawId || !['approve', 'reject'].includes(action)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '无效的参数'\n      }, { status: 400 });\n    }\n\n    // 生成幂等性请求ID\n    const idempotencyKey = `withdraw_review_${withdrawId}_${action}_${Date.now()}`;\n    \n    // 检查是否已经处理过该请求\n    const existingRequest = await prisma.processingLogs.findFirst({\n      where: {\n        entityId: withdrawId,\n        operationType: `withdraw_${action}`,\n        status: 'completed'\n      }\n    });\n\n    if (existingRequest) {\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        message: '该提现申请已处理过',\n        data: { \n          idempotent: true,\n          message: '重复的审核请求已被忽略'\n        }\n      });\n    }\n\n    // 记录处理开始\n    const processingLog = await prisma.processingLogs.create({\n      data: {\n        entityId: withdrawId,\n        operationType: `withdraw_${action}`,\n        status: 'processing',\n        requestId: idempotencyKey,\n        createdAt: new Date()\n      }\n    });\n\n    // 获取提现申请\n    const withdraw = await prisma.withdrawRequests.findUnique({\n      where: { id: withdrawId }\n    });\n\n    if (!withdraw) {\n      // 标记处理失败\n      await prisma.processingLogs.update({\n        where: { id: processingLog.id },\n        data: { \n          status: 'failed',\n          errorMessage: '提现申请不存在'\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '提现申请不存在'\n      }, { status: 404 });\n    }\n\n    // 检查提现申请状态，防止重复处理\n    if (withdraw.status !== 'pending') {\n      // 标记处理失败\n      await prisma.processingLogs.update({\n        where: { id: processingLog.id },\n        data: { \n          status: 'failed',\n          errorMessage: `提现申请状态异常: ${withdraw.status}`\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `该提现申请已被处理，状态: ${withdraw.status}`\n      }, { status: 400 });\n    }\n\n    // 使用事务处理审核操作，并检查状态\n    const result = await prisma.$transaction(async (tx) => {\n      // 使用原子操作检查和更新状态，防止并发处理\n      const updateResult = await tx.withdrawRequests.updateMany({\n        where: {\n          id: withdrawId,\n          status: 'pending' // 只有在状态为待处理时才更新\n        },\n        data: {\n          status: action === 'approve' ? 'completed' : 'rejected',\n          adminNote: adminNote || (action === 'approve' ? '审核通过' : '审核未通过'),\n          processedAt: new Date()\n        }\n      });\n\n      // 如果没有行被更新，说明已经被处理过\n      if (updateResult.count === 0) {\n        throw new Error('提现申请已被处理，请刷新页面重试');\n      }\n\n      // 获取更新后的提现记录\n      const updatedWithdraw = await tx.withdrawRequests.findUnique({\n        where: { id: withdrawId }\n      });\n\n      if (action === 'approve') {\n        // 通过申请 - 扣减用户余额（在实际应用中应该调用外部支付接口）\n        await tx.users.update({\n          where: { id: withdraw.userId },\n          data: {\n            balance: {\n              decrement: withdraw.amount\n            }\n          }\n        });\n\n        // 记录交易\n        await tx.transactions.create({\n          data: {\n            userId: withdraw.userId,\n            type: 'withdraw_approve',\n            amount: -withdraw.amount,\n            balanceType: 'lottery_coin',\n            description: `提现审核通过 - ${withdraw.amount} TJS`\n          }\n        });\n\n      } else {\n        // 拒绝申请 - 恢复用户余额\n        await tx.users.update({\n          where: { id: withdraw.userId },\n          data: {\n            balance: {\n              increment: withdraw.amount\n            }\n          }\n        });\n\n        // 记录交易\n        await tx.transactions.create({\n          data: {\n            userId: withdraw.userId,\n            type: 'withdraw_reject',\n            amount: withdraw.amount,\n            balanceType: 'lottery_coin',\n            description: `提现审核拒绝 - 余额已恢复 ${withdraw.amount} TJS`\n          }\n        });\n      }\n\n      // 创建通知\n      const notificationType = action === 'approve' ? 'withdraw_approved' : 'withdraw_rejected';\n      const notificationTitle = action === 'approve' ? '提现申请已通过' : '提现申请被拒绝';\n      const notificationContent = action === 'approve' \n        ? `您的提现申请已通过审核，金额: ${withdraw.amount} TJS`\n        : `您的提现申请已被拒绝，金额: ${withdraw.amount} TJS${adminNote ? `，原因: ${adminNote}` : ''}`;\n\n      await tx.notifications.create({\n        data: {\n          userId: withdraw.userId,\n          type: notificationType,\n          title: notificationTitle,\n          content: notificationContent,\n          status: 'pending'\n        }\n      });\n\n      return {\n        success: true,\n        message: `提现申请已${action === 'approve' ? '通过' : '拒绝'}`,\n        data: updatedWithdraw\n      };\n    });\n\n    // 标记处理完成\n    await prisma.processingLogs.update({\n      where: { id: processingLog.id },\n      data: { \n        status: 'completed',\n        completedAt: new Date()\n      }\n    });\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      message: result.message,\n      data: result.data || null\n    });\n\n    } catch (error: any) {\n      console.error('审核提现失败:', error);\n      \n      // 处理具体的错误信息\n      const errorMessage = error.message || '审核提现失败';\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: errorMessage\n      }, { status: 500 });\n    }\n  })(request);\n}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/auth/logout/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":16,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[541,551],"text":"(authHeader != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[541,551],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[541,551],"text":"(Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":16,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":16,"endColumn":55,"suggestions":[{"fix":{"range":[541,587],"text":"authHeader?.startsWith('Bearer ')"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'token' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":17,"column":21,"nodeType":"CallExpression","messageId":"substring","endLine":17,"endColumn":44,"fix":{"range":[622,633],"text":"slice(7"}},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":56,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":56,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":34}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { clearAuthCookies, setSecurityHeaders } from '@/lib/auth';\nimport { withErrorHandling } from '../../../lib/middleware';\nimport { getLogger } from '@/lib/logger';\nimport { respond } from '@/lib/responses';\n\nexport const POST = withErrorHandling(async (req: NextRequest) => {\n  const logger = getLogger();\n  const requestId = crypto.randomUUID();\n\n  try {\n    // 获取当前用户信息（用于日志记录）\n    const authHeader = req.headers.get('authorization');\n    let userId = 'unknown';\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      // 这里可以添加token解析逻辑，但为了安全起见，我们不解析token内容\n      userId = 'authenticated_user';\n    }\n\n    // 清除所有认证相关的cookies\n    const response = NextResponse.json(\n      respond.success({\n        message: '登出成功',\n        timestamp: new Date().toISOString()\n      }, requestId).toJSON()\n    );\n\n    // 设置安全头\n    setSecurityHeaders(response);\n\n    // 清除认证cookies\n    clearAuthCookies(response);\n\n    // 记录登出日志\n    logger.info('User logged out successfully', {\n      userId,\n      requestId,\n      timestamp: new Date().toISOString()\n    });\n\n    return response;\n\n  } catch (error) {\n    logger.error('Logout error', error as Error, { requestId });\n    \n    return NextResponse.json(\n      respond.customError('INTERNAL_ERROR', '登出处理失败').toJSON(),\n      { status: 500 }\n    );\n  }\n});\n\n// 处理预检请求\nexport const OPTIONS = async (req: NextRequest) => {\n  const response = new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Request-ID',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n\n  setSecurityHeaders(response);\n  return response;\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/auth/refresh/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[536,549],"text":"refreshToken == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[537,549],"text":"(refreshToken ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[536,549],"text":"!Boolean(refreshToken)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":34}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyRefreshToken, generateTokenPair, setSecurityHeaders } from '@/lib/auth';\nimport { withErrorHandling } from '../../../lib/middleware';\nimport { getLogger } from '@/lib/logger';\nimport { respond } from '@/lib/responses';\n\nexport const POST = withErrorHandling(async (req: NextRequest) => {\n  const logger = getLogger();\n  const requestId = crypto.randomUUID();\n\n  try {\n    // 从请求中获取刷新token\n    const refreshToken = req.cookies.get('refresh_token')?.value;\n\n    if (!refreshToken) {\n      logger.warn('Missing refresh token', { requestId });\n      return NextResponse.json(\n        respond.validationError('缺少刷新令牌', 'refreshToken').toJSON(),\n        { \n          status: 401,\n          headers: {\n            'WWW-Authenticate': 'Bearer realm=\"refresh_token_required\"'\n          }\n        }\n      );\n    }\n\n    // 验证刷新token\n    const decoded = verifyRefreshToken(refreshToken);\n    if (!decoded) {\n      logger.warn('Invalid refresh token', { requestId, userId: 'unknown' });\n      return NextResponse.json(\n        respond.validationError('无效的刷新令牌').toJSON(),\n        { \n          status: 401,\n          headers: {\n            'WWW-Authenticate': 'Bearer realm=\"invalid_token\"'\n          }\n        }\n      );\n    }\n\n    // 生成新的token对\n    const tokenPair = generateTokenPair(decoded.userId, decoded.telegramId);\n\n    // 设置响应\n    const response = NextResponse.json(\n      respond.success({\n        accessToken: tokenPair.accessToken,\n        expiresIn: tokenPair.expiresIn,\n        tokenType: 'Bearer',\n        refreshToken: tokenPair.refreshToken\n      }, requestId).toJSON()\n    );\n\n    // 设置安全头\n    setSecurityHeaders(response);\n\n    // 设置新的cookies\n    response.cookies.set('access_token', tokenPair.accessToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 15 * 60, // 15分钟\n      path: '/'\n    });\n\n    response.cookies.set('refresh_token', tokenPair.refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60, // 7天\n      path: '/api/auth/refresh'\n    });\n\n    logger.info('Token refreshed successfully', {\n      userId: decoded.userId,\n      requestId\n    });\n\n    return response;\n\n  } catch (error) {\n    logger.error('Token refresh error', error as Error, { requestId });\n    \n    return NextResponse.json(\n      respond.customError('INTERNAL_ERROR', 'Token刷新失败').toJSON(),\n      { \n        status: 500,\n        headers: {\n          'WWW-Authenticate': 'Bearer realm=\"internal_error\"'\n        }\n      }\n    );\n  }\n});\n\n// 处理预检请求\nexport const OPTIONS = async (req: NextRequest) => {\n  const response = new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Request-ID',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n\n  setSecurityHeaders(response);\n  return response;\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/auth/telegram-fixed/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'trackPerformance' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trackPerformance' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'FREE_COUNT_RULES' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FREE_COUNT_RULES' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'NextResponseHelper' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextResponseHelper' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":29,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1095,1103],"text":"(Boolean(initData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":113,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":122,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":232,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":232,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":232,"endColumn":34}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { validateTelegramWebAppData, generateJWT } from '@/lib/utils';\nimport { withErrorHandling } from '../../../lib/middleware';\nimport { createRequestTracker, trackPerformance } from '@/lib/request-tracker';\nimport { getLogger } from '@/lib/logger';\nimport { getMonitor } from '@/lib/monitoring';\nimport { respond } from '@/lib/responses';\nimport { CommonErrors } from '@/lib/errors';\nimport { UnifiedTimezoneUtils, FREE_COUNT_RULES } from '@/lib/timezone-config';\nimport { NextResponseHelper } from '@/lib/api-response';\n\nexport const POST = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const monitor = getMonitor();\n  const requestId = tracker.getRequestId();\n  const traceId = tracker.getTraceId();\n\n  logger.logRequest(req, { requestId, traceId });\n  \n  // 开始业务操作跟踪\n  const operationSpan = tracker.startSpan('telegram_auth');\n\n  try {\n    const body = await req.json();\n    const { initData } = body;\n\n    if (!initData) {\n      logger.warn('Missing initData parameter', { requestId, traceId });\n      return NextResponse.json(\n        respond.validationError('缺少initData参数', 'initData').toJSON(),\n        { status: 400 }\n      );\n    }\n\n    // 验证Telegram WebApp数据\n    let telegramUser;\n    try {\n      telegramUser = validateTelegramWebAppData(initData);\n    } catch (error) {\n      logger.warn('Invalid Telegram auth data', { \n        error: (error as Error).message, \n        requestId, \n        traceId \n      });\n      return NextResponse.json(\n        respond.validationError('Telegram认证数据无效').toJSON(),\n        { status: 400 }\n      );\n    }\n\n    // 开始数据库操作跟踪\n    const dbSpan = tracker.startSpan('user_lookup_create');\n    \n    // 查找或创建用户\n    let user = await prisma.users.findUnique({\n      where: { telegramId: telegramUser.id }\n    });\n\n    let isNewUser = false;\n\n    if (!user) {\n      isNewUser = true;\n      \n      // 获取塔吉克斯坦当前时间\n      const tajikistanNow = UnifiedTimezoneUtils.getCurrentTime();\n      \n      // 创建新用户，包含正确的免费次数初始化\n      user = await prisma.users.create({\n        data: {\n          telegramId: telegramUser.id,\n          username: telegramUser.username,\n          firstName: telegramUser.first_name,\n          lastName: telegramUser.last_name,\n          avatarUrl: telegramUser.photo_url,\n          language: telegramUser.language_code === 'ru' ? 'ru' : \n                    telegramUser.language_code === 'zh' ? 'zh' : 'en',\n          balance: 50, // 新用户赠送50夺宝币\n          freeDailyCount: 3, // 新用户获得3次免费机会\n          lastFreeResetDate: tajikistanNow, // 设置为当前塔吉克斯坦时间\n          totalSpent: 0,\n          platformBalance: 0,\n          vipLevel: 0,\n          free_count_version: 0,\n          balance_version: 0\n        }\n      });\n\n      // 记录注册赠送交易\n      await prisma.transactions.create({\n        data: {\n          userId: user.id,\n          type: 'bonus',\n          amount: 50,\n          balanceType: 'lottery_coin',\n          description: '新用户注册赠送'\n        }\n      });\n\n      // 记录免费次数初始化日志\n      await prisma.transactions.create({\n        data: {\n          userId: user.id,\n          type: 'free_count_init',\n          amount: 0,\n          balanceType: 'system',\n          description: '新用户免费次数初始化'\n        }\n      });\n\n      // 记录系统日志\n      await prisma.$executeRaw`\n        SELECT log_system_event('new_user_registration', '新用户注册完成', $1)\n      `, {\n        user_id: user.id,\n        telegram_id: telegramUser.id,\n        username: telegramUser.username,\n        language: user.language,\n        free_daily_count: 3,\n        registration_time: tajikistanNow.toISOString()\n      };\n\n      logger.info('New user created with free count', {\n        telegramId: telegramUser.id,\n        username: telegramUser.username,\n        userId: user.id,\n        freeDailyCount: 3,\n        resetDate: tajikistanNow.toISOString()\n      }, { requestId, traceId });\n    } else {\n      // 老用户检查是否需要重置免费次数\n      const tajikistanNow = UnifiedTimezoneUtils.getCurrentTime();\n      const isNewDay = UnifiedTimezoneUtils.getCurrentTime().toISOString().split('T')[0] !== \n        user.lastFreeResetDate.toISOString().split('T')[0];\n      \n      if (isNewDay) {\n        // 自动重置免费次数\n        user = await prisma.users.update({\n          where: { id: user.id },\n          data: {\n            freeDailyCount: 3,\n            lastFreeResetDate: tajikistanNow\n          }\n        });\n        \n        // 记录重置日志\n        await prisma.transactions.create({\n          data: {\n            userId: user.id,\n            type: 'free_count_reset',\n            amount: 0,\n            balanceType: 'system',\n            description: `免费次数重置 - ${UnifiedTimezoneUtils.getCurrentTime().toISOString().split('T')[0]}`\n          }\n        });\n      }\n    }\n\n    dbSpan.finish(true, { userId: user.id, isNewUser });\n\n    // 生成JWT Token\n    let token;\n    try {\n      token = generateJWT(user.id, user.telegramId.toString());\n    } catch (error) {\n      logger.error('Failed to generate JWT token', error as Error, { userId: user.id });\n      return NextResponse.json(\n        respond.customError('INTERNAL_ERROR', '生成认证令牌失败').toJSON(),\n        { status: 500 }\n      );\n    }\n\n    operationSpan.finish(true, { userId: user.id, isNewUser });\n\n    // 记录监控指标\n    monitor.recordRequest(req, 200);\n    monitor.recordResponseTime('/api/auth/telegram', Date.now() - tracker.getContext().startTime, 200);\n    monitor.increment('auth_success_total', 1, { method: 'telegram' });\n\n    // 返回成功响应\n    return NextResponse.json(\n      respond.success({\n        token,\n        user: {\n          id: user.id,\n          telegramId: user.telegramId.toString(),\n          firstName: user.firstName,\n          lastName: user.lastName,\n          username: user.username,\n          avatarUrl: user.avatarUrl,\n          language: user.language,\n          balance: parseFloat(user.balance.toString()),\n          platformBalance: parseFloat(user.platformBalance.toString()),\n          vipLevel: user.vipLevel,\n          freeDailyCount: user.freeDailyCount,\n          // 添加时区信息\n          timezone: UnifiedTimezoneUtils.TIMEZONE_CONFIG.DEFAULT_TIMEZONE,\n          lastResetDateLocal: UnifiedTimezoneUtils.getCurrentTime().toLocaleString('zh-CN', {\n            timeZone: UnifiedTimezoneUtils.TIMEZONE_CONFIG.DEFAULT_TIMEZONE,\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }\n      }, requestId, {\n        isNewUser,\n        loginMethod: 'telegram',\n      }).toJSON()\n    );\n\n  } catch (error) {\n    operationSpan.finish(false, { error: (error as Error).message });\n    \n    logger.error('Telegram auth error', error as Error, {\n      requestId,\n      traceId,\n      endpoint: req.url,\n      method: req.method\n    }, { requestId, traceId });\n\n    monitor.recordRequest(req, 500);\n    monitor.increment('auth_error_total', 1, { method: 'telegram' });\n\n    throw error;\n  }\n});\n\n// 处理预检请求\nexport const OPTIONS = async (req: NextRequest) => {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Request-ID, X-Trace-ID',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/auth/telegram/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'UserContext' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserContext' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'trackPerformance' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trackPerformance' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":35,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":35,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1111,1119],"text":"(Boolean(initData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1522,1579],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":194,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":194,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":194,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":194,"endColumn":34}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { \n  validateTelegramWebAppDataEnhanced, \n  handleAuthError, \n  buildUserContext,\n  detectNetworkQuality,\n  type UserContext,\n  type AuthError \n} from '@/lib/enhanced-auth';\nimport { generateJWT } from '@/lib/utils';\nimport { withErrorHandling } from '../../../lib/middleware';\nimport { createRequestTracker, trackPerformance } from '@/lib/request-tracker';\nimport { getLogger } from '@/lib/logger';\nimport { getMonitor } from '@/lib/monitoring';\nimport { respond } from '@/lib/responses';\nimport { CommonErrors } from '@/lib/errors';\n\nexport const POST = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const monitor = getMonitor();\n  const requestId = tracker.getRequestId();\n  const traceId = tracker.getTraceId();\n\n  logger.logRequest(req, { requestId, traceId });\n  \n  // 开始业务操作跟踪\n  const operationSpan = tracker.startSpan('telegram_auth');\n\n  try {\n    const body = await req.json();\n    const { initData } = body;\n\n    if (!initData) {\n      logger.warn('Missing initData parameter', { requestId, traceId });\n      return NextResponse.json(\n        respond.validationError('缺少initData参数', 'initData').toJSON(),\n        { status: 400 }\n      );\n    }\n\n    // 构建用户上下文\n    const userContext = buildUserContext(req);\n    \n    // 检测网络质量\n    try {\n      userContext.networkQuality = await detectNetworkQuality();\n    } catch (error) {\n      console.warn('Network quality detection failed:', error);\n      userContext.networkQuality = 'good'; // fallback\n    }\n\n    // 增强版验证Telegram WebApp数据（包含智能重试和友好错误提示）\n    let telegramUser;\n    try {\n      telegramUser = await validateTelegramWebAppDataEnhanced(initData, userContext);\n      logger.info('Enhanced Telegram auth successful', { \n        userId: telegramUser.id,\n        username: telegramUser.username,\n        requestId, \n        traceId,\n        networkQuality: userContext.networkQuality,\n        deviceType: userContext.deviceType\n      });\n    } catch (error) {\n      const authError = error as AuthError;\n      \n      logger.warn('Enhanced Telegram auth failed', { \n        errorType: authError.type,\n        errorMessage: authError.message,\n        canRetry: authError.canRetry,\n        requestId, \n        traceId \n      });\n      \n      // 返回用户友好的错误信息\n      const friendlyError = handleAuthError(authError);\n      return NextResponse.json(friendlyError, { status: 400 });\n    }\n\n    // 开始数据库操作跟踪\n    const dbSpan = tracker.startSpan('user_lookup_create');\n    \n    // 查找或创建用户\n    let user = await prisma.users.findUnique({\n      where: { telegramId: telegramUser.id }\n    });\n\n    let isNewUser = false;\n\n    if (!user) {\n      isNewUser = true;\n      \n      // 创建新用户\n      user = await prisma.users.create({\n        data: {\n          telegramId: telegramUser.id,\n          username: telegramUser.username,\n          firstName: telegramUser.first_name,\n          lastName: telegramUser.last_name,\n          avatarUrl: telegramUser.photo_url,\n          language: telegramUser.language_code === 'ru' ? 'ru' : \n                    telegramUser.language_code === 'zh' ? 'zh' : 'en',\n          balance: 50, // 新用户赠送50夺宝币\n        }\n      });\n\n      // 记录交易\n      await prisma.transactions.create({\n        data: {\n          userId: user.id,\n          type: 'bonus',\n          amount: 50,\n          balanceType: 'lottery_coin',\n          description: '新用户注册赠送'\n        }\n      });\n\n      logger.info('New user created', {\n        telegramId: telegramUser.id,\n        username: telegramUser.username,\n        userId: user.id,\n      }, { requestId, traceId });\n    }\n\n    dbSpan.finish(true, { userId: user.id, isNewUser });\n\n    // 生成JWT Token\n    let token;\n    try {\n      token = generateJWT(user.id, user.telegramId.toString());\n    } catch (error) {\n      logger.error('Failed to generate JWT token', error as Error, { userId: user.id });\n      return NextResponse.json(\n        respond.customError('INTERNAL_ERROR', '生成认证令牌失败').toJSON(),\n        { status: 500 }\n      );\n    }\n\n    operationSpan.finish(true, { userId: user.id, isNewUser });\n\n    // 记录监控指标\n    monitor.recordRequest(req, 200);\n    monitor.recordResponseTime('/api/auth/telegram', Date.now() - tracker.getContext().startTime, 200);\n    monitor.increment('auth_success_total', 1, { \n      method: 'telegram',\n      version: 'enhanced',\n      networkQuality: userContext.networkQuality,\n      deviceType: userContext.deviceType\n    });\n\n    // 返回成功响应\n    return NextResponse.json(\n      respond.success({\n        token,\n        user: {\n          id: user.id,\n          telegramId: user.telegramId.toString(),\n          firstName: user.firstName,\n          lastName: user.lastName,\n          username: user.username,\n          avatarUrl: user.avatarUrl,\n          language: user.language,\n          balance: parseFloat(user.balance.toString()),\n          platformBalance: parseFloat(user.platformBalance.toString()),\n          vipLevel: user.vipLevel,\n          freeDailyCount: user.freeDailyCount,\n        }\n      }, requestId, {\n        isNewUser,\n        loginMethod: 'telegram',\n      }).toJSON()\n    );\n\n  } catch (error) {\n    operationSpan.finish(false, { error: (error as Error).message });\n    \n    logger.error('Telegram auth error', error as Error, {\n      requestId,\n      traceId,\n      endpoint: req.url,\n      method: req.method\n    }, { requestId, traceId });\n\n    monitor.recordRequest(req, 500);\n    monitor.increment('auth_error_total', 1, { method: 'telegram' });\n\n    throw error;\n  }\n});\n\n// 处理预检请求\nexport const OPTIONS = async (req: NextRequest) => {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Request-ID, X-Trace-ID',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/check-in/claim/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'TOTAL_REWARD_AMOUNT' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TOTAL_REWARD_AMOUNT' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[615,618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[615,618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[725,737],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":50,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":50,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1487,1499],"text":"(Boolean(lockAcquired))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 17. Maximum allowed is 10.","line":64,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":297,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1879,1882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1879,1882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":75,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2186,2198],"text":"(Boolean(todayCheckIn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":30,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":75,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2203,2215],"text":"(Boolean(forceCheckIn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":110,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":110,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3085,3097],"text":"(Boolean(currentCycle))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":117,"column":32,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":117,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3478,3490],"text":"(Boolean(forceCheckIn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":124,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":124,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3749,3775],"text":"(Boolean(currentCycle.currentStreak))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":124,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":124,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3776,3778],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":125,"column":41,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":125,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3827,3839],"text":"(Boolean(forceCheckIn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":141,"column":34,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":141,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4235,4247],"text":"(Boolean(currentCycle))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":142,"column":15,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":142,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4265,4277],"text":"Boolean(currentCycle)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":190,"column":9,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":212,"endColumn":10},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":190,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":190,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5568,5580],"text":"Boolean(todayCheckIn)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":251,"column":9,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":275,"endColumn":10},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":340,"column":61,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":340,"endColumn":112,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10033,10084],"text":"(CHECK_IN_REWARDS[result.currentCycle.currentStreak] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[10033,10084],"text":"(CHECK_IN_REWARDS[result.currentCycle.currentStreak] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10033,10084],"text":"(Boolean(CHECK_IN_REWARDS[result.currentCycle.currentStreak]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":340,"column":113,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":340,"endColumn":115,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10085,10087],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\nimport { DatabaseLockManager } from '@/lib/database-lock-manager';\n\nconst logger = getLogger();\n\n// 签到奖励配置：7天周期的奖励金额\nconst CHECK_IN_REWARDS = [1.00, 0.50, 0.30, 0.10, 0.05, 0.03, 0.02];\nconst TOTAL_REWARD_AMOUNT = CHECK_IN_REWARDS.reduce((sum, reward) => sum + reward, 0);\n\n/**\n * 签到并领取奖励API\n * POST /api/check-in/claim\n */\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('签到失败：用户ID缺失', undefined, {\n        endpoint: '/api/check-in/claim',\n        method: 'POST'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始处理用户签到', { userId: user.userId }, {\n      endpoint: '/api/check-in/claim',\n      method: 'POST'\n    });\n\n    // 获取请求体数据\n    const body = await request.json().catch(() => ({}));\n    const { forceCheckIn = false } = body; // 支持强制签到（用于断签重置后）\n\n    // 使用数据库锁确保并发安全\n    const lockKey = `check_in_${user.userId}`;\n    const lockManager = DatabaseLockManager.getInstance();\n    const lockAcquired = await lockManager.acquireLock(lockKey, 5000); // 5秒超时\n\n    if (!lockAcquired) {\n      requestLogger.warn('签到失败：获取数据库锁超时', { userId: user.userId }, {\n        endpoint: '/api/check-in/claim',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('请求过于频繁，请稍后重试', 'RATE_LIMIT'),\n        { status: 429 }\n      );\n    }\n\n    try {\n      // 开始数据库事务\n      const result = await prisma.$transaction(async (tx: any) => {\n        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD格式\n\n        // 检查今日是否已签到\n        const todayCheckIn = await tx.check_in_records.findFirst({\n          where: {\n            userId: user.userId,\n            checkInDate: new Date(today)\n          }\n        });\n\n        if (todayCheckIn && !forceCheckIn) {\n          return {\n            success: false,\n            error: '今日已签到，请勿重复签到',\n            code: 'ALREADY_CHECKED_IN'\n          };\n        }\n\n        // 获取或创建当前签到周期\n        let currentCycle = await tx.check_in_cycles.findFirst({\n          where: {\n            userId: user.userId,\n            isActive: true\n          }\n        });\n\n        // 获取最近7天内的签到记录，用于断签检测\n        const recentCheckIns = await tx.check_in_records.findMany({\n          where: {\n            userId: user.userId,\n            status: 'claimed',\n            checkInDate: {\n              gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n            }\n          },\n          orderBy: {\n            checkInDate: 'desc'\n          }\n        });\n\n        // 断签检测：如果连续签到中断，需要重置周期\n        let shouldResetCycle = false;\n        let cycleStartDate = today;\n        let currentStreak = 1;\n\n        if (currentCycle && recentCheckIns.length > 0) {\n          const lastCheckIn = recentCheckIns[0];\n          const lastCheckInDate = new Date(lastCheckIn.checkInDate);\n          const todayDate = new Date(today);\n          const daysDiff = Math.floor((todayDate.getTime() - lastCheckInDate.getTime()) / (24 * 60 * 60 * 1000));\n\n          // 如果距离上次签到超过1天且不是强制签到，则视为断签\n          if (daysDiff > 1 && !forceCheckIn) {\n            shouldResetCycle = true;\n            cycleStartDate = today;\n            currentStreak = 1;\n          } else if (daysDiff === 1) {\n            // 连续签到，正常递增\n            cycleStartDate = currentCycle.cycleStartDate;\n            currentStreak = (currentCycle.currentStreak || 0) + 1;\n          } else if (daysDiff === 0 && !forceCheckIn) {\n            // 今日已签到\n            return {\n              success: false,\n              error: '今日已签到，请勿重复签到',\n              code: 'ALREADY_CHECKED_IN'\n            };\n          } else {\n            // 强制签到或异常情况，重新开始\n            shouldResetCycle = true;\n            cycleStartDate = today;\n            currentStreak = 1;\n          }\n        }\n\n        // 处理周期重置\n        if (shouldResetCycle || !currentCycle) {\n          if (currentCycle) {\n            // 关闭之前的活跃周期\n            await tx.check_in_cycles.update({\n              where: { id: currentCycle.id },\n              data: {\n                isActive: false,\n                cycleEndDate: today,\n                updatedAt: new Date()\n              }\n            });\n          }\n\n          // 创建新的签到周期\n          currentCycle = await tx.check_in_cycles.create({\n            data: {\n              userId: user.userId,\n              cycleStartDate: new Date(cycleStartDate),\n              currentStreak: currentStreak,\n              totalRewards: 0,\n              isActive: true,\n              isCompleted: false\n            }\n          });\n        } else {\n          // 更新现有周期\n          currentCycle = await tx.check_in_cycles.update({\n            where: { id: currentCycle.id },\n            data: {\n              currentStreak: currentStreak,\n              updatedAt: new Date()\n            }\n          });\n        }\n\n        // 计算签到奖励\n        const checkInDay = currentStreak;\n        if (checkInDay > 7) {\n          return {\n            success: false,\n            error: '当前签到周期已完成，请等待新的周期',\n            code: 'CYCLE_COMPLETED'\n          };\n        }\n\n        const rewardAmount = CHECK_IN_REWARDS[checkInDay - 1];\n\n        // 创建签到记录\n        let checkInRecord;\n        if (todayCheckIn) {\n          // 更新现有记录\n          checkInRecord = await tx.check_in_records.update({\n            where: { id: todayCheckIn.id },\n            data: {\n              checkInDay: checkInDay,\n              rewardAmount: rewardAmount,\n              status: 'claimed',\n              updatedAt: new Date()\n            }\n          });\n        } else {\n          // 创建新记录\n          checkInRecord = await tx.check_in_records.create({\n            data: {\n              userId: user.userId,\n              checkInDate: new Date(today),\n              checkInDay: checkInDay,\n              rewardAmount: rewardAmount,\n              status: 'claimed'\n            }\n          });\n        }\n\n        // 更新用户幸运币余额\n        const updatedUser = await tx.users.update({\n          where: { id: user.userId },\n          data: {\n            luckyCoins: {\n              increment: rewardAmount\n            },\n            luckyCoinsVersion: {\n              increment: 1\n            },\n            updatedAt: new Date()\n          }\n        });\n\n        // 记录钱包交易\n        await tx.wallet_transactions.create({\n          data: {\n            userId: user.userId,\n            type: 'check_in_reward',\n            amount: 0, // 余额不变\n            luckyCoins: rewardAmount,\n            currency: 'LC', // LuckyCoins\n            description: `签到奖励 - 第${checkInDay}天`,\n            status: 'completed',\n            metadata: {\n              checkInDay: checkInDay,\n              rewardAmount: rewardAmount,\n              cycleId: currentCycle.id,\n              checkInRecordId: checkInRecord.id\n            }\n          }\n        });\n\n        // 判断是否完成7天周期\n        const isCycleCompleted = checkInDay === 7;\n        \n        // 如果完成周期，更新周期状态\n        if (isCycleCompleted) {\n          await tx.check_in_cycles.update({\n            where: { id: currentCycle.id },\n            data: {\n              isCompleted: true,\n              cycleEndDate: today,\n              isActive: false,\n              totalRewards: {\n                increment: rewardAmount\n              },\n              updatedAt: new Date()\n            }\n          });\n        } else {\n          // 更新周期总奖励\n          await tx.check_in_cycles.update({\n            where: { id: currentCycle.id },\n            data: {\n              totalRewards: {\n                increment: rewardAmount\n              },\n              updatedAt: new Date()\n            }\n          });\n        }\n\n        return {\n          success: true,\n          checkInRecord: {\n            id: checkInRecord.id,\n            checkInDate: today,\n            checkInDay: checkInDay,\n            rewardAmount: rewardAmount,\n            status: checkInRecord.status\n          },\n          currentCycle: {\n            id: currentCycle.id,\n            cycleStartDate: currentCycle.cycleStartDate,\n            currentStreak: currentStreak,\n            isCompleted: isCycleCompleted\n          },\n          userBalance: {\n            luckyCoins: parseFloat(updatedUser.luckyCoins.toString()),\n            version: updatedUser.luckyCoinsVersion\n          }\n        };\n      });\n\n      // 如果签到失败，释放锁并返回错误\n      if (!result.success) {\n        requestLogger.warn('签到失败', { \n          userId: user.userId, \n          error: result.error,\n          code: result.code \n        }, {\n          endpoint: '/api/check-in/claim',\n          method: 'POST'\n        });\n\n        const errorResponse = result.code === 'ALREADY_CHECKED_IN' \n          ? ApiResponse.badRequest(result.error, result.code)\n          : result.code === 'CYCLE_COMPLETED'\n          ? ApiResponse.badRequest(result.error, result.code)\n          : ApiResponse.badRequest(result.error, result.code);\n\n        return NextResponse.json<ApiResponse>(errorResponse, { status: 400 });\n      }\n\n      const duration = Date.now() - startTime;\n      \n      requestLogger.info('签到成功', { \n        userId: user.userId,\n        checkInDay: result.checkInRecord.checkInDay,\n        rewardAmount: result.checkInRecord.rewardAmount,\n        currentStreak: result.currentCycle.currentStreak,\n        isCycleCompleted: result.currentCycle.isCompleted\n      }, {\n        endpoint: '/api/check-in/claim',\n        method: 'POST',\n        duration\n      });\n\n      // 返回成功响应\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        data: {\n          checkIn: result.checkInRecord,\n          cycle: result.currentCycle,\n          balance: result.userBalance,\n          nextReward: result.currentCycle.isCompleted ? 0 : CHECK_IN_REWARDS[result.currentCycle.currentStreak] || 0,\n          message: result.currentCycle.isCompleted \n            ? '恭喜完成7天签到周期！' \n            : `签到成功！获得${result.checkInRecord.rewardAmount}幸运币`\n        },\n        message: '签到成功'\n      });\n\n    } finally {\n      // 释放数据库锁\n      await lockManager.releaseLock(lockKey);\n    }\n\n  } catch (error) {\n    logger.error('签到时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/check-in/claim',\n      method: 'POST'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('签到失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/check-in/history/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 35. Maximum allowed is 10.","line":25,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":311,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[770,773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[770,773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":31,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":31,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[880,892],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":50,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":50,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1391,1415],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1391,1415],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1391,1415],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1416,1418],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":51,"column":37,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":51,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1461,1486],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1461,1486],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1461,1486],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1487,1489],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":55,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":55,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1683,1707],"text":"(searchParams.get('type') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1683,1707],"text":"(searchParams.get('type') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1683,1707],"text":"(Boolean(searchParams.get('type')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1708,1710],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":61,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":61,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1826,1835],"text":"(startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1826,1835],"text":"(startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1826,1835],"text":"(Boolean(startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":67,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":67,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2043,2050],"text":"(endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2043,2050],"text":"(endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2043,2050],"text":"(Boolean(endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":78,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2396,2403],"text":"cycleId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2396,2403],"text":"cycleId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2396,2403],"text":"Boolean(cycleId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":83,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2620,2629],"text":"startDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2620,2629],"text":"startDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2620,2629],"text":"Boolean(startDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":88,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":88,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2783,2790],"text":"endDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2783,2790],"text":"endDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2783,2790],"text":"Boolean(endDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":131,"column":38,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":131,"endColumn":71,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4215,4248],"text":"(Boolean((countResult[0]?.total?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4249,4251],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":177,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":177,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5771,5809],"text":"(Boolean((cycleCountResult[0]?.total?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5810,5812],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":213,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":213,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7062,7076],"text":"(Boolean(statsResult[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":213,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":213,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7077,7079],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":234,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":234,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7834,7867],"text":"(Boolean((stats.total_check_ins?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":234,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":234,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7868,7870],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":39,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":235,"endColumn":79,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7915,7955],"text":"(Boolean((stats.unique_days_checked_in?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":235,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":235,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7956,7958],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":236,"column":40,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":236,"endColumn":78,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8004,8042],"text":"(Boolean((stats.total_rewards_earned?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":236,"column":79,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":236,"endColumn":81,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8043,8045],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":238,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":238,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8135,8167],"text":"(Boolean((stats.current_streak?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":238,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":238,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8168,8170],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":239,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":239,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8209,8241],"text":"(Boolean((stats.longest_streak?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":239,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":239,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8242,8244],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8490,8493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8490,8493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":256,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":256,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8961,8992],"text":"(Boolean((record.final_streak?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":256,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":256,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8993,8995],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9172,9175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9172,9175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 签到奖励配置：7天周期的奖励金额\nconst CHECK_IN_REWARDS = [1.00, 0.50, 0.30, 0.10, 0.05, 0.03, 0.02];\nconst TOTAL_REWARD_AMOUNT = CHECK_IN_REWARDS.reduce((sum, reward) => sum + reward, 0);\n\n/**\n * 获取用户签到历史记录API\n * GET /api/check-in/history\n * \n * 查询参数：\n * - page: 页码 (默认1)\n * - limit: 每页条数 (默认20, 最大100)\n * - cycleId: 指定签到周期ID (可选)\n * - startDate: 开始日期 YYYY-MM-DD (可选)\n * - endDate: 结束日期 YYYY-MM-DD (可选)\n * - type: 记录类型 'records' | 'cycles' | 'all' (默认'all')\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('获取签到历史失败：用户ID缺失', undefined, {\n        endpoint: '/api/check-in/history',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始获取用户签到历史', { userId: user.userId }, {\n      endpoint: '/api/check-in/history',\n      method: 'GET'\n    });\n\n    // 解析查询参数\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 100); // 限制最大100条\n    const cycleId = searchParams.get('cycleId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const type = searchParams.get('type') || 'all';\n\n    const offset = (page - 1) * limit;\n\n    // 验证日期格式\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (startDate && !dateRegex.test(startDate)) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('开始日期格式无效，请使用YYYY-MM-DD格式', 'INVALID_START_DATE'),\n        { status: 400 }\n      );\n    }\n    if (endDate && !dateRegex.test(endDate)) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('结束日期格式无效，请使用YYYY-MM-DD格式', 'INVALID_END_DATE'),\n        { status: 400 }\n      );\n    }\n\n    // 构建查询条件\n    let checkInRecordWhere = `user_id = '${user.userId}'::uuid`;\n    let cycleWhere = `user_id = '${user.userId}'::uuid`;\n    \n    if (cycleId) {\n      checkInRecordWhere += ` AND EXISTS (SELECT 1 FROM check_in_cycles WHERE id = '${cycleId}'::uuid AND user_id = '${user.userId}'::uuid)`;\n      cycleWhere += ` AND id = '${cycleId}'::uuid`;\n    }\n    \n    if (startDate) {\n      checkInRecordWhere += ` AND check_in_date >= '${startDate}'`;\n      cycleWhere += ` AND cycle_start_date >= '${startDate}'`;\n    }\n    \n    if (endDate) {\n      checkInRecordWhere += ` AND check_in_date <= '${endDate}'`;\n      cycleWhere += ` AND (cycle_end_date <= '${endDate}' OR (cycle_start_date <= '${endDate}' AND is_active = true))`;\n    }\n\n    // 获取签到记录\n    let checkInRecords = [];\n    let totalCheckInRecords = 0;\n\n    if (type === 'all' || type === 'records') {\n      const checkInRecordsQuery = `\n        SELECT \n          cir.id,\n          cir.check_in_date,\n          cir.check_in_day,\n          cir.reward_amount,\n          cir.status,\n          cir.created_at,\n          cir.updated_at,\n          cc.id as cycle_id,\n          cc.cycle_start_date,\n          cc.cycle_end_date,\n          cc.is_completed,\n          cc.current_streak as final_streak\n        FROM check_in_records cir\n        LEFT JOIN check_in_cycles cc ON cc.cycle_start_date <= cir.check_in_date \n          AND (cc.cycle_end_date IS NULL OR cc.cycle_end_date >= cir.check_in_date)\n          AND cc.user_id = cir.user_id\n        WHERE ${checkInRecordWhere}\n        ORDER BY cir.check_in_date DESC\n        LIMIT ${limit} OFFSET ${offset}\n      `;\n      \n      checkInRecords = await prisma.$queryRawUnsafe(checkInRecordsQuery);\n\n      // 获取总记录数\n      const countQuery = `\n        SELECT COUNT(*) as total\n        FROM check_in_records cir\n        WHERE ${checkInRecordWhere}\n      `;\n      \n      const countResult = await prisma.$queryRawUnsafe(countQuery);\n      totalCheckInRecords = parseInt(countResult[0]?.total?.toString() || '0');\n    }\n\n    // 获取签到周期\n    let cycles = [];\n    let totalCycles = 0;\n\n    if (type === 'all' || type === 'cycles') {\n      const cyclesQuery = `\n        SELECT \n          cc.id,\n          cc.cycle_start_date,\n          cc.cycle_end_date,\n          cc.current_streak,\n          cc.total_rewards,\n          cc.is_active,\n          cc.is_completed,\n          cc.created_at,\n          cc.updated_at,\n          -- 获取该周期的签到记录统计\n          (SELECT COUNT(*) FROM check_in_records cir \n           WHERE cir.user_id = cc.user_id \n           AND cir.check_in_date >= cc.cycle_start_date \n           AND cir.check_in_date <= COALESCE(cc.cycle_end_date, CURRENT_DATE)\n           AND cir.status = 'claimed') as actual_check_ins,\n          (SELECT COUNT(DISTINCT cir.check_in_date) FROM check_in_records cir \n           WHERE cir.user_id = cc.user_id \n           AND cir.check_in_date >= cc.cycle_start_date \n           AND cir.check_in_date <= COALESCE(cc.cycle_end_date, CURRENT_DATE)\n           AND cir.status = 'claimed') as unique_check_in_days\n        FROM check_in_cycles cc\n        WHERE ${cycleWhere}\n        ORDER BY cc.cycle_start_date DESC\n        LIMIT ${limit} OFFSET ${offset}\n      `;\n      \n      cycles = await prisma.$queryRawUnsafe(cyclesQuery);\n\n      // 获取总周期数\n      const cycleCountQuery = `\n        SELECT COUNT(*) as total\n        FROM check_in_cycles cc\n        WHERE ${cycleWhere}\n      `;\n      \n      const cycleCountResult = await prisma.$queryRawUnsafe(cycleCountQuery);\n      totalCycles = parseInt(cycleCountResult[0]?.total?.toString() || '0');\n    }\n\n    // 统计信息\n    const statsQuery = `\n      SELECT \n        COUNT(*) as total_check_ins,\n        COUNT(DISTINCT check_in_date) as unique_days_checked_in,\n        SUM(reward_amount) as total_rewards_earned,\n        MAX(check_in_date) as last_check_in_date,\n        -- 连续签到统计\n        CASE \n          WHEN COUNT(*) > 0 THEN\n            CASE \n              WHEN MAX(check_in_date) = CURRENT_DATE THEN \n                (SELECT current_streak FROM check_in_cycles WHERE user_id = '${user.userId}'::uuid AND is_active = true ORDER BY created_at DESC LIMIT 1)\n              ELSE 0\n            END\n          ELSE 0\n        END as current_streak,\n        -- 最长连续签到\n        (SELECT MAX(streak) FROM (\n          SELECT \n            user_id,\n            check_in_date,\n            ROW_NUMBER() OVER (ORDER BY check_in_date) - \n            ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY check_in_date) as streak\n          FROM check_in_records \n          WHERE user_id = '${user.userId}'::uuid AND status = 'claimed'\n        ) t)\n        as longest_streak\n      FROM check_in_records \n      WHERE user_id = '${user.userId}'::uuid AND status = 'claimed'\n    `;\n    \n    const statsResult = await prisma.$queryRawUnsafe(statsQuery);\n    const stats = statsResult[0] || {};\n\n    // 构建响应数据\n    const responseData = {\n      pagination: {\n        page,\n        limit,\n        totalCheckInRecords,\n        totalCycles,\n        totalRecords: type === 'all' ? totalCheckInRecords + totalCycles : (type === 'records' ? totalCheckInRecords : totalCycles),\n        totalPages: Math.ceil((type === 'all' ? totalCheckInRecords + totalCycles : (type === 'records' ? totalCheckInRecords : totalCycles)) / limit),\n        hasNext: page * limit < (type === 'all' ? totalCheckInRecords + totalCycles : (type === 'records' ? totalCheckInRecords : totalCycles)),\n        hasPrev: page > 1\n      },\n      filters: {\n        cycleId,\n        startDate,\n        endDate,\n        type\n      },\n      statistics: {\n        totalCheckIns: parseInt(stats.total_check_ins?.toString() || '0'),\n        uniqueDaysCheckedIn: parseInt(stats.unique_days_checked_in?.toString() || '0'),\n        totalRewardsEarned: parseFloat(stats.total_rewards_earned?.toString() || '0'),\n        lastCheckInDate: stats.last_check_in_date,\n        currentStreak: parseInt(stats.current_streak?.toString() || '0'),\n        longestStreak: parseInt(stats.longest_streak?.toString() || '0'),\n        rewardConfig: {\n          dailyRewards: CHECK_IN_REWARDS,\n          totalRewardAmount: TOTAL_REWARD_AMOUNT\n        }\n      },\n      data: {\n        checkInRecords: type === 'all' || type === 'records' ? checkInRecords.map((record: any) => ({\n          id: record.id,\n          checkInDate: record.check_in_date,\n          checkInDay: parseInt(record.check_in_day.toString()),\n          rewardAmount: parseFloat(record.reward_amount.toString()),\n          status: record.status,\n          cycleId: record.cycle_id,\n          cycleStartDate: record.cycle_start_date,\n          cycleEndDate: record.cycle_end_date,\n          isCycleCompleted: Boolean(record.is_completed),\n          finalStreak: parseInt(record.final_streak?.toString() || '0'),\n          createdAt: record.created_at,\n          updatedAt: record.updated_at\n        })) : [],\n        cycles: type === 'all' || type === 'cycles' ? cycles.map((cycle: any) => ({\n          id: cycle.id,\n          cycleStartDate: cycle.cycle_start_date,\n          cycleEndDate: cycle.cycle_end_date,\n          currentStreak: parseInt(cycle.current_streak.toString()),\n          totalRewards: parseFloat(cycle.total_rewards.toString()),\n          isActive: Boolean(cycle.is_active),\n          isCompleted: Boolean(cycle.is_completed),\n          actualCheckIns: parseInt(cycle.actual_check_ins.toString()),\n          uniqueCheckInDays: parseInt(cycle.unique_check_in_days.toString()),\n          completionRate: parseFloat((parseInt(cycle.actual_check_ins.toString()) / 7 * 100).toFixed(2)),\n          createdAt: cycle.created_at,\n          updatedAt: cycle.updated_at\n        })) : []\n      },\n      lastUpdated: new Date()\n    };\n\n    const duration = Date.now() - startTime;\n    \n    requestLogger.info('成功获取用户签到历史', { \n      userId: user.userId,\n      totalCheckIns: responseData.statistics.totalCheckIns,\n      totalCycles: totalCycles,\n      page: page,\n      limit: limit\n    }, {\n      endpoint: '/api/check-in/history',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: responseData,\n      message: '签到历史查询成功'\n    });\n\n  } catch (error) {\n    logger.error('获取签到历史时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/check-in/history',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('获取签到历史失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/check-in/status/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":17,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":179,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[551,554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[551,554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":23,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":23,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[661,673],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":46,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":46,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1280,1298],"text":"(Boolean(userCheckInSummary))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":103,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":103,"endColumn":71,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2822,2860],"text":"(Boolean((summaryData.current_streak?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":103,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":103,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2861,2863],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":104,"column":39,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":104,"endColumn":82,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2908,2951],"text":"(Boolean((summaryData.cycle_total_rewards?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":104,"column":83,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":104,"endColumn":85,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2952,2954],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":111,"column":35,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":111,"endColumn":77,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3250,3292],"text":"(Boolean((summaryData.today_check_in_day?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":78,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":80,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3293,3295],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":112,"column":39,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":112,"endColumn":82,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3340,3383],"text":"(Boolean((summaryData.today_reward_amount?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":83,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":85,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3384,3386],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":113,"column":38,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":113,"endColumn":80,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3430,3472],"text":"(Boolean((summaryData.next_reward_amount?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3473,3475],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":116,"column":35,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":116,"endColumn":77,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3544,3586],"text":"(Boolean((summaryData.streak_last_7_days?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":116,"column":78,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":116,"endColumn":80,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3587,3589],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":117,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":117,"endColumn":72,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3628,3667],"text":"(Boolean((summaryData.total_check_ins?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3668,3670],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":120,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":126,"endColumn":10,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3766,4055],"text":"(Boolean((recentCheckIns?.map((record: any) => ({\n        checkInDate: record.check_in_date,\n        checkInDay: parseInt(record.check_in_day.toString()),\n        rewardAmount: parseFloat(record.reward_amount.toString()),\n        status: record.status,\n        createdAt: record.created_at\n      })))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3795,3798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3795,3798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":126,"column":11,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":126,"endColumn":13,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4056,4058],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":127,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":136,"endColumn":10,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4083,4510],"text":"(Boolean((cycleHistory?.map((cycle: any) => ({\n        cycleId: cycle.id,\n        cycleStartDate: cycle.cycle_start_date,\n        cycleEndDate: cycle.cycle_end_date,\n        currentStreak: parseInt(cycle.current_streak.toString()),\n        totalRewards: parseFloat(cycle.total_rewards.toString()),\n        isActive: Boolean(cycle.is_active),\n        isCompleted: Boolean(cycle.is_completed),\n        createdAt: cycle.created_at\n      })))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4109,4112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4109,4112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":11,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":13,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4511,4513],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":142,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":142,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4677,4708],"text":"(Boolean(summaryData.is_checked_in_today))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 签到奖励配置：7天周期的奖励金额\nconst CHECK_IN_REWARDS = [1.00, 0.50, 0.30, 0.10, 0.05, 0.03, 0.02];\nconst TOTAL_REWARD_AMOUNT = CHECK_IN_REWARDS.reduce((sum, reward) => sum + reward, 0);\n\n/**\n * 获取用户签到状态和进度API\n * GET /api/check-in/status\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('获取签到状态失败：用户ID缺失', undefined, {\n        endpoint: '/api/check-in/status',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始获取用户签到状态', { userId: user.userId }, {\n      endpoint: '/api/check-in/status',\n      method: 'GET'\n    });\n\n    // 获取用户签到状态汇总信息\n    const userCheckInSummary = await prisma.$queryRawUnsafe(`\n      SELECT * FROM user_check_in_summary WHERE user_id = '${user.userId}'::uuid\n    `);\n\n    // 如果用户不存在，返回错误\n    if (!userCheckInSummary || userCheckInSummary.length === 0) {\n      requestLogger.warn('获取签到状态失败：用户不存在', { userId: user.userId }, {\n        endpoint: '/api/check-in/status',\n        method: 'GET'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const summaryData = userCheckInSummary[0];\n\n    // 获取最近7天的签到记录\n    const recentCheckIns = await prisma.$queryRawUnsafe(`\n      SELECT \n        check_in_date,\n        check_in_day,\n        reward_amount,\n        status,\n        created_at\n      FROM check_in_records \n      WHERE user_id = '${user.userId}'::uuid \n      AND check_in_date >= CURRENT_DATE - INTERVAL '6 days'\n      AND status = 'claimed'\n      ORDER BY check_in_date DESC\n    `);\n\n    // 获取签到周期历史\n    const cycleHistory = await prisma.$queryRawUnsafe(`\n      SELECT \n        id,\n        cycle_start_date,\n        cycle_end_date,\n        current_streak,\n        total_rewards,\n        is_active,\n        is_completed,\n        created_at\n      FROM check_in_cycles \n      WHERE user_id = '${user.userId}'::uuid \n      ORDER BY created_at DESC \n      LIMIT 5\n    `);\n\n    // 构建响应数据\n    const responseData = {\n      userInfo: {\n        userId: summaryData.user_id,\n        username: summaryData.username,\n        firstName: summaryData.first_name,\n        lastName: summaryData.last_name\n      },\n      currentCycle: {\n        cycleId: summaryData.current_cycle_id,\n        cycleStartDate: summaryData.cycle_start_date,\n        currentStreak: parseInt(summaryData.current_streak?.toString() || '0'),\n        cycleTotalRewards: parseFloat(summaryData.cycle_total_rewards?.toString() || '0'),\n        isCycleCompleted: Boolean(summaryData.is_cycle_completed),\n        isActive: Boolean(summaryData.current_cycle_id)\n      },\n      todayStatus: {\n        today: summaryData.today,\n        isCheckedInToday: Boolean(summaryData.is_checked_in_today),\n        todayCheckInDay: parseInt(summaryData.today_check_in_day?.toString() || '0'),\n        todayRewardAmount: parseFloat(summaryData.today_reward_amount?.toString() || '0'),\n        nextRewardAmount: parseFloat(summaryData.next_reward_amount?.toString() || '0')\n      },\n      statistics: {\n        streakLast7Days: parseInt(summaryData.streak_last_7_days?.toString() || '0'),\n        totalCheckIns: parseInt(summaryData.total_check_ins?.toString() || '0'),\n        totalRewardEarned: TOTAL_REWARD_AMOUNT // 7天周期总奖励\n      },\n      recentCheckIns: recentCheckIns?.map((record: any) => ({\n        checkInDate: record.check_in_date,\n        checkInDay: parseInt(record.check_in_day.toString()),\n        rewardAmount: parseFloat(record.reward_amount.toString()),\n        status: record.status,\n        createdAt: record.created_at\n      })) || [],\n      cycleHistory: cycleHistory?.map((cycle: any) => ({\n        cycleId: cycle.id,\n        cycleStartDate: cycle.cycle_start_date,\n        cycleEndDate: cycle.cycle_end_date,\n        currentStreak: parseInt(cycle.current_streak.toString()),\n        totalRewards: parseFloat(cycle.total_rewards.toString()),\n        isActive: Boolean(cycle.is_active),\n        isCompleted: Boolean(cycle.is_completed),\n        createdAt: cycle.created_at\n      })) || [],\n      rewardConfig: {\n        dailyRewards: CHECK_IN_REWARDS,\n        totalRewardAmount: TOTAL_REWARD_AMOUNT,\n        cycleDays: 7\n      },\n      canCheckIn: !summaryData.is_checked_in_today && summaryData.current_streak < 7,\n      nextCheckInDay: summaryData.current_streak + 1,\n      lastUpdated: new Date() // 当前时间作为最后更新时间\n    };\n\n    const duration = Date.now() - startTime;\n    \n    requestLogger.info('成功获取用户签到状态', { \n      userId: user.userId,\n      currentStreak: responseData.currentCycle.currentStreak,\n      isCheckedInToday: responseData.todayStatus.isCheckedInToday,\n      canCheckIn: responseData.canCheckIn\n    }, {\n      endpoint: '/api/check-in/status',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: responseData,\n      message: '签到状态查询成功'\n    });\n\n  } catch (error) {\n    logger.error('获取签到状态时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/check-in/status',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('获取签到状态失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/checkin/calendar/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 15. Maximum allowed is 10.","line":17,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":210,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":24,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":24,"endColumn":57,"fix":{"range":[681,729],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":24,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[681,692],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[682,692],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[681,692],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":36,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":36,"endColumn":42,"fix":{"range":[1031,1042],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":37,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":37,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":75,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":75,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2049,2075],"text":"(searchParams.get('period') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2049,2075],"text":"(searchParams.get('period') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2049,2075],"text":"(Boolean(searchParams.get('period')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":75,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":75,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2076,2078],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2208,2213],"text":"month != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2208,2213],"text":"month ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2208,2213],"text":"Boolean(month)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":129,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":129,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3622,3635],"text":"Boolean(checkInRecord)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":130,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":130,"endColumn":80,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3667,3718],"text":"(CHECK_IN_REWARDS[checkInRecord.consecutiveDays - 1] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3667,3718],"text":"(CHECK_IN_REWARDS[checkInRecord.consecutiveDays - 1] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3667,3718],"text":"(Boolean(CHECK_IN_REWARDS[checkInRecord.consecutiveDays - 1]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3719,3721],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":135,"column":14,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":135,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3796,3809],"text":"(Boolean(checkInRecord))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":136,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":136,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3866,3879],"text":"(Boolean(checkInRecord))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":138,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":138,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4009,4022],"text":"(Boolean(checkInRecord))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":174,"column":44,"nodeType":"MemberExpression","endLine":174,"endColumn":77},{"ruleId":"prefer-const","severity":2,"message":"'expectedDate' is never reassigned. Use 'const' instead.","line":231,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":231,"endColumn":21,"fix":{"range":[6468,6498],"text":"const expectedDate = new Date();"}}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 7天签到奖励配置\nconst CHECK_IN_REWARDS = [0.1, 0.2, 0.3, 0.4, 0.5, 0.25, 0.25];\nconst TOTAL_REWARD_AMOUNT = CHECK_IN_REWARDS.reduce((sum, reward) => sum + reward, 0);\n\n/**\n * 获取签到日历数据API\n * GET /api/checkin/calendar\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      requestLogger.warn('获取签到日历失败：未授权访问', undefined, {\n        endpoint: '/api/checkin/calendar',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    if (!decoded?.userId) {\n      requestLogger.warn('获取签到日历失败：用户ID缺失', undefined, {\n        endpoint: '/api/checkin/calendar',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始获取用户签到日历', { userId: decoded.userId }, {\n      endpoint: '/api/checkin/calendar',\n      method: 'GET'\n    });\n\n    // 获取用户信息\n    const user = await prisma.users.findUnique({\n      where: { id: decoded.userId }\n    });\n\n    if (!user) {\n      requestLogger.warn('获取签到日历失败：用户不存在', { userId: decoded.userId }, {\n        endpoint: '/api/checkin/calendar',\n        method: 'GET'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    // 获取查询参数\n    const { searchParams } = new URL(request.url);\n    const period = searchParams.get('period') || '7'; // 默认7天\n    const month = searchParams.get('month'); // 可选：获取整月数据\n\n    let startDate: Date;\n    let endDate: Date;\n\n    if (month) {\n      // 获取整月数据\n      const [year, monthNum] = month.split('-').map(Number);\n      startDate = new Date(year, monthNum - 1, 1);\n      endDate = new Date(year, monthNum, 0); // 月末\n    } else {\n      // 获取指定天数的日历数据\n      const days = Math.min(Math.max(parseInt(period), 1), 30); // 限制1-30天\n      startDate = new Date();\n      startDate.setDate(startDate.getDate() - (days - 1));\n      endDate = new Date();\n    }\n\n    // 获取该时间段的签到记录\n    const checkInRecords = await prisma.dailyCheckIns.findMany({\n      where: {\n        userId: decoded.userId,\n        checkInDate: {\n          gte: startDate,\n          lte: endDate\n        },\n        status: 'claimed'\n      },\n      orderBy: {\n        checkInDate: 'asc'\n      }\n    });\n\n    // 计算连续签到天数（不考虑今日）\n    const consecutiveDays = await getConsecutiveDays(decoded.userId);\n\n    // 构建日历数据\n    const calendarData = [];\n    const today = new Date();\n    const currentDate = new Date(startDate);\n\n    while (currentDate <= endDate) {\n      const dateStr = currentDate.toISOString().split('T')[0];\n      const isToday = currentDate.toDateString() === today.toDateString();\n      \n      // 查找对应的签到记录\n      const checkInRecord = checkInRecords.find(record => {\n        const recordDate = new Date(record.checkInDate);\n        return recordDate.toISOString().split('T')[0] === dateStr;\n      });\n\n      // 计算这一天的理论奖励（基于连续天数）\n      let theoreticalReward = null;\n      if (checkInRecord) {\n        theoreticalReward = CHECK_IN_REWARDS[checkInRecord.consecutiveDays - 1] || 0;\n      }\n\n      calendarData.push({\n        date: dateStr,\n        day: checkInRecord ? checkInRecord.consecutiveDays : null,\n        reward: checkInRecord ? parseFloat(checkInRecord.rewardAmount.toString()) : null,\n        theoreticalReward: theoreticalReward,\n        isCheckedIn: !!checkInRecord,\n        isToday: isToday,\n        isFuture: currentDate > today,\n        dayOfWeek: currentDate.getDay(), // 0-6 (周日-周六)\n        dayOfMonth: currentDate.getDate()\n      });\n\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    // 获取统计信息\n    const statistics = {\n      totalCheckIns: checkInRecords.length,\n      totalEarned: checkInRecords.reduce((sum, record) => sum + parseFloat(record.rewardAmount.toString()), 0),\n      currentStreak: consecutiveDays,\n      maxStreak: await getMaxStreak(decoded.userId),\n      completionRate: calendarData.length > 0 ? \n        (checkInRecords.length / calendarData.length * 100).toFixed(1) : '0.0'\n    };\n\n    const responseData = {\n      period: {\n        startDate: startDate.toISOString().split('T')[0],\n        endDate: endDate.toISOString().split('T')[0],\n        days: calendarData.length\n      },\n      calendar: calendarData,\n      rewards: {\n        daily: CHECK_IN_REWARDS,\n        total: TOTAL_REWARD_AMOUNT,\n        cycleDays: 7\n      },\n      stats: statistics,\n      todayInfo: {\n        date: today.toISOString().split('T')[0],\n        canCheckIn: calendarData.find(d => d.isToday)?.isCheckedIn === false,\n        todayReward: consecutiveDays < 7 ? CHECK_IN_REWARDS[consecutiveDays] : 0,\n        nextDay: consecutiveDays + 1\n      }\n    };\n\n    const duration = Date.now() - startTime;\n    \n    requestLogger.info('成功获取用户签到日历', { \n      userId: decoded.userId,\n      periodDays: calendarData.length,\n      totalCheckIns: statistics.totalCheckIns,\n      currentStreak: statistics.currentStreak\n    }, {\n      endpoint: '/api/checkin/calendar',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: responseData,\n      message: '签到日历获取成功'\n    });\n\n  } catch (error) {\n    logger.error('获取签到日历时发生异常', error as Error, {\n      endpoint: '/api/checkin/calendar',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('获取签到日历失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n}\n\n// 计算连续签到天数\nasync function getConsecutiveDays(userId: string): Promise<number> {\n  try {\n    const checkIns = await prisma.dailyCheckIns.findMany({\n      where: {\n        userId: userId,\n        status: 'claimed'\n      },\n      orderBy: {\n        checkInDate: 'desc'\n      },\n      take: 50\n    });\n\n    if (checkIns.length === 0) {\n      return 0;\n    }\n\n    let consecutive = 0;\n    let expectedDate = new Date();\n\n    for (const checkIn of checkIns) {\n      const checkInDate = new Date(checkIn.checkInDate);\n      const checkInDateStr = checkInDate.toISOString().split('T')[0];\n      const expectedDateStr = expectedDate.toISOString().split('T')[0];\n\n      if (checkInDateStr === expectedDateStr) {\n        consecutive++;\n        expectedDate.setDate(expectedDate.getDate() - 1);\n      } else {\n        break;\n      }\n    }\n\n    return consecutive;\n  } catch (error) {\n    logger.error('计算连续签到天数失败', error as Error, { userId });\n    return 0;\n  }\n}\n\n// 获取最大连续签到天数\nasync function getMaxStreak(userId: string): Promise<number> {\n  try {\n    const checkIns = await prisma.dailyCheckIns.findMany({\n      where: {\n        userId: userId,\n        status: 'claimed'\n      },\n      orderBy: {\n        checkInDate: 'asc'\n      },\n      take: 365 // 最多查询一年的数据\n    });\n\n    if (checkIns.length === 0) {\n      return 0;\n    }\n\n    let maxStreak = 0;\n    let currentStreak = 0;\n    let lastDate: Date | null = null;\n\n    for (const checkIn of checkIns) {\n      const checkInDate = new Date(checkIn.checkInDate);\n      \n      if (lastDate) {\n        const daysDiff = Math.floor((checkInDate.getTime() - lastDate.getTime()) / (24 * 60 * 60 * 1000));\n        \n        if (daysDiff === 1) {\n          currentStreak++;\n        } else {\n          currentStreak = 1;\n        }\n      } else {\n        currentStreak = 1;\n      }\n\n      maxStreak = Math.max(maxStreak, currentStreak);\n      lastDate = checkInDate;\n    }\n\n    return maxStreak;\n  } catch (error) {\n    logger.error('获取最大连续签到天数失败', error as Error, { userId });\n    return 0;\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/checkin/claim/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":24,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":24,"endColumn":57,"fix":{"range":[681,729],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":24,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[681,692],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[682,692],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[681,692],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":36,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":36,"endColumn":42,"fix":{"range":[1025,1036],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":37,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":37,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":68,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":68,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1893,1908],"text":"Boolean(existingCheckIn)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":163,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":163,"endColumn":74,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4270,4298],"text":"(CHECK_IN_REWARDS[currentDay] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4270,4298],"text":"(CHECK_IN_REWARDS[currentDay] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4270,4298],"text":"(Boolean(CHECK_IN_REWARDS[currentDay]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":163,"column":46,"nodeType":"MemberExpression","endLine":163,"endColumn":74},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":163,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":163,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4299,4301],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6636,6639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6636,6639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'expectedDate' is never reassigned. Use 'const' instead.","line":260,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":260,"endColumn":21,"fix":{"range":[6976,7006],"text":"const expectedDate = new Date();"}}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 7天签到奖励配置\nconst CHECK_IN_REWARDS = [0.1, 0.2, 0.3, 0.4, 0.5, 0.25, 0.25];\nconst TOTAL_REWARD_AMOUNT = CHECK_IN_REWARDS.reduce((sum, reward) => sum + reward, 0);\n\n/**\n * 执行签到并获取奖励API\n * POST /api/checkin/claim\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      requestLogger.warn('签到失败：未授权访问', undefined, {\n        endpoint: '/api/checkin/claim',\n        method: 'POST'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    if (!decoded?.userId) {\n      requestLogger.warn('签到失败：用户ID缺失', undefined, {\n        endpoint: '/api/checkin/claim',\n        method: 'POST'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始处理用户签到', { userId: decoded.userId }, {\n      endpoint: '/api/checkin/claim',\n      method: 'POST'\n    });\n\n    // 开始数据库事务\n    const result = await prisma.$transaction(async (tx) => {\n      const today = new Date().toISOString().split('T')[0];\n\n      // 检查今日是否已签到\n      const existingCheckIn = await tx.dailyCheckIns.findFirst({\n        where: {\n          userId: decoded.userId,\n          checkInDate: new Date(today)\n        }\n      });\n\n      if (existingCheckIn) {\n        return {\n          success: false,\n          error: '今日已签到，请勿重复签到',\n          code: 'ALREADY_CHECKED_IN'\n        };\n      }\n\n      // 获取用户信息\n      const user = await tx.users.findUnique({\n        where: { id: decoded.userId }\n      });\n\n      if (!user) {\n        return {\n          success: false,\n          error: '用户不存在',\n          code: 'USER_NOT_FOUND'\n        };\n      }\n\n      // 计算连续签到天数\n      const consecutiveDays = await getConsecutiveDays(tx, decoded.userId);\n      const currentDay = consecutiveDays + 1;\n\n      if (currentDay > 7) {\n        return {\n          success: false,\n          error: '当前签到周期已完成，请等待新的周期',\n          code: 'CYCLE_COMPLETED'\n        };\n      }\n\n      // 获取今日奖励\n      const rewardAmount = CHECK_IN_REWARDS[currentDay - 1];\n\n      // 创建签到记录\n      const checkInRecord = await tx.dailyCheckIns.create({\n        data: {\n          userId: decoded.userId,\n          checkInDate: new Date(today),\n          consecutiveDays: currentDay,\n          rewardAmount: rewardAmount,\n          status: 'claimed'\n        }\n      });\n\n      // 更新用户luckyCoins余额\n      const updatedUser = await tx.users.update({\n        where: { id: decoded.userId },\n        data: {\n          luckyCoins: {\n            increment: rewardAmount\n          },\n          luckyCoinsVersion: {\n            increment: 1\n          }\n        }\n      });\n\n      // 记录钱包交易\n      await tx.wallet_transactions.create({\n        data: {\n          userId: decoded.userId,\n          type: 'check_in_reward',\n          amount: 0,\n          luckyCoins: rewardAmount,\n          currency: 'LC',\n          description: `7天签到奖励 - 第${currentDay}天`,\n          status: 'completed',\n          metadata: {\n            checkInDay: currentDay,\n            rewardAmount: rewardAmount,\n            cycleProgress: currentDay,\n            totalRewardAmount: TOTAL_REWARD_AMOUNT\n          }\n        }\n      });\n\n      // 判断是否完成7天周期\n      const isCycleCompleted = currentDay === 7;\n\n      return {\n        success: true,\n        checkInRecord: {\n          id: checkInRecord.id,\n          date: today,\n          day: currentDay,\n          reward: rewardAmount,\n          status: 'claimed',\n          consecutiveDays: currentDay\n        },\n        cycleInfo: {\n          currentStreak: currentDay,\n          isCycleCompleted: isCycleCompleted,\n          nextReward: isCycleCompleted ? 0 : CHECK_IN_REWARDS[currentDay] || 0,\n          progress: `${currentDay}/7`\n        },\n        userBalance: {\n          luckyCoins: parseFloat(updatedUser.luckyCoins.toString())\n        },\n        rewardInfo: {\n          todayReward: rewardAmount,\n          totalCycleReward: TOTAL_REWARD_AMOUNT,\n          earnedInCycle: currentDay === 7 ? TOTAL_REWARD_AMOUNT : CHECK_IN_REWARDS.slice(0, currentDay).reduce((sum, r) => sum + r, 0)\n        }\n      };\n    });\n\n    // 如果签到失败，释放锁并返回错误\n    if (!result.success) {\n      requestLogger.warn('签到失败', { \n        userId: decoded.userId, \n        error: result.error,\n        code: result.code \n      }, {\n        endpoint: '/api/checkin/claim',\n        method: 'POST'\n      });\n\n      const errorResponse = result.code === 'ALREADY_CHECKED_IN' \n        ? ApiResponse.badRequest(result.error, result.code)\n        : result.code === 'CYCLE_COMPLETED'\n        ? ApiResponse.badRequest(result.error, result.code)\n        : result.code === 'USER_NOT_FOUND'\n        ? ApiResponse.notFound(result.error)\n        : ApiResponse.badRequest(result.error, result.code);\n\n      return NextResponse.json<ApiResponse>(errorResponse, { status: 400 });\n    }\n\n    const duration = Date.now() - startTime;\n    \n    requestLogger.info('签到成功', { \n      userId: decoded.userId,\n      checkInDay: result.checkInRecord.day,\n      rewardAmount: result.checkInRecord.reward,\n      currentStreak: result.cycleInfo.currentStreak,\n      isCycleCompleted: result.cycleInfo.isCycleCompleted\n    }, {\n      endpoint: '/api/checkin/claim',\n      method: 'POST',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        checkIn: result.checkInRecord,\n        cycle: result.cycleInfo,\n        balance: result.userBalance,\n        reward: result.rewardInfo,\n        message: result.cycleInfo.isCycleCompleted \n          ? `恭喜完成7天签到周期！获得总计${TOTAL_REWARD_AMOUNT}幸运币` \n          : `签到成功！第${result.checkInRecord.day}天获得${result.checkInRecord.reward}幸运币`\n      },\n      message: '签到成功'\n    });\n\n  } catch (error) {\n    logger.error('签到时发生异常', error as Error, {\n      endpoint: '/api/checkin/claim',\n      method: 'POST'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('签到失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n}\n\n// 计算连续签到天数\nasync function getConsecutiveDays(tx: any, userId: string): Promise<number> {\n  try {\n    const checkIns = await tx.dailyCheckIns.findMany({\n      where: {\n        userId: userId,\n        status: 'claimed'\n      },\n      orderBy: {\n        checkInDate: 'desc'\n      },\n      take: 50\n    });\n\n    if (checkIns.length === 0) {\n      return 0;\n    }\n\n    let consecutive = 0;\n    let expectedDate = new Date();\n\n    for (const checkIn of checkIns) {\n      const checkInDate = new Date(checkIn.checkInDate);\n      const checkInDateStr = checkInDate.toISOString().split('T')[0];\n      const expectedDateStr = expectedDate.toISOString().split('T')[0];\n\n      if (checkInDateStr === expectedDateStr) {\n        consecutive++;\n        expectedDate.setDate(expectedDate.getDate() - 1);\n      } else {\n        break;\n      }\n    }\n\n    return consecutive;\n  } catch (error) {\n    logger.error('计算连续签到天数失败', error as Error, { userId });\n    return 0;\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/checkin/status/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 12. Maximum allowed is 10.","line":17,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":198,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":24,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":24,"endColumn":57,"fix":{"range":[677,725],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":24,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[677,688],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[678,688],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[677,688],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":36,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":36,"endColumn":42,"fix":{"range":[1025,1036],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":37,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":37,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":32,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":101,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2681,2693],"text":"(Boolean(todayCheckIn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":106,"column":48,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":106,"endColumn":84,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2870,2906],"text":"(CHECK_IN_REWARDS[todayRewardDay - 1] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2870,2906],"text":"(CHECK_IN_REWARDS[todayRewardDay - 1] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2870,2906],"text":"(Boolean(CHECK_IN_REWARDS[todayRewardDay - 1]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":106,"column":85,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":106,"endColumn":87,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2907,2909],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":130,"column":14,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":130,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3596,3610],"text":"(Boolean(existingRecord))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":131,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":131,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3656,3670],"text":"(Boolean(existingRecord))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":132,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3726,3740],"text":"(Boolean(existingRecord))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":148,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":148,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4136,4174],"text":"(Boolean((todayCheckIn?.rewardAmount?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":148,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":148,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4175,4177],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'expectedDate' is never reassigned. Use 'const' instead.","line":219,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":219,"endColumn":21,"fix":{"range":[6014,6044],"text":"const expectedDate = new Date();"}}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 7天签到奖励配置\nconst CHECK_IN_REWARDS = [0.1, 0.2, 0.3, 0.4, 0.5, 0.25, 0.25];\nconst TOTAL_REWARD_AMOUNT = CHECK_IN_REWARDS.reduce((sum, reward) => sum + reward, 0);\n\n/**\n * 查询签到状态API\n * GET /api/checkin/status\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      requestLogger.warn('查询签到状态失败：未授权访问', undefined, {\n        endpoint: '/api/checkin/status',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    if (!decoded?.userId) {\n      requestLogger.warn('查询签到状态失败：用户ID缺失', undefined, {\n        endpoint: '/api/checkin/status',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始获取用户签到状态', { userId: decoded.userId }, {\n      endpoint: '/api/checkin/status',\n      method: 'GET'\n    });\n\n    // 获取用户信息\n    const user = await prisma.users.findUnique({\n      where: { id: decoded.userId }\n    });\n\n    if (!user) {\n      requestLogger.warn('查询签到状态失败：用户不存在', { userId: decoded.userId }, {\n        endpoint: '/api/checkin/status',\n        method: 'GET'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const today = new Date().toISOString().split('T')[0];\n\n    // 获取今日签到状态\n    const todayCheckIn = await prisma.dailyCheckIns.findFirst({\n      where: {\n        userId: decoded.userId,\n        checkInDate: new Date(today)\n      }\n    });\n\n    // 获取最近7天签到记录\n    const recentCheckIns = await prisma.dailyCheckIns.findMany({\n      where: {\n        userId: decoded.userId,\n        checkInDate: {\n          gte: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000) // 最近7天\n        }\n      },\n      orderBy: {\n        checkInDate: 'desc'\n      }\n    });\n\n    // 获取连续签到天数（不考虑今日）\n    const consecutiveDays = await getConsecutiveDays(decoded.userId);\n\n    // 计算当前周期进度\n    const currentStreak = consecutiveDays;\n    const todayIsCheckedIn = !!todayCheckIn;\n    const canCheckIn = !todayIsCheckedIn;\n    \n    // 今日应得的奖励（如果未签到）\n    const todayRewardDay = Math.min(currentStreak + 1, 7);\n    const todayReward = todayIsCheckedIn ? 0 : CHECK_IN_REWARDS[todayRewardDay - 1] || 0;\n\n    // 连续签到的记录\n    const streakDates = recentCheckIns.map(checkin => {\n      const date = new Date(checkin.checkInDate);\n      return {\n        date: date.toISOString().split('T')[0],\n        day: checkin.consecutiveDays,\n        reward: parseFloat(checkin.rewardAmount.toString()),\n        isCheckedIn: true\n      };\n    });\n\n    // 构建7天日历数据\n    const calendarData = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const existingRecord = streakDates.find(d => d.date === dateStr);\n      \n      calendarData.push({\n        date: dateStr,\n        day: existingRecord ? existingRecord.day : null,\n        reward: existingRecord ? existingRecord.reward : null,\n        isCheckedIn: !!existingRecord,\n        isToday: dateStr === today\n      });\n    }\n\n    const responseData = {\n      user: {\n        userId: user.id,\n        username: user.username,\n        firstName: user.firstName,\n        luckyCoins: parseFloat(user.luckyCoins.toString())\n      },\n      todayStatus: {\n        date: today,\n        isCheckedIn: todayIsCheckedIn,\n        canCheckIn: canCheckIn,\n        reward: parseFloat(todayCheckIn?.rewardAmount?.toString() || '0'),\n        rewardAmount: todayReward,\n        nextRewardDay: todayRewardDay\n      },\n      cycleInfo: {\n        currentStreak: currentStreak,\n        cycleProgress: Math.min(currentStreak, 7),\n        isCycleCompleted: currentStreak >= 7,\n        rewardConfig: CHECK_IN_REWARDS,\n        totalRewardAmount: TOTAL_REWARD_AMOUNT\n      },\n      calendar: calendarData,\n      statistics: {\n        totalCheckIns: recentCheckIns.length,\n        maxConsecutiveDays: Math.max(...recentCheckIns.map(c => c.consecutiveDays), 0),\n        totalEarned: recentCheckIns.reduce((sum, c) => sum + parseFloat(c.rewardAmount.toString()), 0)\n      }\n    };\n\n    const duration = Date.now() - startTime;\n    \n    requestLogger.info('成功获取用户签到状态', { \n      userId: decoded.userId,\n      currentStreak: responseData.cycleInfo.currentStreak,\n      isCheckedInToday: responseData.todayStatus.isCheckedIn,\n      canCheckIn: responseData.todayStatus.canCheckIn\n    }, {\n      endpoint: '/api/checkin/status',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: responseData,\n      message: '签到状态查询成功'\n    });\n\n  } catch (error) {\n    logger.error('获取签到状态时发生异常', error as Error, {\n      endpoint: '/api/checkin/status',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('获取签到状态失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n}\n\n// 计算连续签到天数\nasync function getConsecutiveDays(userId: string): Promise<number> {\n  try {\n    const checkIns = await prisma.dailyCheckIns.findMany({\n      where: {\n        userId: userId,\n        status: 'claimed'\n      },\n      orderBy: {\n        checkInDate: 'desc'\n      },\n      take: 50 // 只查询最近50条记录以提高性能\n    });\n\n    if (checkIns.length === 0) {\n      return 0;\n    }\n\n    let consecutive = 0;\n    let expectedDate = new Date();\n\n    for (const checkIn of checkIns) {\n      const checkInDate = new Date(checkIn.checkInDate);\n      const checkInDateStr = checkInDate.toISOString().split('T')[0];\n      const expectedDateStr = expectedDate.toISOString().split('T')[0];\n\n      if (checkInDateStr === expectedDateStr) {\n        consecutive++;\n        expectedDate.setDate(expectedDate.getDate() - 1);\n      } else {\n        break;\n      }\n    }\n\n    return consecutive;\n  } catch (error) {\n    logger.error('计算连续签到天数失败', error as Error, { userId });\n    return 0;\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/image/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 11. Maximum allowed is 10.","line":18,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":50,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":14,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":25,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[862,887],"text":"(searchParams.get('width') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[862,887],"text":"(searchParams.get('width') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[862,887],"text":"(Boolean(searchParams.get('width')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":25,"column":51,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":25,"endColumn":77},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":26,"column":15,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":26,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[954,980],"text":"(searchParams.get('height') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[954,980],"text":"(searchParams.get('height') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[954,980],"text":"(Boolean(searchParams.get('height')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":26,"column":53,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":26,"endColumn":80},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":27,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":27,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1049,1076],"text":"(searchParams.get('quality') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1049,1076],"text":"(searchParams.get('quality') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1049,1076],"text":"(Boolean(searchParams.get('quality')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":27,"column":55,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":27,"endColumn":83},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":15,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":28,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1138,1164],"text":"(searchParams.get('format') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1138,1164],"text":"(searchParams.get('format') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1138,1164],"text":"(Boolean(searchParams.get('format')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1165,1167],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":12,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1187,1210],"text":"(searchParams.get('fit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1187,1210],"text":"(searchParams.get('fit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1187,1210],"text":"(Boolean(searchParams.get('fit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1211,1213],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":17,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":30,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1239,1267],"text":"(searchParams.get('position') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1239,1267],"text":"(searchParams.get('position') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1239,1267],"text":"(Boolean(searchParams.get('position')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1268,1270],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":19,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1299,1329],"text":"(searchParams.get('background') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1299,1329],"text":"(searchParams.get('background') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1299,1329],"text":"(Boolean(searchParams.get('background')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1330,1332],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":12,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1355,1378],"text":"(searchParams.get('dpr') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1355,1378],"text":"(searchParams.get('dpr') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1355,1378],"text":"(Boolean(searchParams.get('dpr')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":32,"column":47,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":32,"endColumn":71},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1612,1662],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":57,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":57,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2086,2118],"text":"(process.env.NEXT_PUBLIC_BASE_URL != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2086,2118],"text":"(process.env.NEXT_PUBLIC_BASE_URL ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2086,2118],"text":"(Boolean(process.env.NEXT_PUBLIC_BASE_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":57,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":57,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2119,2121],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":62,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":62,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2215,2220],"text":"width != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2215,2220],"text":"width ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2215,2220],"text":"Boolean(width)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":62,"column":14,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":62,"endColumn":54,"fix":{"range":[2222,2262],"text":"{searchParams.set('w', width.toString());}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":63,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":63,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2269,2275],"text":"height != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2269,2275],"text":"height ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2269,2275],"text":"Boolean(height)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":63,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":63,"endColumn":56,"fix":{"range":[2277,2318],"text":"{searchParams.set('h', height.toString());}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":68,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":68,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2473,2483],"text":"background != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2473,2483],"text":"background ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2473,2483],"text":"Boolean(background)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":68,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":68,"endColumn":54,"fix":{"range":[2485,2520],"text":"{searchParams.set('bg', background);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":69,"column":16,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":69,"endColumn":56,"fix":{"range":[2536,2576],"text":"{searchParams.set('dpr', dpr.toString());}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3147,3193],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":156,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":156,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4543,4556],"text":"(image.quality != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4543,4556],"text":"(image.quality ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4543,4556],"text":"(Boolean(image.quality))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4557,4559],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":163,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":163,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4749,4762],"text":"(image.quality != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4749,4762],"text":"(image.quality ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4749,4762],"text":"(Boolean(image.quality))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":163,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":163,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4763,4765],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":187,"column":11,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":187,"endColumn":18,"fix":{"range":[5308,5653],"text":"for (const format of formats) {\n    const urlSet = sizes.map(size => {\n      const url = generateOptimizedImageUrl({\n        src,\n        width: size,\n        quality,\n        format,\n        fit: 'cover',\n        position: 'center',\n        dpr: 1\n      });\n      return `${url} ${size}w`;\n    }).join(', ');\n    \n    srcSet[format] = urlSet;\n  }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":201,"column":5,"nodeType":"MemberExpression","endLine":201,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'src' is defined but never used. Allowed unused args must match /^_/u.","line":231,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":231,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'src' is defined but never used. Allowed unused args must match /^_/u.","line":231,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'src' is defined but never used. Allowed unused args must match /^_/u.","line":236,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'src' is defined but never used. Allowed unused args must match /^_/u.","line":236,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":246,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":246,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6625,6634],"text":"(extension != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6625,6634],"text":"(extension ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6625,6634],"text":"(Boolean(extension))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":246,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":246,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6635,6637],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'src' is defined but never used. Allowed unused args must match /^_/u.","line":296,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":296,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'src' is defined but never used. Allowed unused args must match /^_/u.","line":296,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":320,"column":37,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":320,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8471,8499],"text":"(reductionRates[outputFormat] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8471,8499],"text":"(reductionRates[outputFormat] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8471,8499],"text":"(Boolean(reductionRates[outputFormat]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":320,"column":37,"nodeType":"MemberExpression","endLine":320,"endColumn":65},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":320,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":320,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8500,8502],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":4,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\n// 图片优化参数验证\nconst ImageOptimizationSchema = z.object({\n  src: z.string(),\n  width: z.number().min(1).max(4000).optional(),\n  height: z.number().min(1).max(4000).optional(),\n  quality: z.number().min(1).max(100).default(75),\n  format: z.enum(['auto', 'webp', 'avif', 'jpeg', 'png']).default('auto'),\n  fit: z.enum(['cover', 'contain', 'fill', 'inside', 'outside']).default('cover'),\n  position: z.string().default('center'),\n  background: z.string().optional(),\n  dpr: z.number().min(1).max(3).default(1),\n});\n\n// GET /api/image/optimize - 图片优化端点\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    \n    // 解析查询参数\n    const imageParams = ImageOptimizationSchema.parse({\n      src: searchParams.get('src'),\n      width: searchParams.get('width') ? parseInt(searchParams.get('width')!) : undefined,\n      height: searchParams.get('height') ? parseInt(searchParams.get('height')!) : undefined,\n      quality: searchParams.get('quality') ? parseInt(searchParams.get('quality')!) : 75,\n      format: searchParams.get('format') || 'auto',\n      fit: searchParams.get('fit') || 'cover',\n      position: searchParams.get('position') || 'center',\n      background: searchParams.get('background') || undefined,\n      dpr: searchParams.get('dpr') ? parseInt(searchParams.get('dpr')!) : 1,\n    });\n\n    // 生成优化后的图片URL\n    const optimizedUrl = generateOptimizedImageUrl(imageParams);\n    \n    // 返回重定向到优化后的图片\n    return NextResponse.redirect(optimizedUrl);\n\n  } catch (error) {\n    console.error('Image optimization error:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: '图片优化失败',\n      details: error instanceof z.ZodError ? error.errors : undefined\n    }, { status: 400 });\n  }\n}\n\n// 生成优化图片URL\nfunction generateOptimizedImageUrl(params: z.infer<typeof ImageOptimizationSchema>): string {\n  const { src, width, height, quality, format, fit, position, background, dpr } = params;\n  \n  // 解析原始URL\n  const url = new URL(src, process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000');\n  \n  // 添加图片处理参数\n  const searchParams = url.searchParams;\n  \n  if (width) searchParams.set('w', width.toString());\n  if (height) searchParams.set('h', height.toString());\n  searchParams.set('q', quality.toString());\n  searchParams.set('fm', format);\n  searchParams.set('fit', fit);\n  searchParams.set('pos', position);\n  if (background) searchParams.set('bg', background);\n  if (dpr > 1) searchParams.set('dpr', dpr.toString());\n  \n  return url.toString();\n}\n\n// POST /api/image/analyze - 图片分析端点\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action } = body;\n    \n    if (action === 'analyze') {\n      return analyzeImage(body);\n    }\n    \n    if (action === 'bulk-optimize') {\n      return bulkOptimizeImages(body);\n    }\n    \n    if (action === 'generate-srcset') {\n      return generateSrcSet(body);\n    }\n\n    return NextResponse.json({\n      success: false,\n      error: '不支持的操作'\n    }, { status: 400 });\n\n  } catch (error) {\n    console.error('Image analysis error:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: '图片分析失败',\n      details: error instanceof z.ZodError ? error.errors : undefined\n    }, { status: 400 });\n  }\n}\n\n// 分析图片\nasync function analyzeImage(data: {\n  src: string;\n  analyzeType?: 'basic' | 'detailed';\n}) {\n  const { src, analyzeType = 'basic' } = data;\n  \n  // 模拟图片分析结果\n  const analysis = {\n    src,\n    originalSize: getFileSize(src),\n    dimensions: await getImageDimensions(src),\n    format: getImageFormat(src),\n    colorSpace: 'sRGB',\n    compressionRatio: 0.75,\n    optimizationSuggestions: generateOptimizationSuggestions(src),\n    ...(analyzeType === 'detailed' && {\n      histogram: generateColorHistogram(),\n      quality: assessImageQuality(src),\n      accessibility: assessAccessibility(src)\n    })\n  };\n\n  return NextResponse.json({\n    success: true,\n    data: analysis\n  });\n}\n\n// 批量优化图片\nasync function bulkOptimizeImages(data: {\n  images: Array<{\n    src: string;\n    width?: number;\n    height?: number;\n    quality?: number;\n    format?: string;\n  }>;\n  outputFormat?: 'webp' | 'avif';\n}) {\n  const { images, outputFormat = 'webp' } = data;\n  \n  const optimizedImages = images.map(image => ({\n    original: image.src,\n    optimized: generateOptimizedImageUrl({\n      src: image.src,\n      width: image.width,\n      height: image.height,\n      quality: image.quality || 75,\n      format: outputFormat,\n      fit: 'cover',\n      position: 'center',\n      dpr: 1\n    }),\n    estimatedSizeReduction: calculateSizeReduction(image.src, outputFormat),\n    quality: image.quality || 75\n  }));\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      totalImages: images.length,\n      optimizedImages,\n      totalSizeReduction: optimizedImages.reduce((sum, img) => sum + img.estimatedSizeReduction, 0)\n    }\n  });\n}\n\n// 生成响应式图片srcset\nasync function generateSrcSet(data: {\n  src: string;\n  sizes?: number[];\n  formats?: string[];\n  quality?: number;\n}) {\n  const { src, sizes = [320, 640, 768, 1024, 1280, 1536], formats = ['webp', 'avif'], quality = 75 } = data;\n  \n  const srcSet: Record<string, string> = {};\n  \n  formats.forEach(format => {\n    const urlSet = sizes.map(size => {\n      const url = generateOptimizedImageUrl({\n        src,\n        width: size,\n        quality,\n        format,\n        fit: 'cover',\n        position: 'center',\n        dpr: 1\n      });\n      return `${url} ${size}w`;\n    }).join(', ');\n    \n    srcSet[format] = urlSet;\n  });\n\n  // 添加默认URL\n  const defaultUrl = generateOptimizedImageUrl({\n    src,\n    width: sizes[0],\n    quality,\n    format: 'auto',\n    fit: 'cover',\n    position: 'center',\n    dpr: 1\n  });\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      default: defaultUrl,\n      srcSet,\n      sizes: sizes.join(', '),\n      recommendedSizes: {\n        mobile: '320px, 640px',\n        tablet: '768px, 1024px',\n        desktop: '1280px, 1536px'\n      }\n    }\n  });\n}\n\n// 辅助函数\nfunction getFileSize(src: string): number {\n  // 模拟文件大小，实际中应该从图片元数据获取\n  return Math.floor(Math.random() * 500000) + 100000; // 100KB - 600KB\n}\n\nasync function getImageDimensions(src: string): Promise<{ width: number; height: number }> {\n  // 模拟图片尺寸，实际中应该从图片元数据获取\n  return {\n    width: Math.floor(Math.random() * 2000) + 500,\n    height: Math.floor(Math.random() * 2000) + 500\n  };\n}\n\nfunction getImageFormat(src: string): string {\n  const extension = src.split('.').pop()?.toLowerCase();\n  return extension || 'unknown';\n}\n\nfunction generateOptimizationSuggestions(src: string): string[] {\n  const suggestions: string[] = [];\n  \n  const format = getImageFormat(src);\n  if (['jpg', 'jpeg'].includes(format)) {\n    suggestions.push('建议转换为WebP格式以减少文件大小');\n    suggestions.push('可以进一步压缩图片质量');\n  }\n  \n  if (getFileSize(src) > 200000) {\n    suggestions.push('图片文件较大，建议压缩或使用CDN');\n    suggestions.push('考虑使用响应式图片');\n  }\n  \n  suggestions.push('启用懒加载以提升页面性能');\n  suggestions.push('添加适当的alt文本以提升可访问性');\n  \n  return suggestions;\n}\n\nfunction generateColorHistogram(): number[] {\n  // 模拟颜色直方图数据\n  return Array.from({ length: 256 }, () => Math.floor(Math.random() * 1000));\n}\n\nfunction assessImageQuality(src: string): {\n  score: number;\n  issues: string[];\n  recommendations: string[];\n} {\n  const score = Math.floor(Math.random() * 30) + 70; // 70-100分\n  const issues: string[] = [];\n  const recommendations: string[] = [];\n  \n  if (score < 80) {\n    issues.push('图片压缩过度，可能影响质量');\n    recommendations.push('适当提高压缩质量');\n  }\n  \n  if (getFileSize(src) > 300000) {\n    issues.push('文件大小偏大');\n    recommendations.push('优化文件大小');\n  }\n  \n  return { score, issues, recommendations };\n}\n\nfunction assessAccessibility(src: string): {\n  score: number;\n  issues: string[];\n  recommendations: string[];\n} {\n  const score = Math.floor(Math.random() * 20) + 80; // 80-100分\n  const issues: string[] = [];\n  const recommendations: string[] = [];\n  \n  issues.push('建议添加alt文本描述');\n  recommendations.push('添加有意义的alt文本');\n  recommendations.push('考虑图片的对比度');\n  \n  return { score, issues, recommendations };\n}\n\nfunction calculateSizeReduction(src: string, outputFormat: string): number {\n  const originalSize = getFileSize(src);\n  const reductionRates: Record<string, number> = {\n    'webp': 0.25,\n    'avif': 0.35,\n    'jpeg': 0.15\n  };\n  \n  return Math.floor(originalSize * (reductionRates[outputFormat] || 0.2));\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/invitation/bind/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"complexity","severity":2,"message":"Async function 'handleBindReferral' has a complexity of 13. Maximum allowed is 10.","line":16,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":98,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[514,517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[514,517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 绑定邀请关系 API\n * POST /api/invitation/bind\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { invitationService } from '@/lib/services/invitation-service';\nimport type { ApiResponse, BindReferralRequest, BindReferralResponse } from '@/types';\nimport { ErrorFactory, CommonErrors } from '@/lib/errors';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 绑定邀请关系的处理函数\nasync function handleBindReferral(request: NextRequest, user: any) {\n  try {\n    // 解析请求体\n    const body = await request.json();\n    const { referralCode }: BindReferralRequest = body;\n\n    // 验证输入参数\n    if (!referralCode || typeof referralCode !== 'string') {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '邀请码不能为空'\n      }, { status: 400 });\n    }\n\n    const userId = user.userId;\n\n    // 绑定邀请关系\n    const result = await invitationService.bindReferralRelationship(userId, referralCode);\n\n    if (!result.success) {\n      return NextResponse.json<ApiResponse<BindReferralResponse>>({\n        success: false,\n        error: result.message\n      }, { status: 400 });\n    }\n\n    logger.info('绑定邀请关系成功', {\n      userId,\n      referralCode,\n      referrerId: result.referrerUserId\n    });\n\n    return NextResponse.json<ApiResponse<BindReferralResponse>>({\n      success: true,\n      data: {\n        success: result.success,\n        referrerUserId: result.referrerUserId,\n        referrerName: result.referrerName,\n        message: result.message\n      },\n      message: result.message\n    });\n\n  } catch (error) {\n    logger.error('绑定邀请关系失败', error as Error, { \n      userId: user.userId, \n      referralCode: request.body ? JSON.parse(await request.text()).referralCode : undefined \n    });\n\n    // 处理特定错误类型\n    if (error instanceof Error) {\n      // 邀请码不存在\n      if (error.message.includes('NOT_FOUND') || error.message.includes('不存在')) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '邀请码不存在，请检查后重试'\n        }, { status: 404 });\n      }\n\n      // 自推荐错误\n      if (error.message.includes('SELF_REFERRAL_DETECTED') || error.message.includes('不能使用自己的邀请码')) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '您不能使用自己的邀请码'\n        }, { status: 400 });\n      }\n\n      // 邀请码格式错误\n      if (error.message.includes('INVALID_INPUT') || error.message.includes('格式无效')) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '邀请码格式无效，请检查后重试'\n        }, { status: 400 });\n      }\n    }\n\n    // 默认错误处理\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '绑定邀请关系时发生错误，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// 导出路由处理器，使用认证中间件\nexport const POST = withAuth(handleBindReferral);","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/invitation/claim-reward/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"complexity","severity":2,"message":"Async function 'handleClaimReward' has a complexity of 20. Maximum allowed is 10.","line":16,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":136,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":23,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":23,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":100,"column":18,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":100,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2849,2864],"text":"(Boolean((body?.rewardIds)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":100,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":100,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2865,2867],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 领取邀请奖励 API\n * POST /api/invitation/claim-reward\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { invitationService } from '@/lib/services/invitation-service';\nimport type { ApiResponse, ClaimRewardRequest, ClaimRewardResponse } from '@/types';\nimport { ErrorFactory, CommonErrors } from '@/lib/errors';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 领取奖励的处理函数\nasync function handleClaimReward(request: NextRequest, user: any) {\n  try {\n    // 解析请求体\n    const body = await request.json();\n    const { rewardIds }: ClaimRewardRequest = body;\n\n    // 验证输入参数\n    if (!rewardIds || !Array.isArray(rewardIds) || rewardIds.length === 0) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '奖励ID列表不能为空'\n      }, { status: 400 });\n    }\n\n    // 验证奖励ID列表长度\n    if (rewardIds.length > 50) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '单次最多只能领取50个奖励'\n      }, { status: 400 });\n    }\n\n    // 验证每个奖励ID格式\n    for (const rewardId of rewardIds) {\n      if (typeof rewardId !== 'string' || !rewardId.trim()) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '奖励ID格式无效'\n        }, { status: 400 });\n      }\n    }\n\n    const userId = user.userId;\n\n    // 领取奖励\n    const result = await invitationService.claimRewards(userId, rewardIds);\n\n    // 记录操作结果\n    logger.info('领取奖励完成', {\n      userId,\n      totalRequested: rewardIds.length,\n      claimedCount: result.claimedRewards.length,\n      failedCount: result.failedRewards.length,\n      totalAmount: result.totalClaimedAmount\n    });\n\n    // 如果没有成功领取任何奖励\n    if (!result.success) {\n      return NextResponse.json<ApiResponse<ClaimRewardResponse>>({\n        success: false,\n        error: '没有可以领取的奖励',\n        data: {\n          success: false,\n          claimedRewards: [],\n          failedRewards: result.failedRewards,\n          totalClaimedAmount: 0\n        }\n      }, { status: 400 });\n    }\n\n    // 如果部分成功领取\n    const hasFailedRewards = result.failedRewards.length > 0;\n    \n    const responseData: ClaimRewardResponse = {\n      success: result.success,\n      claimedRewards: result.claimedRewards,\n      failedRewards: result.failedRewards,\n      totalClaimedAmount: result.totalClaimedAmount\n    };\n\n    const status = hasFailedRewards ? 207 : 200; // 207 Multi-Status for partial success\n    const message = hasFailedRewards \n      ? `部分奖励领取成功，成功 ${result.claimedRewards.length} 个，失败 ${result.failedRewards.length} 个`\n      : '奖励领取成功';\n\n    return NextResponse.json<ApiResponse<ClaimRewardResponse>>({\n      success: true,\n      data: responseData,\n      message\n    }, { status });\n\n  } catch (error) {\n    logger.error('领取奖励失败', error as Error, { \n      userId: user.userId, \n      rewardIds: body?.rewardIds || [] \n    });\n\n    // 处理特定错误类型\n    if (error instanceof Error) {\n      // 输入参数错误\n      if (error.message.includes('INVALID_INPUT') || error.message.includes('不能为空')) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: error.message\n        }, { status: 400 });\n      }\n\n      // 余额更新失败\n      if (error.message.includes('balance') || error.message.includes('余额')) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '余额更新失败，请稍后重试'\n        }, { status: 500 });\n      }\n\n      // 交易记录失败\n      if (error.message.includes('transaction') || error.message.includes('交易')) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '交易记录失败，请联系客服'\n        }, { status: 500 });\n      }\n    }\n\n    // 默认错误处理\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '领取奖励时发生错误，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// 导出路由处理器，使用认证中间件\nexport const POST = withAuth(handleClaimReward);","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/invitation/commission/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"complexity","severity":2,"message":"Async function 'handleGetCommission' has a complexity of 20. Maximum allowed is 10.","line":16,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":104,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[518,521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[518,521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[701,725],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[701,725],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[701,725],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[726,728],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":25,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[757,782],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[757,782],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[757,782],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":25,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":25,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[783,785],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":26,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":26,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[810,839],"text":"(searchParams.get('startDate') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[810,839],"text":"(searchParams.get('startDate') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[810,839],"text":"(Boolean(searchParams.get('startDate')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":26,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":26,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[840,842],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":27,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":27,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[869,896],"text":"(searchParams.get('endDate') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[869,896],"text":"(searchParams.get('endDate') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[869,896],"text":"(Boolean(searchParams.get('endDate')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":27,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":27,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[897,899],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":31,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":31,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[940,957],"text":"(queryOptions.page != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[940,957],"text":"(queryOptions.page ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[940,957],"text":"(Boolean(queryOptions.page))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":38,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":38,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1123,1141],"text":"(queryOptions.limit != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1123,1141],"text":"(queryOptions.limit ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1123,1141],"text":"(Boolean(queryOptions.limit))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":46,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1359,1381],"text":"(queryOptions.startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1359,1381],"text":"(queryOptions.startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1359,1381],"text":"(Boolean(queryOptions.startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":53,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1563,1583],"text":"(queryOptions.endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1563,1583],"text":"(queryOptions.endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1563,1583],"text":"(Boolean(queryOptions.endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":60,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1763,1785],"text":"(queryOptions.startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1763,1785],"text":"(queryOptions.startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1763,1785],"text":"(Boolean(queryOptions.startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":60,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1789,1809],"text":"(queryOptions.endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1789,1809],"text":"(queryOptions.endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1789,1809],"text":"(Boolean(queryOptions.endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 查询消费返利记录 API\n * GET /api/invitation/commission\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { invitationService } from '@/lib/services/invitation-service';\nimport type { ApiResponse, CommissionQuery, CommissionResponse } from '@/types';\nimport { ErrorFactory, CommonErrors } from '@/lib/errors';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 查询消费返利记录的处理函数\nasync function handleGetCommission(request: NextRequest, user: any) {\n  try {\n    const userId = user.userId;\n\n    // 解析查询参数\n    const { searchParams } = new URL(request.url);\n    \n    const queryOptions: CommissionQuery = {\n      page: parseInt(searchParams.get('page') || '1'),\n      limit: parseInt(searchParams.get('limit') || '20'),\n      startDate: searchParams.get('startDate') || undefined,\n      endDate: searchParams.get('endDate') || undefined\n    };\n\n    // 验证分页参数\n    if (queryOptions.page && queryOptions.page < 1) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '页码必须大于0'\n      }, { status: 400 });\n    }\n\n    if (queryOptions.limit && (queryOptions.limit < 1 || queryOptions.limit > 100)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '每页数量必须在1-100之间'\n      }, { status: 400 });\n    }\n\n    // 验证日期参数\n    if (queryOptions.startDate && !isValidDate(queryOptions.startDate)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '开始日期格式无效'\n      }, { status: 400 });\n    }\n\n    if (queryOptions.endDate && !isValidDate(queryOptions.endDate)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '结束日期格式无效'\n      }, { status: 400 });\n    }\n\n    if (queryOptions.startDate && queryOptions.endDate && new Date(queryOptions.startDate) > new Date(queryOptions.endDate)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '开始日期不能大于结束日期'\n      }, { status: 400 });\n    }\n\n    // 获取消费返利记录\n    const result = await invitationService.getCommissionRecords(userId, queryOptions);\n\n    logger.info('获取消费返利记录成功', {\n      userId,\n      page: queryOptions.page,\n      limit: queryOptions.limit,\n      totalCommissions: result.commissions.length\n    });\n\n    return NextResponse.json<ApiResponse<CommissionResponse>>({\n      success: true,\n      data: {\n        commissions: result.commissions,\n        pagination: result.pagination,\n        summary: result.summary\n      },\n      message: '获取返利记录成功'\n    });\n\n  } catch (error) {\n    logger.error('获取消费返利记录失败', error as Error, { userId: user.userId });\n\n    // 数据库错误处理\n    if (error instanceof Error && error.message.includes('DATABASE')) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '数据库查询失败，请稍后重试'\n      }, { status: 500 });\n    }\n\n    // 默认错误处理\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '获取返利记录时发生错误，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// 验证日期格式的工具函数\nfunction isValidDate(dateString: string): boolean {\n  const date = new Date(dateString);\n  return date instanceof Date && !isNaN(date.getTime());\n}\n\n// 导出路由处理器，使用认证中间件\nexport const GET = withAuth(handleGetCommission);","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/invitation/generate-code/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 生成个人邀请码 API\n * POST /api/invitation/generate-code\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { invitationService } from '@/lib/services/invitation-service';\nimport type { ApiResponse, GenerateReferralCodeResponse } from '@/types';\nimport { ErrorFactory } from '@/lib/errors';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 生成邀请码的处理函数\nasync function handleGenerateCode(request: NextRequest, user: any) {\n  try {\n    const userId = user.userId;\n\n    // 获取用户的邀请信息和统计\n    const referralInfo = await invitationService.getUserReferralInfo(userId);\n\n    logger.info('生成邀请码成功', {\n      userId,\n      referralCode: referralInfo.referralCode\n    });\n\n    // 构建响应数据\n    const responseData: GenerateReferralCodeResponse = {\n      referralCode: referralInfo.referralCode,\n      shareLinks: referralInfo.shareLinks,\n      shareTexts: referralInfo.shareTexts,\n      // 可以添加二维码生成逻辑\n      qrCodeUrl: undefined\n    };\n\n    return NextResponse.json<ApiResponse<GenerateReferralCodeResponse>>({\n      success: true,\n      data: responseData,\n      message: '邀请码生成成功'\n    });\n\n  } catch (error) {\n    logger.error('生成邀请码失败', error as Error, { userId: user.userId });\n\n    // 处理不同类型的错误\n    if (error instanceof Error && error.message.includes('REFERRAL_CODE_GENERATION_FAILED')) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '邀请码生成失败，请稍后重试'\n      }, { status: 400 });\n    }\n\n    // 默认错误处理\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '生成邀请码时发生错误，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// 导出路由处理器，使用认证中间件\nexport const POST = withAuth(handleGenerateCode);","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/invitation/my-code/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ReferralStats' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReferralStats' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'ShareLinks' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShareLinks' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'ShareTexts' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShareTexts' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":65},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[501,504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[501,504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 获取我的邀请码和统计 API\n * GET /api/invitation/my-code\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { invitationService } from '@/lib/services/invitation-service';\nimport type { ApiResponse, ReferralStats, ShareLinks, ShareTexts } from '@/types';\nimport { ErrorFactory } from '@/lib/errors';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 获取邀请码和统计的处理函数\nasync function handleGetMyCode(request: NextRequest, user: any) {\n  try {\n    const userId = user.userId;\n\n    // 获取用户的邀请信息和统计\n    const referralInfo = await invitationService.getUserReferralInfo(userId);\n\n    logger.info('获取邀请码和统计成功', {\n      userId,\n      referralCode: referralInfo.referralCode,\n      totalInvites: referralInfo.stats.totalInvites\n    });\n\n    // 构建响应数据\n    const responseData = {\n      referralCode: referralInfo.referralCode,\n      shareLinks: referralInfo.shareLinks,\n      shareTexts: referralInfo.shareTexts,\n      stats: referralInfo.stats\n    };\n\n    return NextResponse.json<ApiResponse<typeof responseData>>({\n      success: true,\n      data: responseData,\n      message: '获取邀请信息成功'\n    });\n\n  } catch (error) {\n    logger.error('获取邀请码和统计失败', error as Error, { userId: user.userId });\n\n    // 处理不同类型的错误\n    if (error instanceof Error && error.message.includes('not found')) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 默认错误处理\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '获取邀请信息时发生错误，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// 导出路由处理器，使用认证中间件\nexport const GET = withAuth(handleGetMyCode);","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/invitation/rewards/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorFactory' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":36},{"ruleId":"complexity","severity":2,"message":"Async function 'handleGetRewards' has a complexity of 20. Maximum allowed is 10.","line":16,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":106,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[716,740],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[716,740],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[716,740],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[741,743],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":25,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[772,797],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[772,797],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[772,797],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":25,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":25,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[798,800],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":28,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1015,1044],"text":"(searchParams.get('startDate') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1015,1044],"text":"(searchParams.get('startDate') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1015,1044],"text":"(Boolean(searchParams.get('startDate')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1045,1047],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1074,1101],"text":"(searchParams.get('endDate') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1074,1101],"text":"(searchParams.get('endDate') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1074,1101],"text":"(Boolean(searchParams.get('endDate')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1102,1104],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":33,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":33,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1145,1162],"text":"(queryOptions.page != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1145,1162],"text":"(queryOptions.page ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1145,1162],"text":"(Boolean(queryOptions.page))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":40,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1328,1346],"text":"(queryOptions.limit != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1328,1346],"text":"(queryOptions.limit ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1328,1346],"text":"(Boolean(queryOptions.limit))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":48,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":48,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1564,1586],"text":"(queryOptions.startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1564,1586],"text":"(queryOptions.startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1564,1586],"text":"(Boolean(queryOptions.startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":55,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":55,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1768,1788],"text":"(queryOptions.endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1768,1788],"text":"(queryOptions.endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1768,1788],"text":"(Boolean(queryOptions.endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":62,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1968,1990],"text":"(queryOptions.startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1968,1990],"text":"(queryOptions.startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1968,1990],"text":"(Boolean(queryOptions.startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":62,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1994,2014],"text":"(queryOptions.endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1994,2014],"text":"(queryOptions.endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1994,2014],"text":"(Boolean(queryOptions.endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 查询邀请奖励记录 API\n * GET /api/invitation/rewards\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { invitationService } from '@/lib/services/invitation-service';\nimport type { ApiResponse, InvitationRewardsQuery, InvitationRewardsResponse } from '@/types';\nimport { ErrorFactory, CommonErrors } from '@/lib/errors';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 查询邀请奖励记录的处理函数\nasync function handleGetRewards(request: NextRequest, user: any) {\n  try {\n    const userId = user.userId;\n\n    // 解析查询参数\n    const { searchParams } = new URL(request.url);\n    \n    const queryOptions: InvitationRewardsQuery = {\n      page: parseInt(searchParams.get('page') || '1'),\n      limit: parseInt(searchParams.get('limit') || '20'),\n      rewardType: searchParams.get('rewardType') as 'first_recharge' | 'commission' | undefined,\n      status: searchParams.get('status') as 'available' | 'claimed' | 'expired' | undefined,\n      startDate: searchParams.get('startDate') || undefined,\n      endDate: searchParams.get('endDate') || undefined\n    };\n\n    // 验证分页参数\n    if (queryOptions.page && queryOptions.page < 1) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '页码必须大于0'\n      }, { status: 400 });\n    }\n\n    if (queryOptions.limit && (queryOptions.limit < 1 || queryOptions.limit > 100)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '每页数量必须在1-100之间'\n      }, { status: 400 });\n    }\n\n    // 验证日期参数\n    if (queryOptions.startDate && !isValidDate(queryOptions.startDate)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '开始日期格式无效'\n      }, { status: 400 });\n    }\n\n    if (queryOptions.endDate && !isValidDate(queryOptions.endDate)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '结束日期格式无效'\n      }, { status: 400 });\n    }\n\n    if (queryOptions.startDate && queryOptions.endDate && new Date(queryOptions.startDate) > new Date(queryOptions.endDate)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '开始日期不能大于结束日期'\n      }, { status: 400 });\n    }\n\n    // 获取邀请奖励记录\n    const result = await invitationService.getInvitationRewards(userId, queryOptions);\n\n    logger.info('获取邀请奖励记录成功', {\n      userId,\n      page: queryOptions.page,\n      limit: queryOptions.limit,\n      totalRewards: result.rewards.length\n    });\n\n    return NextResponse.json<ApiResponse<InvitationRewardsResponse>>({\n      success: true,\n      data: {\n        rewards: result.rewards,\n        pagination: result.pagination,\n        summary: result.summary\n      },\n      message: '获取奖励记录成功'\n    });\n\n  } catch (error) {\n    logger.error('获取邀请奖励记录失败', error as Error, { userId: user.userId });\n\n    // 数据库错误处理\n    if (error instanceof Error && error.message.includes('DATABASE')) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '数据库查询失败，请稍后重试'\n      }, { status: 500 });\n    }\n\n    // 默认错误处理\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '获取奖励记录时发生错误，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// 验证日期格式的工具函数\nfunction isValidDate(dateString: string): boolean {\n  const date = new Date(dateString);\n  return date instanceof Date && !isNaN(date.getTime());\n}\n\n// 导出路由处理器，使用认证中间件\nexport const GET = withAuth(handleGetRewards);","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/active-rounds/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":7,"column":60,"nodeType":"CallExpression","messageId":"substr","endLine":7,"endColumn":99,"fix":{"range":[316,327],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":13,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":13,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[430,468],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[430,468],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[430,468],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":13,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":13,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[469,471],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":14,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[500,533],"text":"(request.headers.get('user-agent') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[500,533],"text":"(request.headers.get('user-agent') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[500,533],"text":"(Boolean(request.headers.get('user-agent')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":14,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":14,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[534,536],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":19,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":19,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[642,670],"text":"(searchParams.get('language') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[642,670],"text":"(searchParams.get('language') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[642,670],"text":"(Boolean(searchParams.get('language')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":19,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":19,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[671,673],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[707,732],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[707,732],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[707,732],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[733,735],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":21,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[769,793],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[769,793],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[769,793],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[794,796],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userParticipations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":65,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userParticipations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":65,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":66,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":72,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[1918,2071],"text":"acc[p.userId] ??= {\n            sharesCount: 0,\n            numbers: [],\n            isWinner: false\n          };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":66,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1923,1936],"text":"(Boolean(acc[p.userId]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":75,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":75,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2186,2196],"text":"Boolean(p.isWinner)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2301,2304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2301,2304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":89,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":89,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":94,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":94,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2761,2781],"text":"(Boolean(round.product.images))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2782,2784],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3935,3938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3935,3938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getLogger } from '@/lib/logger';\n\nconst handleActiveRounds = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `lottery_active_rounds_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const startTime = Date.now();\n\n  try {\n    logger.info('获取活跃抽奖期次', {\n      requestId,\n      ip: request.headers.get('x-forwarded-for') || 'unknown',\n      userAgent: request.headers.get('user-agent') || 'unknown'\n    });\n\n    // 获取查询参数\n    const { searchParams } = new URL(request.url);\n    const language = searchParams.get('language') || 'zh';\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const page = parseInt(searchParams.get('page') || '1');\n    const offset = (page - 1) * limit;\n\n    // 获取活跃的抽奖期次\n    const rounds = await prisma.lotteryRounds.findMany({\n      where: {\n        status: 'active',\n        OR: [\n          { drawTime: null },\n          { drawTime: { gt: new Date() } }\n        ]\n      },\n      include: {\n        product: {\n          select: {\n            id: true,\n            name: true,\n            marketPrice: true,\n            images: true,\n            marketingBadge: true\n          }\n        },\n        participations: {\n          select: {\n            userId: true,\n            sharesCount: true,\n            numbers: true,\n            isWinner: true\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'desc'\n      },\n      take: limit,\n      skip: offset\n    });\n\n    // 计算每个期次的详细信息\n    const enrichedRounds = rounds.map(round => {\n      const progress = round.totalShares > 0 ? (round.soldShares / round.totalShares) * 100 : 0;\n      const availableShares = round.totalShares - round.soldShares;\n      \n      // 计算用户参与统计（如果有用户ID的话）\n      const userParticipations = round.participations.reduce((acc, p) => {\n        if (!acc[p.userId]) {\n          acc[p.userId] = {\n            sharesCount: 0,\n            numbers: [],\n            isWinner: false\n          };\n        }\n        acc[p.userId].sharesCount += p.sharesCount;\n        acc[p.userId].numbers.push(...p.numbers);\n        if (p.isWinner) {\n          acc[p.userId].isWinner = true;\n        }\n        return acc;\n      }, {} as Record<string, any>);\n\n      return {\n        id: round.id,\n        productId: round.productId,\n        roundNumber: round.roundNumber,\n        totalShares: round.totalShares,\n        soldShares: round.soldShares,\n        status: round.status,\n        drawTime: round.drawTime,\n        pricePerShare: round.pricePerShare || 10, // 默认价格，如果没有设置的话\n        progress: Math.round(progress),\n        availableShares,\n        product: {\n          ...round.product,\n          images: round.product.images || []\n        },\n        statistics: {\n          totalParticipants: new Set(round.participations.map(p => p.userId)).size,\n          totalSharesSold: round.soldShares,\n          winProbability: round.totalShares > 0 ? Math.round((round.soldShares / round.totalShares) * 100) : 0,\n          estimatedDrawTime: round.drawTime ? new Date(round.drawTime).toLocaleString('zh-CN') : null\n        }\n      };\n    });\n\n    // 获取总数统计\n    const totalCount = await prisma.lotteryRounds.count({\n      where: {\n        status: 'active',\n        OR: [\n          { drawTime: null },\n          { drawTime: { gt: new Date() } }\n        ]\n      }\n    });\n\n    logger.info('获取活跃抽奖期次成功', {\n      requestId,\n      roundsCount: enrichedRounds.length,\n      totalCount,\n      executionTime: Date.now() - startTime\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        rounds: enrichedRounds,\n        pagination: {\n          page,\n          limit,\n          total: totalCount,\n          totalPages: Math.ceil(totalCount / limit),\n          hasNext: page * limit < totalCount,\n          hasPrev: page > 1\n        }\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('获取活跃抽奖期次失败', error, {\n      requestId,\n      error: error.message,\n      executionTime: Date.now() - startTime\n    });\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: '获取抽奖期次失败',\n        message: error.message\n      },\n      { status: 500 }\n    );\n  }\n};\n\n// 导出主处理函数\nexport { handleActiveRounds as GET };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/bulk-participate/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 14. Maximum allowed is 10.","line":8,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":275,"endColumn":2},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":10,"column":63,"nodeType":"CallExpression","messageId":"substr","endLine":10,"endColumn":102,"fix":{"range":[504,515],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":18,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[670,708],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[670,708],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[670,708],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":18,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":18,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[709,711],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":19,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":19,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[740,773],"text":"(request.headers.get('user-agent') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[740,773],"text":"(request.headers.get('user-agent') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[740,773],"text":"(Boolean(request.headers.get('user-agent')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":19,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":19,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[774,776],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[864,877],"text":"(user?.userId) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[865,877],"text":"((user?.userId) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[864,877],"text":"!Boolean((user?.userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1110,1117],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1122,1130],"text":"(Boolean(quantity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":87,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":87,"endColumn":30,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2460,2461],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":100,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":100,"endColumn":38,"fix":{"range":[2730,2741],"text":"{return 0.9;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":101,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":101,"endColumn":38,"fix":{"range":[2776,2788],"text":"{return 0.95;}"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":117,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":117,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3281,3282],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":133,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":133,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3698,3699],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":150,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":150,"endColumn":30,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4213,4214],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":169,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":169,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4687,4688],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":182,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":182,"endColumn":29,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5111,5112],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":195,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":195,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5465,5466],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":227,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":227,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6464,6465],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6795,6798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6795,6798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":256,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":256,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7118,7151],"text":"Boolean(error.message.includes('幸运币余额不足'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":259,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":259,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7226,7259],"text":"Boolean(error.message.includes('夺宝期次不存在'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":262,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":262,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7334,7364],"text":"Boolean(error.message.includes('份额不足'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":265,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":265,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7443,7472],"text":"Boolean(error.message.includes('未授权'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":279,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":279,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":279,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":42}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getLogger } from '@/lib/logger';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { withRateLimit, lotteryRateLimit } from '@/lib/rate-limit-middleware';\nimport { triggerImmediateDraw } from '@/lib/lottery';\n\nconst handleBulkParticipate = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `lottery_bulk_participate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const startTime = Date.now();\n\n  let decoded: { userId: string } | null = null;\n\n  try {\n    logger.info('批量参与抽奖请求开始', {\n      requestId,\n      ip: request.headers.get('x-forwarded-for') || 'unknown',\n      userAgent: request.headers.get('user-agent') || 'unknown'\n    });\n\n    // 验证用户身份\n    const user = getUserFromRequest(request);\n    if (!user?.userId) {\n      return NextResponse.json({ error: '未授权访问' }, { status: 401 });\n    }\n    decoded = { userId: user.userId };\n\n    // 验证请求体\n    const body = await request.json();\n    const { roundId, quantity } = body;\n\n    // 参数验证\n    if (!roundId || !quantity) {\n      return NextResponse.json(\n        { error: '参数不完整：roundId和quantity都是必需的' }, \n        { status: 400 }\n      );\n    }\n\n    // 验证数量范围（批量购买限制1-10份）\n    if (typeof quantity !== 'number' || quantity < 1 || quantity > 10) {\n      return NextResponse.json(\n        { error: '批量购买份数必须在1-10份之间' }, \n        { status: 400 }\n      );\n    }\n\n    // 开始数据库事务\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 验证夺宝期次\n      const round = await tx.lotteryRounds.findUnique({\n        where: { id: roundId },\n        select: {\n          id: true,\n          status: true,\n          totalShares: true,\n          soldShares: true,\n          pricePerShare: true,\n          drawTime: true,\n          productId: true\n        }\n      });\n\n      if (!round) {\n        throw new Error('夺宝期次不存在');\n      }\n\n      // 验证期次状态\n      if (round.status !== 'active') {\n        throw new Error('夺宝期次未激活');\n      }\n\n      // 验证期次是否已结束\n      if (round.drawTime && new Date() > new Date(round.drawTime)) {\n        throw new Error('夺宝期次已结束');\n      }\n\n      // 验证剩余份额\n      const availableShares = round.totalShares - round.soldShares;\n      if (quantity > availableShares) {\n        throw new Error(`剩余份额不足，仅剩${availableShares}份`);\n      }\n\n      // 2. 验证用户幸运币余额\n      const user = await tx.users.findUnique({\n        where: { id: decoded!.userId },\n        select: { \n          luckyCoins: true,\n          luckyCoinsVersion: true \n        }\n      });\n\n      if (!user) {\n        throw new Error('用户不存在');\n      }\n\n      // 3. 计算批量折扣\n      const getDiscount = (shares: number) => {\n        if (shares >= 10) return 0.9; // 10份9折\n        if (shares >= 5) return 0.95; // 5份9.5折\n        return 1; // 无折扣\n      };\n\n      const discount = getDiscount(quantity);\n      const originalCost = round.pricePerShare * quantity;\n      const totalCost = originalCost * discount;\n      const discountAmount = originalCost - totalCost;\n\n      if (Number(user.luckyCoins) < Number(totalCost)) {\n        throw new Error('幸运币余额不足');\n      }\n\n      // 4. 获取用户当前参与信息\n      const currentParticipation = await tx.participations.findMany({\n        where: {\n          userId: decoded!.userId,\n          roundId: round.id,\n          isWinner: false\n        },\n        select: {\n          sharesCount: true,\n          numbers: true\n        }\n      });\n\n      const currentSharesCount = currentParticipation.reduce((sum, p) => sum + p.sharesCount, 0);\n\n      // 5. 创建参与记录\n      const participation = await tx.participations.create({\n        data: {\n          roundId: round.id,\n          userId: decoded!.userId,\n          productId: round.productId,\n          numbers: Array.from({ length: quantity }, () => Math.floor(Math.random() * 100) + 1),\n          sharesCount: quantity,\n          type: 'lottery',\n          cost: totalCost,\n          metadata: {\n            discount: discount,\n            originalCost: originalCost,\n            discountAmount: discountAmount,\n            purchaseType: 'bulk'\n          }\n        }\n      });\n\n      // 6. 更新用户幸运币余额\n      await tx.users.update({\n        where: { id: decoded!.userId },\n        data: {\n          luckyCoins: { decrement: totalCost },\n          totalSpent: { increment: totalCost },\n          luckyCoinsVersion: { increment: 1 }\n        }\n      });\n\n      // 7. 更新期次已售份额\n      await tx.lotteryRounds.update({\n        where: { id: round.id },\n        data: {\n          soldShares: { increment: quantity }\n        }\n      });\n\n      // 8. 记录交易（记录原价，扣除实际金额）\n      await tx.transactions.create({\n        data: {\n          userId: decoded!.userId,\n          type: 'lottery_participation',\n          amount: -totalCost,\n          balanceType: 'lucky_coins',\n          relatedOrderId: participation.id,\n          description: `抽奖批量购买 - 第${round.id}期 ${quantity}份，${Math.round((1 - discount) * 100)}%折扣`\n        }\n      });\n\n      // 如果有折扣，额外记录折扣交易\n      if (discountAmount > 0) {\n        await tx.transactions.create({\n          data: {\n            userId: decoded!.userId,\n            type: 'discount',\n            amount: discountAmount,\n            balanceType: 'lucky_coins',\n            relatedOrderId: participation.id,\n            description: `批量购买折扣 - 第${round.id}期 ${quantity}份`\n          }\n        });\n      }\n\n      // 9. 创建通知\n      await tx.notifications.create({\n        data: {\n          userId: decoded!.userId,\n          type: 'lottery_participation',\n          content: `批量购买成功！您购买了第${round.id}期 ${quantity}份幸运币，获得${Math.round((1 - discount) * 100)}%折扣，节省${discountAmount}幸运币。当前共参与 ${currentSharesCount + quantity} 份`,\n          status: 'pending'\n        }\n      });\n\n      return {\n        participationId: participation.id,\n        roundId: round.id,\n        quantity: quantity,\n        totalCost: totalCost,\n        originalCost: originalCost,\n        discount: discount,\n        discountAmount: discountAmount,\n        remainingShares: availableShares - quantity,\n        currentTotalShares: currentSharesCount + quantity,\n        winProbability: ((currentSharesCount + quantity) / round.totalShares) * 100\n      };\n    });\n\n    // 检查是否触达开奖条件（异步调用）\n    triggerImmediateDraw(roundId).catch((error) => {\n      logger.error('异步开奖触发失败', error, {\n        requestId,\n        roundId,\n        userId: decoded?.userId\n      });\n    });\n\n    logger.info('批量参与成功', {\n      requestId,\n      userId: decoded!.userId,\n      roundId,\n      quantity,\n      totalCost: result.totalCost,\n      discount: result.discount,\n      discountAmount: result.discountAmount,\n      executionTime: Date.now() - startTime\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      message: '批量购买成功！'\n    });\n\n  } catch (error: any) {\n    logger.error('批量参与失败', error, {\n      requestId,\n      userId: decoded?.userId,\n      roundId: body?.roundId,\n      quantity: body?.quantity,\n      error: error.message,\n      executionTime: Date.now() - startTime\n    });\n\n    // 根据错误类型返回不同状态码\n    let statusCode = 500;\n    let errorMessage = '批量购买失败';\n\n    if (error.message.includes('幸运币余额不足')) {\n      statusCode = 400;\n      errorMessage = '幸运币余额不足';\n    } else if (error.message.includes('夺宝期次不存在')) {\n      statusCode = 404;\n      errorMessage = '抽奖期次不存在';\n    } else if (error.message.includes('份额不足')) {\n      statusCode = 400;\n      errorMessage = error.message;\n    } else if (error.message.includes('未授权')) {\n      statusCode = 401;\n      errorMessage = '未授权访问';\n    }\n\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: statusCode }\n    );\n  }\n};\n\n// 应用速率限制并导出处理函数\nconst processRequest = withRateLimit(handleBulkParticipate, lotteryRateLimit({\n  onLimitExceeded: async (result, request) => {\n    const logger = getLogger();\n    logger.warn('批量参与接口速率限制触发', {\n      identifier: 'unknown',\n      endpoint: '/api/lottery/bulk-participate',\n      limit: result.totalHits + result.remaining,\n      remaining: result.remaining,\n      resetTime: result.resetTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: '参与抽奖过于频繁，请稍后再试',\n        rateLimit: {\n          limit: result.totalHits + result.remaining,\n          remaining: result.remaining,\n          resetTime: new Date(result.resetTime).toISOString()\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': (result.totalHits + result.remaining).toString(),\n          'X-RateLimit-Remaining': result.remaining,\n          'X-RateLimit-Reset': result.resetTime.toString()\n        }\n      }\n    );\n  }\n}));\n\n// 导出主处理函数\nexport { processRequest as POST };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/draw/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":9,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[308,331],"text":"(process.env.CRON_SECRET != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[308,331],"text":"(process.env.CRON_SECRET ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[308,331],"text":"(Boolean(process.env.CRON_SECRET))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":9,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":9,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[332,334],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[745,748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[745,748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[756,797],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":40,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1070,1093],"text":"(process.env.CRON_SECRET != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1070,1093],"text":"(process.env.CRON_SECRET ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1070,1093],"text":"(Boolean(process.env.CRON_SECRET))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1094,1096],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":63,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1762,1777],"text":"((product?.nameZh) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1762,1777],"text":"((product?.nameZh) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1762,1777],"text":"(Boolean((product?.nameZh)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1778,1780],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2132,2135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2132,2135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2143,2192],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { checkAndDrawFullRounds } from '@/lib/lottery';\n\n// 手动触发开奖API（供定时任务或管理员调用）\nexport async function POST(request: NextRequest) {\n  try {\n    // 验证管理员权限或定时任务token\n    const authHeader = request.headers.get('authorization');\n    const cronSecret = process.env.CRON_SECRET || 'dev_secret';\n    \n    if (authHeader !== `Bearer ${cronSecret}`) {\n      return NextResponse.json({ error: '无权限' }, { status: 403 });\n    }\n\n    // 执行开奖\n    const results = await checkAndDrawFullRounds();\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        processedRounds: results.length,\n        results\n      },\n      message: `已处理${results.length}个期次的开奖`\n    });\n\n  } catch (error: any) {\n    console.error('Auto draw error:', error);\n    return NextResponse.json(\n      { error: '自动开奖失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n\n// 获取待开奖期次列表\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    const cronSecret = process.env.CRON_SECRET || 'dev_secret';\n    \n    if (authHeader !== `Bearer ${cronSecret}`) {\n      return NextResponse.json({ error: '无权限' }, { status: 403 });\n    }\n\n    const { prisma } = await import('@/lib/prisma');\n    \n    const fullRounds = await prisma.lotteryRounds.findMany({\n      where: { status: 'full' },\n      orderBy: { updatedAt: 'asc' }\n    });\n\n    // 手动获取产品信息\n    const roundsWithProducts = await Promise.all(\n      fullRounds.map(async (r) => {\n        const product = await prisma.products.findUnique({\n          where: { id: r.productId },\n          select: { nameZh: true, marketPrice: true }\n        });\n\n        return {\n          id: r.id,\n          productName: product?.nameZh || '',\n          roundNumber: r.roundNumber,\n          totalShares: r.totalShares,\n          participants: r.participants,\n          updatedAt: r.updatedAt\n        };\n      })\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        count: fullRounds.length,\n        rounds: roundsWithProducts\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Get pending draws error:', error);\n    return NextResponse.json(\n      { error: '获取待开奖列表失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/monitoring/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 14. Maximum allowed is 10.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":58,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":10,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":10,"endColumn":57,"fix":{"range":[298,346],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":10,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":10,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[298,309],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[299,309],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[298,309],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":14,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":14,"endColumn":42,"fix":{"range":[453,464],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[484,487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[484,487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":17,"column":35,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":17,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":24,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[764,780],"text":"(Boolean(decoded.username))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[781,783],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[968,994],"text":"(searchParams.get('action') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[968,994],"text":"(searchParams.get('action') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[968,994],"text":"(Boolean(searchParams.get('action')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[995,997],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1553,1556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1553,1556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1564,1606],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'oneHourAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":64,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'oneHourAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":64,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6430,6433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6430,6433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":309,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8120,8123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8120,8123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":445,"column":43,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":445,"endColumn":70,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11443,11470],"text":"(Boolean((avgDrawTime[0]?.avg_minutes)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":445,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":445,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11471,11473],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":459,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":459,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11777,11780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11777,11780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":477,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":477,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12349,12371],"text":"(Boolean((result[0]?.avg_minutes)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":477,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":477,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12372,12374],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\n\n// 开奖监控系统 - 实时监控开奖状态和数据一致性\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证管理员权限\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n    } catch {\n      return NextResponse.json({ error: '无效token' }, { status: 401 });\n    }\n\n    // 验证管理员权限\n    const admin = await prisma.admins.findUnique({\n      where: { username: decoded.username || 'admin' }\n    });\n\n    if (!admin) {\n      return NextResponse.json({ error: '无管理员权限' }, { status: 403 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action') || 'overview';\n\n    switch (action) {\n      case 'overview':\n        return await getOverviewStats();\n      case 'full-rounds':\n        return await getFullRounds();\n      case 'pending-draws':\n        return await getPendingDraws();\n      case 'recent-draws':\n        return await getRecentDraws();\n      case 'data-consistency':\n        return await checkDataConsistency();\n      case 'performance':\n        return await getPerformanceStats();\n      default:\n        return NextResponse.json({ error: '不支持的操作' }, { status: 400 });\n    }\n\n  } catch (error: any) {\n    console.error('Monitoring error:', error);\n    return NextResponse.json(\n      { error: '监控获取失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n\n// 获取概览统计\nasync function getOverviewStats() {\n  try {\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n    // 基础统计\n    const [totalRounds, activeRounds, fullRounds, completedRounds] = await Promise.all([\n      prisma.lotteryRounds.count(),\n      prisma.lotteryRounds.count({ where: { status: 'ongoing' } }),\n      prisma.lotteryRounds.count({ where: { status: 'full' } }),\n      prisma.lotteryRounds.count({ where: { status: 'completed' } })\n    ]);\n\n    // 最近开奖统计\n    const recentDraws = await prisma.lotteryRounds.count({\n      where: {\n        status: 'completed',\n        drawTime: { gte: oneDayAgo }\n      }\n    });\n\n    // 等待开奖的期次\n    const pendingDraws = await prisma.lotteryRounds.findMany({\n      where: {\n        status: 'full',\n        winnerUserId: null\n      },\n      take: 5,\n      orderBy: { createdAt: 'asc' }\n    });\n\n    // 数据一致性检查\n    const consistencyIssues = await checkCriticalConsistency();\n\n    // 性能指标\n    const avgDrawTime = await getAverageDrawTime();\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        overview: {\n          totalRounds,\n          activeRounds,\n          fullRounds,\n          completedRounds,\n          recentDrawsLast24h: recentDraws,\n          pendingDrawsCount: pendingDraws.length\n        },\n        pendingDraws: pendingDraws.map(round => ({\n          id: round.id,\n          roundNumber: round.roundNumber,\n          soldShares: round.soldShares,\n          totalShares: round.totalShares,\n          createdAt: round.createdAt,\n          age: Math.floor((Date.now() - round.createdAt.getTime()) / 1000 / 60) // 分钟\n        })),\n        consistency: consistencyIssues,\n        performance: {\n          averageDrawTimeMinutes: avgDrawTime,\n          lastUpdated: new Date().toISOString()\n        }\n      }\n    });\n\n  } catch (error) {\n    throw error;\n  }\n}\n\n// 获取已售罄期次列表\nasync function getFullRounds() {\n  const fullRounds = await prisma.lotteryRounds.findMany({\n    where: { status: 'full' },\n    orderBy: { createdAt: 'asc' },\n    take: 50,\n    select: {\n      id: true,\n      roundNumber: true,\n      totalShares: true,\n      soldShares: true,\n      participants: true,\n      createdAt: true,\n      updatedAt: true,\n      product: {\n        select: {\n          nameZh: true,\n          marketPrice: true\n        }\n      }\n    }\n  });\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      fullRounds: fullRounds.map(round => ({\n        ...round,\n        soldOutAt: round.updatedAt,\n        timeToSellOut: Math.floor((round.updatedAt.getTime() - round.createdAt.getTime()) / 1000 / 60),\n        salesVelocity: round.soldShares / Math.max(1, Math.floor((round.updatedAt.getTime() - round.createdAt.getTime()) / 1000 / 60))\n      })),\n      total: fullRounds.length\n    }\n  });\n}\n\n// 获取待开奖期次\nasync function getPendingDraws() {\n  const pendingDraws = await prisma.lotteryRounds.findMany({\n    where: {\n      status: 'full',\n      winnerUserId: null\n    },\n    orderBy: { createdAt: 'asc' },\n    take: 20,\n    select: {\n      id: true,\n      roundNumber: true,\n      totalShares: true,\n      soldShares: true,\n      participants: true,\n      createdAt: true,\n      product: {\n        select: {\n          nameZh: true,\n          marketPrice: true\n        }\n      }\n    }\n  });\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      pendingDraws: pendingDraws.map(round => ({\n        ...round,\n        waitingTime: Math.floor((Date.now() - round.createdAt.getTime()) / 1000 / 60),\n        urgency: getUrgencyLevel(round),\n        isOverdue: (Date.now() - round.createdAt.getTime()) > 10 * 60 * 1000 // 超过10分钟\n      })),\n      total: pendingDraws.length\n    }\n  });\n}\n\n// 获取最近开奖记录\nasync function getRecentDraws() {\n  const recentDraws = await prisma.lotteryRounds.findMany({\n    where: {\n      status: 'completed',\n      drawTime: { not: null }\n    },\n    orderBy: { drawTime: 'desc' },\n    take: 20,\n    select: {\n      id: true,\n      roundNumber: true,\n      winningNumber: true,\n      drawTime: true,\n      participants: true,\n      winner: {\n        select: {\n          telegramId: true,\n          username: true\n        }\n      },\n      product: {\n        select: {\n          nameZh: true,\n          marketPrice: true\n        }\n      }\n    }\n  });\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      recentDraws: recentDraws.map(draw => ({\n        ...draw,\n        drawDuration: draw.drawTime ? Math.floor((draw.drawTime.getTime() - draw.createdAt.getTime()) / 1000 / 60) : null\n      }))\n    }\n  });\n}\n\n// 数据一致性检查\nasync function checkDataConsistency() {\n  try {\n    const issues: any[] = [];\n\n    // 检查1: soldShares 与实际参与记录的一致性\n    const roundSharesCheck = await prisma.$queryRaw`\n      SELECT \n        lr.id,\n        lr.round_number,\n        lr.sold_shares,\n        COALESCE(SUM(p.shares_count), 0) as actual_shares\n      FROM lottery_rounds lr\n      LEFT JOIN participations p ON lr.id = p.round_id\n      WHERE lr.status IN ('ongoing', 'full')\n      GROUP BY lr.id, lr.round_number, lr.sold_shares\n      HAVING lr.sold_shares != COALESCE(SUM(p.shares_count), 0)\n    `;\n\n    if (roundSharesCheck.length > 0) {\n      issues.push({\n        type: 'sold_shares_mismatch',\n        severity: 'high',\n        description: '期次售出份额与参与记录不匹配',\n        count: roundSharesCheck.length,\n        details: roundSharesCheck\n      });\n    }\n\n    // 检查2: 重复中奖检查\n    const duplicateWinners = await prisma.$queryRaw`\n      SELECT round_id, COUNT(*) as winner_count\n      FROM participations\n      WHERE is_winner = true\n      GROUP BY round_id\n      HAVING COUNT(*) > 1\n    `;\n\n    if (duplicateWinners.length > 0) {\n      issues.push({\n        type: 'duplicate_winners',\n        severity: 'critical',\n        description: '存在重复中奖的期次',\n        count: duplicateWinners.length,\n        details: duplicateWinners\n      });\n    }\n\n    // 检查3: 状态不一致检查\n    const statusInconsistency = await prisma.$queryRaw`\n      SELECT \n        lr.id,\n        lr.status,\n        lr.winner_user_id,\n        COUNT(p.id) as participation_count\n      FROM lottery_rounds lr\n      LEFT JOIN participations p ON lr.id = p.round_id\n      WHERE lr.status = 'full' AND lr.winner_user_id IS NOT NULL\n      GROUP BY lr.id, lr.status, lr.winner_user_id\n    `;\n\n    const incompleteDraws = statusInconsistency.filter((row: any) => row.participation_count > 0);\n\n    if (incompleteDraws.length > 0) {\n      issues.push({\n        type: 'incomplete_draws',\n        severity: 'high',\n        description: '存在已设置中奖者但未完成开奖的期次',\n        count: incompleteDraws.length,\n        details: incompleteDraws\n      });\n    }\n\n    // 检查4: 号码范围验证\n    const invalidNumbers = await prisma.$queryRaw`\n      SELECT \n        p.id,\n        p.round_id,\n        p.numbers,\n        lr.total_shares\n      FROM participations p\n      JOIN lottery_rounds lr ON p.round_id = lr.id\n      WHERE EXISTS (\n        SELECT 1 FROM unnest(p.numbers) AS num \n        WHERE num < 10000001 OR num > (10000000 + lr.total_shares)\n      )\n      LIMIT 10\n    `;\n\n    if (invalidNumbers.length > 0) {\n      issues.push({\n        type: 'invalid_numbers',\n        severity: 'medium',\n        description: '存在超出有效范围的号码',\n        count: invalidNumbers.length,\n        details: invalidNumbers\n      });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        checkTime: new Date().toISOString(),\n        totalIssues: issues.length,\n        issues,\n        summary: {\n          critical: issues.filter(i => i.severity === 'critical').length,\n          high: issues.filter(i => i.severity === 'high').length,\n          medium: issues.filter(i => i.severity === 'medium').length,\n          low: issues.filter(i => i.severity === 'low').length\n        }\n      }\n    });\n\n  } catch (error) {\n    throw error;\n  }\n}\n\n// 关键一致性检查\nasync function checkCriticalConsistency() {\n  try {\n    const [orphanedRounds, missingWinners, emptyFullRounds] = await Promise.all([\n      // 孤儿期次：没有参与记录但状态为full\n      prisma.lotteryRounds.count({\n        where: {\n          status: 'full',\n          participations: { none: {} }\n        }\n      }),\n      \n      // 缺失中奖者：状态为completed但没有winner_user_id\n      prisma.lotteryRounds.count({\n        where: {\n          status: 'completed',\n          winnerUserId: null\n        }\n      }),\n      \n      // 空的满期次：有参与记录但soldShares为0\n      prisma.lotteryRounds.count({\n        where: {\n          status: 'full',\n          soldShares: 0\n        }\n      })\n    ]);\n\n    return {\n      orphanedRounds,\n      missingWinners,\n      emptyFullRounds,\n      hasCriticalIssues: orphanedRounds > 0 || missingWinners > 0\n    };\n  } catch (error) {\n    return {\n      orphanedRounds: 0,\n      missingWinners: 0,\n      emptyFullRounds: 0,\n      hasCriticalIssues: true,\n      error: error.message\n    };\n  }\n}\n\n// 性能统计\nasync function getPerformanceStats() {\n  try {\n    const now = new Date();\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n    const [avgDrawTime, recentDraws, errorRate] = await Promise.all([\n      // 平均开奖时间\n      prisma.$queryRaw`\n        SELECT AVG(EXTRACT(EPOCH FROM (draw_time - created_at))/60) as avg_minutes\n        FROM lottery_rounds\n        WHERE status = 'completed' AND draw_time IS NOT NULL\n      `,\n      \n      // 最近24小时开奖数\n      prisma.lotteryRounds.count({\n        where: {\n          status: 'completed',\n          drawTime: { gte: oneDayAgo }\n        }\n      }),\n      \n      // 错误率（开奖失败的期次）\n      prisma.lotteryRounds.count({\n        where: {\n          status: 'full',\n          createdAt: { lt: oneDayAgo } // 24小时前创建的期次应该已经开奖\n        }\n      })\n    ]);\n\n    return {\n      averageDrawTimeMinutes: parseFloat((avgDrawTime[0]?.avg_minutes || 0).toFixed(2)),\n      drawsLast24h: recentDraws,\n      overdueRounds: errorRate,\n      systemHealth: errorRate === 0 ? 'healthy' : 'needs_attention'\n    };\n  } catch (error) {\n    return {\n      error: error.message,\n      systemHealth: 'unknown'\n    };\n  }\n}\n\n// 计算紧急程度\nfunction getUrgencyLevel(round: any): string {\n  const waitingTime = Math.floor((Date.now() - round.createdAt.getTime()) / 1000 / 60);\n  \n  if (waitingTime > 30) {return 'critical';}\n  if (waitingTime > 10) {return 'high';}\n  if (waitingTime > 5) {return 'medium';}\n  return 'low';\n}\n\n// 计算平均开奖时间\nasync function getAverageDrawTime(): Promise<number> {\n  try {\n    const result = await prisma.$queryRaw`\n      SELECT AVG(EXTRACT(EPOCH FROM (draw_time - created_at))/60) as avg_minutes\n      FROM lottery_rounds\n      WHERE status = 'completed' AND draw_time IS NOT NULL\n    `;\n    \n    return parseFloat((result[0]?.avg_minutes || 0).toFixed(2));\n  } catch {\n    return 0;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/participate-consistent/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'userService' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userService' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'cacheManager' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cacheManager' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 20. Maximum allowed is 10.","line":14,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":394,"endColumn":2},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":15,"column":58,"nodeType":"CallExpression","messageId":"substr","endLine":15,"endColumn":97,"fix":{"range":[675,686],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":20,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":20,"endColumn":57,"fix":{"range":[788,836],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":20,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[788,799],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[789,799],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[788,799],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":24,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":24,"endColumn":42,"fix":{"range":[943,954],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":25,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":25,"endColumn":62},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":30,"column":23,"nodeType":"CallExpression","messageId":"substring","endLine":30,"endColumn":45,"fix":{"range":[1149,1158],"text":"slice"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":36,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":36,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1290,1297],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":36,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1302,1313],"text":"(Boolean(sharesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 16. Maximum allowed is 10.","line":44,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":218,"endColumn":10},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":83,"column":15,"nodeType":null,"messageId":"preferOptionalChain","endLine":83,"endColumn":51,"fix":{"range":[2709,2745],"text":"round?.status !== 'ongoing'"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":231,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":231,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7127,7139],"text":"(result.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7127,7139],"text":"(result.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7127,7139],"text":"(Boolean(result.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":231,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":231,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7140,7142],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":234,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":234,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":298,"column":49,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":298,"endColumn":81,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9047,9079],"text":"(process.env.NEXT_PUBLIC_BASE_URL != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9047,9079],"text":"(process.env.NEXT_PUBLIC_BASE_URL ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9047,9079],"text":"(Boolean(process.env.NEXT_PUBLIC_BASE_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":298,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":298,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9080,9082],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11242,11245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11242,11245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":379,"column":24,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":379,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11436,11466],"text":"(Boolean(error.message.includes('份额不足')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":380,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":380,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11493,11523],"text":"(Boolean(error.message.includes('余额不足')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":381,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":381,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11549,11582],"text":"(Boolean(error.message.includes('免费次数已用完')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":382,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":382,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11608,11639],"text":"(Boolean(error.message.includes('期次已结束')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { jwt } from 'jsonwebtoken';\nimport { userService } from '@/lib/user-service';\nimport { CacheConsistencyManager } from '@/lib/cache-consistency';\nimport { TajikistanTimeUtils } from '@/lib/timezone-utils';\nimport { cacheKeyBuilder } from '@/lib/redis-cache';\nimport { cacheManager } from '@/lib/cache-manager';\nimport { triggerImmediateDraw } from '@/lib/lottery';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\nexport async function POST(request: NextRequest) {\n  const requestId = `lottery_participate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    logger.info('夺宝参与请求开始', {\n      requestId,\n      userId: decoded.userId,\n      tokenPrefix: `${token.substring(0, 10)}...`\n    });\n\n    const body = await request.json();\n    const { roundId, sharesCount, useType = 'paid' } = body;\n\n    if (!roundId || !sharesCount || sharesCount < 1) {\n      return NextResponse.json({ error: '参数错误' }, { status: 400 });\n    }\n\n    // 使用缓存一致性管理器处理夺宝参与\n    const result = await CacheConsistencyManager.transactionalUpdate(\n      async () => {\n        // 数据库操作逻辑\n        return await prisma.$transaction(async (tx) => {\n          // 1. 获取用户信息\n          const user = await tx.users.findUnique({\n            where: { id: decoded.userId },\n            select: {\n              id: true,\n              balance: true,\n              freeDailyCount: true,\n              lastFreeResetDate: true,\n              balanceVersion: true\n            }\n          });\n\n          if (!user) {\n            throw new Error('用户不存在');\n          }\n\n          // 2. 检查免费次数重置\n          const tajikistanNow = TajikistanTimeUtils.getCurrentTime();\n          const isNewDay = TajikistanTimeUtils.getCurrentDateString() !== \n            user.lastFreeResetDate.toISOString().split('T')[0];\n          \n          let currentFreeCount = user.freeDailyCount;\n          if (isNewDay) {\n            currentFreeCount = 3;\n          }\n\n          // 3. 获取期次信息\n          const round = await tx.lotteryRounds.findUnique({\n            where: { id: roundId },\n            select: {\n              id: true,\n              totalShares: true,\n              soldShares: true,\n              status: true,\n              productId: true\n            }\n          });\n\n          if (!round || round.status !== 'ongoing') {\n            throw new Error('夺宝期次不存在或已结束');\n          }\n\n          // 4. 检查份额是否充足\n          const availableShares = round.totalShares - round.soldShares;\n          if (sharesCount > availableShares) {\n            throw new Error(`份额不足，剩余 ${availableShares} 份`);\n          }\n\n          // 5. 业务验证\n          const cost = sharesCount * 1;\n          \n          if (useType === 'paid') {\n            // 付费参与检查余额\n            if (parseFloat(user.balance.toString()) < cost) {\n              throw new Error('夺宝币不足');\n            }\n          } else {\n            // 免费参与检查\n            if (currentFreeCount <= 0) {\n              throw new Error('今日免费次数已用完');\n            }\n            if (sharesCount > Math.min(3, currentFreeCount)) {\n              throw new Error(`免费参与最多${Math.min(3, currentFreeCount)}份`);\n            }\n          }\n\n          // 6. 生成夺宝号码\n          const startNumber = round.soldShares + 10000001;\n          const numbers = Array.from({ length: sharesCount }, (_, i) => startNumber + i);\n\n          // 7. 检查是否售罄，用于触发立即开奖\n          const willBeSoldOut = round.soldShares + sharesCount >= round.totalShares;\n\n          // 8. 执行原子性更新\n          // 更新期次\n          const updatedRound = await tx.lotteryRounds.updateMany({\n            where: {\n              id: roundId,\n              status: 'ongoing',\n              soldShares: { lt: round.totalShares }\n            },\n            data: {\n              soldShares: { increment: sharesCount },\n              participants: { increment: 1 },\n              status: willBeSoldOut ? 'full' : 'ongoing'\n            }\n          });\n\n          if (updatedRound.count === 0) {\n            throw new Error('期次已结束或售罄，请选择其他期次');\n          }\n\n          // 9. 创建参与记录\n          const participation = await tx.participations.create({\n            data: {\n              userId: user.id,\n              roundId: round.id,\n              productId: round.productId,\n              numbers,\n              sharesCount,\n              type: useType,\n              cost: useType === 'paid' ? cost : 0,\n              isWinner: false\n            }\n          });\n\n          // 10. 更新用户余额或免费次数\n          if (useType === 'paid') {\n            await tx.users.update({\n              where: { id: user.id },\n              data: {\n                balance: { decrement: cost },\n                totalSpent: { increment: cost },\n                balanceVersion: { increment: 1 }\n              }\n            });\n\n            // 记录交易\n            await tx.transactions.create({\n              data: {\n                userId: user.id,\n                type: 'lottery_participation',\n                amount: cost,\n                balanceType: 'lottery_coin',\n                description: `参与夺宝 - ${sharesCount}份`\n              }\n            });\n          } else {\n            await tx.users.update({\n              where: { id: user.id },\n              data: {\n                freeDailyCount: { decrement: 1 },\n                lastFreeResetDate: isNewDay ? tajikistanNow : user.lastFreeResetDate\n              }\n            });\n\n            // 记录免费参与交易\n            await tx.transactions.create({\n              data: {\n                userId: user.id,\n                type: 'free_lottery_participation',\n                amount: 0,\n                balanceType: 'free',\n                description: `免费参与夺宝 - ${sharesCount}份`\n              }\n            });\n          }\n\n          // 获取最终期次信息\n          const finalRound = await tx.lotteryRounds.findUnique({\n            where: { id: roundId }\n          });\n\n          // 获取更新后的用户信息\n          const finalUser = await tx.users.findUnique({\n            where: { id: user.id },\n            select: {\n              id: true,\n              balance: true,\n              freeDailyCount: true,\n              totalSpent: true,\n              balanceVersion: true\n            }\n          });\n\n          return {\n            participation,\n            finalRound,\n            finalUser,\n            willBeSoldOut,\n            cost,\n            newFreeCount: useType === 'free' ? finalUser?.freeDailyCount : undefined\n          };\n        });\n      },\n      // 要更新的缓存键\n      [\n        cacheKeyBuilder.user.profile(decoded.userId),\n        cacheKeyBuilder.user.balance(decoded.userId),\n        `lottery:round:${roundId}`,\n        'lottery:rounds:list'\n      ],\n      // 新数据将在事务完成后更新\n    );\n\n    if (!result.success) {\n      throw new Error(result.error || '夺宝参与失败');\n    }\n\n    const data = result.data!;\n\n    // 11. 如果期次已满，触发立即开奖\n    if (data.willBeSoldOut) {\n      try {\n        logger.info(`期次 ${roundId} 已售罄，触发立即开奖`, { requestId, roundId });\n        \n        // 异步执行开奖，不阻塞用户响应\n        triggerImmediateDraw(roundId).catch(error => {\n          logger.error('开奖失败', error, { requestId, roundId });\n        });\n\n        // 失效相关缓存\n        await CacheConsistencyManager.invalidateCache([\n          `lottery:round:${roundId}`,\n          'lottery:rounds:list'\n        ]);\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            participationId: data.participation.id,\n            numbers: data.participation.numbers,\n            sharesCount: data.participation.sharesCount,\n            roundStatus: 'full',\n            soldShares: data.finalRound.soldShares,\n            totalShares: data.finalRound.totalShares,\n            newBalance: data.finalUser.balance,\n            newFreeCount: data.newFreeCount,\n            immediateDraw: true,\n            cacheUpdated: result.cacheUpdated\n          },\n          message: '参与成功！期次已售罄，正在开奖中...'\n        });\n      } catch (error) {\n        logger.error('立即开奖失败', error, { requestId, roundId });\n      }\n    }\n\n    // 触发邀请奖励（独立事务，不影响夺宝逻辑）\n    try {\n      logger.info('开始检查用户首次参与夺宝触发奖励', {\n        requestId,\n        userId: decoded.userId,\n        participationId: data.participation.id\n      });\n\n      // 检查用户是否首次参与夺宝\n      const participationCount = await prisma.participations.count({\n        where: {\n          userId: decoded.userId,\n          id: { not: data.participation.id }\n        }\n      });\n\n      if (participationCount === 0) {\n        logger.info('用户首次参与夺宝，触发邀请奖励', {\n          requestId,\n          userId: decoded.userId,\n          participationId: data.participation.id\n        });\n\n        // 调用触发邀请奖励API\n        try {\n          const rewardResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/referral/trigger-reward`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user_id: decoded.userId,\n              event_type: 'first_lottery',\n              event_data: {\n                participation_id: data.participation.id,\n                round_id: roundId,\n                shares_count: sharesCount,\n                cost: data.cost,\n                use_type: useType\n              }\n            })\n          });\n\n          if (rewardResponse.ok) {\n            const rewardData = await rewardResponse.json();\n            logger.info('邀请奖励触发成功', {\n              requestId,\n              userId: decoded.userId,\n              rewardData\n            });\n          } else {\n            const errorData = await rewardResponse.text();\n            logger.warn('邀请奖励触发失败', {\n              requestId,\n              userId: decoded.userId,\n              status: rewardResponse.status,\n              error: errorData\n            });\n          }\n        } catch (rewardError) {\n          logger.error('触发邀请奖励时发生错误', rewardError, {\n            requestId,\n            userId: decoded.userId\n          });\n        }\n      }\n    } catch (rewardCheckError) {\n      logger.error('检查用户首次参与状态时发生错误', rewardCheckError, {\n        requestId,\n        userId: decoded.userId\n      });\n    }\n\n    logger.info('夺宝参与成功', {\n      requestId,\n      userId: decoded.userId,\n      participationId: data.participation.id,\n      cacheUpdated: result.cacheUpdated\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        participationId: data.participation.id,\n        numbers: data.participation.numbers,\n        sharesCount: data.participation.sharesCount,\n        roundStatus: data.finalRound.status,\n        soldShares: data.finalRound.soldShares,\n        totalShares: data.finalRound.totalShares,\n        newBalance: data.finalUser.balance,\n        newFreeCount: data.newFreeCount,\n        cost: data.cost,\n        cacheUpdated: result.cacheUpdated\n      },\n      message: '参与成功！祝您好运！'\n    });\n\n  } catch (error: any) {\n    logger.error('夺宝参与失败', {\n      error: error.message,\n      stack: error.stack,\n      requestId,\n      userId: decoded?.userId\n    });\n    \n    // 根据错误类型返回不同状态码\n    const statusCode = error.message.includes('份额不足') || \n                      error.message.includes('余额不足') ||\n                      error.message.includes('免费次数已用完') ||\n                      error.message.includes('期次已结束') ? 400 : 500;\n    \n    return NextResponse.json(\n      { \n        error: '参与失败', \n        message: error.message,\n        timestamp: new Date().toISOString(),\n        requestId\n      },\n      { status: statusCode }\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/participate-fixed/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 13. Maximum allowed is 10.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":227,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":10,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":10,"endColumn":57,"fix":{"range":[336,384],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":10,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":10,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[336,347],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[337,347],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[336,347],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":14,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":14,"endColumn":42,"fix":{"range":[491,502],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":15,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":15,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":20,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":20,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[702,709],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":20,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":20,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[714,725],"text":"(Boolean(sharesCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 17. Maximum allowed is 10.","line":25,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":174,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'tajikistanNow' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tajikistanNow' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":61,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":61,"endColumn":47,"fix":{"range":[1939,1975],"text":"round?.status !== 'ongoing'"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":99,"column":12,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":99,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3106,3143],"text":"(Boolean((roundUpdateResult[0]?.result?.success)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":100,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":100,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3171,3206],"text":"(Boolean((roundUpdateResult[0]?.result?.error)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":100,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":100,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3207,3209],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":127,"column":14,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":127,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3914,3946],"text":"(Boolean((freeCountUpdateResult[0]?.result)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":147,"column":7,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":167,"endColumn":8,"fix":{"range":[4394,4992],"text":"await (useType === 'paid' ? tx.transactions.create({\n          data: {\n            userId: decoded.userId,\n            type: 'lottery_participation',\n            amount: cost,\n            balanceType: 'lottery_coin',\n            description: `参与夺宝 - ${sharesCount}份`\n          }\n        }) : tx.transactions.create({\n          data: {\n            userId: decoded.userId,\n            type: 'free_lottery_participation',\n            amount: 0,\n            balanceType: 'free',\n            description: `免费参与夺宝 - ${sharesCount}份`\n          }\n        }));"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":177,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":177,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5222,5253],"text":"Boolean(result.roundUpdateResult.isFull)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5653,5689],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6385,6388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6385,6388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6396,6439],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":214,"column":24,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":214,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6489,6519],"text":"(Boolean(error.message.includes('份额不足')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":215,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":215,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6546,6576],"text":"(Boolean(error.message.includes('余额不足')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":216,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":216,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6602,6635],"text":"(Boolean(error.message.includes('免费次数已用完')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { TajikistanTimeUtils } from '@/lib/timezone-utils';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    const body = await request.json();\n    const { roundId, sharesCount, useType = 'paid' } = body;\n\n    if (!roundId || !sharesCount || sharesCount < 1) {\n      return NextResponse.json({ error: '参数错误' }, { status: 400 });\n    }\n\n    // 使用数据库事务确保原子性\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 查找并锁定用户记录\n      const user = await tx.users.findUnique({\n        where: { id: decoded.userId },\n        select: {\n          id: true, balance: true, freeDailyCount: true, \n          lastFreeResetDate: true, free_count_version: true\n        }\n      });\n\n      if (!user) {\n        throw new Error('用户不存在');\n      }\n\n      // 2. 检查免费次数是否需要重置（塔吉克斯坦时区）\n      const tajikistanNow = TajikistanTimeUtils.getCurrentTime();\n      const isNewDay = TajikistanTimeUtils.getCurrentDateString() !== \n        user.lastFreeResetDate.toISOString().split('T')[0];\n      \n      let currentFreeCount = user.freeDailyCount;\n      let currentFreeCountVersion = user.free_count_version;\n\n      if (isNewDay) {\n        currentFreeCount = 3;\n        currentFreeCountVersion += 1;\n      }\n\n      // 3. 查找并锁定夺宝期次\n      const round = await tx.lotteryRounds.findUnique({\n        where: { id: roundId },\n        select: { \n          id: true, totalShares: true, soldShares: true, \n          status: true, productId: true \n        }\n      });\n\n      if (!round || round.status !== 'ongoing') {\n        throw new Error('夺宝期次不存在或已结束');\n      }\n\n      // 4. 检查份额是否充足\n      const availableShares = round.totalShares - round.soldShares;\n      if (sharesCount > availableShares) {\n        throw new Error(`份额不足，剩余 ${availableShares} 份`);\n      }\n\n      // 5. 业务验证\n      const cost = sharesCount * 1;\n      \n      if (useType === 'paid') {\n        // 付费参与检查余额\n        if (parseFloat(user.balance.toString()) < cost) {\n          throw new Error('夺宝币不足');\n        }\n      } else {\n        // 免费参与检查\n        if (currentFreeCount <= 0) {\n          throw new Error('今日免费次数已用完');\n        }\n        if (sharesCount > Math.min(3, currentFreeCount)) {\n          throw new Error(`免费参与最多${Math.min(3, currentFreeCount)}份`);\n        }\n      }\n\n      // 6. 生成夺宝号码\n      const startNumber = round.soldShares + 10000001;\n      const numbers = Array.from({ length: sharesCount }, (_, i) => startNumber + i);\n\n      // 7. 执行原子性操作\n      // 首先更新期次（使用数据库函数保证原子性）\n      const roundUpdateResult = await tx.$queryRaw`\n        SELECT atomic_update_lottery_round(${roundId}::uuid, ${sharesCount}, ${decoded.userId}::uuid) as result\n      `;\n\n      if (!roundUpdateResult[0]?.result?.success) {\n        throw new Error(roundUpdateResult[0]?.result?.error || '期次更新失败');\n      }\n\n      // 8. 更新用户余额或免费次数\n      if (useType === 'paid') {\n        // 使用乐观锁更新余额\n        await tx.users.update({\n          where: { \n            id: decoded.userId,\n            balance: { gte: cost } // 确保余额充足\n          },\n          data: {\n            balance: { decrement: cost },\n            totalSpent: { increment: cost },\n            updatedAt: new Date()\n          }\n        });\n      } else {\n        // 使用原子函数更新免费次数\n        const freeCountUpdateResult = await tx.$queryRaw`\n          SELECT atomic_update_free_count(\n            ${decoded.userId}::uuid, \n            ${currentFreeCount - 1}, \n            ${currentFreeCountVersion}\n          ) as result\n        `;\n\n        if (!freeCountUpdateResult[0]?.result) {\n          throw new Error('免费次数更新失败，请重试');\n        }\n      }\n\n      // 9. 创建参与记录\n      const participation = await tx.participations.create({\n        data: {\n          userId: decoded.userId,\n          roundId: round.id,\n          productId: round.productId,\n          numbers,\n          sharesCount,\n          type: useType,\n          cost: useType === 'paid' ? cost : 0,\n          isWinner: false\n        }\n      });\n\n      // 10. 记录交易\n      if (useType === 'paid') {\n        await tx.transactions.create({\n          data: {\n            userId: decoded.userId,\n            type: 'lottery_participation',\n            amount: cost,\n            balanceType: 'lottery_coin',\n            description: `参与夺宝 - ${sharesCount}份`\n          }\n        });\n      } else {\n        await tx.transactions.create({\n          data: {\n            userId: decoded.userId,\n            type: 'free_lottery_participation',\n            amount: 0,\n            balanceType: 'free',\n            description: `免费参与夺宝 - ${sharesCount}份`\n          }\n        });\n      }\n\n      return { \n        participation, \n        roundUpdateResult: roundUpdateResult[0].result,\n        newFreeCount: useType === 'free' ? currentFreeCount - 1 : currentFreeCount\n      };\n    });\n\n    // 11. 期次已满时立即触发开奖\n    if (result.roundUpdateResult.isFull) {\n      try {\n        // 触发开奖Edge Function\n        await fetch(`${process.env.SUPABASE_URL}/functions/v1/auto-draw`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`\n          },\n          body: JSON.stringify({ roundId })\n        });\n      } catch (drawError) {\n        console.error('触发开奖失败:', drawError);\n        // 不影响主流程，开奖失败由定时任务处理\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        participationId: result.participation.id,\n        numbers: result.participation.numbers,\n        sharesCount: result.participation.sharesCount,\n        newFreeCount: result.newFreeCount,\n        roundStatus: result.roundUpdateResult.newStatus,\n        soldShares: result.roundUpdateResult.newSoldShares,\n        totalShares: result.roundUpdateResult.newSoldShares + \n                    (result.roundUpdateResult.newStatus === 'ongoing' ? \n                     1000 - result.roundUpdateResult.newSoldShares : 0)\n      },\n      message: '参与成功！祝您好运！'\n    });\n\n  } catch (error: any) {\n    console.error('Participate error:', error);\n    \n    // 根据错误类型返回不同状态码\n    const statusCode = error.message.includes('份额不足') || \n                      error.message.includes('余额不足') ||\n                      error.message.includes('免费次数已用完') ? 400 : 500;\n    \n    return NextResponse.json(\n      { \n        error: '参与失败', \n        message: error.message,\n        timestamp: new Date().toISOString()\n      },\n      { status: statusCode }\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/participate/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'jwt' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jwt' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":11},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":10,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":306,"endColumn":2},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":12,"column":58,"nodeType":"CallExpression","messageId":"substr","endLine":12,"endColumn":97,"fix":{"range":[597,608],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":21,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[792,830],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[792,830],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[792,830],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[831,833],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[862,895],"text":"(request.headers.get('user-agent') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[862,895],"text":"(request.headers.get('user-agent') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[862,895],"text":"(Boolean(request.headers.get('user-agent')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[896,898],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1082,1095],"text":"(user?.userId) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1083,1095],"text":"((user?.userId) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1082,1095],"text":"!Boolean((user?.userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":39,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":39,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1328,1335],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":39,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":39,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1340,1348],"text":"(Boolean(quantity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 14. Maximum allowed is 10.","line":55,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":216,"endColumn":6},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":109,"column":55,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":109,"endColumn":79,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3205,3229],"text":"((currentRound?.soldShares) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3205,3229],"text":"((currentRound?.soldShares) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3205,3229],"text":"(Boolean((currentRound?.soldShares)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3230,3232],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":115,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":115,"endColumn":30,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3408,3409],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":142,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":142,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4082,4083],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":153,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":153,"endColumn":30,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4457,4458],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":171,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":171,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4871,4872],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":190,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":190,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5352,5353],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":202,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":202,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5688,5689],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":231,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":231,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6420,6421],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":244,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":244,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6732,6733],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6985,6988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6985,6988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":272,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":272,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7417,7432],"text":"((decoded?.userId) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7417,7432],"text":"((decoded?.userId) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7417,7432],"text":"(Boolean((decoded?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":272,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":272,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7433,7435],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":287,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":287,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7774,7807],"text":"Boolean(error.message.includes('幸运币余额不足'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":290,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":290,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7882,7915],"text":"Boolean(error.message.includes('夺宝期次不存在'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":293,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":293,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7990,8020],"text":"Boolean(error.message.includes('份额不足'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":296,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":296,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8099,8128],"text":"Boolean(error.message.includes('未授权'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":310,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":42}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { getLogger } from '@/lib/logger';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { rateLimitMonitor } from '@/lib/rate-limit-monitor';\nimport { withRateLimit, lotteryRateLimit } from '@/lib/rate-limit-middleware';\nimport { triggerImmediateDraw } from '@/lib/lottery';\n\nconst handleLotteryParticipation = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `lottery_participate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const startTime = Date.now();\n\n  // 在函数开始就声明decoded变量，避免未定义引用\n  let decoded: { userId: string } | null = null;\n\n  try {\n    logger.info('抽奖参与请求开始', {\n      requestId,\n      ip: request.headers.get('x-forwarded-for') || 'unknown',\n      userAgent: request.headers.get('user-agent') || 'unknown',\n      algorithmVersion: '3.0-secure-optimized-vrf',\n      timezone: 'Asia/Dushanbe'\n    });\n\n    // 验证用户身份 - 使用更安全的方法\n    const user = getUserFromRequest(request);\n    if (!user?.userId) {\n      return NextResponse.json({ error: '未授权访问' }, { status: 401 });\n    }\n    decoded = { userId: user.userId };\n\n    // 验证请求体\n    const body = await request.json();\n    const { roundId, quantity } = body;\n\n    // 参数验证\n    if (!roundId || !quantity) {\n      return NextResponse.json(\n        { error: '参数不完整：roundId和quantity都是必需的' }, \n        { status: 400 }\n      );\n    }\n\n    // 验证数量范围\n    if (typeof quantity !== 'number' || quantity < 1 || quantity > 100) {\n      return NextResponse.json(\n        { error: '数量必须在1-100之间' }, \n        { status: 400 }\n      );\n    }\n\n    // 开始数据库事务\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 使用行级锁验证夺宝期次，防止竞态条件\n      const round = await tx.lotteryRounds.findUnique({\n        where: { id: roundId },\n        select: {\n          id: true,\n          status: true,\n          totalShares: true,\n          soldShares: true,\n          pricePerShare: true,\n          drawTime: true,\n          version: true\n        }\n      });\n\n      if (!round) {\n        throw new Error('夺宝期次不存在');\n      }\n\n      // 验证期次状态\n      if (round.status !== 'active') {\n        throw new Error('夺宝期次未激活');\n      }\n\n      // 验证期次是否已结束\n      if (round.drawTime && new Date() > new Date(round.drawTime)) {\n        throw new Error('夺宝期次已结束');\n      }\n\n      // 2. 使用条件更新验证剩余份额，防止竞态条件\n      const availableShares = round.totalShares - round.soldShares;\n      if (quantity > availableShares) {\n        throw new Error(`剩余份额不足，仅剩${availableShares}份`);\n      }\n\n      // 3. 原子性更新期次已售份额（使用乐观锁）\n      const updatedRound = await tx.lotteryRounds.updateMany({\n        where: {\n          id: roundId,\n          soldShares: round.soldShares, // 乐观锁：只有在soldShares没有变化时才更新\n          status: 'active'\n        },\n        data: {\n          soldShares: { increment: quantity }\n        }\n      });\n\n      if (updatedRound.count === 0) {\n        // 说明soldShares已经发生变化，可能存在竞态条件\n        const currentRound = await tx.lotteryRounds.findUnique({\n          where: { id: roundId },\n          select: { soldShares: true }\n        });\n        \n        const currentAvailable = round.totalShares - (currentRound?.soldShares || 0);\n        throw new Error(`份额已被其他用户抢购，当前剩余${currentAvailable}份，请重试`);\n      }\n\n      // 验证用户幸运币余额\n      const user = await tx.users.findUnique({\n        where: { id: decoded!.userId },\n        select: { luckyCoins: true }\n      });\n\n      if (!user) {\n        throw new Error('用户不存在');\n      }\n\n      const totalCost = round.pricePerShare * quantity;\n      if (Number(user.luckyCoins) < Number(totalCost)) {\n        throw new Error('幸运币余额不足');\n      }\n\n      // 获取商品信息用于参与记录\n      const roundWithProduct = await tx.lotteryRounds.findUnique({\n        where: { id: roundId },\n        select: { productId: true }\n      });\n\n      if (!roundWithProduct) {\n        throw new Error('无法获取商品信息');\n      }\n\n      // 创建夺宝参与记录\n      const participation = await tx.participations.create({\n        data: {\n          roundId: round.id,\n          userId: decoded!.userId,\n          productId: roundWithProduct.productId,\n          numbers: Array.from({ length: quantity }, () => Math.floor(Math.random() * 100) + 1),\n          sharesCount: quantity,\n          type: 'lottery',\n          cost: totalCost\n        }\n      });\n\n      // 获取并锁定用户记录，验证幸运币余额\n      const userWithVersion = await tx.users.findUnique({\n        where: { id: decoded!.userId },\n        select: { \n          luckyCoins: true,\n          luckyCoinsVersion: true \n        }\n      });\n\n      if (!userWithVersion) {\n        throw new Error('用户不存在');\n      }\n\n      if (Number(userWithVersion.luckyCoins) < Number(totalCost)) {\n        throw new Error('幸运币余额不足');\n      }\n\n      // 使用乐观锁更新用户余额\n      const updatedUser = await tx.users.updateMany({\n        where: {\n          id: decoded!.userId,\n          luckyCoinsVersion: userWithVersion.luckyCoinsVersion\n        },\n        data: {\n          luckyCoins: { decrement: totalCost },\n          totalSpent: { increment: totalCost },\n          luckyCoinsVersion: { increment: 1 }\n        }\n      });\n\n      if (updatedUser.count === 0) {\n        throw new Error('用户余额更新失败，可能是并发操作，请重试');\n      }\n\n      // 期次已售份额已在上面使用乐观锁原子性更新\n\n      // 记录交易\n      await tx.transactions.create({\n        data: {\n          userId: decoded!.userId,\n          type: 'lottery_participation',\n          amount: -totalCost,\n          balanceType: 'lucky_coins',\n          relatedOrderId: participation.id,\n          description: `抽奖参与 - 第${round.id}期 ${quantity}份`\n        }\n      });\n\n      // 创建通知\n      await tx.notifications.create({\n        data: {\n          userId: decoded!.userId,\n          type: 'lottery_participation',\n          content: `抽奖参与成功！您购买了第${round.id}期 ${quantity}份幸运币`,\n          status: 'pending'\n        }\n      });\n\n      return {\n        participationId: participation.id,\n        roundId: round.id,\n        quantity: quantity,\n        totalCost: totalCost,\n        remainingShares: availableShares - quantity\n      };\n    });\n\n    // 检查是否触达开奖条件（异步调用）\n    triggerImmediateDraw(roundId).catch((error) => {\n      logger.error('异步开奖触发失败', error, {\n        requestId,\n        roundId,\n        userId: decoded?.userId\n      });\n    });\n\n    // 记录速率限制监控数据\n    rateLimitMonitor.recordMetric({\n      timestamp: Date.now(),\n      endpoint: '/api/lottery/participate',\n      identifier: decoded!.userId,\n      hits: 1,\n      blocked: false,\n      strategy: 'sliding_window',\n      windowMs: 5 * 60 * 1000,\n      limit: 20,\n      remaining: 0,\n      resetTime: Date.now() + 5 * 60 * 1000,\n      responseTime: Date.now() - startTime\n    });\n\n    logger.info('抽奖参与成功', {\n      requestId,\n      userId: decoded!.userId,\n      roundId,\n      quantity,\n      totalCost: result.totalCost,\n      executionTime: Date.now() - startTime\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      message: '抽奖参与成功！'\n    });\n\n  } catch (error: any) {\n    logger.error('抽奖参与失败', error, {\n      requestId,\n      userId: decoded?.userId, // 现在decoded确保不会为undefined\n      roundId: body?.roundId,\n      quantity: body?.quantity,\n      error: error.message,\n      stack: error.stack,\n      executionTime: Date.now() - startTime\n    });\n\n    // 记录速率限制监控数据\n    rateLimitMonitor.recordMetric({\n      timestamp: Date.now(),\n      endpoint: '/api/lottery/participate',\n      identifier: decoded?.userId || 'anonymous',\n      hits: 1,\n      blocked: false,\n      strategy: 'sliding_window',\n      windowMs: 5 * 60 * 1000,\n      limit: 20,\n      remaining: 0,\n      resetTime: Date.now() + 5 * 60 * 1000,\n      responseTime: Date.now() - startTime\n    });\n\n    // 根据错误类型返回不同状态码\n    let statusCode = 500;\n    let errorMessage = '抽奖参与失败';\n\n    if (error.message.includes('幸运币余额不足')) {\n      statusCode = 400;\n      errorMessage = '幸运币余额不足';\n    } else if (error.message.includes('夺宝期次不存在')) {\n      statusCode = 404;\n      errorMessage = '抽奖期次不存在';\n    } else if (error.message.includes('份额不足')) {\n      statusCode = 400;\n      errorMessage = error.message;\n    } else if (error.message.includes('未授权')) {\n      statusCode = 401;\n      errorMessage = '未授权访问';\n    }\n\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: statusCode }\n    );\n  }\n};\n\n// 应用速率限制并导出处理函数\nconst processRequest = withRateLimit(handleLotteryParticipation, lotteryRateLimit({\n  onLimitExceeded: async (result, request) => {\n    const logger = getLogger();\n    logger.warn('抽奖参与接口速率限制触发', {\n      identifier: 'unknown',\n      endpoint: '/api/lottery/participate',\n      limit: result.totalHits + result.remaining,\n      remaining: result.remaining,\n      resetTime: result.resetTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: '参与抽奖过于频繁，请稍后再试',\n        rateLimit: {\n          limit: result.totalHits + result.remaining,\n          remaining: result.remaining,\n          resetTime: new Date(result.resetTime).toISOString()\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': (result.totalHits + result.remaining).toString(),\n          'X-RateLimit-Remaining': result.remaining.toString(),\n          'X-RateLimit-Reset': result.resetTime.toString()\n        }\n      }\n    );\n  }\n}));\n\n// 导出主处理函数\nexport { processRequest as POST };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/quick-participate/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":8,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":253,"endColumn":2},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":10,"column":64,"nodeType":"CallExpression","messageId":"substr","endLine":10,"endColumn":103,"fix":{"range":[506,517],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":18,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[672,710],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[672,710],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[672,710],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":18,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":18,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[711,713],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":19,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":19,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[742,775],"text":"(request.headers.get('user-agent') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[742,775],"text":"(request.headers.get('user-agent') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[742,775],"text":"(Boolean(request.headers.get('user-agent')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":19,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":19,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[776,778],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[866,879],"text":"(user?.userId) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[867,879],"text":"((user?.userId) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[866,879],"text":"!Boolean((user?.userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1128,1135],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1140,1148],"text":"(Boolean(quantity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":87,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":87,"endColumn":30,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2469,2470],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"prefer-const","severity":2,"message":"'totalCost' is never reassigned. Use 'const' instead.","line":98,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":98,"endColumn":20,"fix":{"range":[2652,2699],"text":"const totalCost = round.pricePerShare * quantity;"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":115,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":115,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3214,3215],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":131,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":131,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3633,3634],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":142,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":142,"endColumn":30,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3964,3965],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":161,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":161,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4425,4426],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":173,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":173,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4766,4767],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":202,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":202,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5597,5598],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5862,5865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5862,5865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":231,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":231,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6209,6242],"text":"Boolean(error.message.includes('幸运币余额不足'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":234,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":234,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6317,6350],"text":"Boolean(error.message.includes('夺宝期次不存在'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":237,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":237,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6425,6455],"text":"Boolean(error.message.includes('份额不足'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":240,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":240,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6534,6563],"text":"Boolean(error.message.includes('未授权'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":243,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":243,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6636,6672],"text":"Boolean(error.message.includes('智能模式下最多可购买'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":257,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":257,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":257,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":42}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getLogger } from '@/lib/logger';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { withRateLimit, lotteryRateLimit } from '@/lib/rate-limit-middleware';\nimport { triggerImmediateDraw } from '@/lib/lottery';\n\nconst handleQuickParticipate = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `lottery_quick_participate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const startTime = Date.now();\n\n  let decoded: { userId: string } | null = null;\n\n  try {\n    logger.info('快速参与抽奖请求开始', {\n      requestId,\n      ip: request.headers.get('x-forwarded-for') || 'unknown',\n      userAgent: request.headers.get('user-agent') || 'unknown'\n    });\n\n    // 验证用户身份\n    const user = getUserFromRequest(request);\n    if (!user?.userId) {\n      return NextResponse.json({ error: '未授权访问' }, { status: 401 });\n    }\n    decoded = { userId: user.userId };\n\n    // 验证请求体\n    const body = await request.json();\n    const { roundId, quantity, mode = 'smart' } = body;\n\n    // 参数验证\n    if (!roundId || !quantity) {\n      return NextResponse.json(\n        { error: '参数不完整：roundId和quantity都是必需的' }, \n        { status: 400 }\n      );\n    }\n\n    // 验证数量范围\n    if (typeof quantity !== 'number' || quantity < 1 || quantity > 100) {\n      return NextResponse.json(\n        { error: '数量必须在1-100之间' }, \n        { status: 400 }\n      );\n    }\n\n    // 开始数据库事务\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 验证夺宝期次\n      const round = await tx.lotteryRounds.findUnique({\n        where: { id: roundId },\n        select: {\n          id: true,\n          status: true,\n          totalShares: true,\n          soldShares: true,\n          pricePerShare: true,\n          drawTime: true,\n          productId: true\n        }\n      });\n\n      if (!round) {\n        throw new Error('夺宝期次不存在');\n      }\n\n      // 验证期次状态\n      if (round.status !== 'active') {\n        throw new Error('夺宝期次未激活');\n      }\n\n      // 验证期次是否已结束\n      if (round.drawTime && new Date() > new Date(round.drawTime)) {\n        throw new Error('夺宝期次已结束');\n      }\n\n      // 验证剩余份额\n      const availableShares = round.totalShares - round.soldShares;\n      if (quantity > availableShares) {\n        throw new Error(`剩余份额不足，仅剩${availableShares}份`);\n      }\n\n      // 2. 验证用户幸运币余额和历史参与情况\n      const user = await tx.users.findUnique({\n        where: { id: decoded!.userId },\n        select: { \n          luckyCoins: true,\n          luckyCoinsVersion: true \n        }\n      });\n\n      if (!user) {\n        throw new Error('用户不存在');\n      }\n\n      let totalCost = round.pricePerShare * quantity;\n      \n      // 智能模式：预留30%余额\n      if (mode === 'smart') {\n        const maxAffordable = Math.floor((user.luckyCoins * 0.7) / round.pricePerShare);\n        if (quantity > maxAffordable) {\n          throw new Error(`智能模式下最多可购买 ${maxAffordable} 份，建议保留30%余额`);\n        }\n      }\n\n      if (Number(user.luckyCoins) < Number(totalCost)) {\n        throw new Error('幸运币余额不足');\n      }\n\n      // 3. 获取用户当前参与信息\n      const currentParticipation = await tx.participations.findMany({\n        where: {\n          userId: decoded!.userId,\n          roundId: round.id,\n          isWinner: false\n        },\n        select: {\n          sharesCount: true,\n          numbers: true\n        }\n      });\n\n      const currentSharesCount = currentParticipation.reduce((sum, p) => sum + p.sharesCount, 0);\n\n      // 4. 创建新的参与记录\n      const participation = await tx.participations.create({\n        data: {\n          roundId: round.id,\n          userId: decoded!.userId,\n          productId: round.productId,\n          numbers: Array.from({ length: quantity }, () => Math.floor(Math.random() * 100) + 1),\n          sharesCount: quantity,\n          type: 'lottery',\n          cost: totalCost\n        }\n      });\n\n      // 5. 更新用户幸运币余额\n      await tx.users.update({\n        where: { id: decoded!.userId },\n        data: {\n          luckyCoins: { decrement: totalCost },\n          totalSpent: { increment: totalCost },\n          luckyCoinsVersion: { increment: 1 }\n        }\n      });\n\n      // 6. 更新期次已售份额\n      await tx.lotteryRounds.update({\n        where: { id: round.id },\n        data: {\n          soldShares: { increment: quantity }\n        }\n      });\n\n      // 7. 记录交易\n      await tx.transactions.create({\n        data: {\n          userId: decoded!.userId,\n          type: 'lottery_participation',\n          amount: -totalCost,\n          balanceType: 'lucky_coins',\n          relatedOrderId: participation.id,\n          description: `抽奖快速参与 - 第${round.id}期 ${quantity}份`\n        }\n      });\n\n      // 8. 创建通知\n      await tx.notifications.create({\n        data: {\n          userId: decoded!.userId,\n          type: 'lottery_participation',\n          content: `快速参与成功！您购买了第${round.id}期 ${quantity}份幸运币，当前共参与 ${currentSharesCount + quantity} 份`,\n          status: 'pending'\n        }\n      });\n\n      return {\n        participationId: participation.id,\n        roundId: round.id,\n        quantity: quantity,\n        totalCost: totalCost,\n        remainingShares: availableShares - quantity,\n        currentTotalShares: currentSharesCount + quantity,\n        winProbability: ((currentSharesCount + quantity) / round.totalShares) * 100\n      };\n    });\n\n    // 检查是否触达开奖条件（异步调用）\n    triggerImmediateDraw(roundId).catch((error) => {\n      logger.error('异步开奖触发失败', error, {\n        requestId,\n        roundId,\n        userId: decoded?.userId\n      });\n    });\n\n    logger.info('快速参与成功', {\n      requestId,\n      userId: decoded!.userId,\n      roundId,\n      quantity,\n      mode,\n      totalCost: result.totalCost,\n      executionTime: Date.now() - startTime\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      message: '快速参与成功！'\n    });\n\n  } catch (error: any) {\n    logger.error('快速参与失败', error, {\n      requestId,\n      userId: decoded?.userId,\n      roundId: body?.roundId,\n      quantity: body?.quantity,\n      mode: body?.mode,\n      error: error.message,\n      executionTime: Date.now() - startTime\n    });\n\n    // 根据错误类型返回不同状态码\n    let statusCode = 500;\n    let errorMessage = '快速参与失败';\n\n    if (error.message.includes('幸运币余额不足')) {\n      statusCode = 400;\n      errorMessage = '幸运币余额不足';\n    } else if (error.message.includes('夺宝期次不存在')) {\n      statusCode = 404;\n      errorMessage = '抽奖期次不存在';\n    } else if (error.message.includes('份额不足')) {\n      statusCode = 400;\n      errorMessage = error.message;\n    } else if (error.message.includes('未授权')) {\n      statusCode = 401;\n      errorMessage = '未授权访问';\n    } else if (error.message.includes('智能模式下最多可购买')) {\n      statusCode = 400;\n      errorMessage = error.message;\n    }\n\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: statusCode }\n    );\n  }\n};\n\n// 应用速率限制并导出处理函数\nconst processRequest = withRateLimit(handleQuickParticipate, lotteryRateLimit({\n  onLimitExceeded: async (result, request) => {\n    const logger = getLogger();\n    logger.warn('快速参与接口速率限制触发', {\n      identifier: 'unknown',\n      endpoint: '/api/lottery/quick-participate',\n      limit: result.totalHits + result.remaining,\n      remaining: result.remaining,\n      resetTime: result.resetTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: '参与抽奖过于频繁，请稍后再试',\n        rateLimit: {\n          limit: result.totalHits + result.remaining,\n          remaining: result.remaining,\n          resetTime: new Date(result.resetTime).toISOString()\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': (result.totalHits + result.remaining).toString(),\n          'X-RateLimit-Remaining': result.remaining.toString(),\n          'X-RateLimit-Reset': result.resetTime.toString()\n        }\n      }\n    );\n  }\n}));\n\n// 导出主处理函数\nexport { processRequest as POST };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/records/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 15. Maximum allowed is 10.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":154,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":10,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":10,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[340,358],"text":"(Boolean(authResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":21,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[600,626],"text":"(searchParams.get('status') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[600,626],"text":"(searchParams.get('status') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[600,626],"text":"(Boolean(searchParams.get('status')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[627,629],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[654,678],"text":"(searchParams.get('type') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[654,678],"text":"(searchParams.get('type') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[654,678],"text":"(Boolean(searchParams.get('type')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[679,681],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":23,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":23,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[715,739],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[715,739],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[715,739],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":23,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":23,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[740,742],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":37,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[789,814],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[789,814],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[789,814],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[815,817],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":28,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":28,"endColumn":29,"fix":{"range":[893,950],"text":"const whereConditions: any = {\n      userId: user.id\n    };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[914,917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[914,917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":99,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":99,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2538,2552],"text":"(Boolean(product.images))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":108,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":108,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3068,3101],"text":"(Boolean(participation.round.winningNumber))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":120,"column":42,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":120,"endColumn":87,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3532,3577],"text":"(localStorage.getItem('lottery_records_cache') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3532,3577],"text":"(localStorage.getItem('lottery_records_cache') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3532,3577],"text":"(Boolean(localStorage.getItem('lottery_records_cache')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":120,"column":88,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":120,"endColumn":90,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3578,3580],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3656,3659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3656,3659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":47,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":122,"endColumn":107,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3665,3725],"text":"(Boolean(cachedRecords.some((cached: any) => cached.id === record.id)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3693,3696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3693,3696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4005,4036],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4341,4375],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":162,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":162,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4666,4672],"text":"(Boolean(record))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4952,4984],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Function 'getMultilingualProductName' has a complexity of 11. Maximum allowed is 10.","line":187,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":219,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5156,5159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5156,5159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":188,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5177,5201],"text":"Boolean(product.nameMultilingual)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":199,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":199,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5544,5558],"text":"(Boolean(nameData[lang]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":199,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":199,"endColumn":50,"fix":{"range":[5544,5581],"text":"nameData[lang]?.name"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":199,"column":13,"nodeType":"MemberExpression","endLine":199,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":199,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":199,"endColumn":50,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5562,5581],"text":"(Boolean(nameData[lang].name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":199,"column":31,"nodeType":"MemberExpression","endLine":199,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":200,"column":18,"nodeType":"MemberExpression","endLine":200,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":205,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":206,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5753,5801],"text":"Boolean((value && typeof value === 'object' && value.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[5740,5740],"text":": boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5736,5739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5736,5739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":206,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":206,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5753,5758],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5813,5816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5813,5816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":209,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":209,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5835,5844],"text":"Boolean(firstName)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5915,5949],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":218,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":218,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5982,5996],"text":"(Boolean(product.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":218,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":218,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5982,6014],"text":"(product.nameZh ?? product.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":218,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":218,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6000,6014],"text":"(Boolean(product.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":218,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":218,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6000,6032],"text":"(product.nameEn ?? product.nameRu)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":218,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":218,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6018,6032],"text":"(Boolean(product.nameRu))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":218,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":218,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6033,6035],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":36,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '../../../../lib/prisma';\nimport { authenticateUser } from '../../../../lib/auth';\n\n// GET /api/lottery/records - 获取用户抽奖记录\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const authResult = await authenticateUser(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { success: false, error: '认证失败' },\n        { status: 401 }\n      );\n    }\n\n    const user = authResult.user;\n    const { searchParams } = new URL(request.url);\n    \n    // 解析查询参数\n    const status = searchParams.get('status') || 'all';\n    const type = searchParams.get('type') || 'all';\n    const page = parseInt(searchParams.get('page') || '1', 10);\n    const limit = Math.min(parseInt(searchParams.get('limit') || '20', 10), 100);\n    const offset = (page - 1) * limit;\n\n    // 构建查询条件\n    let whereConditions: any = {\n      userId: user.id\n    };\n\n    // 状态筛选\n    if (status !== 'all') {\n      switch (status) {\n        case 'active':\n          whereConditions.round = {\n            status: 'active'\n          };\n          break;\n        case 'completed':\n          whereConditions.round = {\n            status: 'completed'\n          };\n          break;\n        case 'won':\n          whereConditions.isWinner = true;\n          break;\n      }\n    }\n\n    // 类型筛选\n    if (type !== 'all') {\n      whereConditions.type = type;\n    }\n\n    // 获取记录总数\n    const totalCount = await prisma.participations.count({\n      where: whereConditions\n    });\n\n    // 获取抽奖记录\n    const participations = await prisma.participations.findMany({\n      where: whereConditions,\n      include: {\n        round: {\n          include: {\n            product: {\n              select: {\n                id: true,\n                nameMultilingual: true,\n                nameZh: true,\n                nameEn: true,\n                nameRu: true,\n                images: true,\n                totalShares: true,\n                pricePerShare: true\n              }\n            }\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'desc'\n      },\n      skip: offset,\n      take: limit\n    });\n\n    // 转换数据格式\n    const records = participations.map(participation => {\n      const product = participation.round.product;\n      const productName = getMultilingualProductName(product);\n      \n      return {\n        id: participation.id,\n        roundId: participation.roundId,\n        productId: participation.productId,\n        productName,\n        productImage: product.images && product.images.length > 0 ? product.images[0] : undefined,\n        roundNumber: participation.round.roundNumber,\n        numbers: participation.numbers,\n        sharesCount: participation.sharesCount,\n        cost: parseFloat(participation.cost.toString()),\n        type: participation.type as 'paid' | 'free',\n        status: participation.round.status as 'active' | 'completed' | 'drawn',\n        isWinner: participation.isWinner,\n        winningNumber: participation.round.winningNumber,\n        winnerPrize: participation.round.winningNumber ? parseFloat(product.pricePerShare.toString()) * participation.sharesCount : undefined,\n        drawTime: participation.round.drawTime?.toISOString(),\n        participationTime: participation.createdAt.toISOString()\n      };\n    });\n\n    // 计算是否还有更多数据\n    const hasMore = offset + records.length < totalCount;\n\n    // 缓存数据到本地存储（用于离线查看）\n    if (typeof window !== 'undefined') {\n      try {\n        const cachedRecords = JSON.parse(localStorage.getItem('lottery_records_cache') || '[]');\n        const updatedCache = [\n          ...records.filter((record: any) => !cachedRecords.some((cached: any) => cached.id === record.id)),\n          ...cachedRecords\n        ].slice(0, 1000); // 最多缓存1000条记录\n        \n        localStorage.setItem('lottery_records_cache', JSON.stringify(updatedCache));\n        localStorage.setItem('lottery_records_cache_time', Date.now().toString());\n      } catch (error) {\n        console.warn('缓存数据失败:', error);\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        records,\n        pagination: {\n          page,\n          limit,\n          total: totalCount,\n          hasMore,\n          totalPages: Math.ceil(totalCount / limit)\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('获取抽奖记录失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/lottery/records - 缓存抽奖记录（客户端调用）\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { record } = body;\n\n    if (!record) {\n      return NextResponse.json(\n        { success: false, error: '记录数据无效' },\n        { status: 400 }\n      );\n    }\n\n    // 在实际应用中，这里可以将数据保存到本地数据库\n    // 目前主要作为缓存更新接口\n\n    return NextResponse.json({\n      success: true,\n      message: '记录已缓存'\n    });\n\n  } catch (error) {\n    console.error('缓存记录失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// 获取多语言商品名称的辅助函数\nfunction getMultilingualProductName(product: any): string {\n  if (product.nameMultilingual) {\n    // 尝试从多语言JSON中获取名称\n    try {\n      const nameData = typeof product.nameMultilingual === 'string' \n        ? JSON.parse(product.nameMultilingual) \n        : product.nameMultilingual;\n      \n      // 优先使用用户语言，其次是中文，然后是英文\n      const languages = ['zh-CN', 'zh', 'en', 'ru', 'tg'];\n      \n      for (const lang of languages) {\n        if (nameData[lang] && nameData[lang].name) {\n          return nameData[lang].name;\n        }\n      }\n      \n      // 如果没有找到，返回第一个可用的名称\n      const firstName = Object.values(nameData).find((value: any) => \n        value && typeof value === 'object' && value.name\n      ) as any;\n      \n      if (firstName) {\n        return firstName.name;\n      }\n    } catch (error) {\n      console.warn('解析多语言名称失败:', error);\n    }\n  }\n\n  // 回退到旧字段\n  return product.nameZh || product.nameEn || product.nameRu || '未知商品';\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/statistics/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":10,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":10,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[343,361],"text":"(Boolean(authResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":21,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[603,629],"text":"(searchParams.get('period') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[603,629],"text":"(searchParams.get('period') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[603,629],"text":"(Boolean(searchParams.get('period')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[630,632],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[691,715],"text":"(searchParams.get('type') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[691,715],"text":"(searchParams.get('type') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[691,715],"text":"(Boolean(searchParams.get('type')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[716,718],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":28,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":28,"endColumn":29,"fix":{"range":[833,890],"text":"const whereConditions: any = {\n      userId: user.id\n    };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":105,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":105,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2536,2538],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2718,2752],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":130,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":130,"endColumn":27,"fix":{"range":[3007,3045],"text":"const whereConditions: any = { userId };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3028,3031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3028,3031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":131,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":131,"endColumn":51,"fix":{"range":[3068,3096],"text":"{whereConditions.type = type;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":132,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":132,"endColumn":67,"fix":{"range":[3115,3163],"text":"{whereConditions.createdAt = { gte: dateFilter };}"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3976,3978],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":164,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":164,"endColumn":27,"fix":{"range":[3996,4085],"text":"const whereConditions: any = {\n    userId,\n    createdAt: {\n      gte: startDate\n    }\n  };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4017,4020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4017,4020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4440,4443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4440,4443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":192,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":192,"endColumn":25,"fix":{"range":[4457,5324],"text":"for (const participation of participations) {\n    const monthKey = participation.createdAt.toISOString().slice(0, 7); // YYYY-MM\n    const month = participation.createdAt.getMonth();\n    const year = participation.createdAt.getFullYear();\n    const monthName = getMonthName(month);\n    \n    if (!monthlyData[monthKey]) {\n      monthlyData[monthKey] = {\n        month: monthName,\n        year,\n        participations: 0,\n        wins: 0,\n        amountSpent: 0,\n        totalWinnings: 0\n      };\n    }\n    \n    monthlyData[monthKey].participations++;\n    monthlyData[monthKey].amountSpent += parseFloat(participation.cost.toString());\n    \n    if (participation.isWinner) {\n      monthlyData[monthKey].wins++;\n      const prize = calculatePrize(participation.round.product, participation.sharesCount);\n      monthlyData[monthKey].totalWinnings += prize.amount;\n    }\n  }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":198,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":207,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[4744,4953],"text":"monthlyData[monthKey] ??= {\n        month: monthName,\n        year,\n        participations: 0,\n        wins: 0,\n        amountSpent: 0,\n        totalWinnings: 0\n      };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":198,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":198,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4749,4770],"text":"(Boolean(monthlyData[monthKey]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":198,"column":10,"nodeType":"MemberExpression","endLine":198,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":199,"column":7,"nodeType":"MemberExpression","endLine":199,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":209,"column":5,"nodeType":"MemberExpression","endLine":209,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":210,"column":5,"nodeType":"MemberExpression","endLine":210,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":213,"column":7,"nodeType":"MemberExpression","endLine":213,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":215,"column":7,"nodeType":"MemberExpression","endLine":215,"endColumn":28},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":224,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":224,"endColumn":27,"fix":{"range":[5475,5557],"text":"const whereConditions: any = {\n    userId,\n    round: {\n      isNot: null\n    }\n  };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5496,5499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5496,5499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":231,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":231,"endColumn":51,"fix":{"range":[5581,5609],"text":"{whereConditions.type = type;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":232,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":232,"endColumn":67,"fix":{"range":[5628,5676],"text":"{whereConditions.createdAt = { gte: dateFilter };}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6029,6032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6029,6032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":252,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":252,"endColumn":25,"fix":{"range":[6046,6749],"text":"for (const participation of participations) {\n    const category = getProductCategory(participation.round.product);\n    \n    if (!categoryData[category]) {\n      categoryData[category] = {\n        category,\n        participations: 0,\n        wins: 0,\n        winRate: 0,\n        totalSpent: 0,\n        totalWinnings: 0\n      };\n    }\n    \n    categoryData[category].participations++;\n    categoryData[category].totalSpent += parseFloat(participation.cost.toString());\n    \n    if (participation.isWinner) {\n      categoryData[category].wins++;\n      const prize = calculatePrize(participation.round.product, participation.sharesCount);\n      categoryData[category].totalWinnings += prize.amount;\n    }\n  }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":255,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":264,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[6167,6375],"text":"categoryData[category] ??= {\n        category,\n        participations: 0,\n        wins: 0,\n        winRate: 0,\n        totalSpent: 0,\n        totalWinnings: 0\n      };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":255,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":255,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6172,6194],"text":"(Boolean(categoryData[category]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":255,"column":10,"nodeType":"MemberExpression","endLine":255,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":256,"column":7,"nodeType":"MemberExpression","endLine":256,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":266,"column":5,"nodeType":"MemberExpression","endLine":266,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":267,"column":5,"nodeType":"MemberExpression","endLine":267,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":270,"column":7,"nodeType":"MemberExpression","endLine":270,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":272,"column":7,"nodeType":"MemberExpression","endLine":272,"endColumn":29},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":277,"column":31,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":277,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6807,6810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6807,6810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":286,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":286,"endColumn":27,"fix":{"range":[7043,7081],"text":"const whereConditions: any = { userId };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7064,7067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7064,7067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":287,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":287,"endColumn":67,"fix":{"range":[7100,7148],"text":"{whereConditions.createdAt = { gte: dateFilter };}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":305,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":305,"endColumn":25,"fix":{"range":[7524,7961],"text":"for (const participation of participations) {\n    const type = participation.type as 'paid' | 'free';\n    const prize = calculatePrize(participation.round.product, participation.sharesCount);\n    \n    typeData[type].participations++;\n    typeData[type].totalSpent += parseFloat(participation.cost.toString());\n    \n    if (participation.isWinner) {\n      typeData[type].wins++;\n      typeData[type].totalWinnings += prize.amount;\n    }\n  }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":309,"column":5,"nodeType":"MemberExpression","endLine":309,"endColumn":19},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":310,"column":5,"nodeType":"MemberExpression","endLine":310,"endColumn":19},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":313,"column":7,"nodeType":"MemberExpression","endLine":313,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":314,"column":7,"nodeType":"MemberExpression","endLine":314,"endColumn":21},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":319,"column":25,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":319,"endColumn":32,"fix":{"range":[7976,8161],"text":"for (const type of Object.keys(typeData)) {\n    const data = typeData[type as keyof typeof typeData];\n    data.winRate = data.participations > 0 ? data.wins / data.participations : 0;\n  }"}},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":329,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":329,"endColumn":27,"fix":{"range":[8296,8334],"text":"const whereConditions: any = { userId };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8317,8320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8317,8320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":330,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":330,"endColumn":51,"fix":{"range":[8357,8385],"text":"{whereConditions.type = type;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":331,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":331,"endColumn":67,"fix":{"range":[8404,8452],"text":"{whereConditions.createdAt = { gte: dateFilter };}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":347,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":347,"endColumn":25,"fix":{"range":[8748,8955],"text":"for (const participation of participations) {\n    const hour = participation.createdAt.getHours();\n    const day = participation.createdAt.getDay();\n    \n    hourlyPattern[hour]++;\n    dailyPattern[day]++;\n  }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":351,"column":5,"nodeType":"MemberExpression","endLine":351,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":352,"column":5,"nodeType":"MemberExpression","endLine":352,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":358,"column":22,"nodeType":"MemberExpression","endLine":358,"endColumn":39},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":381,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":381,"endColumn":27,"fix":{"range":[9882,9920],"text":"const whereConditions: any = { userId };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9903,9906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9903,9906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":382,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":382,"endColumn":51,"fix":{"range":[9943,9971],"text":"{whereConditions.type = type;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":446,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11381,11384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11381,11384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11710,11713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11710,11713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":457,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":457,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11731,11759],"text":"Boolean(product.categoryMultilingual)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":466,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":466,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12077,12095],"text":"(Boolean(categoryData[lang]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":466,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":466,"endColumn":62,"fix":{"range":[12077,12126],"text":"categoryData[lang]?.category"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":466,"column":13,"nodeType":"MemberExpression","endLine":466,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":466,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":466,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12099,12126],"text":"(Boolean(categoryData[lang].category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":466,"column":35,"nodeType":"MemberExpression","endLine":466,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":467,"column":18,"nodeType":"MemberExpression","endLine":467,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":471,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":471,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12222,12256],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":475,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":475,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12279,12295],"text":"(Boolean(product.category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":475,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":475,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12296,12298],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":483,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":483,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12475,12493],"text":"(months[monthIndex] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12475,12493],"text":"(months[monthIndex] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12475,12493],"text":"(Boolean(months[monthIndex]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":483,"column":10,"nodeType":"MemberExpression","endLine":483,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":483,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":483,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12494,12496],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":59,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":16,"fixableWarningCount":5,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '../../../../lib/prisma';\nimport { authenticateUser } from '../../../../lib/auth';\n\n// GET /api/lottery/statistics - 获取用户抽奖统计\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const authResult = await authenticateUser(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { success: false, error: '认证失败' },\n        { status: 401 }\n      );\n    }\n\n    const user = authResult.user;\n    const { searchParams } = new URL(request.url);\n    \n    // 解析查询参数\n    const period = searchParams.get('period') || 'all'; // 'week', 'month', 'year', 'all'\n    const type = searchParams.get('type') || 'all'; // 'paid', 'free', 'all'\n\n    // 构建时间筛选条件\n    const dateFilter = getDateFilter(period);\n\n    // 构建查询条件\n    let whereConditions: any = {\n      userId: user.id\n    };\n\n    if (type !== 'all') {\n      whereConditions.type = type;\n    }\n\n    if (dateFilter) {\n      whereConditions.createdAt = {\n        gte: dateFilter\n      };\n    }\n\n    // 基础统计\n    const [\n      totalParticipations,\n      totalWins,\n      totalAmountSpent,\n      winningRecords\n    ] = await Promise.all([\n      // 总参与次数\n      prisma.participations.count({\n        where: whereConditions\n      }),\n      \n      // 总中奖次数\n      prisma.participations.count({\n        where: {\n          ...whereConditions,\n          isWinner: true\n        }\n      }),\n      \n      // 总消费金额\n      prisma.participations.aggregate({\n        where: whereConditions,\n        _sum: {\n          cost: true\n        }\n      }),\n      \n      // 中奖记录详情（用于计算总奖金）\n      prisma.participations.findMany({\n        where: {\n          ...whereConditions,\n          isWinner: true\n        },\n        include: {\n          round: {\n            include: {\n              product: true\n            }\n          }\n        }\n      })\n    ]);\n\n    // 计算总奖金\n    const totalWinnings = winningRecords.reduce((sum, record) => {\n      const prize = calculatePrize(record.round.product, record.sharesCount);\n      return sum + prize.amount;\n    }, 0);\n\n    // 计算中奖率\n    const winRate = totalParticipations > 0 ? totalWins / totalParticipations : 0;\n\n    // 详细统计\n    const detailedStats = await getDetailedStatistics(user.id, period, type);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        // 基础统计\n        totalParticipations,\n        totalWins,\n        totalWinnings: parseFloat(totalWinnings.toFixed(2)),\n        totalAmountSpent: parseFloat((totalAmountSpent._sum.cost || 0).toFixed(2)),\n        winRate,\n        \n        // 详细统计\n        ...detailedStats,\n        \n        // 筛选条件\n        period,\n        type\n      }\n    });\n\n  } catch (error) {\n    console.error('获取抽奖统计失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// 获取详细统计信息\nasync function getDetailedStatistics(userId: string, period: string, type: string) {\n  const dateFilter = getDateFilter(period);\n  \n  let whereConditions: any = { userId };\n  if (type !== 'all') whereConditions.type = type;\n  if (dateFilter) whereConditions.createdAt = { gte: dateFilter };\n\n  // 按月份统计\n  const monthlyStats = await getMonthlyStatistics(userId, dateFilter, type);\n  \n  // 按商品类型统计\n  const categoryStats = await getCategoryStatistics(userId, dateFilter, type);\n  \n  // 按类型统计（付费/免费）\n  const typeStats = await getTypeStatistics(userId, dateFilter);\n  \n  // 参与模式分析\n  const participationPatterns = await getParticipationPatterns(userId, dateFilter, type);\n  \n  // 近期趋势\n  const recentTrends = await getRecentTrends(userId, dateFilter, type);\n\n  return {\n    monthlyStats,\n    categoryStats,\n    typeStats,\n    participationPatterns,\n    recentTrends\n  };\n}\n\n// 获取按月份统计\nasync function getMonthlyStatistics(userId: string, dateFilter: Date | null, type: string) {\n  const now = new Date();\n  const sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 5, 1);\n  const startDate = dateFilter || sixMonthsAgo;\n\n  let whereConditions: any = {\n    userId,\n    createdAt: {\n      gte: startDate\n    }\n  };\n\n  if (type !== 'all') {\n    whereConditions.type = type;\n  }\n\n  const participations = await prisma.participations.findMany({\n    where: whereConditions,\n    include: {\n      round: {\n        include: {\n          product: true\n        }\n      }\n    },\n    orderBy: {\n      createdAt: 'asc'\n    }\n  });\n\n  // 按月分组统计\n  const monthlyData: { [key: string]: any } = {};\n  \n  participations.forEach(participation => {\n    const monthKey = participation.createdAt.toISOString().slice(0, 7); // YYYY-MM\n    const month = participation.createdAt.getMonth();\n    const year = participation.createdAt.getFullYear();\n    const monthName = getMonthName(month);\n    \n    if (!monthlyData[monthKey]) {\n      monthlyData[monthKey] = {\n        month: monthName,\n        year,\n        participations: 0,\n        wins: 0,\n        amountSpent: 0,\n        totalWinnings: 0\n      };\n    }\n    \n    monthlyData[monthKey].participations++;\n    monthlyData[monthKey].amountSpent += parseFloat(participation.cost.toString());\n    \n    if (participation.isWinner) {\n      monthlyData[monthKey].wins++;\n      const prize = calculatePrize(participation.round.product, participation.sharesCount);\n      monthlyData[monthKey].totalWinnings += prize.amount;\n    }\n  });\n\n  return Object.values(monthlyData);\n}\n\n// 获取按商品类型统计\nasync function getCategoryStatistics(userId: string, dateFilter: Date | null, type: string) {\n  let whereConditions: any = {\n    userId,\n    round: {\n      isNot: null\n    }\n  };\n\n  if (type !== 'all') whereConditions.type = type;\n  if (dateFilter) whereConditions.createdAt = { gte: dateFilter };\n\n  const participations = await prisma.participations.findMany({\n    where: whereConditions,\n    include: {\n      round: {\n        include: {\n          product: {\n            select: {\n              category: true,\n              categoryMultilingual: true\n            }\n          }\n        }\n      }\n    }\n  });\n\n  const categoryData: { [key: string]: any } = {};\n  \n  participations.forEach(participation => {\n    const category = getProductCategory(participation.round.product);\n    \n    if (!categoryData[category]) {\n      categoryData[category] = {\n        category,\n        participations: 0,\n        wins: 0,\n        winRate: 0,\n        totalSpent: 0,\n        totalWinnings: 0\n      };\n    }\n    \n    categoryData[category].participations++;\n    categoryData[category].totalSpent += parseFloat(participation.cost.toString());\n    \n    if (participation.isWinner) {\n      categoryData[category].wins++;\n      const prize = calculatePrize(participation.round.product, participation.sharesCount);\n      categoryData[category].totalWinnings += prize.amount;\n    }\n  });\n\n  // 计算中奖率\n  Object.values(categoryData).forEach((data: any) => {\n    data.winRate = data.participations > 0 ? data.wins / data.participations : 0;\n  });\n\n  return Object.values(categoryData);\n}\n\n// 获取按类型统计（付费/免费）\nasync function getTypeStatistics(userId: string, dateFilter: Date | null) {\n  let whereConditions: any = { userId };\n  if (dateFilter) whereConditions.createdAt = { gte: dateFilter };\n\n  const participations = await prisma.participations.findMany({\n    where: whereConditions,\n    include: {\n      round: {\n        include: {\n          product: true\n        }\n      }\n    }\n  });\n\n  const typeData = {\n    paid: { participations: 0, wins: 0, totalSpent: 0, totalWinnings: 0 },\n    free: { participations: 0, wins: 0, totalSpent: 0, totalWinnings: 0 }\n  };\n\n  participations.forEach(participation => {\n    const type = participation.type as 'paid' | 'free';\n    const prize = calculatePrize(participation.round.product, participation.sharesCount);\n    \n    typeData[type].participations++;\n    typeData[type].totalSpent += parseFloat(participation.cost.toString());\n    \n    if (participation.isWinner) {\n      typeData[type].wins++;\n      typeData[type].totalWinnings += prize.amount;\n    }\n  });\n\n  // 计算中奖率\n  Object.keys(typeData).forEach(type => {\n    const data = typeData[type as keyof typeof typeData];\n    data.winRate = data.participations > 0 ? data.wins / data.participations : 0;\n  });\n\n  return typeData;\n}\n\n// 获取参与模式分析\nasync function getParticipationPatterns(userId: string, dateFilter: Date | null, type: string) {\n  let whereConditions: any = { userId };\n  if (type !== 'all') whereConditions.type = type;\n  if (dateFilter) whereConditions.createdAt = { gte: dateFilter };\n\n  const participations = await prisma.participations.findMany({\n    where: whereConditions,\n    include: {\n      round: true\n    },\n    orderBy: {\n      createdAt: 'asc'\n    }\n  });\n\n  // 分析参与时间模式\n  const hourlyPattern = new Array(24).fill(0);\n  const dailyPattern = new Array(7).fill(0);\n  \n  participations.forEach(participation => {\n    const hour = participation.createdAt.getHours();\n    const day = participation.createdAt.getDay();\n    \n    hourlyPattern[hour]++;\n    dailyPattern[day]++;\n  });\n\n  // 分析参与间隔\n  const intervals: number[] = [];\n  for (let i = 1; i < participations.length; i++) {\n    const interval = participations[i].createdAt.getTime() - participations[i-1].createdAt.getTime();\n    intervals.push(interval);\n  }\n\n  const avgInterval = intervals.length > 0 \n    ? intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length \n    : 0;\n\n  return {\n    hourlyPattern,\n    dailyPattern,\n    averageInterval: Math.floor(avgInterval / (1000 * 60 * 60)), // 转换为小时\n    totalSessions: participations.length,\n    mostActiveHour: hourlyPattern.indexOf(Math.max(...hourlyPattern)),\n    mostActiveDay: dailyPattern.indexOf(Math.max(...dailyPattern))\n  };\n}\n\n// 获取近期趋势\nasync function getRecentTrends(userId: string, dateFilter: Date | null, type: string) {\n  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n  const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n  let whereConditions: any = { userId };\n  if (type !== 'all') whereConditions.type = type;\n\n  const [\n    last30Days,\n    last7Days,\n    previous30Days\n  ] = await Promise.all([\n    // 最近30天\n    prisma.participations.count({\n      where: {\n        ...whereConditions,\n        createdAt: { gte: thirtyDaysAgo }\n      }\n    }),\n    \n    // 最近7天\n    prisma.participations.count({\n      where: {\n        ...whereConditions,\n        createdAt: { gte: sevenDaysAgo }\n      }\n    }),\n    \n    // 前30天\n    prisma.participations.count({\n      where: {\n        ...whereConditions,\n        createdAt: {\n          gte: new Date(thirtyDaysAgo.getTime() - 30 * 24 * 60 * 60 * 1000),\n          lt: thirtyDaysAgo\n        }\n      }\n    })\n  ]);\n\n  const growthRate = previous30Days > 0 \n    ? ((last30Days - previous30Days) / previous30Days) * 100 \n    : 0;\n\n  return {\n    last7Days,\n    last30Days,\n    previous30Days,\n    growthRate: parseFloat(growthRate.toFixed(2)),\n    trend: growthRate > 0 ? 'increasing' : growthRate < 0 ? 'decreasing' : 'stable'\n  };\n}\n\n// 辅助函数\nfunction getDateFilter(period: string): Date | null {\n  const now = new Date();\n  \n  switch (period) {\n    case 'week':\n      return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    case 'month':\n      return new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n    case 'year':\n      return new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n    default:\n      return null;\n  }\n}\n\nfunction calculatePrize(product: any, sharesCount: number): { amount: number } {\n  const pricePerShare = parseFloat(product.pricePerShare.toString());\n  const fixedPrize = 10;\n  const percentagePrize = pricePerShare * sharesCount * 0.1;\n  \n  return {\n    amount: parseFloat((fixedPrize + percentagePrize).toFixed(2))\n  };\n}\n\nfunction getProductCategory(product: any): string {\n  if (product.categoryMultilingual) {\n    try {\n      const categoryData = typeof product.categoryMultilingual === 'string' \n        ? JSON.parse(product.categoryMultilingual) \n        : product.categoryMultilingual;\n      \n      // 尝试获取多语言分类\n      const languages = ['zh-CN', 'zh', 'en', 'ru', 'tg'];\n      for (const lang of languages) {\n        if (categoryData[lang] && categoryData[lang].category) {\n          return categoryData[lang].category;\n        }\n      }\n    } catch (error) {\n      console.warn('解析多语言分类失败:', error);\n    }\n  }\n  \n  return product.category || '其他';\n}\n\nfunction getMonthName(monthIndex: number): string {\n  const months = [\n    '1月', '2月', '3月', '4月', '5月', '6月',\n    '7月', '8月', '9月', '10月', '11月', '12月'\n  ];\n  return months[monthIndex] || '未知';\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/user-participation/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":8,"column":65,"nodeType":"CallExpression","messageId":"substr","endLine":8,"endColumn":104,"fix":{"range":[375,386],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[541,579],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[541,579],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[541,579],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":16,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":16,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[580,582],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[611,644],"text":"(request.headers.get('user-agent') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[611,644],"text":"(request.headers.get('user-agent') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[611,644],"text":"(Boolean(request.headers.get('user-agent')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[645,647],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[735,748],"text":"(user?.userId) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[736,748],"text":"((user?.userId) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[735,748],"text":"!Boolean((user?.userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":32,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1017,1024],"text":"roundId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1017,1024],"text":"roundId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1017,1024],"text":"Boolean(roundId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1743,1746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1743,1746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2036,2065],"text":"Boolean(error.message.includes('未授权'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":76,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":76,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2138,2169],"text":"Boolean(error.message.includes('用户不存在'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":169,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":169,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4446,4448],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":230,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":230,"endColumn":25,"fix":{"range":[5558,6384],"text":"for (const participation of participations) {\n    const roundId = participation.roundId;\n    const existing = roundStats.get(roundId) || {\n      roundId,\n      totalShares: participation.round.totalShares,\n      soldShares: participation.round.soldShares,\n      status: participation.round.status,\n      product: participation.round.product,\n      userShares: 0,\n      totalCost: 0,\n      isWinner: false,\n      winProbability: 0\n    };\n\n    existing.userShares += participation.sharesCount;\n    existing.totalCost += Number(participation.cost);\n    if (participation.isWinner) {\n      existing.isWinner = true;\n    }\n\n    roundStats.set(roundId, existing);\n    \n    totalParticipations += participation.sharesCount;\n    totalSpent += Number(participation.cost);\n    if (participation.isWinner) {\n      totalWins += 1;\n    }\n  }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":232,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":232,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5664,5687],"text":"(Boolean(roundStats.get(roundId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5688,5690],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":260,"column":14,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":260,"endColumn":21,"fix":{"range":[6408,6569],"text":"for (const [roundId, stats] of roundStats.entries()) {\n    stats.winProbability = stats.totalShares > 0 \n      ? (stats.userShares / stats.totalShares) * 100 \n      : 0;\n  }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'roundId' is defined but never used. Allowed unused args must match /^_/u.","line":260,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":260,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'roundId' is defined but never used. Allowed unused args must match /^_/u.","line":260,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":280,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":280,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7004,7031],"text":"(Boolean((p.round.product.images?.[0])))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":280,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":280,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7032,7034],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":2,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getLogger } from '@/lib/logger';\nimport { getUserFromRequest } from '@/lib/auth';\n\nconst handleUserParticipation = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `lottery_user_participation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const startTime = Date.now();\n\n  let decoded: { userId: string } | null = null;\n\n  try {\n    logger.info('获取用户参与信息请求', {\n      requestId,\n      ip: request.headers.get('x-forwarded-for') || 'unknown',\n      userAgent: request.headers.get('user-agent') || 'unknown'\n    });\n\n    // 验证用户身份\n    const user = getUserFromRequest(request);\n    if (!user?.userId) {\n      return NextResponse.json({ error: '未授权访问' }, { status: 401 });\n    }\n    decoded = { userId: user.userId };\n\n    // 获取查询参数\n    const { searchParams } = new URL(request.url);\n    const roundId = searchParams.get('roundId');\n\n    // 如果指定了roundId，查询特定期次\n    if (roundId) {\n      const result = await getRoundParticipation(decoded.userId, roundId);\n      logger.info('获取特定期次参与信息成功', {\n        requestId,\n        userId: decoded.userId,\n        roundId,\n        executionTime: Date.now() - startTime\n      });\n      return NextResponse.json({\n        success: true,\n        data: result\n      });\n    }\n\n    // 如果没有指定roundId，查询用户所有参与信息\n    const result = await getAllParticipations(decoded.userId);\n    \n    logger.info('获取所有参与信息成功', {\n      requestId,\n      userId: decoded.userId,\n      participationCount: result.participations.length,\n      executionTime: Date.now() - startTime\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error: any) {\n    logger.error('获取用户参与信息失败', error, {\n      requestId,\n      userId: decoded?.userId,\n      roundId: searchParams?.get('roundId'),\n      error: error.message,\n      executionTime: Date.now() - startTime\n    });\n\n    let statusCode = 500;\n    let errorMessage = '获取用户参与信息失败';\n\n    if (error.message.includes('未授权')) {\n      statusCode = 401;\n      errorMessage = '未授权访问';\n    } else if (error.message.includes('用户不存在')) {\n      statusCode = 404;\n      errorMessage = '用户不存在';\n    }\n\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: statusCode }\n    );\n  }\n};\n\n// 获取特定期次的用户参与信息\nasync function getRoundParticipation(userId: string, roundId: string) {\n  // 1. 获取期次信息\n  const round = await prisma.lotteryRounds.findUnique({\n    where: { id: roundId },\n    select: {\n      id: true,\n      totalShares: true,\n      soldShares: true,\n      pricePerShare: true,\n      status: true,\n      product: {\n        select: {\n          id: true,\n          name: true\n        }\n      }\n    }\n  });\n\n  if (!round) {\n    throw new Error('期次不存在');\n  }\n\n  // 2. 获取用户的参与记录\n  const participations = await prisma.participations.findMany({\n    where: {\n      userId: userId,\n      roundId: roundId\n    },\n    select: {\n      id: true,\n      sharesCount: true,\n      numbers: true,\n      cost: true,\n      isWinner: true,\n      createdAt: true,\n      type: true\n    },\n    orderBy: {\n      createdAt: 'desc'\n    }\n  });\n\n  // 3. 计算用户总参与信息\n  const totalSharesCount = participations.reduce((sum, p) => sum + p.sharesCount, 0);\n  const totalCost = participations.reduce((sum, p) => sum + Number(p.cost), 0);\n  const winProbability = round.totalShares > 0 ? (totalSharesCount / round.totalShares) * 100 : 0;\n\n  // 4. 获取用户幸运币余额\n  const user = await prisma.users.findUnique({\n    where: { id: userId },\n    select: { luckyCoins: true }\n  });\n\n  return {\n    roundId: round.id,\n    roundNumber: 1, // 这里应该从round中获取，如果schema中有的话\n    productId: round.product.id,\n    productName: round.product.name,\n    totalShares: round.totalShares,\n    soldShares: round.soldShares,\n    pricePerShare: round.pricePerShare,\n    status: round.status,\n    userParticipation: {\n      sharesCount: totalSharesCount,\n      totalCost: totalCost,\n      participations: participations.map(p => ({\n        id: p.id,\n        sharesCount: p.sharesCount,\n        numbers: p.numbers,\n        cost: p.cost,\n        isWinner: p.isWinner,\n        createdAt: p.createdAt,\n        type: p.type\n      })),\n      winProbability: winProbability,\n      availableNumbers: Array.from({ length: 100 }, (_, i) => i + 1).filter(\n        num => !participations.some(p => p.numbers.includes(num))\n      )\n    },\n    coinBalance: user?.luckyCoins || 0\n  };\n}\n\n// 获取用户所有参与信息\nasync function getAllParticipations(userId: string) {\n  // 1. 获取用户基本信息\n  const user = await prisma.users.findUnique({\n    where: { id: userId },\n    select: {\n      luckyCoins: true,\n      totalSpent: true\n    }\n  });\n\n  if (!user) {\n    throw new Error('用户不存在');\n  }\n\n  // 2. 获取用户所有参与记录\n  const participations = await prisma.participations.findMany({\n    where: {\n      userId: userId\n    },\n    select: {\n      id: true,\n      roundId: true,\n      productId: true,\n      sharesCount: true,\n      numbers: true,\n      cost: true,\n      isWinner: true,\n      createdAt: true,\n      type: true,\n      round: {\n        select: {\n          totalShares: true,\n          soldShares: true,\n          status: true,\n          product: {\n            select: {\n              id: true,\n              name: true,\n              images: true\n            }\n          }\n        }\n      }\n    },\n    orderBy: {\n      createdAt: 'desc'\n    },\n    take: 50 // 限制返回最近50条记录\n  });\n\n  // 3. 按期次分组统计\n  const roundStats = new Map();\n  let totalParticipations = 0;\n  let totalSpent = 0;\n  let totalWins = 0;\n\n  participations.forEach(participation => {\n    const roundId = participation.roundId;\n    const existing = roundStats.get(roundId) || {\n      roundId,\n      totalShares: participation.round.totalShares,\n      soldShares: participation.round.soldShares,\n      status: participation.round.status,\n      product: participation.round.product,\n      userShares: 0,\n      totalCost: 0,\n      isWinner: false,\n      winProbability: 0\n    };\n\n    existing.userShares += participation.sharesCount;\n    existing.totalCost += Number(participation.cost);\n    if (participation.isWinner) {\n      existing.isWinner = true;\n    }\n\n    roundStats.set(roundId, existing);\n    \n    totalParticipations += participation.sharesCount;\n    totalSpent += Number(participation.cost);\n    if (participation.isWinner) {\n      totalWins += 1;\n    }\n  });\n\n  // 4. 计算每个期次的中奖概率\n  roundStats.forEach((stats, roundId) => {\n    stats.winProbability = stats.totalShares > 0 \n      ? (stats.userShares / stats.totalShares) * 100 \n      : 0;\n  });\n\n  return {\n    userStats: {\n      totalParticipations,\n      totalSpent,\n      totalWins,\n      winRate: participations.length > 0 ? (totalWins / participations.length) * 100 : 0\n    },\n    coinBalance: user.luckyCoins,\n    totalSpent: user.totalSpent,\n    participations: participations.map(p => ({\n      id: p.id,\n      roundId: p.roundId,\n      productId: p.productId,\n      productName: p.round.product.name,\n      productImage: p.round.product.images?.[0] || null,\n      sharesCount: p.sharesCount,\n      numbers: p.numbers,\n      cost: p.cost,\n      isWinner: p.isWinner,\n      createdAt: p.createdAt,\n      type: p.type,\n      roundStatus: p.round.status,\n      userWinProbability: p.round.totalShares > 0 \n        ? (p.sharesCount / p.round.totalShares) * 100 \n        : 0\n    })),\n    roundStats: Array.from(roundStats.values()).sort((a, b) => \n      b.userShares - a.userShares\n    )\n  };\n}\n\n// 导出主处理函数\nexport { handleUserParticipation as GET };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/lottery/wins/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":10,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":10,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[335,353],"text":"(Boolean(authResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":21,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[602,626],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[602,626],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[602,626],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[627,629],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":37,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[676,701],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[676,701],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[676,701],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[702,704],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[780,806],"text":"(searchParams.get('period') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[780,806],"text":"(searchParams.get('period') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[780,806],"text":"(Boolean(searchParams.get('period')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[807,809],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":43,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":43,"endColumn":29,"fix":{"range":[1331,1410],"text":"const whereConditions: any = {\n      userId: user.id,\n      isWinner: true\n    };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1352,1355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1352,1355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":107,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":107,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2905,2919],"text":"(Boolean(product.images))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":109,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":109,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":119,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":119,"endColumn":48,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3568,3569],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4148,4182],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":159,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":159,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4468,4486],"text":"(Boolean(authResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":170,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":170,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4748,4763],"text":"(Boolean(participationId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":233,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":233,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6197,6231],"text":"(Boolean(participation.round.product.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":233,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":233,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6232,6234],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6553,6585],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6740,6743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6740,6743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalShares' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":265,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":265,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalShares' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":265,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'roundNumber' is defined but never used. Allowed unused args must match /^_/u.","line":281,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":281,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'roundNumber' is defined but never used. Allowed unused args must match /^_/u.","line":281,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":57},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":282,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":282,"endColumn":44,"fix":{"range":[7498,7515],"text":"{return 'jackpot';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":283,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":283,"endColumn":41,"fix":{"range":[7547,7562],"text":"{return 'major';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":284,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":284,"endColumn":42,"fix":{"range":[7594,7610],"text":"{return 'medium';}"}},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":305,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":305,"endColumn":27,"fix":{"range":[8152,8216],"text":"const whereConditions: any = {\n    userId,\n    isWinner: true\n  };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8173,8176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8173,8176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":346,"column":8,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":346,"endColumn":15,"fix":{"range":[8958,9194],"text":"for (const win of wins) {\n    const prize = calculatePrize(win.round.product, win.sharesCount);\n    const period = getPrizePeriod(prize.amount, win.round.roundNumber);\n    prizeDistribution[period as keyof typeof prizeDistribution]++;\n  }"}},{"ruleId":"complexity","severity":2,"message":"Function 'getMultilingualProductName' has a complexity of 11. Maximum allowed is 10.","line":363,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":391,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9539,9542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9539,9542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":364,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":364,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9560,9584],"text":"Boolean(product.nameMultilingual)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":373,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":373,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9874,9888],"text":"(Boolean(nameData[lang]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":373,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":373,"endColumn":50,"fix":{"range":[9874,9911],"text":"nameData[lang]?.name"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":373,"column":13,"nodeType":"MemberExpression","endLine":373,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":373,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":373,"endColumn":50,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9892,9911],"text":"(Boolean(nameData[lang].name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":373,"column":31,"nodeType":"MemberExpression","endLine":373,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":374,"column":18,"nodeType":"MemberExpression","endLine":374,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":378,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":379,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10056,10104],"text":"Boolean((value && typeof value === 'object' && value.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[10043,10043],"text":": boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":378,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10039,10042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10039,10042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":379,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":379,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10056,10061],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10116,10119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10116,10119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":382,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":382,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10138,10147],"text":"Boolean(firstName)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10218,10252],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":390,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":390,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10273,10287],"text":"(Boolean(product.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":390,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":390,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10273,10305],"text":"(product.nameZh ?? product.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":390,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":390,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10291,10305],"text":"(Boolean(product.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":390,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":390,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10291,10323],"text":"(product.nameEn ?? product.nameRu)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":390,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":390,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10309,10323],"text":"(Boolean(product.nameRu))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":390,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":390,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10324,10326],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":6,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '../../../../lib/prisma';\nimport { authenticateUser } from '../../../../lib/auth';\n\n// GET /api/lottery/wins - 获取中奖记录\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const authResult = await authenticateUser(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { success: false, error: '认证失败' },\n        { status: 401 }\n      );\n    }\n\n    const user = authResult.user;\n    const { searchParams } = new URL(request.url);\n    \n    // 解析查询参数\n    const page = parseInt(searchParams.get('page') || '1', 10);\n    const limit = Math.min(parseInt(searchParams.get('limit') || '20', 10), 100);\n    const offset = (page - 1) * limit;\n    const period = searchParams.get('period') || 'all'; // 'week', 'month', 'year', 'all'\n\n    // 构建时间筛选条件\n    let dateFilter: Date | undefined;\n    const now = new Date();\n    \n    switch (period) {\n      case 'week':\n        dateFilter = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        dateFilter = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n        break;\n      case 'year':\n        dateFilter = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n        break;\n    }\n\n    // 构建查询条件\n    let whereConditions: any = {\n      userId: user.id,\n      isWinner: true\n    };\n\n    if (dateFilter) {\n      whereConditions.round = {\n        ...whereConditions.round,\n        drawTime: {\n          gte: dateFilter\n        }\n      };\n    }\n\n    // 获取中奖记录总数\n    const totalCount = await prisma.participations.count({\n      where: whereConditions\n    });\n\n    // 获取中奖记录\n    const winningParticipations = await prisma.participations.findMany({\n      where: whereConditions,\n      include: {\n        round: {\n          include: {\n            product: {\n              select: {\n                id: true,\n                nameMultilingual: true,\n                nameZh: true,\n                nameEn: true,\n                nameRu: true,\n                images: true,\n                totalShares: true,\n                pricePerShare: true,\n                marketPrice: true\n              }\n            }\n          }\n        }\n      },\n      orderBy: {\n        round: {\n          drawTime: 'desc'\n        }\n      },\n      skip: offset,\n      take: limit\n    });\n\n    // 转换数据格式\n    const wins = winningParticipations.map(participation => {\n      const product = participation.round.product;\n      const productName = getMultilingualProductName(product);\n      \n      // 计算奖金（可以是固定金额或基于商品价值）\n      const prize = calculatePrize(product, participation.sharesCount);\n      \n      return {\n        id: participation.id,\n        participationId: participation.id,\n        roundId: participation.roundId,\n        productId: participation.productId,\n        productName,\n        productImage: product.images && product.images.length > 0 ? product.images[0] : undefined,\n        roundNumber: participation.round.roundNumber,\n        winningNumber: participation.round.winningNumber!,\n        prize: prize.amount,\n        prizeType: prize.type,\n        prizeDescription: prize.description,\n        claimStatus: participation.id, // 这里可以根据实际需求计算领奖状态\n        claimedAt: null, // 领奖时间，暂无此字段\n        numbers: participation.numbers,\n        sharesCount: participation.sharesCount,\n        participationCost: parseFloat(participation.cost.toString()),\n        participationTime: participation.createdAt.toISOString(),\n        drawTime: participation.round.drawTime!.toISOString(),\n        period: getPrizePeriod(prize.amount, participation.round.roundNumber)\n      };\n    });\n\n    // 计算统计数据\n    const stats = await calculateWinStatistics(user.id, period);\n\n    // 计算是否还有更多数据\n    const hasMore = offset + wins.length < totalCount;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        wins,\n        statistics: stats,\n        pagination: {\n          page,\n          limit,\n          total: totalCount,\n          hasMore,\n          totalPages: Math.ceil(totalCount / limit)\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('获取中奖记录失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/lottery/wins/claim - 申请领奖\nexport async function POST(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const authResult = await authenticateUser(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { success: false, error: '认证失败' },\n        { status: 401 }\n      );\n    }\n\n    const user = authResult.user;\n    const body = await request.json();\n    const { participationId, claimType = 'wallet' } = body;\n\n    if (!participationId) {\n      return NextResponse.json(\n        { success: false, error: '参与记录ID不能为空' },\n        { status: 400 }\n      );\n    }\n\n    // 检查参与记录是否存在且用户有权限\n    const participation = await prisma.participations.findFirst({\n      where: {\n        id: participationId,\n        userId: user.id,\n        isWinner: true\n      },\n      include: {\n        round: {\n          include: {\n            product: true\n          }\n        }\n      }\n    });\n\n    if (!participation) {\n      return NextResponse.json(\n        { success: false, error: '中奖记录不存在或无权限' },\n        { status: 404 }\n      );\n    }\n\n    // 检查是否已经领奖（这里需要添加领奖状态字段）\n    // const existingClaim = await prisma.claimRequests.findFirst({\n    //   where: { participationId }\n    // });\n    // \n    // if (existingClaim) {\n    //   return NextResponse.json(\n    //     { success: false, error: '已经申请过领奖' },\n    //     { status: 400 }\n    //   );\n    // }\n\n    // 创建领奖申请\n    const prize = calculatePrize(participation.round.product, participation.sharesCount);\n    \n    // 这里可以创建一个claim_requests记录，或者直接处理领奖逻辑\n    // 简化处理，直接更新余额\n    await prisma.users.update({\n      where: { id: user.id },\n      data: {\n        balance: {\n          increment: prize.amount\n        }\n      }\n    });\n\n    // 记录交易\n    await prisma.transactions.create({\n      data: {\n        userId: user.id,\n        type: 'lottery_win',\n        amount: prize.amount,\n        balanceType: 'main',\n        description: `中奖奖金 - ${participation.round.product.nameZh || '未知商品'}第${participation.round.roundNumber}期`,\n        createdAt: new Date()\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        claimId: participationId,\n        prize: prize.amount,\n        claimType,\n        message: '领奖申请已提交，奖金已发放到余额'\n      }\n    });\n\n  } catch (error) {\n    console.error('申请领奖失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// 计算奖金的辅助函数\nfunction calculatePrize(product: any, sharesCount: number): { amount: number; type: string; description: string } {\n  // 奖金策略：\n  // 1. 固定奖金：每期固定奖金\n  // 2. 比例奖金：基于商品价格的百分比\n  // 3. 递增奖金：基于参与期数的递增奖金\n  \n  const pricePerShare = parseFloat(product.pricePerShare.toString());\n  const totalShares = product.totalShares;\n  \n  // 示例策略：固定奖金 + 比例奖金\n  const fixedPrize = 10; // 固定奖金 10 TJS\n  const percentagePrize = pricePerShare * sharesCount * 0.1; // 10% 的商品价值\n  \n  const totalPrize = fixedPrize + percentagePrize;\n  \n  return {\n    amount: parseFloat(totalPrize.toFixed(2)),\n    type: 'mixed',\n    description: `固定奖金 ${fixedPrize}TJS + 比例奖金 ${percentagePrize.toFixed(2)}TJS`\n  };\n}\n\n// 获取奖金档次的辅助函数\nfunction getPrizePeriod(prizeAmount: number, roundNumber: number): string {\n  if (prizeAmount >= 100) return 'jackpot'; // 大奖\n  if (prizeAmount >= 50) return 'major'; // 大奖\n  if (prizeAmount >= 20) return 'medium'; // 中奖\n  return 'minor'; // 小奖\n}\n\n// 计算中奖统计数据的辅助函数\nasync function calculateWinStatistics(userId: string, period: string) {\n  const now = new Date();\n  let dateFilter: Date | undefined;\n  \n  switch (period) {\n    case 'week':\n      dateFilter = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      break;\n    case 'month':\n      dateFilter = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n      break;\n    case 'year':\n      dateFilter = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n      break;\n  }\n\n  let whereConditions: any = {\n    userId,\n    isWinner: true\n  };\n\n  if (dateFilter) {\n    whereConditions.round = {\n      ...whereConditions.round,\n      drawTime: {\n        gte: dateFilter\n      }\n    };\n  }\n\n  const wins = await prisma.participations.findMany({\n    where: whereConditions,\n    include: {\n      round: {\n        include: {\n          product: true\n        }\n      }\n    }\n  });\n\n  const totalWins = wins.length;\n  const totalPrize = wins.reduce((sum, win) => {\n    const prize = calculatePrize(win.round.product, win.sharesCount);\n    return sum + prize.amount;\n  }, 0);\n\n  const averagePrize = totalWins > 0 ? totalPrize / totalWins : 0;\n\n  // 按档次统计\n  const prizeDistribution = {\n    jackpot: 0, // >= 100\n    major: 0,   // 50-99\n    medium: 0,  // 20-49\n    minor: 0    // < 20\n  };\n\n  wins.forEach(win => {\n    const prize = calculatePrize(win.round.product, win.sharesCount);\n    const period = getPrizePeriod(prize.amount, win.round.roundNumber);\n    prizeDistribution[period as keyof typeof prizeDistribution]++;\n  });\n\n  return {\n    totalWins,\n    totalPrize: parseFloat(totalPrize.toFixed(2)),\n    averagePrize: parseFloat(averagePrize.toFixed(2)),\n    maxPrize: Math.max(...wins.map(win => calculatePrize(win.round.product, win.sharesCount).amount), 0),\n    prizeDistribution,\n    period\n  };\n}\n\n// 获取多语言商品名称的辅助函数\nfunction getMultilingualProductName(product: any): string {\n  if (product.nameMultilingual) {\n    try {\n      const nameData = typeof product.nameMultilingual === 'string' \n        ? JSON.parse(product.nameMultilingual) \n        : product.nameMultilingual;\n      \n      const languages = ['zh-CN', 'zh', 'en', 'ru', 'tg'];\n      \n      for (const lang of languages) {\n        if (nameData[lang] && nameData[lang].name) {\n          return nameData[lang].name;\n        }\n      }\n      \n      const firstName = Object.values(nameData).find((value: any) => \n        value && typeof value === 'object' && value.name\n      ) as any;\n      \n      if (firstName) {\n        return firstName.name;\n      }\n    } catch (error) {\n      console.warn('解析多语言名称失败:', error);\n    }\n  }\n\n  return product.nameZh || product.nameEn || product.nameRu || '未知商品';\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/monitoring/health/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":33,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1223,1254],"text":"(process.env.npm_package_version != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1223,1254],"text":"(process.env.npm_package_version ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1223,1254],"text":"(Boolean(process.env.npm_package_version))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1255,1257],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { withErrorHandling } from '../../../lib/middleware';\nimport { createRequestTracker } from '@/lib/request-tracker';\nimport { getLogger } from '@/lib/logger';\nimport { getMonitor } from '@/lib/monitoring';\nimport { respond } from '@/lib/responses';\n\n// 获取系统健康状态\nexport const GET = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const monitor = getMonitor();\n  const requestId = tracker.getRequestId();\n\n  logger.logRequest(req, { requestId, traceId: tracker.getTraceId() });\n\n  try {\n    const health = monitor.getSystemHealth();\n    const monitoringReport = monitor.getMonitoringReport();\n\n    const statusCode = health.status === 'healthy' ? 200 : \n                      health.status === 'degraded' ? 200 : 503;\n\n    return NextResponse.json(\n      respond.success({\n        status: health.status,\n        timestamp: new Date().toISOString(),\n        uptime: health.uptime,\n        metrics: health.metrics,\n        alerts: monitoringReport.activeAlerts.length,\n        performance: monitoringReport.performanceMetrics,\n        environment: process.env.NODE_ENV,\n        version: process.env.npm_package_version || '1.0.0',\n      }, requestId).toJSON(),\n      { status: statusCode }\n    );\n\n  } catch (error) {\n    logger.error('Health check failed', error as Error, { requestId });\n    \n    return NextResponse.json(\n      respond.serverError('健康检查失败', { error: (error as Error).message }).toJSON(),\n      { status: 503 }\n    );\n  }\n});\n\n// 详细的系统监控信息\nexport const POST = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const monitor = getMonitor();\n  const requestId = tracker.getRequestId();\n\n  logger.logRequest(req, { requestId, traceId: tracker.getTraceId() });\n\n  try {\n    const { action } = await req.json();\n\n    switch (action) {\n      case 'metrics':\n        const report = monitor.getMonitoringReport();\n        return NextResponse.json(\n          respond.success(report, requestId).toJSON()\n        );\n\n      case 'reset':\n        monitor.reset();\n        logger.info('Monitoring data reset', { requestId });\n        return NextResponse.json(\n          respond.success({ message: '监控数据已重置' }, requestId).toJSON()\n        );\n\n      case 'alerts':\n        const activeAlerts = monitor.getMonitoringReport().activeAlerts;\n        return NextResponse.json(\n          respond.success(activeAlerts, requestId).toJSON()\n        );\n\n      default:\n        return NextResponse.json(\n          respond.validationError('未知的操作类型', 'action', action).toJSON(),\n          { status: 400 }\n        );\n    }\n\n  } catch (error) {\n    logger.error('Monitoring action failed', error as Error, { requestId });\n    throw error;\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/monitoring/logs/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[884,909],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[884,909],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[884,909],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[910,912],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":38,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":38,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1029,1034],"text":"level != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1029,1034],"text":"level ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1029,1034],"text":"Boolean(level)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":43,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1120,1125],"text":"since != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1120,1125],"text":"since ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1120,1125],"text":"Boolean(since)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":58,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":58,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1548,1553],"text":"(level != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1548,1553],"text":"(level ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1548,1553],"text":"(Boolean(level))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":58,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":58,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1554,1556],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":60,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1598,1603],"text":"(since != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1598,1603],"text":"(since ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1598,1603],"text":"(Boolean(since))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":60,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":60,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1604,1606],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":83,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":83,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2184,2189],"text":"(Boolean(level))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":83,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":83,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2194,2201],"text":"(Boolean(message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":91,"column":32,"nodeType":"CallExpression","messageId":"substr","endLine":91,"endColumn":71,"fix":{"range":[2426,2437],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":96,"column":16,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":96,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2571,2578],"text":"(Boolean(context))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":96,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":96,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2579,2581],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":137,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":137,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3562,3571],"text":"olderThan != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3562,3571],"text":"olderThan ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3562,3571],"text":"Boolean(olderThan)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { withErrorHandling } from '@/lib/middleware';\nimport { createRequestTracker } from '@/lib/request-tracker';\nimport { getLogger } from '@/lib/logger';\nimport { respond } from '@/lib/responses';\n\n// 模拟日志存储（在实际项目中应该使用外部存储）\ninterface LogEntry {\n  id: string;\n  timestamp: string;\n  level: string;\n  type: string;\n  message: string;\n  context: any;\n  requestId?: string;\n  traceId?: string;\n}\n\nlet errorLogs: LogEntry[] = [];\n\n// 获取错误日志\nexport const GET = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const requestId = tracker.getRequestId();\n\n  logger.logRequest(req, { requestId, traceId: tracker.getTraceId() });\n\n  try {\n    const { searchParams } = new URL(req.url);\n    const level = searchParams.get('level');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const since = searchParams.get('since'); // ISO时间戳\n\n    let logs = [...errorLogs];\n\n    // 按级别过滤\n    if (level) {\n      logs = logs.filter(log => log.level === level);\n    }\n\n    // 按时间过滤\n    if (since) {\n      const sinceTime = new Date(since).getTime();\n      logs = logs.filter(log => new Date(log.timestamp).getTime() > sinceTime);\n    }\n\n    // 按时间排序并限制数量\n    logs = logs\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n\n    return NextResponse.json(\n      respond.success({\n        logs,\n        total: logs.length,\n        filtered: {\n          level: level || 'all',\n          limit,\n          since: since || null,\n        },\n        timestamp: new Date().toISOString(),\n      }, requestId).toJSON()\n    );\n\n  } catch (error) {\n    logger.error('Failed to fetch error logs', error as Error, { requestId });\n    throw error;\n  }\n});\n\n// 添加错误日志（用于测试）\nexport const POST = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const requestId = tracker.getRequestId();\n\n  logger.logRequest(req, { requestId, traceId: tracker.getTraceId() });\n\n  try {\n    const { level, message, context } = await req.json();\n\n    if (!level || !message) {\n      return NextResponse.json(\n        respond.validationError('缺少必要参数', null).toJSON(),\n        { status: 400 }\n      );\n    }\n\n    const logEntry: LogEntry = {\n      id: `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n      level: level.toLowerCase(),\n      type: 'manual',\n      message,\n      context: context || {},\n      requestId,\n      traceId: tracker.getTraceId(),\n    };\n\n    errorLogs.push(logEntry);\n\n    // 保持日志数量限制（最多1000条）\n    if (errorLogs.length > 1000) {\n      errorLogs = errorLogs.slice(-1000);\n    }\n\n    logger.info('Error log added manually', { level, message, requestId });\n\n    return NextResponse.json(\n      respond.success({\n        message: '错误日志已添加',\n        logId: logEntry.id,\n      }, requestId).toJSON()\n    );\n\n  } catch (error) {\n    logger.error('Failed to add error log', error as Error, { requestId });\n    throw error;\n  }\n});\n\n// 清除错误日志\nexport const DELETE = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const requestId = tracker.getRequestId();\n\n  logger.logRequest(req, { requestId, traceId: tracker.getTraceId() });\n\n  try {\n    const { searchParams } = new URL(req.url);\n    const olderThan = searchParams.get('older_than'); // ISO时间戳\n\n    let deletedCount = 0;\n\n    if (olderThan) {\n      const cutoffTime = new Date(olderThan).getTime();\n      const originalLength = errorLogs.length;\n      errorLogs = errorLogs.filter(log => new Date(log.timestamp).getTime() > cutoffTime);\n      deletedCount = originalLength - errorLogs.length;\n    } else {\n      deletedCount = errorLogs.length;\n      errorLogs = [];\n    }\n\n    logger.info('Error logs cleared', { deletedCount, requestId });\n\n    return NextResponse.json(\n      respond.success({\n        message: `${deletedCount} 条错误日志已清除`,\n        deletedCount,\n        remainingCount: errorLogs.length,\n      }, requestId).toJSON()\n    );\n\n  } catch (error) {\n    logger.error('Failed to clear error logs', error as Error, { requestId });\n    throw error;\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/notifications/subscribe/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":15,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":15,"endColumn":60},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":24,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":24,"endColumn":48,"fix":{"range":[480,519],"text":"!subscription?.endpoint"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[481,493],"text":"(Boolean(subscription))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":24,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[498,519],"text":"(Boolean(subscription.endpoint))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":32,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":34,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[664,738],"text":"global.subscriptions ??= new Map();"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":40,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":40,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[888,897],"text":"(Boolean(userAgent))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[898,900],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":41,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":41,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[929,938],"text":"(Boolean(timestamp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":41,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":41,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[939,941],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1045,1091],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1249,1281],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\n// 保存订阅信息到全局存储\ninterface Subscription {\n  endpoint: string;\n  keys: {\n    p256dh: string;\n    auth: string;\n  };\n  userAgent?: string;\n  timestamp?: number;\n}\n\ndeclare global {\n  var subscriptions: Map<string, Subscription> | undefined;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { subscription, userAgent, timestamp } = body;\n    \n    // 验证订阅信息\n    if (!subscription || !subscription.endpoint) {\n      return NextResponse.json({\n        success: false,\n        error: '无效的订阅信息'\n      }, { status: 400 });\n    }\n    \n    // 初始化全局订阅存储\n    if (!global.subscriptions) {\n      global.subscriptions = new Map();\n    }\n    \n    // 保存订阅\n    const subscriptionData: Subscription = {\n      endpoint: subscription.endpoint,\n      keys: subscription.keys,\n      userAgent: userAgent || 'unknown',\n      timestamp: timestamp || Date.now()\n    };\n    \n    global.subscriptions.set(subscription.endpoint, subscriptionData);\n    \n    console.log('订阅保存成功:', subscription.endpoint);\n    \n    return NextResponse.json({\n      success: true,\n      message: '订阅保存成功',\n      endpoint: subscription.endpoint\n    });\n    \n  } catch (error) {\n    console.error('保存订阅失败:', error);\n    return NextResponse.json({\n      success: false,\n      error: '保存订阅失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/notifications/test/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":9,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[245,260],"text":"(vapidPublicKey == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[246,260],"text":"(vapidPublicKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[245,260],"text":"(!Boolean(vapidPublicKey))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":9,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[264,280],"text":"(vapidPrivateKey == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[265,280],"text":"(vapidPrivateKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[264,280],"text":"(!Boolean(vapidPrivateKey))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":26,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":26,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[867,870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[867,870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 16. Maximum allowed is 10.","line":46,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":128,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":51,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":51,"endColumn":48,"fix":{"range":[1163,1202],"text":"!subscription?.endpoint"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":51,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1164,1176],"text":"(Boolean(subscription))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":51,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":51,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1181,1202],"text":"(Boolean(subscription.endpoint))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1454,1458],"text":"(icon != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1454,1458],"text":"(icon ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1454,1458],"text":"(Boolean(icon))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":62,"column":18,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":62,"endColumn":20,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1459,1461],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1502,1507],"text":"(badge != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1502,1507],"text":"(badge ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1502,1507],"text":"(Boolean(badge))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1508,1510],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":65,"column":14,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":65,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1563,1572],"text":"((data?.url) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1563,1572],"text":"((data?.url) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1563,1572],"text":"(Boolean((data?.url)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1573,1575],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":66,"column":15,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":66,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1595,1605],"text":"((data?.type) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1595,1605],"text":"((data?.type) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1595,1605],"text":"(Boolean((data?.type)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1606,1608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1696,1698],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2169,2217],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2427,2468],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2951,2985],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { webpush } from 'web-push';\n\n// VAPID配置 - 从环境变量获取\nconst vapidPublicKey = process.env.VAPID_PUBLIC_KEY;\nconst vapidPrivateKey = process.env.VAPID_PRIVATE_KEY;\n\n// 验证VAPID密钥是否配置\nif (!vapidPublicKey || !vapidPrivateKey) {\n  throw new Error('VAPID密钥未配置，请检查环境变量 VAPID_PUBLIC_KEY 和 VAPID_PRIVATE_KEY');\n}\n\n// 验证VAPID密钥格式\nif (!/^[A-Za-z0-9_-]{20,}$/.test(vapidPublicKey) || !/^[A-Za-z0-9_-]{20,}$/.test(vapidPrivateKey)) {\n  throw new Error('VAPID密钥格式无效');\n}\n\n// 配置web-push\nwebpush.setVapidDetails(\n  'mailto:admin@luckymart.com',\n  vapidPublicKey,\n  vapidPrivateKey\n);\n\ndeclare global {\n  var subscriptions: Map<string, any> | undefined;\n}\n\ninterface NotificationPayload {\n  title: string;\n  body: string;\n  icon?: string;\n  badge?: string;\n  data?: {\n    url?: string;\n    type?: string;\n    [key: string]: any;\n  };\n  actions?: Array<{\n    action: string;\n    title: string;\n    icon?: string;\n  }>;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { subscription, title, body, icon, badge, data, actions }: NotificationPayload = await request.json();\n    \n    // 验证订阅信息\n    if (!subscription || !subscription.endpoint) {\n      return NextResponse.json({\n        success: false,\n        error: '无效的订阅信息'\n      }, { status: 400 });\n    }\n    \n    // 准备通知载荷\n    const notificationPayload = {\n      title: title || 'LuckyMart-TJ',\n      body: body || '您有新的消息',\n      icon: icon || '/icons/icon-192x192.png',\n      badge: badge || '/icons/icon-72x72.png',\n      data: {\n        url: data?.url || '/',\n        type: data?.type || 'info',\n        timestamp: Date.now(),\n        ...data\n      },\n      actions: actions || [\n        {\n          action: 'view',\n          title: '查看',\n          icon: '/icons/icon-192x192.png'\n        },\n        {\n          action: 'close',\n          title: '关闭'\n        }\n      ],\n      requireInteraction: false,\n      silent: false,\n      vibrate: [200, 100, 200],\n      tag: 'luckymart-test-notification'\n    };\n    \n    // 发送通知\n    try {\n      const result = await webpush.sendNotification(subscription, JSON.stringify(notificationPayload));\n      \n      console.log('测试通知发送成功:', subscription.endpoint);\n      \n      return NextResponse.json({\n        success: true,\n        message: '测试通知发送成功',\n        statusCode: result.statusCode,\n        body: result.body\n      });\n      \n    } catch (webpushError) {\n      console.error('发送推送通知失败:', webpushError);\n      \n      // 处理订阅无效的情况\n      if (webpushError.statusCode === 410 || webpushError.statusCode === 404) {\n        // 订阅已失效，删除订阅\n        if (global.subscriptions) {\n          global.subscriptions.delete(subscription.endpoint);\n        }\n        \n        return NextResponse.json({\n          success: false,\n          error: '订阅已失效，已自动删除',\n          code: 'SUBSCRIPTION_EXPIRED'\n        }, { status: 410 });\n      }\n      \n      throw webpushError;\n    }\n    \n  } catch (error) {\n    console.error('发送测试通知失败:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : '发送通知失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/notifications/unsubscribe/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":4,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":4,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[108,111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[108,111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":13,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":13,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[286,294],"text":"(Boolean(endpoint))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":21,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":21,"endColumn":67,"fix":{"range":[441,499],"text":"global.subscriptions?.has(endpoint)"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[561,594],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[849,881],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\ndeclare global {\n  var subscriptions: Map<string, any> | undefined;\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { endpoint } = body;\n    \n    // 验证端点\n    if (!endpoint) {\n      return NextResponse.json({\n        success: false,\n        error: '缺少端点参数'\n      }, { status: 400 });\n    }\n    \n    // 检查订阅是否存在\n    if (global.subscriptions && global.subscriptions.has(endpoint)) {\n      global.subscriptions.delete(endpoint);\n      \n      console.log('订阅删除成功:', endpoint);\n      \n      return NextResponse.json({\n        success: true,\n        message: '订阅删除成功'\n      });\n    } else {\n      return NextResponse.json({\n        success: false,\n        error: '订阅不存在'\n      }, { status: 404 });\n    }\n    \n  } catch (error) {\n    console.error('删除订阅失败:', error);\n    return NextResponse.json({\n      success: false,\n      error: '删除订阅失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/notifications/vapid-public-key/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[606,643],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":38,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":38,"endColumn":48,"fix":{"range":[958,997],"text":"!subscription?.endpoint"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[959,971],"text":"(Boolean(subscription))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":38,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":38,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[976,997],"text":"(Boolean(subscription.endpoint))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1207,1209],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":49,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1305,1314],"text":"(Boolean(userAgent))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1315,1317],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":50,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":50,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1346,1355],"text":"(Boolean(timestamp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1356,1358],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1449,1495],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1614,1646],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { webpush } from 'web-push';\n\n// VAPID配置（生产环境需要替换为真实密钥）\nconst vapidPublicKey = 'BEl62iUYgUivxIkv69yViEuiBIa40HI80NQD6F0jFSJj7Up5khOs8HCAHOqBZGNqn1jWiGCZbfZMUjO_gCZME4Pg';\nconst vapidPrivateKey = '4F-AaOzBwUnU2tz9dSbW9kUOGwAf3S6iGK9T9a8X7Q8'; // 示例密钥，生产环境需要使用真实密钥\n\n// 配置web-push\nwebpush.setVapidDetails(\n  'mailto:admin@luckymart.com',\n  vapidPublicKey,\n  vapidPrivateKey\n);\n\n// 获取VAPID公钥\nexport async function GET() {\n  try {\n    return NextResponse.json({\n      success: true,\n      publicKey: vapidPublicKey\n    });\n  } catch (error) {\n    console.error('获取VAPID公钥失败:', error);\n    return NextResponse.json({\n      success: false,\n      error: '获取VAPID公钥失败'\n    }, { status: 500 });\n  }\n}\n\n// 保存订阅信息\nexport async function POST(request: NextRequest) {\n  try {\n    const subscription = await request.json();\n    const { userAgent, timestamp } = await request.json();\n    \n    // 验证订阅信息\n    if (!subscription || !subscription.endpoint) {\n      return NextResponse.json({\n        success: false,\n        error: '无效的订阅信息'\n      }, { status: 400 });\n    }\n    \n    // 保存订阅到数据库（这里使用内存存储，生产环境需要保存到数据库）\n    const subscriptions = global.subscriptions || new Map();\n    subscriptions.set(subscription.endpoint, {\n      subscription,\n      userAgent: userAgent || 'unknown',\n      timestamp: timestamp || Date.now(),\n      active: true\n    });\n    global.subscriptions = subscriptions;\n    \n    console.log('订阅保存成功:', subscription.endpoint);\n    \n    return NextResponse.json({\n      success: true,\n      message: '订阅保存成功'\n    });\n    \n  } catch (error) {\n    console.error('保存订阅失败:', error);\n    return NextResponse.json({\n      success: false,\n      error: '保存订阅失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/notifications/win/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 12. Maximum allowed is 10.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":140,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":10,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":10,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[342,360],"text":"(Boolean(authResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":21,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":21,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[631,646],"text":"(Boolean(participationId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":85,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":85,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2110,2132],"text":"(Boolean(user.preferredLanguage))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":85,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":85,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2133,2135],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":92,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":92,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2366,2381],"text":"(Boolean(user.telegramId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2528,2568],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3584,3618],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":147,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":147,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3905,3923],"text":"(Boolean(authResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":157,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":157,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4158,4182],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4158,4182],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4158,4182],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":157,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":157,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4183,4185],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":158,"column":37,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":158,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4232,4257],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4232,4257],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4232,4257],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":158,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":158,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4258,4260],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":160,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":160,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4336,4362],"text":"(searchParams.get('status') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4336,4362],"text":"(searchParams.get('status') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4336,4362],"text":"(Boolean(searchParams.get('status')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":160,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":160,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4363,4365],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":163,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":163,"endColumn":29,"fix":{"range":[4430,4514],"text":"const whereConditions: any = {\n      userId: user.id,\n      type: 'lottery_win'\n    };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4451,4454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4451,4454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5194,5227],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5854,5888],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6099,6102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6099,6102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":238,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":238,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6258,6267],"text":"botToken == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6259,6267],"text":"(botToken ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6258,6267],"text":"!Boolean(botToken)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6277,6315],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6409,6453],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6927,6968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7054,7096],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7148,7188],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7274,7277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7274,7277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7286,7289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7286,7289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":336,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":336,"endColumn":65},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":346,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":346,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9520,9551],"text":"(process.env.NEXT_PUBLIC_APP_URL != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9520,9551],"text":"(process.env.NEXT_PUBLIC_APP_URL ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9520,9551],"text":"(Boolean(process.env.NEXT_PUBLIC_APP_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":346,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":346,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9552,9554],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":347,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":347,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9651,9682],"text":"(process.env.NEXT_PUBLIC_APP_URL != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9651,9682],"text":"(process.env.NEXT_PUBLIC_APP_URL ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9651,9682],"text":"(Boolean(process.env.NEXT_PUBLIC_APP_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":347,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":347,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9683,9685],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9793,9796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9793,9796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":374,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10191,10194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10191,10194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":382,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":382,"endColumn":48,"fix":{"range":[10561,10583],"text":"{prizeType = 'jackpot';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":383,"column":30,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":383,"endColumn":50,"fix":{"range":[10613,10633],"text":"{prizeType = 'major';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":384,"column":30,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":384,"endColumn":51,"fix":{"range":[10663,10684],"text":"{prizeType = 'medium';}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'participationId' is defined but never used. Allowed unused args must match /^_/u.","line":394,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":394,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'participationId' is defined but never used. Allowed unused args must match /^_/u.","line":394,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":394,"endColumn":66},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":406,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":406,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11133,11167],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":408,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":408,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11192,11226],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Function 'getMultilingualProductName' has a complexity of 11. Maximum allowed is 10.","line":413,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":441,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":413,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11297,11300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11297,11300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":414,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":414,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11318,11342],"text":"Boolean(product.nameMultilingual)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":423,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":423,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11632,11646],"text":"(Boolean(nameData[lang]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":423,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":423,"endColumn":50,"fix":{"range":[11632,11669],"text":"nameData[lang]?.name"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":423,"column":13,"nodeType":"MemberExpression","endLine":423,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":423,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":423,"endColumn":50,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11650,11669],"text":"(Boolean(nameData[lang].name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":423,"column":31,"nodeType":"MemberExpression","endLine":423,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":424,"column":18,"nodeType":"MemberExpression","endLine":424,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":428,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":429,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11814,11862],"text":"Boolean((value && typeof value === 'object' && value.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[11801,11801],"text":": boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":428,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11797,11800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11797,11800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":429,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":429,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11814,11819],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11874,11877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11874,11877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":432,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":432,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11896,11905],"text":"Boolean(firstName)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11976,12010],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":440,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":440,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12031,12045],"text":"(Boolean(product.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12031,12063],"text":"(product.nameZh ?? product.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":440,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":440,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12049,12063],"text":"(Boolean(product.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12049,12081],"text":"(product.nameEn ?? product.nameRu)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":440,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":440,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12067,12081],"text":"(Boolean(product.nameRu))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12082,12084],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '../../../../lib/prisma';\nimport { authenticateUser } from '../../../../lib/auth';\n\n// POST /api/notifications/win - 发送中奖通知\nexport async function POST(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const authResult = await authenticateUser(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { success: false, error: '认证失败' },\n        { status: 401 }\n      );\n    }\n\n    const user = authResult.user;\n    const body = await request.json();\n    const { participationId, notificationType = 'telegram' } = body;\n\n    if (!participationId) {\n      return NextResponse.json(\n        { success: false, error: '参与记录ID不能为空' },\n        { status: 400 }\n      );\n    }\n\n    // 获取中奖记录\n    const participation = await prisma.participations.findFirst({\n      where: {\n        id: participationId,\n        userId: user.id,\n        isWinner: true\n      },\n      include: {\n        round: {\n          include: {\n            product: {\n              select: {\n                id: true,\n                nameMultilingual: true,\n                nameZh: true,\n                nameEn: true,\n                nameRu: true,\n                images: true,\n                marketPrice: true,\n                totalShares: true,\n                pricePerShare: true\n              }\n            }\n          }\n        }\n      }\n    });\n\n    if (!participation) {\n      return NextResponse.json(\n        { success: false, error: '中奖记录不存在' },\n        { status: 404 }\n      );\n    }\n\n    // 检查是否已经发送过通知（避免重复通知）\n    const existingNotification = await prisma.notifications.findFirst({\n      where: {\n        userId: user.id,\n        type: 'lottery_win',\n        content: {\n          contains: participation.id\n        }\n      }\n    });\n\n    if (existingNotification) {\n      return NextResponse.json(\n        { success: false, error: '已经发送过中奖通知' },\n        { status: 400 }\n      );\n    }\n\n    // 计算奖金\n    const prize = calculatePrize(participation.round.product, participation.sharesCount);\n    \n    // 获取用户语言设置\n    const userLanguage = user.preferredLanguage || 'tg-TJ';\n    \n    // 生成多语言通知内容\n    const notificationContent = generateWinNotification(participation, prize, userLanguage);\n\n    // 发送Telegram通知（如果用户已绑定）\n    let telegramSuccess = false;\n    if (notificationType === 'telegram' && user.telegramId) {\n      try {\n        telegramSuccess = await sendTelegramWinNotification(user.telegramId, notificationContent);\n      } catch (error) {\n        console.error('发送Telegram通知失败:', error);\n      }\n    }\n\n    // 保存通知记录\n    const notification = await prisma.notifications.create({\n      data: {\n        userId: user.id,\n        type: 'lottery_win',\n        content: JSON.stringify({\n          participationId: participation.id,\n          productName: getMultilingualProductName(participation.round.product),\n          winningNumber: participation.round.winningNumber,\n          prize: prize.amount,\n          prizeType: prize.type,\n          telegramSent: telegramSuccess,\n          timestamp: new Date().toISOString()\n        }),\n        status: telegramSuccess ? 'sent' : 'pending',\n        sentAt: telegramSuccess ? new Date() : null,\n        createdAt: new Date()\n      }\n    });\n\n    // 更新用户统计（如果需要）\n    await updateUserWinStats(user.id, participation.id);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        notificationId: notification.id,\n        telegramSent: telegramSuccess,\n        prize: prize.amount,\n        message: '中奖通知已发送'\n      }\n    });\n\n  } catch (error) {\n    console.error('发送中奖通知失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/notifications/win - 获取用户中奖通知\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const authResult = await authenticateUser(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { success: false, error: '认证失败' },\n        { status: 401 }\n      );\n    }\n\n    const user = authResult.user;\n    const { searchParams } = new URL(request.url);\n    \n    const page = parseInt(searchParams.get('page') || '1', 10);\n    const limit = Math.min(parseInt(searchParams.get('limit') || '20', 10), 100);\n    const offset = (page - 1) * limit;\n    const status = searchParams.get('status') || 'all'; // 'all', 'sent', 'pending', 'failed'\n\n    // 构建查询条件\n    let whereConditions: any = {\n      userId: user.id,\n      type: 'lottery_win'\n    };\n\n    if (status !== 'all') {\n      whereConditions.status = status;\n    }\n\n    // 获取通知总数\n    const totalCount = await prisma.notifications.count({\n      where: whereConditions\n    });\n\n    // 获取通知列表\n    const notifications = await prisma.notifications.findMany({\n      where: whereConditions,\n      orderBy: {\n        createdAt: 'desc'\n      },\n      skip: offset,\n      take: limit\n    });\n\n    // 转换数据格式\n    const notificationList = notifications.map(notification => {\n      let content = {};\n      try {\n        content = typeof notification.content === 'string' \n          ? JSON.parse(notification.content) \n          : notification.content;\n      } catch (error) {\n        console.warn('解析通知内容失败:', error);\n      }\n\n      return {\n        id: notification.id,\n        type: notification.type,\n        status: notification.status,\n        sentAt: notification.sentAt?.toISOString(),\n        createdAt: notification.createdAt.toISOString(),\n        content\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        notifications: notificationList,\n        pagination: {\n          page,\n          limit,\n          total: totalCount,\n          hasMore: offset + notificationList.length < totalCount,\n          totalPages: Math.ceil(totalCount / limit)\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('获取中奖通知失败:', error);\n    return NextResponse.json(\n      { success: false, error: '服务器错误' },\n      { status: 500 }\n    );\n  }\n}\n\n// 发送Telegram中奖通知\nasync function sendTelegramWinNotification(telegramId: string, notificationContent: any): Promise<boolean> {\n  try {\n    // 这里应该调用Telegram Bot API发送消息\n    // 由于我们在后端环境，这里模拟发送过程\n    \n    const botToken = process.env.TELEGRAM_BOT_TOKEN;\n    if (!botToken) {\n      console.warn('Telegram Bot Token未配置');\n      return false;\n    }\n\n    const chatId = parseInt(telegramId);\n    if (!chatId) {\n      console.warn('无效的Telegram ID:', telegramId);\n      return false;\n    }\n\n    const message = buildTelegramMessage(notificationContent);\n    \n    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        chat_id: chatId,\n        text: message.text,\n        parse_mode: 'HTML',\n        reply_markup: message.keyboard\n      })\n    });\n\n    if (response.ok) {\n      console.log('Telegram中奖通知发送成功:', chatId);\n      return true;\n    } else {\n      const errorData = await response.text();\n      console.error('Telegram发送失败:', errorData);\n      return false;\n    }\n\n  } catch (error) {\n    console.error('Telegram通知发送异常:', error);\n    return false;\n  }\n}\n\n// 生成中奖通知内容\nfunction generateWinNotification(participation: any, prize: any, language: string) {\n  const product = participation.round.product;\n  const productName = getMultilingualProductName(product);\n  \n  // 根据语言生成不同的通知模板\n  const templates = {\n    'zh-CN': {\n      title: '🎉 恭喜您中奖了！',\n      message: `您参与的${productName}第${participation.round.roundNumber}期已经开奖！\n\n🏆 中奖号码：${participation.round.winningNumber}\n💰 奖金金额：${prize.amount} TJS\n🎟️ 您的号码：${participation.numbers.join(', ')}\n\n请及时领取您的奖金，感谢您的参与！`,\n      claimButton: '立即领奖',\n      viewDetails: '查看详情'\n    },\n    'en-US': {\n      title: '🎉 Congratulations! You Won!',\n      message: `Your participation in ${productName} Round ${participation.round.roundNumber} has been drawn!\n\n🏆 Winning Number: ${participation.round.winningNumber}\n💰 Prize Amount: ${prize.amount} TJS\n🎟️ Your Numbers: ${participation.numbers.join(', ')}\n\nPlease claim your prize in time. Thank you for your participation!`,\n      claimButton: 'Claim Prize',\n      viewDetails: 'View Details'\n    },\n    'ru-RU': {\n      title: '🎉 Поздравляем! Вы выиграли!',\n      message: `Ваше участие в ${productName} Раунд ${participation.round.roundNumber} было розыграно!\n\n🏆 Выигрышный номер: ${participation.round.winningNumber}\n💰 Сумма приза: ${prize.amount} TJS\n🎟️ Ваши номера: ${participation.numbers.join(', ')}\n\nПожалуйста, получите свой приз вовремя. Спасибо за участие!`,\n      claimButton: 'Получить приз',\n      viewDetails: 'Подробнее'\n    },\n    'tg-TJ': {\n      title: '🎉 Табрикоти эҳсос мекунем! Шумо ғолиб шудед!',\n      message: `Иштироки шумо дар ${productName} Давраи ${participation.round.roundNumber} тир карда шуд!\n\n🏆 Рақами ғолиб: ${participation.round.winningNumber}\n💰 Маблағи ҷойиза: ${prize.amount} TJS\n🎟️ Рақамҳои шумо: ${participation.numbers.join(', ')}\n\nЛутфан ҷойизаи худро ба вақт гиред. Барои иштироки шумо ташаккур!`,\n      claimButton: 'Ҷойиза гирифтан',\n      viewDetails: 'Бисёртар дидан'\n    }\n  };\n\n  const template = templates[language as keyof typeof templates] || templates['zh-CN'];\n\n  return {\n    ...template,\n    productName,\n    roundNumber: participation.round.roundNumber,\n    winningNumber: participation.round.winningNumber,\n    prize: prize.amount,\n    prizeType: prize.type,\n    numbers: participation.numbers,\n    claimUrl: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/lottery/claim?participationId=${participation.id}`,\n    detailsUrl: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/lottery/records`\n  };\n}\n\n// 构建Telegram消息格式\nfunction buildTelegramMessage(content: any) {\n  const text = `${content.title}\\n\\n${content.message}`;\n  \n  const keyboard = {\n    inline_keyboard: [\n      [\n        {\n          text: content.claimButton,\n          url: content.claimUrl\n        },\n        {\n          text: content.viewDetails,\n          url: content.detailsUrl\n        }\n      ]\n    ]\n  };\n\n  return { text, keyboard };\n}\n\n// 计算奖金的辅助函数\nfunction calculatePrize(product: any, sharesCount: number): { amount: number; type: string; description: string } {\n  const pricePerShare = parseFloat(product.pricePerShare.toString());\n  const fixedPrize = 10; // 固定奖金\n  const percentagePrize = pricePerShare * sharesCount * 0.1; // 10%商品价值\n  \n  const totalPrize = fixedPrize + percentagePrize;\n  \n  let prizeType = 'standard';\n  if (totalPrize >= 100) prizeType = 'jackpot';\n  else if (totalPrize >= 50) prizeType = 'major';\n  else if (totalPrize >= 20) prizeType = 'medium';\n  \n  return {\n    amount: parseFloat(totalPrize.toFixed(2)),\n    type: prizeType,\n    description: `固定奖金 ${fixedPrize}TJS + 比例奖金 ${percentagePrize.toFixed(2)}TJS`\n  };\n}\n\n// 更新用户中奖统计\nasync function updateUserWinStats(userId: string, participationId: string) {\n  try {\n    // 这里可以更新用户的统计数据\n    // 比如更新最后中奖时间、中奖次数等\n    \n    await prisma.users.update({\n      where: { id: userId },\n      data: {\n        updatedAt: new Date()\n      }\n    });\n    \n    console.log('用户中奖统计已更新:', userId);\n  } catch (error) {\n    console.error('更新用户统计失败:', error);\n  }\n}\n\n// 获取多语言商品名称的辅助函数\nfunction getMultilingualProductName(product: any): string {\n  if (product.nameMultilingual) {\n    try {\n      const nameData = typeof product.nameMultilingual === 'string' \n        ? JSON.parse(product.nameMultilingual) \n        : product.nameMultilingual;\n      \n      const languages = ['zh-CN', 'zh', 'en', 'ru', 'tg'];\n      \n      for (const lang of languages) {\n        if (nameData[lang] && nameData[lang].name) {\n          return nameData[lang].name;\n        }\n      }\n      \n      const firstName = Object.values(nameData).find((value: any) => \n        value && typeof value === 'object' && value.name\n      ) as any;\n      \n      if (firstName) {\n        return firstName.name;\n      }\n    } catch (error) {\n      console.warn('解析多语言名称失败:', error);\n    }\n  }\n\n  return product.nameZh || product.nameEn || product.nameRu || '未知商品';\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/orders/list/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'validateOrder' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateOrder' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommonErrors' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":11,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":11,"endColumn":57,"fix":{"range":[388,436],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":11,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[388,399],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[389,399],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[388,399],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":15,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":15,"endColumn":42,"fix":{"range":[543,554],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":32,"column":18,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":32,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1115,1151],"text":"(Boolean((validationResult.sanitizedData?.page)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1152,1154],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":33,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":33,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1176,1213],"text":"(Boolean((validationResult.sanitizedData?.limit)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1214,1216],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1405,1408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1405,1408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":42,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":42,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1452,1456],"text":"Boolean(type)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":46,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":46,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1504,1510],"text":"Boolean(status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2251,2266],"text":"(Boolean(order.productId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":87,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":87,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2808,2825],"text":"(product.images[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2808,2825],"text":"(product.images[0] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2808,2825],"text":"(Boolean(product.images[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":87,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":87,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2826,2828],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3132,3135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3132,3135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3143,3185],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { validateOrder, validateOrderQuery } from '@/lib/order-validator';\nimport { CommonErrors } from '@/lib/errors';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证认证\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    // 验证查询参数\n    const searchParams = request.nextUrl.searchParams;\n    const queryData = Object.fromEntries(searchParams);\n    \n    const validationResult = validateOrderQuery(queryData);\n    if (!validationResult.isValid) {\n      const errorMessages = validationResult.errors.map(e => e.message).join('; ');\n      return NextResponse.json(\n        { error: '查询参数验证失败', details: errorMessages },\n        { status: 400 }\n      );\n    }\n\n    // 使用验证后的参数\n    const page = validationResult.sanitizedData?.page || 1;\n    const limit = validationResult.sanitizedData?.limit || 20;\n    const type = validationResult.sanitizedData?.type;\n    const status = validationResult.sanitizedData?.status;\n\n    const skip = (page - 1) * limit;\n\n    // 构建查询条件\n    const where: any = { userId: decoded.userId };\n    \n    if (type) {\n      where.type = type;\n    }\n    \n    if (status) {\n      where.paymentStatus = status;\n    }\n\n    // 查询订单和关联信息，使用关联查询避免N+1问题\n    const [orders, total, products] = await Promise.all([\n      prisma.orders.findMany({\n        where,\n        skip,\n        take: limit,\n        orderBy: { createdAt: 'desc' },\n        // 暂时保留原有结构，products 将通过单独查询获取\n      }),\n      prisma.orders.count({ where }),\n      // 预加载所有相关商品信息\n      prisma.products.findMany({\n        where: { id: { in: orders.map(o => o.productId).filter(Boolean) } },\n        select: { id: true, nameZh: true, nameEn: true, images: true }\n      })\n    ]);\n\n    // 创建商品映射表\n    const productMap = new Map(products.map(p => [p.id, p]));\n\n    // 格式化订单数据，使用映射表避免循环查找\n    const formattedOrders = orders.map(order => {\n      const product = order.productId ? productMap.get(order.productId) : null;\n      \n      return {\n        id: order.id,\n        orderNumber: order.orderNumber,\n        type: order.type,\n        totalAmount: parseFloat(order.totalAmount.toString()),\n        paymentStatus: order.paymentStatus,\n        fulfillmentStatus: order.fulfillmentStatus,\n        paymentMethod: order.paymentMethod,\n        trackingNumber: order.trackingNumber,\n        createdAt: order.createdAt,\n        product: product ? {\n          id: product.id,\n          name: product.nameZh,\n          image: product.images[0] || null\n        } : null\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        orders: formattedOrders,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Get orders error:', error);\n    return NextResponse.json(\n      { error: '获取订单列表失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/payment/packages/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":7,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":7,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[231,259],"text":"(searchParams.get('language') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[231,259],"text":"(searchParams.get('language') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[231,259],"text":"(Boolean(searchParams.get('language')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":7,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":7,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[260,262],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1069,1072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1069,1072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1080,1124],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const language = searchParams.get('language') || 'zh';\n\n    const packages = await prisma.rechargePackages.findMany({\n      where: { isActive: true },\n      orderBy: { sortOrder: 'asc' }\n    });\n\n    const langSuffix = language === 'zh' ? 'Zh' : language === 'en' ? 'En' : 'Ru';\n\n    const localizedPackages = packages.map(pkg => ({\n      id: pkg.id,\n      name: pkg[`name${langSuffix}` as keyof typeof pkg],\n      price: parseFloat(pkg.price.toString()),\n      coins: pkg.coins,\n      bonusCoins: pkg.bonusCoins,\n      totalCoins: pkg.coins + pkg.bonusCoins,\n      discount: pkg.bonusCoins > 0 \n        ? `+${Math.round((pkg.bonusCoins / pkg.coins) * 100)}%` \n        : null,\n      isPopular: pkg.sortOrder === 3 // 推荐礼包\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: { packages: localizedPackages }\n    });\n\n  } catch (error: any) {\n    console.error('Get packages error:', error);\n    return NextResponse.json(\n      { error: '获取充值礼包失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/payment/recharge/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":51,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":51,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3296,3299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3296,3299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 16. Maximum allowed is 10.","line":144,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":307,"endColumn":2},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":146,"column":47,"nodeType":"CallExpression","messageId":"substr","endLine":146,"endColumn":86,"fix":{"range":[3687,3698],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":151,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":151,"endColumn":57,"fix":{"range":[3813,3861],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":151,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":151,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3813,3824],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3814,3824],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3813,3824],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":155,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":155,"endColumn":42,"fix":{"range":[3968,3979],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":156,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":156,"endColumn":62},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":161,"column":23,"nodeType":"CallExpression","messageId":"substring","endLine":161,"endColumn":45,"fix":{"range":[4172,4181],"text":"slice"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":168,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":168,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4315,4324],"text":"(Boolean(packageId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":168,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":168,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4329,4342],"text":"(Boolean(paymentMethod))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4782,4785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4782,4785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4883,4931],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":195,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":195,"endColumn":30,"fix":{"range":[5058,5079],"text":"!pkg?.isActive"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7340,7343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7340,7343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":290,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":290,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7673,7688],"text":"(Boolean((decoded?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":290,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":290,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7689,7691],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":311,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":311,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":311,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":311,"endColumn":42},{"ruleId":"complexity","severity":2,"message":"Async function 'handlePaymentSuccess' has a complexity of 15. Maximum allowed is 10.","line":347,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":622,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":443,"column":33,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":443,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11148,11159],"text":"(order.notes != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11148,11159],"text":"(order.notes ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11148,11159],"text":"(Boolean(order.notes))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":443,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":443,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11160,11162],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":508,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":508,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12598,12636],"text":"(Boolean((userForRewardCheck?.has_first_purchase)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":518,"column":47,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":518,"endColumn":79,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12852,12884],"text":"(process.env.NEXT_PUBLIC_BASE_URL != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12852,12884],"text":"(process.env.NEXT_PUBLIC_BASE_URL ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12852,12884],"text":"(Boolean(process.env.NEXT_PUBLIC_BASE_URL))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":518,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":518,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12885,12887],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":583,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":583,"endColumn":83,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14787,14819],"text":"(firstRechargeResult.rewardAmount != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14787,14819],"text":"(firstRechargeResult.rewardAmount ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14787,14819],"text":"(Boolean(firstRechargeResult.rewardAmount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":592,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":592,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15074,15101],"text":"(firstRechargeResult.message != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15074,15101],"text":"(firstRechargeResult.message ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15074,15101],"text":"(Boolean(firstRechargeResult.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":592,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":592,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15102,15104],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { generateOrderNumber } from '@/lib/utils';\nimport { validationEngine } from '@/lib/validation';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getLogger } from '@/lib/logger';\nimport { withRateLimit, rechargeRateLimit } from '@/lib/rate-limit-middleware';\nimport { rateLimitMonitor } from '@/lib/rate-limit-monitor';\n\n// 首充奖励配置\nconst FIRST_RECHARGE_REWARDS = {\n  10: { reward: 2, rate: 0.20 },    // 充值10 Som → 奖励2 Som (20%)\n  20: { reward: 5, rate: 0.25 },    // 充值20 Som → 奖励5 Som (25%)\n  50: { reward: 15, rate: 0.30 },   // 充值50 Som → 奖励15 Som (30%)\n  100: { reward: 35, rate: 0.35 },  // 充值100 Som → 奖励35 Som (35%)\n} as const;\n\ntype RechargeAmount = keyof typeof FIRST_RECHARGE_REWARDS;\n\n/**\n * 检查并自动发放首充奖励\n */\nasync function checkAndGrantFirstRechargeReward(\n  userId: string,\n  rechargeAmount: number,\n  orderId: string\n): Promise<{ success: boolean; rewardAmount?: number; message?: string }> {\n  const logger = getLogger();\n  \n  try {\n    // 检查用户是否已有完成的首充记录\n    const existingRecharge = await prisma.orders.findFirst({\n      where: {\n        userId,\n        type: 'recharge',\n        paymentStatus: 'paid',\n        fulfillmentStatus: 'completed'\n      }\n    });\n\n    if (existingRecharge) {\n      return {\n        success: false,\n        message: '用户已有充值记录，不符合首充条件'\n      };\n    }\n\n    // 检查奖励配置是否存在\n    const rewardConfig = FIRST_RECHARGE_REWARDS[rechargeAmount as RechargeAmount];\n    if (!rewardConfig) {\n      return {\n        success: false,\n        message: `未找到充值金额${rechargeAmount}的奖励配置`\n      };\n    }\n\n    // 检查是否已领取过该档位奖励\n    const existingReward = await prisma.firstRechargeRewards.findUnique({\n      where: {\n        userId_rechargeAmount: {\n          userId,\n          rechargeAmount\n        }\n      }\n    });\n\n    if (existingReward) {\n      return {\n        success: false,\n        message: '该档位奖励已领取'\n      };\n    }\n\n    // 发放奖励\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 创建奖励记录\n      const rewardRecord = await tx.firstRechargeRewards.create({\n        data: {\n          userId,\n          rechargeAmount,\n          rewardType: 'bonus_coins',\n          rewardAmount: rewardConfig.reward,\n          status: 'claimed',\n          claimedAt: new Date()\n        }\n      });\n\n      // 2. 增加用户余额\n      await tx.users.update({\n        where: { id: userId },\n        data: {\n          balance: { increment: rewardConfig.reward }\n        }\n      });\n\n      // 3. 记录钱包交易\n      await tx.walletTransactions.create({\n        data: {\n          userId,\n          type: 'first_recharge_reward',\n          amount: rewardConfig.reward,\n          currency: 'TJS',\n          description: `首充奖励：充值${rechargeAmount} Som获得${rewardConfig.reward} Som奖励`,\n          status: 'completed',\n          metadata: {\n            orderId,\n            rechargeAmount,\n            rewardRate: rewardConfig.rate,\n            rewardId: rewardRecord.id\n          }\n        }\n      });\n\n      return {\n        success: true,\n        rewardAmount: rewardConfig.reward\n      };\n    });\n\n    logger.info('首充奖励发放成功', {\n      userId,\n      rechargeAmount,\n      rewardAmount: result.rewardAmount\n    });\n\n    return result;\n  } catch (error: any) {\n    logger.error('发放首充奖励失败', error, {\n      userId,\n      rechargeAmount,\n      orderId,\n      error: error.message\n    });\n\n    return {\n      success: false,\n      message: '发放首充奖励失败'\n    };\n  }\n}\n\n// 应用速率限制的充值处理函数\nconst handleRechargeRequest = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `recharge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const startTime = Date.now();\n\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    logger.info('充值请求开始', {\n      requestId,\n      userId: decoded.userId,\n      tokenPrefix: `${token.substring(0, 10)  }...`\n    });\n\n    const body = await request.json();\n    const { packageId, paymentMethod } = body;\n\n    // 基础参数验证\n    if (!packageId || !paymentMethod) {\n      return NextResponse.json({ error: '参数不完整：packageId和paymentMethod都是必需的' }, { status: 400 });\n    }\n\n    // 获取系统验证配置\n    try {\n      const { data: settings } = await supabaseAdmin\n        .from('system_validation_settings')\n        .select('*');\n      \n      if (settings) {\n        const config = settings.reduce((acc, setting) => {\n          acc[setting.setting_key] = setting.parsed_value;\n          return acc;\n        }, {} as any);\n        \n        validationEngine.setConfig(config);\n      }\n    } catch (configError) {\n      console.warn('无法获取系统验证配置，使用默认设置:', configError);\n    }\n\n    // 验证礼包\n    const pkg = await prisma.rechargePackages.findUnique({\n      where: { id: packageId }\n    });\n\n    if (!pkg || !pkg.isActive) {\n      return NextResponse.json({ error: '礼包不存在或已下架' }, { status: 404 });\n    }\n\n    // 验证充值金额（通过套餐价格验证）\n    const packagePrice = Number(pkg.price);\n    const rechargeValidation = validationEngine.validateRechargeAmount(packagePrice);\n    if (!rechargeValidation.isValid) {\n      return NextResponse.json({ error: rechargeValidation.error }, { status: 400 });\n    }\n\n    // 验证支付方式\n    if (!['alif_mobi', 'dc_bank', 'mock'].includes(paymentMethod)) {\n      return NextResponse.json({ error: '无效的支付方式' }, { status: 400 });\n    }\n\n    // 生成订单\n    const orderNumber = generateOrderNumber();\n\n    const order = await prisma.orders.create({\n      data: {\n        orderNumber,\n        userId: decoded.userId,\n        type: 'recharge',\n        totalAmount: pkg.price,\n        paymentMethod,\n        paymentStatus: 'pending',\n        fulfillmentStatus: 'pending',\n        notes: JSON.stringify({\n          packageId: pkg.id,\n          packageName: pkg.nameZh,\n          coins: pkg.coins,\n          bonusCoins: pkg.bonusCoins\n        })\n      }\n    });\n\n    // 模拟支付 - 生产环境需要对接真实支付接口\n    if (paymentMethod === 'mock') {\n      // 自动完成支付（仅用于开发测试）\n      await handlePaymentSuccess(order.id, `MOCK_${  Date.now()}`);\n      \n      return NextResponse.json({\n        success: true,\n        data: {\n          orderId: order.id,\n          orderNumber,\n          status: 'paid',\n          coins: pkg.coins + pkg.bonusCoins,\n          message: '充值成功（模拟支付）'\n        }\n      });\n    }\n\n    // 真实支付 - 生成支付指引，隐藏敏感信息\n    const paymentInstructions = {\n      method: paymentMethod,\n      // 不再暴露具体的收款账户信息\n      recipientInfo: paymentMethod === 'alif_mobi' \n        ? '手机支付账户' \n        : paymentMethod === 'dc_bank'\n        ? '银行账户'\n        : null,\n      recipientName: 'LuckyMart TJ',\n      amount: parseFloat(pkg.price.toString()).toFixed(2),\n      reference: orderNumber, // 必须填写的备注\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString(),\n      // 添加安全提示\n      securityNote: '请确保转账信息与平台显示一致'\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        orderId: order.id,\n        orderNumber,\n        amount: parseFloat(pkg.price.toString()),\n        coins: pkg.coins + pkg.bonusCoins,\n        paymentInstructions\n      }\n    });\n\n  } catch (error: any) {\n    const logger = getLogger();\n    logger.error('创建充值订单失败', error, {\n      requestId,\n      userId: decoded?.userId,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    // 记录速率限制监控数据\n    rateLimitMonitor.recordMetric({\n      timestamp: Date.now(),\n      endpoint: '/api/payment/recharge',\n      identifier: decoded?.userId || 'anonymous',\n      hits: 1,\n      blocked: false,\n      strategy: 'sliding_window',\n      windowMs: 5 * 60 * 1000,\n      limit: 5,\n      remaining: 0,\n      resetTime: Date.now() + 5 * 60 * 1000,\n      responseTime: Date.now() - startTime\n    });\n\n    // 统一错误处理，不暴露敏感信息\n    return NextResponse.json(\n      { error: '创建充值订单失败' },\n      { status: 500 }\n    );\n  }\n};\n\n// 应用速率限制并导出处理函数\nconst processRequest = withRateLimit(handleRechargeRequest, rechargeRateLimit({\n  onLimitExceeded: async (result, request) => {\n    const logger = getLogger();\n    logger.warn('充值接口速率限制触发', {\n      identifier: 'unknown',\n      endpoint: '/api/payment/recharge',\n      limit: result.totalHits + result.remaining,\n      remaining: result.remaining,\n      resetTime: result.resetTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: '充值操作过于频繁，请稍后再试',\n        rateLimit: {\n          limit: result.totalHits + result.remaining,\n          remaining: result.remaining,\n          resetTime: new Date(result.resetTime).toISOString()\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': (result.totalHits + result.remaining).toString(),\n          'X-RateLimit-Remaining': result.remaining.toString(),\n          'X-RateLimit-Reset': result.resetTime.toString()\n        }\n      }\n    );\n  }\n}));\n\n// 导出主处理函数\nexport { processRequest as POST };\n\n// 处理支付成功（供支付回调使用）\nasync function handlePaymentSuccess(orderId: string, transactionId: string) {\n  const logger = getLogger();\n  const requestId = `payment_success_${orderId}`;\n\n  // 生成幂等性请求ID\n  const idempotencyKey = `payment_success_${orderId}_${transactionId}`;\n  \n  // 检查是否已经处理过该支付\n  const existingRequest = await prisma.processingLogs.findFirst({\n    where: {\n      entityId: orderId,\n      operationType: 'payment_success',\n      status: 'completed'\n    }\n  });\n\n  if (existingRequest) {\n    logger.info('支付已处理过，跳过重复处理', {\n      requestId,\n      orderId,\n      transactionId,\n      existingRequestId: existingRequest.requestId\n    });\n    return;\n  }\n\n  // 记录处理开始\n  const processingLog = await prisma.processingLogs.create({\n    data: {\n      entityId: orderId,\n      operationType: 'payment_success',\n      status: 'processing',\n      requestId: idempotencyKey,\n      createdAt: new Date()\n    }\n  });\n\n  logger.info('支付成功，开始原子检查订单状态', {\n    requestId,\n    orderId,\n    transactionId\n  });\n\n  // 使用原子操作检查和更新订单状态，防止并发重复处理\n  const updateResult = await prisma.orders.updateMany({\n    where: {\n      id: orderId,\n      paymentStatus: 'pending' // 只有在支付状态为待支付时才更新\n    },\n    data: {\n      paymentStatus: 'paid',\n      fulfillmentStatus: 'completed',\n      updatedAt: new Date()\n    }\n  });\n\n  // 如果没有行被更新，说明订单已经被处理过，直接返回\n  if (updateResult.count === 0) {\n    logger.info('订单已被处理，跳过重复处理', {\n      requestId,\n      orderId,\n      transactionId\n    });\n    \n    // 标记处理失败\n    await prisma.processingLogs.update({\n      where: { id: processingLog.id },\n      data: { \n        status: 'failed',\n        errorMessage: '订单状态已处理，跳过重复处理'\n      }\n    });\n    \n    return;\n  }\n\n  // 获取订单信息（在事务外查询，因为订单状态已确定）\n  const order = await prisma.orders.findUnique({\n    where: { id: orderId },\n    select: {\n      userId: true,\n      totalAmount: true,\n      notes: true,\n      paymentStatus: true\n    }\n  });\n\n  if (!order) {\n    logger.error('订单不存在但状态更新成功，数据不一致', {\n      requestId,\n      orderId,\n      transactionId\n    });\n    return;\n  }\n\n  const orderNotes = JSON.parse(order.notes || '{}');\n  const totalCoins = orderNotes.coins + orderNotes.bonusCoins;\n\n  logger.info('支付状态确认成功，开始处理订单业务逻辑', {\n    requestId,\n    orderId,\n    userId: order.userId,\n    totalCoins\n  });\n\n  // 开始事务处理业务逻辑\n  await prisma.$transaction(async (tx) => {\n    // 更新订单备注，添加交易ID\n    await tx.orders.update({\n      where: { id: orderId },\n      data: {\n        notes: `${order.notes  } | 交易ID: ${transactionId}`\n      }\n    });\n\n    // 增加用户余额\n    await tx.users.update({\n      where: { id: order.userId },\n      data: {\n        balance: { increment: totalCoins }\n      }\n    });\n\n    // 记录交易\n    await tx.transactions.create({\n      data: {\n        userId: order.userId,\n        type: 'recharge',\n        amount: totalCoins,\n        balanceType: 'lottery_coin',\n        relatedOrderId: orderId,\n        description: `充值 ${parseFloat(order.totalAmount.toString())} TJS = ${totalCoins} 夺宝币`\n      }\n    });\n\n    // 创建通知\n    await tx.notifications.create({\n      data: {\n        userId: order.userId,\n        type: 'recharge_success',\n        content: `充值成功！您获得了${totalCoins}个夺宝币`,\n        status: 'pending'\n      }\n    });\n  });\n\n  // 触发邀请奖励和首充奖励（独立事务，不影响充值逻辑）\n  try {\n    logger.info('开始检查用户首次充值触发奖励', {\n      requestId,\n      userId: order.userId,\n      orderId\n    });\n\n    // 检查用户是否首次充值\n    const userForRewardCheck = await prisma.users.findUnique({\n      where: { id: order.userId },\n      select: { has_first_purchase: true }\n    });\n\n    if (!userForRewardCheck?.has_first_purchase) {\n      logger.info('用户首次充值，触发邀请奖励', {\n        requestId,\n        userId: order.userId,\n        orderId,\n        totalCoins\n      });\n\n      // 调用触发邀请奖励API\n      try {\n        const rewardResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/referral/trigger-reward`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_id: order.userId,\n            event_type: 'first_purchase',\n            event_data: {\n              order_id: orderId,\n              transaction_id: transactionId,\n              amount: parseFloat(order.totalAmount.toString()),\n              coins_received: totalCoins\n            }\n          })\n        });\n\n        if (rewardResponse.ok) {\n          const rewardData = await rewardResponse.json();\n          logger.info('邀请奖励触发成功', {\n            requestId,\n            userId: order.userId,\n            rewardData\n          });\n        } else {\n          const errorData = await rewardResponse.text();\n          logger.warn('邀请奖励触发失败', {\n            requestId,\n            userId: order.userId,\n            status: rewardResponse.status,\n            error: errorData\n          });\n        }\n      } catch (rewardError) {\n        logger.error('触发邀请奖励时发生错误', rewardError, {\n          requestId,\n          userId: order.userId,\n          orderId\n        });\n      }\n    }\n\n    // 检查并自动发放首充奖励\n    try {\n      const rechargeAmount = parseFloat(order.totalAmount.toString());\n      const firstRechargeResult = await checkAndGrantFirstRechargeReward(\n        order.userId,\n        rechargeAmount,\n        orderId\n      );\n\n      if (firstRechargeResult.success) {\n        logger.info('首充奖励自动发放成功', {\n          requestId,\n          userId: order.userId,\n          orderId,\n          rechargeAmount,\n          rewardAmount: firstRechargeResult.rewardAmount\n        });\n\n        // 更新通知内容，包含首充奖励信息\n        await prisma.notifications.create({\n          data: {\n            userId: order.userId,\n            type: 'recharge_success_with_bonus',\n            content: `充值成功！您获得了${totalCoins}个夺宝币${firstRechargeResult.rewardAmount ? `，首充奖励${firstRechargeResult.rewardAmount} Som已到账` : ''}`,\n            status: 'pending'\n          }\n        });\n      } else {\n        logger.info('首充奖励检查结果', {\n          requestId,\n          userId: order.userId,\n          orderId,\n          message: firstRechargeResult.message || '不符合首充奖励条件'\n        });\n      }\n    } catch (firstRechargeError) {\n      logger.error('检查首充奖励时发生错误', firstRechargeError, {\n        requestId,\n        userId: order.userId,\n        orderId\n      });\n    }\n  } catch (rewardCheckError) {\n    logger.error('检查用户首次充值状态时发生错误', rewardCheckError, {\n      requestId,\n      userId: order.userId,\n      orderId\n    });\n  } finally {\n    // 标记处理完成\n    try {\n      await prisma.processingLogs.update({\n        where: { id: processingLog.id },\n        data: { \n          status: 'completed',\n          completedAt: new Date()\n        }\n      });\n    } catch (logError) {\n      logger.warn('更新处理日志失败', logError as Error, { processingLogId: processingLog.id });\n    }\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/performance/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1170,1173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1170,1173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":45,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1339,1363],"text":"(searchParams.get('type') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1339,1363],"text":"(searchParams.get('type') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1339,1363],"text":"(Boolean(searchParams.get('type')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":45,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":45,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1364,1366],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":46,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1398,1427],"text":"(searchParams.get('timeRange') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1398,1427],"text":"(searchParams.get('timeRange') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1398,1427],"text":"(Boolean(searchParams.get('timeRange')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1428,1430],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3234,3237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3234,3237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3245,3294],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":142,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":142,"endColumn":73,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3716,3741],"text":"Boolean((item.deviceInfo?.isMobile))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[3708,3712],"text":"(item): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":144,"column":49,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":144,"endColumn":74,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3841,3866],"text":"(Boolean((item.deviceInfo?.isMobile)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":147,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3882,3897],"text":"filters.pageUrl != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3882,3897],"text":"filters.pageUrl ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3882,3897],"text":"Boolean(filters.pageUrl)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":182,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":182,"endColumn":73,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4948,4973],"text":"Boolean((item.deviceInfo?.isMobile))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[4940,4944],"text":"(item): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":186,"column":50,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":186,"endColumn":61,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5044,5055],"text":"(Boolean(item.issues))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":186,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":186,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5056,5058],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":188,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":188,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5144,5159],"text":"(Boolean(acc[issue.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":188,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":188,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5160,5162],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7360,7363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7360,7363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":285,"column":35,"nodeType":"MemberExpression","endLine":285,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7611,7614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7611,7614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7862,7865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7862,7865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8143,8146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8143,8146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8151,8154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8151,8154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":303,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":303,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8211,8222],"text":"(Boolean(item.issues))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":303,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":303,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8223,8225],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8297,8300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8297,8300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8305,8308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8305,8308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":331,"column":10,"nodeType":"MemberExpression","endLine":331,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":331,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":331,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9171,9173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":349,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":349,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9527,9551],"text":"(searchParams.get('type') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9527,9551],"text":"(searchParams.get('type') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9527,9551],"text":"(Boolean(searchParams.get('type')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":349,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":349,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9552,9554],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":367,"column":22,"nodeType":"MemberExpression","endLine":367,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10525,10528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10525,10528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10536,10590],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":404,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":404,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10864,10878],"text":"(Boolean(body.timestamp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":404,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":404,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10882,10896],"text":"(Boolean(body.sessionId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11743,11987],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":453,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":453,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12223,12227],"text":"(Boolean(name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":476,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12741,12744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12741,12744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":477,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":477,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12752,12797],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":491,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":491,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13063,13071],"text":"(data.fcp != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13063,13071],"text":"(data.fcp ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13063,13071],"text":"(Boolean(data.fcp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":492,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":492,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13122,13130],"text":"(data.lcp != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13122,13130],"text":"(data.lcp ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13122,13130],"text":"(Boolean(data.lcp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":493,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":493,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13181,13189],"text":"(data.fid != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13181,13189],"text":"(data.fid ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13181,13189],"text":"(Boolean(data.fid))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":494,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":494,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13238,13246],"text":"(data.cls != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13238,13246],"text":"(data.cls ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13238,13246],"text":"(Boolean(data.cls))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":495,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":495,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13304,13313],"text":"(data.ttfb != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13304,13313],"text":"(data.ttfb ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13304,13313],"text":"(Boolean(data.ttfb))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":511,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":511,"endColumn":33,"fix":{"range":[13765,13776],"text":"{return 100;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":512,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":512,"endColumn":31,"fix":{"range":[13798,13807],"text":"{return 0;}"}},{"ruleId":"complexity","severity":2,"message":"Function 'identifyPerformanceIssues' has a complexity of 19. Maximum allowed is 10.","line":517,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":591,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":527,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":527,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14193,14201],"text":"(data.fcp != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14193,14201],"text":"(data.fcp ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14193,14201],"text":"(Boolean(data.fcp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":538,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":538,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14459,14467],"text":"(data.lcp != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14459,14467],"text":"(data.lcp ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14459,14467],"text":"(Boolean(data.lcp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":549,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":549,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14725,14733],"text":"(data.fid != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14725,14733],"text":"(data.fid ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14725,14733],"text":"(Boolean(data.fid))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":560,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":560,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14985,14993],"text":"(data.cls != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14985,14993],"text":"(data.cls ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14985,14993],"text":"(Boolean(data.cls))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":571,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":571,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15247,15256],"text":"(data.ttfb != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15247,15256],"text":"(data.ttfb ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15247,15256],"text":"(Boolean(data.ttfb))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15868,15871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15868,15871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":604,"column":10,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":604,"endColumn":17,"fix":{"range":[16085,17433],"text":"for (const issue of issues) {\n    switch (issue.type) {\n      case 'fcp-slow':\n        recommendations.push({\n          priority: 'high',\n          category: 'Loading Performance',\n          title: '优化首次内容绘制',\n          description: 'FCP时间过长影响用户感知速度',\n          actions: [\n            '启用图片懒加载和预加载',\n            '压缩和优化CSS文件',\n            '减少关键渲染路径的阻塞资源',\n            '使用CDN加速静态资源'\n          ],\n          estimatedImpact: '可减少30-50%的FCP时间'\n        });\n        break;\n        \n      case 'lcp-slow':\n        recommendations.push({\n          priority: 'high',\n          category: 'Loading Performance',\n          title: '优化最大内容绘制',\n          description: 'LCP通常是页面主要内容，需要重点优化',\n          actions: [\n            '优化关键资源加载顺序',\n            '使用WebP/AVIF等现代图片格式',\n            '预加载hero图像和关键字体',\n            '移除未使用的CSS和JavaScript'\n          ],\n          estimatedImpact: '可减少40-60%的LCP时间'\n        });\n        break;\n        \n      case 'fid-high':\n        recommendations.push({\n          priority: 'high',\n          category: 'Interactivity',\n          title: '改善首次输入响应',\n          description: '主线程阻塞导致交互延迟',\n          actions: [\n            '将长任务分解为小块',\n            '使用Web Workers处理复杂计算',\n            '避免在事件处理程序中执行重计算',\n            '使用requestIdleCallback处理非关键任务'\n          ],\n          estimatedImpact: '可减少50-70%的FID时间'\n        });\n        break;\n    }\n  }"}}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":2,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\n// 性能指标数据验证Schema\nconst PerformanceMetricsSchema = z.object({\n  fcp: z.number().optional(),\n  lcp: z.number().optional(),\n  fid: z.number().optional(),\n  cls: z.number().optional(),\n  ttfb: z.number().optional(),\n  loadTime: z.number().optional(),\n  domContentLoaded: z.number().optional(),\n  deviceInfo: z.object({\n    userAgent: z.string(),\n    connectionType: z.string().optional(),\n    deviceMemory: z.number().optional(),\n    hardwareConcurrency: z.number().optional(),\n    maxTouchPoints: z.number().optional(),\n    isMobile: z.boolean(),\n    isLowEndDevice: z.boolean()\n  }).optional(),\n  resourceTimings: z.array(z.any()).optional(),\n  errors: z.array(z.object({\n    type: z.enum(['javascript', 'resource', 'navigation']),\n    message: z.string(),\n    filename: z.string().optional(),\n    lineno: z.number().optional(),\n    colno: z.number().optional(),\n    timestamp: z.number(),\n    stack: z.string().optional()\n  })).optional(),\n  timestamp: z.string(),\n  sessionId: z.string(),\n  pageUrl: z.string(),\n  referrer: z.string().optional()\n});\n\n// 简单的内存存储\nconst performanceStore: any[] = [];\nconst MAX_RECORDS = 1000;\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const type = searchParams.get('type') || 'stats';\n    const timeRange = searchParams.get('timeRange') || '24h';\n    const deviceType = searchParams.get('deviceType');\n    const pageUrl = searchParams.get('pageUrl');\n\n    // 移动端性能数据查询\n    if (type === 'mobile-stats') {\n      const stats = await getMobilePerformanceStats({ timeRange, deviceType, pageUrl });\n      return NextResponse.json({\n        success: true,\n        data: stats\n      });\n    }\n\n    if (type === 'mobile-issues') {\n      const issues = getMobilePerformanceIssues({ timeRange, deviceType, pageUrl });\n      return NextResponse.json({\n        success: true,\n        data: issues\n      });\n    }\n\n    if (type === 'mobile-recommendations') {\n      const recommendations = getMobileOptimizationRecommendations({ timeRange, deviceType, pageUrl });\n      return NextResponse.json({\n        success: true,\n        data: recommendations\n      });\n    }\n\n    // 兼容原有的API\n    if (type === 'stats') {\n      const stats = {\n        totalRequests: performanceStore.length,\n        averageResponseTime: 0,\n        cacheHitRate: 0,\n        errorRate: 0,\n        slowQueries: [],\n        mobileStats: getMockMobileStats()\n      };\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          timestamp: Date.now(),\n          performance: stats,\n          summary: stats\n        }\n      });\n    }\n\n    if (type === 'export') {\n      const exportData = {\n        exportTime: new Date().toISOString(),\n        performance: performanceStore.slice(-50)\n      };\n\n      return NextResponse.json({\n        success: true,\n        data: exportData\n      });\n    }\n\n    // 默认返回基本统计\n    return NextResponse.json({\n      success: true,\n      data: {\n        timestamp: Date.now(),\n        performance: {\n          totalRecords: performanceStore.length,\n          mobileStats: getMockMobileStats()\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Performance stats error:', error);\n    return NextResponse.json(\n      { \n        error: '获取性能统计失败', \n        message: error.message \n      },\n      { status: 500 }\n    );\n  }\n}\n\n// 获取移动端性能统计数据\nasync function getMobilePerformanceStats(filters: {\n  timeRange?: string;\n  deviceType?: string;\n  pageUrl?: string;\n}) {\n  // 过滤数据\n  let filteredData = performanceStore;\n  \n  if (filters.deviceType === 'mobile') {\n    filteredData = filteredData.filter(item => item.deviceInfo?.isMobile);\n  } else if (filters.deviceType === 'desktop') {\n    filteredData = filteredData.filter(item => !item.deviceInfo?.isMobile);\n  }\n  \n  if (filters.pageUrl) {\n    filteredData = filteredData.filter(item => item.pageUrl === filters.pageUrl);\n  }\n\n  // 计算平均值\n  const stats = {\n    overview: {\n      totalSessions: filteredData.length,\n      averageFcp: calculateAverage(filteredData, 'fcp'),\n      averageLcp: calculateAverage(filteredData, 'lcp'),\n      averageFid: calculateAverage(filteredData, 'fid'),\n      averageCls: calculateAverage(filteredData, 'cls'),\n      averageTtfb: calculateAverage(filteredData, 'ttfb'),\n      performanceScore: calculateAverageScore(filteredData)\n    },\n    deviceBreakdown: {\n      mobile: calculateDeviceStats(filteredData, true),\n      desktop: calculateDeviceStats(filteredData, false)\n    },\n    recentIssues: getRecentIssues(filteredData),\n    trends: calculateTrends(filteredData)\n  };\n\n  return stats;\n}\n\n// 获取移动端性能问题\nfunction getMobilePerformanceIssues(filters: {\n  timeRange?: string;\n  deviceType?: string;\n  pageUrl?: string;\n}) {\n  let filteredData = performanceStore;\n  \n  if (filters.deviceType === 'mobile') {\n    filteredData = filteredData.filter(item => item.deviceInfo?.isMobile);\n  }\n  \n  // 汇总所有问题\n  const allIssues = filteredData.flatMap(item => item.issues || []);\n  const issueCounts = allIssues.reduce((acc, issue) => {\n    acc[issue.type] = (acc[issue.type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  return {\n    totalIssues: allIssues.length,\n    topIssues: Object.entries(issueCounts)\n      .map(([type, count]) => ({\n        type,\n        count,\n        severity: getIssueSeverity(type)\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10)\n  };\n}\n\n// 获取移动端优化建议\nfunction getMobileOptimizationRecommendations(filters: {\n  timeRange?: string;\n  deviceType?: string;\n  pageUrl?: string;\n}) {\n  const stats = getMobilePerformanceStats(filters);\n  const issues = getMobilePerformanceIssues(filters);\n  \n  const recommendations: Array<{\n    priority: 'high' | 'medium' | 'low';\n    category: string;\n    title: string;\n    description: string;\n    actions: string[];\n    estimatedImpact: string;\n  }> = [];\n\n  // 基于统计数据生成建议\n  if (stats.overview.averageFcp > 3000) {\n    recommendations.push({\n      priority: 'high',\n      category: 'Loading Performance',\n      title: '优化首次内容绘制',\n      description: 'FCP平均值过高，影响用户感知速度',\n      actions: [\n        '启用图片懒加载',\n        '压缩CSS文件',\n        '减少阻塞资源',\n        '使用CDN加速'\n      ],\n      estimatedImpact: '可减少30-50% FCP时间'\n    });\n  }\n\n  if (stats.overview.averageLcp > 4000) {\n    recommendations.push({\n      priority: 'high',\n      category: 'Loading Performance',\n      title: '优化最大内容绘制',\n      description: 'LCP平均值过高',\n      actions: [\n        '优化关键资源加载',\n        '使用WebP格式图片',\n        '预加载关键内容',\n        '移除未使用代码'\n      ],\n      estimatedImpact: '可减少40-60% LCP时间'\n    });\n  }\n\n  if (issues.totalIssues > 10) {\n    recommendations.push({\n      priority: 'high',\n      category: 'Error Management',\n      title: '修复性能问题',\n      description: '检测到多个性能问题需要修复',\n      actions: [\n        '修复JavaScript错误',\n        '优化资源加载',\n        '改善布局稳定性',\n        '启用错误边界'\n      ],\n      estimatedImpact: '显著提升用户体验'\n    });\n  }\n\n  return {\n    totalRecommendations: recommendations.length,\n    recommendations,\n    priority: {\n      high: recommendations.filter(r => r.priority === 'high').length,\n      medium: recommendations.filter(r => r.priority === 'medium').length,\n      low: recommendations.filter(r => r.priority === 'low').length\n    }\n  };\n}\n\n// 辅助函数\nfunction calculateAverage(data: any[], field: string): number {\n  const values = data.map(item => item[field]).filter(val => typeof val === 'number');\n  return values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;\n}\n\nfunction calculateAverageScore(data: any[]): number {\n  const scores = data.map(item => item.score?.overall).filter(score => typeof score === 'number');\n  return scores.length > 0 ? scores.reduce((sum, score) => sum + score, 0) / scores.length : 0;\n}\n\nfunction calculateDeviceStats(data: any[], isMobile: boolean): { sessions: number; avgScore: number } {\n  const deviceData = data.filter(item => item.deviceInfo?.isMobile === isMobile);\n  return {\n    sessions: deviceData.length,\n    avgScore: calculateAverageScore(deviceData)\n  };\n}\n\nfunction getRecentIssues(data: any[]): any[] {\n  const allIssues = data.slice(-10).flatMap(item => item.issues || []);\n  return allIssues.slice(0, 5);\n}\n\nfunction calculateTrends(data: any[]): any {\n  return {\n    fcp: [\n      { time: '00:00', value: calculateAverage(data.slice(-6, -4), 'fcp') },\n      { time: '04:00', value: calculateAverage(data.slice(-4, -2), 'fcp') },\n      { time: '08:00', value: calculateAverage(data.slice(-2), 'fcp') }\n    ],\n    lcp: [\n      { time: '00:00', value: calculateAverage(data.slice(-6, -4), 'lcp') },\n      { time: '04:00', value: calculateAverage(data.slice(-4, -2), 'lcp') },\n      { time: '08:00', value: calculateAverage(data.slice(-2), 'lcp') }\n    ]\n  };\n}\n\nfunction getIssueSeverity(type: string): 'low' | 'medium' | 'high' | 'critical' {\n  const severityMap: Record<string, 'low' | 'medium' | 'high' | 'critical'> = {\n    'fcp-slow': 'high',\n    'lcp-slow': 'high',\n    'fid-high': 'high',\n    'cls-high': 'medium',\n    'ttfb-slow': 'medium',\n    'high-error-count': 'critical'\n  };\n  return severityMap[type] || 'low';\n}\n\nfunction getMockMobileStats() {\n  return {\n    totalSessions: 1250,\n    averageFcp: 2100,\n    averageLcp: 3200,\n    averageFid: 85,\n    averageCls: 0.12,\n    averageTtfb: 1200,\n    performanceScore: 78\n  };\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const type = searchParams.get('type') || 'all';\n\n    if (type === 'mobile') {\n      // 只清除移动端性能数据\n      performanceStore.splice(0, performanceStore.length);\n      return NextResponse.json({\n        success: true,\n        message: '移动端性能监控数据已清除'\n      });\n    }\n\n    if (type === 'old') {\n      // 清除7天前的数据\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      \n      const initialLength = performanceStore.length;\n      for (let i = performanceStore.length - 1; i >= 0; i--) {\n        const item = performanceStore[i];\n        if (new Date(item.timestamp) < sevenDaysAgo) {\n          performanceStore.splice(i, 1);\n        }\n      }\n      \n      return NextResponse.json({\n        success: true,\n        message: `已清除 ${initialLength - performanceStore.length} 条旧记录`\n      });\n    }\n\n    // 清除所有数据\n    performanceStore.splice(0, performanceStore.length);\n\n    return NextResponse.json({\n      success: true,\n      message: '所有性能监控数据已清除'\n    });\n\n  } catch (error: any) {\n    console.error('Clear performance data error:', error);\n    return NextResponse.json(\n      { \n        error: '清除数据失败', \n        message: error.message \n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // 检查是否为移动端性能数据\n    if (body.timestamp && body.sessionId) {\n      // 处理移动端性能监控数据\n      const validatedData = PerformanceMetricsSchema.parse(body);\n      \n      // 计算性能评分\n      const score = calculatePerformanceScore(validatedData);\n      \n      // 识别性能问题\n      const issues = identifyPerformanceIssues(validatedData);\n      \n      // 生成优化建议\n      const recommendations = generateOptimizationRecommendations(validatedData, issues);\n      \n      // 存储数据\n      const record = {\n        id: Date.now().toString(),\n        ...validatedData,\n        score,\n        issues,\n        recommendations,\n        processedAt: new Date()\n      };\n      \n      performanceStore.push(record);\n      \n      // 保持记录数量限制\n      if (performanceStore.length > MAX_RECORDS) {\n        performanceStore.splice(0, performanceStore.length - MAX_RECORDS);\n      }\n      \n      // 发送告警（如果有问题）\n      if (issues.length > 0) {\n        console.log('Performance Alert:', {\n          pageUrl: validatedData.pageUrl,\n          sessionId: validatedData.sessionId,\n          issues: issues.map(i => ({ type: i.type, severity: i.severity })),\n          timestamp: new Date()\n        });\n      }\n      \n      return NextResponse.json({\n        success: true,\n        message: '移动端性能数据已接收',\n        score,\n        recommendations\n      });\n    } else {\n      // 兼容旧的API：记录自定义指标\n      const { name, value } = body;\n      if (name && typeof value === 'number') {\n        const record = {\n          id: Date.now().toString(),\n          type: 'custom-metric',\n          name,\n          value,\n          timestamp: new Date().toISOString()\n        };\n        \n        performanceStore.push(record);\n        \n        return NextResponse.json({\n          success: true,\n          message: `指标 ${name} 已记录: ${value}`\n        });\n      }\n    }\n\n    return NextResponse.json(\n      { error: '无效的指标数据' },\n      { status: 400 }\n    );\n\n  } catch (error: any) {\n    console.error('Record metric error:', error);\n    return NextResponse.json(\n      { \n        error: '记录指标失败', \n        message: error.message \n      },\n      { status: 500 }\n    );\n  }\n}\n\n// 计算性能评分\nfunction calculatePerformanceScore(data: z.infer<typeof PerformanceMetricsSchema>) {\n  const scores = {\n    fcp: data.fcp ? getScore(data.fcp, 1800, 3500) : null,\n    lcp: data.lcp ? getScore(data.lcp, 2500, 4500) : null,\n    fid: data.fid ? getScore(data.fid, 100, 300) : null,\n    cls: data.cls ? getScore(data.cls * 1000, 0.1, 0.25) : null,\n    ttfb: data.ttfb ? getScore(data.ttfb, 800, 1800) : null\n  };\n  \n  const validScores = Object.values(scores).filter(score => score !== null) as number[];\n  const overallScore = validScores.length > 0 \n    ? validScores.reduce((sum, score) => sum + score, 0) / validScores.length \n    : 0;\n  \n  return {\n    ...scores,\n    overall: Math.round(overallScore)\n  };\n}\n\n// 获取单项指标评分\nfunction getScore(value: number, good: number, poor: number): number {\n  if (value <= good) return 100;\n  if (value >= poor) return 0;\n  return Math.round(((poor - value) / (poor - good)) * 100);\n}\n\n// 识别性能问题\nfunction identifyPerformanceIssues(data: z.infer<typeof PerformanceMetricsSchema>) {\n  const issues: Array<{\n    type: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    message: string;\n    metric?: string;\n    value?: number;\n    threshold?: { good: number; poor: number };\n  }> = [];\n  \n  if (data.fcp && data.fcp > 3500) {\n    issues.push({\n      type: 'fcp-slow',\n      severity: data.fcp > 5000 ? 'critical' : 'high',\n      message: '首次内容绘制时间过长',\n      metric: 'FCP',\n      value: data.fcp,\n      threshold: { good: 1800, poor: 3500 }\n    });\n  }\n  \n  if (data.lcp && data.lcp > 4500) {\n    issues.push({\n      type: 'lcp-slow',\n      severity: data.lcp > 6000 ? 'critical' : 'high',\n      message: '最大内容绘制时间过长',\n      metric: 'LCP',\n      value: data.lcp,\n      threshold: { good: 2500, poor: 4500 }\n    });\n  }\n  \n  if (data.fid && data.fid > 300) {\n    issues.push({\n      type: 'fid-high',\n      severity: data.fid > 500 ? 'critical' : 'high',\n      message: '首次输入延迟过高',\n      metric: 'FID',\n      value: data.fid,\n      threshold: { good: 100, poor: 300 }\n    });\n  }\n  \n  if (data.cls && data.cls > 0.25) {\n    issues.push({\n      type: 'cls-high',\n      severity: data.cls > 0.4 ? 'critical' : 'high',\n      message: '累积布局偏移过大',\n      metric: 'CLS',\n      value: data.cls,\n      threshold: { good: 0.1, poor: 0.25 }\n    });\n  }\n  \n  if (data.ttfb && data.ttfb > 1800) {\n    issues.push({\n      type: 'ttfb-slow',\n      severity: data.ttfb > 3000 ? 'critical' : 'medium',\n      message: '服务器响应时间过长',\n      metric: 'TTFB',\n      value: data.ttfb,\n      threshold: { good: 800, poor: 1800 }\n    });\n  }\n  \n  if (data.errors && data.errors.length > 5) {\n    issues.push({\n      type: 'high-error-count',\n      severity: data.errors.length > 10 ? 'critical' : 'high',\n      message: `页面错误过多：${data.errors.length}个错误`\n    });\n  }\n  \n  return issues;\n}\n\n// 生成优化建议\nfunction generateOptimizationRecommendations(data: z.infer<typeof PerformanceMetricsSchema>, issues: any[]) {\n  const recommendations: Array<{\n    priority: 'high' | 'medium' | 'low';\n    category: string;\n    title: string;\n    description: string;\n    actions: string[];\n    estimatedImpact: string;\n  }> = [];\n  \n  issues.forEach(issue => {\n    switch (issue.type) {\n      case 'fcp-slow':\n        recommendations.push({\n          priority: 'high',\n          category: 'Loading Performance',\n          title: '优化首次内容绘制',\n          description: 'FCP时间过长影响用户感知速度',\n          actions: [\n            '启用图片懒加载和预加载',\n            '压缩和优化CSS文件',\n            '减少关键渲染路径的阻塞资源',\n            '使用CDN加速静态资源'\n          ],\n          estimatedImpact: '可减少30-50%的FCP时间'\n        });\n        break;\n        \n      case 'lcp-slow':\n        recommendations.push({\n          priority: 'high',\n          category: 'Loading Performance',\n          title: '优化最大内容绘制',\n          description: 'LCP通常是页面主要内容，需要重点优化',\n          actions: [\n            '优化关键资源加载顺序',\n            '使用WebP/AVIF等现代图片格式',\n            '预加载hero图像和关键字体',\n            '移除未使用的CSS和JavaScript'\n          ],\n          estimatedImpact: '可减少40-60%的LCP时间'\n        });\n        break;\n        \n      case 'fid-high':\n        recommendations.push({\n          priority: 'high',\n          category: 'Interactivity',\n          title: '改善首次输入响应',\n          description: '主线程阻塞导致交互延迟',\n          actions: [\n            '将长任务分解为小块',\n            '使用Web Workers处理复杂计算',\n            '避免在事件处理程序中执行重计算',\n            '使用requestIdleCallback处理非关键任务'\n          ],\n          estimatedImpact: '可减少50-70%的FID时间'\n        });\n        break;\n    }\n  });\n  \n  return recommendations;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/products/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'jwt' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jwt' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":11},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[671,699],"text":"(searchParams.get('language') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[671,699],"text":"(searchParams.get('language') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[671,699],"text":"(Boolean(searchParams.get('language')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[700,702],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":38,"column":22,"nodeType":"MemberExpression","endLine":38,"endColumn":48},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":38,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":38,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1037,1039],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":45,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":45,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1191,1197],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1207,1256],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":103,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":103,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2946,2961],"text":"((user?.firstName) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2946,2961],"text":"((user?.firstName) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2946,2961],"text":"(Boolean((user?.firstName)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":103,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":103,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2946,2979],"text":"(user?.firstName ?? user?.username)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":103,"column":40,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":103,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2965,2979],"text":"((user?.username) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2965,2979],"text":"((user?.username) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2965,2979],"text":"(Boolean((user?.username)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":103,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":103,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2980,2982],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4780,4823],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { PerformanceMonitor } from '@/lib/performance';\nimport { MemoryCache } from '@/lib/memory-cache';\nimport {\n  ProductMultilingualService,\n  type SupportedLanguage,\n} from '@/lib/services/multilingual-query';\n\n// 内存缓存实例\nconst cache = new MemoryCache(100);\nconst CACHE_TTL = 300000; // 5分钟\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  const startTime = Date.now();\n  \n  try {\n    const { id } = params;\n    const searchParams = request.nextUrl.searchParams;\n    const languageParam = searchParams.get('language') || 'tg-TJ';\n    \n    // 映射旧语言代码到新格式\n    const languageMap: Record<string, SupportedLanguage> = {\n      'zh': 'zh-CN',\n      'en': 'en-US',\n      'ru': 'ru-RU',\n      'tg': 'tg-TJ',\n      'zh-CN': 'zh-CN',\n      'en-US': 'en-US',\n      'ru-RU': 'ru-RU',\n      'tg-TJ': 'tg-TJ',\n    };\n    \n    const language = languageMap[languageParam] || 'tg-TJ';\n\n    // 构建缓存键\n    const cacheKey = `products:detail:${id}:${language}`;\n    \n    // 尝试从缓存获取数据\n    const cached = cache.get(cacheKey);\n    if (cached) {\n      console.log('Cache hit for product detail:', id);\n      return NextResponse.json({\n        success: true,\n        data: cached,\n        cached: true,\n        responseTime: Date.now() - startTime\n      }, {\n        headers: {\n          'Cache-Control': 'public, max-age=300, stale-while-revalidate=600',\n          'X-Response-Time': `${Date.now() - startTime}ms`,\n          'X-Cache-Status': 'HIT'\n        }\n      });\n    }\n\n    return PerformanceMonitor.measure('products/detail', async () => {\n      // 使用多语言服务获取产品（包含翻译）\n      const product = await ProductMultilingualService.getProductById(id, language);\n\n      if (!product) {\n        return NextResponse.json({ error: '商品不存在' }, { status: 404 });\n      }\n\n      // 获取当前进行中的夺宝期次和参与记录\n      const currentRound = await prisma.lotteryRounds.findFirst({\n        where: { \n          productId: id,\n          status: 'active'\n        },\n        orderBy: { createdAt: 'desc' }\n      });\n\n      const recentParticipations = currentRound ? await prisma.participations.findMany({\n        where: { roundId: currentRound.id },\n        orderBy: { createdAt: 'desc' },\n        take: 10\n      }) : [];\n\n      // 获取参与用户信息\n      const userIds = recentParticipations.map(p => p.userId);\n      const users = userIds.length > 0 ? await prisma.users.findMany({\n        where: { id: { in: userIds } },\n        select: { \n          id: true, \n          firstName: true, \n          username: true,\n          telegramId: true \n        }\n      }) : [];\n\n      const userMap = new Map(users.map(u => [u.id, u]));\n\n      const formattedParticipations = recentParticipations.map(p => {\n        const user = userMap.get(p.userId);\n        return {\n          id: p.id,\n          userId: p.userId,\n          userName: user?.firstName || user?.username || '匿名用户',\n          sharesCount: p.sharesCount,\n          numbers: p.numbers,\n          createdAt: p.createdAt\n        };\n      });\n\n      const responseData = {\n        id: product.id,\n        name: product.name,  // 已经是翻译后的文本\n        description: product.description,  // 已经是翻译后的文本\n        category: product.category,  // 已经是翻译后的文本\n        images: product.images,\n        marketPrice: parseFloat(product.marketPrice.toString()),\n        totalShares: product.totalShares,\n        pricePerShare: parseFloat(product.pricePerShare.toString()),\n        stock: product.stock,\n        status: product.status,\n        currentRound: currentRound ? {\n          id: currentRound.id,\n          roundNumber: currentRound.roundNumber,\n          totalShares: currentRound.totalShares,\n          soldShares: currentRound.soldShares,\n          status: currentRound.status,\n          participants: currentRound.participants,\n          progress: Math.round((currentRound.soldShares / currentRound.totalShares) * 100),\n          remainingShares: currentRound.totalShares - currentRound.soldShares\n        } : null,\n        recentParticipations: formattedParticipations,\n        _multilingual: product._multilingual  // 保留原始多语言数据\n      };\n\n      // 存储到缓存\n      cache.set(cacheKey, responseData, CACHE_TTL);\n\n      const responseTime = Date.now() - startTime;\n\n      return NextResponse.json({\n        success: true,\n        data: responseData,\n        cached: false,\n        responseTime,\n        timestamp: Date.now()\n      }, {\n        headers: {\n          'Cache-Control': 'public, max-age=300, stale-while-revalidate=600',\n          'X-Response-Time': `${responseTime}ms`,\n          'X-Cache-Status': 'MISS',\n          'X-Timestamp': Date.now().toString()\n        }\n      });\n    });\n\n  } catch (error: any) {\n    console.error('Get product error:', error);\n    return NextResponse.json(\n      { \n        error: '获取商品详情失败', \n        message: error.message,\n        responseTime: Date.now() - startTime \n      },\n      { \n        status: 500,\n        headers: {\n          'X-Response-Time': `${Date.now() - startTime}ms`\n        }\n      }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/products/list/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":175,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":175,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4387,4415],"text":"(searchParams.get('language') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4387,4415],"text":"(searchParams.get('language') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4387,4415],"text":"(Boolean(searchParams.get('language')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":175,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":175,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4416,4418],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":183,"column":18,"nodeType":"MemberExpression","endLine":183,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":184,"column":33,"nodeType":"MemberExpression","endLine":184,"endColumn":49}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { withErrorHandling } from '../../../../lib/middleware';\nimport { createRequestTracker } from '../../../../lib/request-tracker';\nimport { getLogger } from '../../../../lib/logger';\nimport { getMonitor } from '../../../../lib/monitoring';\nimport { respond } from '../../../../lib/responses';\n\n// 模拟商品数据\nconst mockProducts = [\n  {\n    id: '1',\n    name: 'iPhone 15 Pro Max',\n    name_zh: 'iPhone 15 Pro Max',\n    name_en: 'iPhone 15 Pro Max', \n    name_ru: 'iPhone 15 Pro Max',\n    name_tj: 'iPhone 15 Pro Max',\n    description: '最新款iPhone 15 Pro Max',\n    marketPrice: 8999,\n    originalPrice: 9999,\n    images: ['https://images.unsplash.com/photo-1695048133142-1a20484d2569?w=400'],\n    category: 'electronics',\n    tags: ['手机', '苹果', 'iPhone'],\n    marketingBadge: {\n      type: 'hot',\n      text: {\n        zh: '热销',\n        en: 'Hot',\n        ru: 'Горячий',\n        tj: 'Гарм'\n      }\n    },\n    currentRound: {\n      id: 'round-1',\n      soldShares: 150,\n      totalShares: 200,\n      progress: 75\n    }\n  },\n  {\n    id: '2', \n    name: 'MacBook Air M3',\n    name_zh: 'MacBook Air M3',\n    name_en: 'MacBook Air M3',\n    name_ru: 'MacBook Air M3', \n    name_tj: 'MacBook Air M3',\n    description: '轻薄高性能笔记本电脑',\n    marketPrice: 7999,\n    originalPrice: 8999,\n    images: ['https://images.unsplash.com/photo-1541807084-5c52b6b3adef?w=400'],\n    category: 'electronics',\n    tags: ['笔记本', 'Mac', '苹果'],\n    marketingBadge: {\n      type: 'new',\n      text: {\n        zh: '新品',\n        en: 'New',\n        ru: 'Новый',\n        tj: 'Нав'\n      }\n    },\n    currentRound: {\n      id: 'round-2',\n      soldShares: 80,\n      totalShares: 100,\n      progress: 80\n    }\n  },\n  {\n    id: '3',\n    name: 'AirPods Pro 3',\n    name_zh: 'AirPods Pro 3',\n    name_en: 'AirPods Pro 3',\n    name_ru: 'AirPods Pro 3',\n    name_tj: 'AirPods Pro 3', \n    description: '无线降噪耳机',\n    marketPrice: 1899,\n    originalPrice: 2199,\n    images: ['https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=400'],\n    category: 'audio',\n    tags: ['耳机', '无线', '降噪'],\n    marketingBadge: {\n      type: 'sale',\n      text: {\n        zh: '特价',\n        en: 'Sale',\n        ru: 'Распродажа', \n        tj: 'Фурӯш'\n      }\n    },\n    currentRound: null\n  },\n  {\n    id: '4',\n    name: 'iPad Air 5',\n    name_zh: 'iPad Air 5',\n    name_en: 'iPad Air 5',\n    name_ru: 'iPad Air 5',\n    name_tj: 'iPad Air 5',\n    description: '轻薄平板电脑',\n    marketPrice: 4599,\n    originalPrice: 4999,\n    images: ['https://images.unsplash.com/photo-1544244015-0df4b3ffc6b0?w=400'],\n    category: 'tablet',\n    tags: ['平板', 'iPad', '苹果'],\n    marketingBadge: null,\n    currentRound: {\n      id: 'round-4',\n      soldShares: 20,\n      totalShares: 50,\n      progress: 40\n    }\n  },\n  {\n    id: '5',\n    name: 'Apple Watch Series 9',\n    name_zh: 'Apple Watch Series 9',\n    name_en: 'Apple Watch Series 9',\n    name_ru: 'Apple Watch Series 9',\n    name_tj: 'Apple Watch Series 9',\n    description: '智能手表',\n    marketPrice: 2999,\n    originalPrice: 3199,\n    images: ['https://images.unsplash.com/photo-1434493789847-2f02dc6ca35d?w=400'],\n    category: 'wearable',\n    tags: ['手表', '智能', '苹果'],\n    marketingBadge: {\n      type: 'exclusive',\n      text: {\n        zh: '独家',\n        en: 'Exclusive',\n        ru: 'Эксклюзив',\n        tj: 'Истисноӣ'\n      }\n    },\n    currentRound: {\n      id: 'round-5',\n      soldShares: 35,\n      totalShares: 60,\n      progress: 58\n    }\n  },\n  {\n    id: '6',\n    name: 'Mac Studio M3',\n    name_zh: 'Mac Studio M3',\n    name_en: 'Mac Studio M3',\n    name_ru: 'Mac Studio M3',\n    name_tj: 'Mac Studio M3',\n    description: '高性能台式机',\n    marketPrice: 12999,\n    originalPrice: 14999,\n    images: ['https://images.unsplash.com/photo-1587202372634-32705e3bf49c?w=400'],\n    category: 'desktop',\n    tags: ['台式机', 'Mac', '高性能'],\n    marketingBadge: null,\n    currentRound: {\n      id: 'round-6',\n      soldShares: 10,\n      totalShares: 30,\n      progress: 33\n    }\n  }\n];\n\nexport const GET = withErrorHandling(async (req: NextRequest) => {\n  const tracker = createRequestTracker(req);\n  const logger = getLogger();\n  const monitor = getMonitor();\n  const requestId = tracker.getRequestId();\n\n  logger.logRequest(req, { requestId, traceId: tracker.getTraceId() });\n\n  try {\n    const { searchParams } = new URL(req.url);\n    const language = searchParams.get('language') || 'zh';\n\n    // 根据语言返回商品数据\n    const products = mockProducts.map(product => {\n      const localizedProduct = { ...product };\n      \n      // 根据语言选择商品名称\n      const nameKey = `name_${language}` as keyof typeof product;\n      if (typeof product[nameKey] === 'string') {\n        localizedProduct.name = product[nameKey] as string;\n      }\n\n      return localizedProduct;\n    });\n\n    // 记录成功响应\n    tracker.finishSpan(tracker.getTraceId(), true, { \n      result: 'success' \n    });\n\n    logger.logResponse(req, 200, { \n      requestId,\n      traceId: tracker.getTraceId(),\n    });\n\n    // 记录监控指标\n    monitor.recordRequest(req, 200);\n\n    return NextResponse.json(\n      respond.success({ products }, requestId).toJSON(),\n      { status: 200 }\n    );\n\n  } catch (error) {\n    logger.error('Products list failed', error as Error, { \n      requestId, \n      traceId: tracker.getTraceId() \n    });\n    \n    throw error;\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/products/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":28,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[580,608],"text":"(searchParams.get('language') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[580,608],"text":"(searchParams.get('language') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[580,608],"text":"(Boolean(searchParams.get('language')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[609,611],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[664,692],"text":"(searchParams.get('category') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[664,692],"text":"(searchParams.get('category') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[664,692],"text":"(Boolean(searchParams.get('category')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[693,695],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":30,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[734,759],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[734,759],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[734,759],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[760,762],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":31,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[798,824],"text":"(searchParams.get('offset') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[798,824],"text":"(searchParams.get('offset') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[798,824],"text":"(Boolean(searchParams.get('offset')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[825,827],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":32,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":32,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[853,879],"text":"(searchParams.get('status') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[853,879],"text":"(searchParams.get('status') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[853,879],"text":"(Boolean(searchParams.get('status')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[880,882],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1835,1838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1835,1838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1846,1878],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":82,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":82,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2013,2026],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":82,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":82,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2027,2029],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 产品API路由 - 多语言版本\n * \n * 支持根据用户语言偏好返回翻译后的产品数据\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport {\n  ProductMultilingualService,\n  type SupportedLanguage,\n} from '@/lib/services/multilingual-query';\n\n/**\n * GET /api/products\n * \n * 查询参数:\n * - language: 用户首选语言 (zh-CN, en-US, ru-RU, tg-TJ)\n * - category: 产品分类（可选）\n * - limit: 每页数量（可选，默认20）\n * - offset: 分页偏移（可选，默认0）\n * - status: 产品状态（可选，默认active）\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    \n    // 获取语言参数，默认塔吉克语\n    const language = (searchParams.get('language') || 'tg-TJ') as SupportedLanguage;\n    const category = searchParams.get('category') || undefined;\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const status = searchParams.get('status') || 'active';\n\n    // 验证语言参数\n    const validLanguages: SupportedLanguage[] = ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'];\n    if (!validLanguages.includes(language)) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'INVALID_LANGUAGE',\n            message: `不支持的语言代码: ${language}。支持的语言: ${validLanguages.join(', ')}`,\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    // 使用多语言服务查询产品\n    const products = await ProductMultilingualService.getProductsByLanguage(\n      language,\n      {\n        category,\n        limit,\n        offset,\n      }\n    );\n\n    // 过滤状态\n    const filteredProducts = products.filter(p => p.status === status);\n\n    return NextResponse.json({\n      success: true,\n      data: filteredProducts,\n      meta: {\n        language,\n        total: filteredProducts.length,\n        limit,\n        offset,\n        category,\n        status,\n      },\n    });\n  } catch (error: any) {\n    console.error('产品查询错误:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'QUERY_ERROR',\n          message: error.message || '查询产品失败',\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/recharge/first-time/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'jwt' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jwt' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'validationEngine' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validationEngine' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'supabaseAdmin' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabaseAdmin' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1310,1344],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2373,2407],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":113,"column":60,"nodeType":"CallExpression","messageId":"substr","endLine":113,"endColumn":99,"fix":{"range":[2855,2866],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":125,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":125,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":170,"column":12,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":170,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4203,4236],"text":"(Boolean((balanceUpdateResult?.[0]?.success)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":171,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":171,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4264,4303],"text":"(Boolean((balanceUpdateResult?.[0]?.error_message)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":171,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":171,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4304,4306],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5441,5444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5441,5444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":229,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":229,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5638,5651],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":229,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":229,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5652,5654],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5802,5805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5802,5805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":241,"column":60,"nodeType":"CallExpression","messageId":"substr","endLine":241,"endColumn":99,"fix":{"range":[5928,5939],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6282,6285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6282,6285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6827,6830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6827,6830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":289,"column":59,"nodeType":"CallExpression","messageId":"substr","endLine":289,"endColumn":98,"fix":{"range":[6952,6963],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":301,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":301,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7166,7173],"text":"(Boolean(orderId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":301,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":301,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7178,7192],"text":"(Boolean(rechargeAmount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":395,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":395,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9335,9353],"text":"(rewardResult.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9335,9353],"text":"(rewardResult.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9335,9353],"text":"(Boolean(rewardResult.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":395,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":395,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9354,9356],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9919,9922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9919,9922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":449,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":449,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10420,10423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10420,10423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":451,"column":61,"nodeType":"CallExpression","messageId":"substr","endLine":451,"endColumn":100,"fix":{"range":[10547,10558],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":460,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":460,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10731,10755],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10731,10755],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10731,10755],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":460,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":460,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10756,10758],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":461,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":461,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10792,10817],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10792,10817],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10792,10817],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":461,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":461,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10818,10820],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":492,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":492,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11499,11502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11499,11502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":4,"fixableWarningCount":0,"source":"/**\n * 首充奖励系统API\n * \n * 提供首充奖励查询和领取功能\n * 支持4档奖励：10/20/50/100 Som\n * 奖励比例：20%/25%/30%/35%\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { validationEngine } from '@/lib/validation';\nimport { supabaseAdmin } from '@/lib/supabase';\n\n// 首充奖励配置\nconst FIRST_RECHARGE_REWARDS = {\n  10: { reward: 2, rate: 0.20 },    // 充值10 Som → 奖励2 Som (20%)\n  20: { reward: 5, rate: 0.25 },    // 充值20 Som → 奖励5 Som (25%)\n  50: { reward: 15, rate: 0.30 },   // 充值50 Som → 奖励15 Som (30%)\n  100: { reward: 35, rate: 0.35 },  // 充值100 Som → 奖励35 Som (35%)\n} as const;\n\ntype RechargeAmount = keyof typeof FIRST_RECHARGE_REWARDS;\n\n/**\n * 检查用户是否满足首充奖励条件\n */\nasync function checkFirstRechargeEligibility(userId: string): Promise<{\n  isEligible: boolean;\n  hasFirstRecharge: boolean;\n  error?: string;\n}> {\n  try {\n    // 检查用户是否已有充值记录\n    const existingRecharge = await prisma.orders.findFirst({\n      where: {\n        userId,\n        type: 'recharge',\n        paymentStatus: 'paid',\n        fulfillmentStatus: 'completed'\n      }\n    });\n\n    return {\n      isEligible: !existingRecharge,\n      hasFirstRecharge: !!existingRecharge\n    };\n  } catch (error) {\n    console.error('检查首充资格失败:', error);\n    return {\n      isEligible: false,\n      hasFirstRecharge: false,\n      error: '检查首充资格失败'\n    };\n  }\n}\n\n/**\n * 获取用户的首充奖励状态\n */\nasync function getFirstRechargeStatus(userId: string) {\n  try {\n    // 检查用户是否满足首充条件\n    const eligibility = await checkFirstRechargeEligibility(userId);\n    \n    if (!eligibility.isEligible) {\n      return {\n        hasFirstRecharge: true,\n        isEligible: false,\n        availableRewards: [],\n        message: eligibility.hasFirstRecharge ? '您已完成首充' : '无法验证首充资格'\n      };\n    }\n\n    // 获取所有可用的首充奖励档位\n    const availableRewards = Object.entries(FIRST_RECHARGE_REWARDS).map(([amount, config]) => ({\n      amount: Number(amount),\n      reward: config.reward,\n      rate: config.rate,\n      type: 'bonus_coins' as const,\n      description: `首充${amount} Som奖励${config.reward} Som（${Math.round(config.rate * 100)}%）`,\n      isActive: true\n    }));\n\n    return {\n      hasFirstRecharge: false,\n      isEligible: true,\n      availableRewards,\n      message: '首次充值可享受奖励！'\n    };\n  } catch (error) {\n    console.error('获取首充状态失败:', error);\n    return {\n      hasFirstRecharge: false,\n      isEligible: false,\n      availableRewards: [],\n      error: '获取首充状态失败'\n    };\n  }\n}\n\n/**\n * 发放首充奖励\n */\nasync function grantFirstRechargeReward(\n  userId: string, \n  rechargeAmount: number,\n  orderId: string\n): Promise<{ success: boolean; error?: string; rewardAmount?: number }> {\n  const logger = getLogger();\n  const requestId = `first_recharge_reward_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('开始发放首充奖励', {\n      requestId,\n      userId,\n      rechargeAmount,\n      orderId\n    });\n\n    // 检查奖励配置是否存在\n    const rewardConfig = FIRST_RECHARGE_REWARDS[rechargeAmount as RechargeAmount];\n    if (!rewardConfig) {\n      return { \n        success: false, \n        error: `未找到充值金额${rechargeAmount}的奖励配置` \n      };\n    }\n\n    // 使用数据库事务确保数据一致性\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 检查用户是否已领取过该档位奖励\n      const existingReward = await tx.firstRechargeRewards.findUnique({\n        where: {\n          userId_rechargeAmount: {\n            userId,\n            rechargeAmount\n          }\n        }\n      });\n\n      if (existingReward) {\n        throw new Error('该档位奖励已领取');\n      }\n\n      // 2. 创建奖励记录\n      const rewardRecord = await tx.firstRechargeRewards.create({\n        data: {\n          userId,\n          rechargeAmount,\n          rewardType: 'bonus_coins',\n          rewardAmount: rewardConfig.reward,\n          status: 'claimed',\n          claimedAt: new Date()\n        }\n      });\n\n      // 3. 使用安全的钱包更新函数增加用户余额\n      const balanceUpdateResult = await tx.$executeRaw`\n        SELECT * FROM update_user_balance_with_optimistic_lock(\n          ${userId}::uuid,\n          ${rewardConfig.reward}::decimal,\n          'add',\n          'balance'\n        )\n      `;\n\n      if (!balanceUpdateResult?.[0]?.success) {\n        throw new Error(balanceUpdateResult?.[0]?.error_message || '余额更新失败');\n      }\n\n      // 4. 记录钱包交易\n      await tx.walletTransactions.create({\n        data: {\n          userId,\n          type: 'first_recharge_reward',\n          amount: rewardConfig.reward,\n          currency: 'TJS',\n          description: `首充奖励：充值${rechargeAmount} Som获得${rewardConfig.reward} Som奖励`,\n          status: 'completed',\n          metadata: {\n            orderId,\n            rechargeAmount,\n            rewardRate: rewardConfig.rate,\n            rewardId: rewardRecord.id\n          }\n        }\n      });\n\n      // 5. 创建通知\n      await tx.notifications.create({\n        data: {\n          userId,\n          type: 'first_recharge_reward',\n          content: `恭喜！首充奖励已到账：+${rewardConfig.reward} Som`,\n          status: 'pending'\n        }\n      });\n\n      logger.info('首充奖励发放成功', {\n        requestId,\n        userId,\n        rechargeAmount,\n        rewardAmount: rewardConfig.reward,\n        rewardId: rewardRecord.id\n      });\n\n      return {\n        success: true,\n        rewardAmount: rewardConfig.reward,\n        newBalance: balanceUpdateResult[0].new_balance\n      };\n    });\n\n    return result;\n  } catch (error: any) {\n    logger.error('发放首充奖励失败', error, {\n      requestId,\n      userId,\n      rechargeAmount,\n      orderId,\n      error: error.message\n    });\n\n    return {\n      success: false,\n      error: error.message || '发放奖励失败'\n    };\n  }\n}\n\n/**\n * GET /api/recharge/first-time\n * \n * 查询首充奖励状态和可用奖励\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  const logger = getLogger();\n  const requestId = `first_recharge_status_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('查询首充奖励状态', {\n      requestId,\n      userId: user.userId\n    });\n\n    const status = await getFirstRechargeStatus(user.userId);\n\n    return NextResponse.json({\n      success: true,\n      data: status,\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('查询首充奖励状态失败', error, {\n      requestId,\n      userId: user.userId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'STATUS_QUERY_FAILED',\n          message: '查询首充奖励状态失败',\n          details: error.message\n        }\n      },\n      { status: 500 }\n    );\n  }\n});\n\n/**\n * POST /api/recharge/first-time/claim\n * \n * 领取首充奖励\n * 请求体: { orderId: string, rechargeAmount: number }\n */\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  const logger = getLogger();\n  const requestId = `claim_first_recharge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('领取首充奖励请求', {\n      requestId,\n      userId: user.userId\n    });\n\n    const body = await request.json();\n    const { orderId, rechargeAmount } = body;\n\n    // 参数验证\n    if (!orderId || !rechargeAmount) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'INVALID_PARAMETERS',\n            message: '缺少必要参数：orderId和rechargeAmount都是必需的'\n          }\n        },\n        { status: 400 }\n      );\n    }\n\n    // 验证充值金额是否为支持的档位\n    const validAmounts = Object.keys(FIRST_RECHARGE_REWARDS).map(Number);\n    if (!validAmounts.includes(rechargeAmount)) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'INVALID_AMOUNT',\n            message: `不支持的充值金额。支持的首充档位：${validAmounts.join(', ')} Som`\n          }\n        },\n        { status: 400 }\n      );\n    }\n\n    // 检查订单是否存在且属于当前用户\n    const order = await prisma.orders.findFirst({\n      where: {\n        id: orderId,\n        userId: user.userId,\n        type: 'recharge',\n        paymentStatus: 'paid'\n      }\n    });\n\n    if (!order) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'ORDER_NOT_FOUND',\n            message: '订单不存在或未完成支付'\n          }\n        },\n        { status: 404 }\n      );\n    }\n\n    // 验证订单金额与请求金额一致\n    const orderAmount = Number(order.totalAmount);\n    if (orderAmount !== rechargeAmount) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'AMOUNT_MISMATCH',\n            message: `订单金额(${orderAmount} Som)与请求金额(${rechargeAmount} Som)不一致`\n          }\n        },\n        { status: 400 }\n      );\n    }\n\n    // 检查用户是否满足首充条件\n    const eligibility = await checkFirstRechargeEligibility(user.userId);\n    if (!eligibility.isEligible) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'NOT_ELIGIBLE',\n            message: '您不符合首充奖励条件'\n          }\n        },\n        { status: 403 }\n      );\n    }\n\n    // 发放奖励\n    const rewardResult = await grantFirstRechargeReward(\n      user.userId, \n      rechargeAmount, \n      orderId\n    );\n\n    if (!rewardResult.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'REWARD_FAILED',\n            message: rewardResult.error || '奖励发放失败'\n          }\n        },\n        { status: 500 }\n      );\n    }\n\n    logger.info('首充奖励领取成功', {\n      requestId,\n      userId: user.userId,\n      orderId,\n      rechargeAmount,\n      rewardAmount: rewardResult.rewardAmount\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        claimed: true,\n        rewardAmount: rewardResult.rewardAmount,\n        message: `首充奖励领取成功！获得${rewardResult.rewardAmount} Som奖励`\n      },\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('领取首充奖励失败', error, {\n      requestId,\n      userId: user.userId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'CLAIM_FAILED',\n          message: '领取首充奖励失败',\n          details: error.message\n        }\n      },\n      { status: 500 }\n    );\n  }\n});\n\n/**\n * GET /api/recharge/first-time/history\n * \n * 查询首充奖励历史记录\n */\nexport const GET_REWARD_HISTORY = withAuth(async (request: NextRequest, user: any) => {\n  const logger = getLogger();\n  const requestId = `first_recharge_history_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('查询首充奖励历史', {\n      requestId,\n      userId: user.userId\n    });\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n\n    const [rewards, total] = await Promise.all([\n      prisma.firstRechargeRewards.findMany({\n        where: { userId: user.userId },\n        orderBy: { createdAt: 'desc' },\n        skip: (page - 1) * limit,\n        take: limit\n      }),\n      prisma.firstRechargeRewards.count({\n        where: { userId: user.userId }\n      })\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        rewards,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      },\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('查询首充奖励历史失败', error, {\n      requestId,\n      userId: user.userId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'HISTORY_QUERY_FAILED',\n          message: '查询首充奖励历史失败',\n          details: error.message\n        }\n      },\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/recharge/packages/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1268,1302],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":64,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":64,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2172,2175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2172,2175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":89,"column":56,"nodeType":"CallExpression","messageId":"substr","endLine":89,"endColumn":95,"fix":{"range":[2294,2305],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":98,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":98,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2477,2505],"text":"(searchParams.get('language') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2477,2505],"text":"(searchParams.get('language') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2477,2505],"text":"(Boolean(searchParams.get('language')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":98,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":98,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2506,2508],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":113,"column":22,"nodeType":"MemberExpression","endLine":113,"endColumn":48},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2930,2932],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3637,3640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3637,3640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":174,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4855,4868],"text":"(Boolean(a.recommended))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":174,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4873,4886],"text":"(Boolean(b.recommended))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":174,"column":44,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":174,"endColumn":54,"fix":{"range":[4888,4898],"text":"{return -1;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":175,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":175,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4910,4923],"text":"(Boolean(a.recommended))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":175,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":175,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4927,4940],"text":"(Boolean(b.recommended))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":175,"column":44,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":175,"endColumn":53,"fix":{"range":[4942,4951],"text":"{return 1;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5546,5549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5546,5549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":212,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":212,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5803,5816],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":212,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":212,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5817,5819],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * 充值包API路由 - 多语言版本\n * \n * 支持根据用户语言偏好返回翻译后的充值包数据\n * 集成首充奖励系统，显示各档位对应的首充奖励\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport {\n  RechargePackageMultilingualService,\n  type SupportedLanguage,\n} from '@/lib/services/multilingual-query';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { prisma } from '@/lib/prisma';\n\n// 首充奖励配置\nconst FIRST_RECHARGE_REWARDS = {\n  10: { reward: 2, rate: 0.20 },    // 充值10 Som → 奖励2 Som (20%)\n  20: { reward: 5, rate: 0.25 },    // 充值20 Som → 奖励5 Som (25%)\n  50: { reward: 15, rate: 0.30 },   // 充值50 Som → 奖励15 Som (30%)\n  100: { reward: 35, rate: 0.35 },  // 充值100 Som → 奖励35 Som (35%)\n} as const;\n\ntype RechargeAmount = keyof typeof FIRST_RECHARGE_REWARDS;\n\n/**\n * 检查用户是否满足首充奖励条件\n */\nasync function checkFirstRechargeEligibility(userId: string): Promise<{\n  isEligible: boolean;\n  hasFirstRecharge: boolean;\n}> {\n  try {\n    // 检查用户是否已有完成的首充记录\n    const existingRecharge = await prisma.orders.findFirst({\n      where: {\n        userId,\n        type: 'recharge',\n        paymentStatus: 'paid',\n        fulfillmentStatus: 'completed'\n      }\n    });\n\n    return {\n      isEligible: !existingRecharge,\n      hasFirstRecharge: !!existingRecharge\n    };\n  } catch (error) {\n    console.error('检查首充资格失败:', error);\n    return {\n      isEligible: false,\n      hasFirstRecharge: false\n    };\n  }\n}\n\n/**\n * 获取包的首充奖励信息\n */\nfunction getFirstRechargeInfo(packageAmount: number, isEligible: boolean) {\n  const rewardConfig = FIRST_RECHARGE_REWARDS[packageAmount as RechargeAmount];\n  \n  if (!rewardConfig) {\n    return null;\n  }\n\n  return {\n    isAvailable: isEligible,\n    amount: rewardConfig.reward,\n    rate: rewardConfig.rate,\n    description: `首充奖励${rewardConfig.reward} Som (${Math.round(rewardConfig.rate * 100)}%)`,\n    type: 'bonus_coins' as const,\n    conditions: isEligible ? '首次充值即可获得' : '仅限首次充值',\n    highlight: isEligible,\n    savings: rewardConfig.reward\n  };\n}\n\n/**\n * GET /api/recharge/packages\n * \n * 查询参数:\n * - language: 用户首选语言 (zh-CN, en-US, ru-RU, tg-TJ)\n * - includeFirstRecharge: 是否包含首充奖励信息 (默认true)\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  const logger = getLogger();\n  const requestId = `recharge_packages_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('查询充值包列表', {\n      requestId,\n      userId: user.userId\n    });\n\n    const { searchParams } = new URL(request.url);\n    const languageParam = searchParams.get('language') || 'tg-TJ';\n    const includeFirstRecharge = searchParams.get('includeFirstRecharge') !== 'false';\n    \n    // 映射旧语言代码到新格式\n    const languageMap: Record<string, SupportedLanguage> = {\n      'zh': 'zh-CN',\n      'en': 'en-US',\n      'ru': 'ru-RU',\n      'tg': 'tg-TJ',\n      'zh-CN': 'zh-CN',\n      'en-US': 'en-US',\n      'ru-RU': 'ru-RU',\n      'tg-TJ': 'tg-TJ',\n    };\n    \n    const language = languageMap[languageParam] || 'tg-TJ';\n\n    // 验证语言参数\n    const validLanguages: SupportedLanguage[] = ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'];\n    if (!validLanguages.includes(language)) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'INVALID_LANGUAGE',\n            message: `不支持的语言代码: ${language}。支持的语言: ${validLanguages.join(', ')}`,\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    // 检查用户首充资格\n    const eligibility = await checkFirstRechargeEligibility(user.userId);\n\n    // 使用多语言服务查询充值包\n    const packages = await RechargePackageMultilingualService.getPackagesByLanguage(language);\n\n    // 为每个充值包添加首充奖励信息\n    const enhancedPackages = packages.map((pkg: any) => {\n      const packageAmount = Number(pkg.price);\n      \n      // 克隆包数据避免修改原始数据\n      const enhancedPackage = { ...pkg };\n\n      // 添加首充奖励信息\n      if (includeFirstRecharge) {\n        const firstRechargeInfo = getFirstRechargeInfo(packageAmount, eligibility.isEligible);\n        if (firstRechargeInfo) {\n          enhancedPackage.firstRecharge = firstRechargeInfo;\n          \n          // 添加推荐标签\n          if (firstRechargeInfo.isAvailable && firstRechargeInfo.rate >= 0.30) {\n            enhancedPackage.recommended = true;\n            enhancedPackage.recommendedReason = '首充奖励比例最高';\n          }\n          \n          // 计算实际获得金额（原价 + 首充奖励）\n          if (firstRechargeInfo.isAvailable) {\n            const actualCoins = pkg.coins + pkg.bonusCoins;\n            const totalReward = firstRechargeInfo.amount + actualCoins;\n            enhancedPackage.totalReward = {\n              coins: totalReward,\n              bonus: firstRechargeInfo.amount,\n              description: `总计${totalReward}夺宝币（基础${actualCoins} + 首充奖励${firstRechargeInfo.amount}）`\n            };\n          }\n        }\n      }\n\n      return enhancedPackage;\n    });\n\n    // 按推荐度和价格排序\n    enhancedPackages.sort((a, b) => {\n      // 推荐项目优先\n      if (a.recommended && !b.recommended) return -1;\n      if (!a.recommended && b.recommended) return 1;\n      \n      // 同级别按价格排序\n      return Number(a.price) - Number(b.price);\n    });\n\n    logger.info('充值包查询成功', {\n      requestId,\n      userId: user.userId,\n      packageCount: enhancedPackages.length,\n      isFirstRechargeEligible: eligibility.isEligible\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: enhancedPackages,\n      meta: {\n        language,\n        total: enhancedPackages.length,\n        user: {\n          isFirstRechargeEligible: eligibility.isEligible,\n          hasFirstRecharge: eligibility.hasFirstRecharge\n        }\n      },\n    });\n  } catch (error: any) {\n    logger.error('充值包查询错误', error, {\n      requestId,\n      userId: user.userId,\n      error: error.message\n    });\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'QUERY_ERROR',\n          message: error.message || '查询充值包失败',\n        },\n      },\n      { status: 500 }\n    );\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/resale/list/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":9,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[288,312],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[288,312],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[288,312],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":9,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":9,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[313,315],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":10,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":10,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[349,374],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[349,374],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[349,374],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":10,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":10,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[375,377],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'where' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'where' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[507,510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[507,510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":19,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":19,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[592,600],"text":"(category != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[592,600],"text":"(category ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[592,600],"text":"(Boolean(category))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":56,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":56,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1724,1745],"text":"(Boolean((countResult[0]?.total)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":56,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":56,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1746,1748],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":61,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":61,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1851,1859],"text":"(Boolean(listings))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":61,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":61,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1860,1862],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1991,1994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1991,1994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2002,2036],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2116,2129],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2130,2132],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 获取转售商品列表\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport type { ApiResponse } from '@/types';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const category = searchParams.get('category');\n    const offset = (page - 1) * limit;\n\n    // 构建查询条件\n    const where: any = { status: 'active' };\n\n    // 分类筛选需要先关联产品\n    let categoryFilter = '';\n    if (category && category !== 'all') {\n      categoryFilter = ` AND p.category = '${category}'`;\n    }\n\n    // 使用原生SQL查询以获得最佳性能，关联转售列表、商品和卖家信息\n    const query = `\n      SELECT \n        rl.*,\n        p.id as product_id,\n        p.name_zh as product_name_zh,\n        p.name_en as product_name_en,\n        p.images as product_images,\n        p.market_price as product_market_price,\n        p.category as product_category,\n        u.username as seller_username,\n        u.first_name as seller_first_name\n      FROM resale_listings rl\n      LEFT JOIN products p ON rl.product_id = p.id\n      LEFT JOIN users u ON rl.seller_user_id = u.id\n      WHERE rl.status = 'active'${categoryFilter}\n      ORDER BY rl.listed_at DESC\n      LIMIT ${limit} OFFSET ${offset}\n    `;\n\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM resale_listings rl\n      LEFT JOIN products p ON rl.product_id = p.id\n      WHERE rl.status = 'active'${categoryFilter}\n    `;\n\n    // 执行查询\n    const [listings, countResult] = await Promise.all([\n      prisma.$queryRawUnsafe(query),\n      prisma.$queryRawUnsafe(countQuery)\n    ]);\n\n    const total = Number(countResult[0]?.total || 0);\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        listings: listings || [],\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n\n  } catch (error: any) {\n    console.error('获取转售列表失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '获取转售列表失败'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/resale/purchase/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 24. Maximum allowed is 10.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":161,"endColumn":2},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[473,514],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[597,633],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[798,849],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[933,973],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1167,1219],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1572,1632],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1687,1748],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":101,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3232,3238],"text":"(Boolean(result))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3248,3288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3589,3643],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":121,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":121,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3788,3813],"text":"(Boolean(transactionResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3847,3910],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":126,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":126,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3996,4019],"text":"(Boolean(transactionResult.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":126,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":126,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4020,4022],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4085,4171],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":138,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":138,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4348,4373],"text":"(Boolean(transactionResult.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":138,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":138,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4374,4376],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4421,4424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4421,4424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4482,4552],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4618,4669],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4676,4810],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":206,"column":26,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":206,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":226,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":226,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6521,6545],"text":"(Boolean((listing.orders?.products)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6823,6826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6823,6826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6834,6870],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 购买转售商品 - 使用数据库事务确保完整性\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { generateOrderNumber } from '@/lib/utils';\nimport type { ApiResponse } from '@/types';\nimport { randomUUID } from 'crypto';\n\nexport async function POST(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const startTime = Date.now();\n  const requestId = randomUUID();\n  \n  try {\n    console.log(`[${requestId}] 开始处理转售购买请求`);\n\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      console.log(`[${requestId}] 用户未授权`);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const listingId = params.id;\n    console.log(`[${requestId}] 处理商品ID: ${listingId}`);\n\n    // 验证listingId格式\n    if (!listingId || typeof listingId !== 'string') {\n      console.log(`[${requestId}] 无效的商品ID格式`);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '无效的商品ID'\n      }, { status: 400 });\n    }\n\n    // 生成订单号\n    const orderNumber = generateOrderNumber();\n    console.log(`[${requestId}] 生成订单号: ${orderNumber}`);\n\n    // 调用数据库事务函数处理整个购买流程\n    const { data: result, error: transactionError } = await supabaseAdmin\n      .rpc('process_resale_purchase_atomic', {\n        p_listing_id: listingId,\n        p_buyer_user_id: user.userId,\n        p_order_number: orderNumber,\n        p_request_id: requestId\n      });\n\n    const executionTime = Date.now() - startTime;\n    console.log(`[${requestId}] 事务执行完成，耗时: ${executionTime}ms`);\n\n    // 处理数据库函数执行错误\n    if (transactionError) {\n      console.error(`[${requestId}] 数据库事务执行失败:`, transactionError);\n      \n      // 根据错误类型返回合适的错误信息\n      let errorMessage = '购买失败，请稍后重试';\n      let statusCode = 500;\n\n      if (transactionError.message?.includes('转售商品不存在')) {\n        errorMessage = '转售商品不存在或已售出';\n        statusCode = 404;\n      } else if (transactionError.message?.includes('商品已售出') || \n                 transactionError.message?.includes('商品已被购买')) {\n        errorMessage = '商品已被购买，请选择其他商品';\n        statusCode = 409;\n      } else if (transactionError.message?.includes('余额不足')) {\n        errorMessage = transactionError.message;\n        statusCode = 400;\n      } else if (transactionError.message?.includes('不能购买自己的')) {\n        errorMessage = transactionError.message;\n        statusCode = 400;\n      } else if (transactionError.message?.includes('用户不存在') || \n                 transactionError.message?.includes('关联订单') ||\n                 transactionError.message?.includes('商品不存在')) {\n        errorMessage = '数据异常，请联系客服';\n        statusCode = 400;\n      } else if (transactionError.code === 'PGRST116') {\n        errorMessage = '转售商品不存在';\n        statusCode = 404;\n      } else if (transactionError.code === '23505') {\n        errorMessage = '数据已存在，无法重复购买';\n        statusCode = 409;\n      } else if (transactionError.code === '55P03') {\n        errorMessage = '系统繁忙，请稍后重试';\n        statusCode = 503;\n      }\n\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: errorMessage\n      }, { status: statusCode });\n    }\n\n    // 检查事务函数返回的结果\n    if (!result) {\n      console.log(`[${requestId}] 事务函数返回空结果`);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '系统异常，请稍后重试'\n      }, { status: 500 });\n    }\n\n    // 解析事务结果\n    let transactionResult;\n    try {\n      transactionResult = typeof result === 'string' ? JSON.parse(result) : result;\n    } catch (parseError) {\n      console.error(`[${requestId}] 事务结果解析失败:`, parseError);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '系统异常，响应数据格式错误'\n      }, { status: 500 });\n    }\n\n    if (!transactionResult.success) {\n      // 业务逻辑错误（如余额不足等）\n      console.log(`[${requestId}] 业务逻辑错误:`, transactionResult.error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: transactionResult.error || '购买失败'\n      }, { status: 400 });\n    }\n\n    // 成功购买，返回结果\n    console.log(`[${requestId}] 购买成功，订单: ${transactionResult.data?.order?.order_number}`);\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        ...transactionResult.data,\n        execution_time: executionTime\n      },\n      message: transactionResult.message || '购买成功！商品已转入您的订单'\n    });\n\n  } catch (error: any) {\n    const executionTime = Date.now() - startTime;\n    console.error(`[${requestId}] 购买转售商品异常 (${executionTime}ms):`, error);\n    \n    // 记录详细错误信息用于调试\n    if (error instanceof Error) {\n      console.error(`[${requestId}] 错误堆栈:`, error.stack);\n      console.error(`[${requestId}] 错误详情:`, {\n        message: error.message,\n        name: error.name,\n        cause: error.cause\n      });\n    }\n    \n    // 返回通用错误响应\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '系统异常，请稍后重试'\n    }, { status: 500 });\n  }\n}\n\n// GET方法用于检查转售商品状态\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const listingId = params.id;\n\n    // 查询转售商品信息\n    const { data: listing, error: listingError } = await supabaseAdmin\n      .from('resale_listings')\n      .select(`\n        id,\n        seller_user_id,\n        buyer_user_id,\n        listing_price,\n        platform_fee,\n        status,\n        listed_at,\n        sold_at,\n        orders:order_id (\n          id,\n          round_id,\n          products:product_id (\n            id,\n            name_zh,\n            name_tj,\n            image_url\n          )\n        )\n      `)\n      .eq('id', listingId)\n      .single();\n\n    if (listingError || !listing) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '转售商品不存在'\n      }, { status: 404 });\n    }\n\n    // 返回商品信息（敏感信息如余额等已在前端查询）\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        listing: {\n          id: listing.id,\n          listing_price: Number(listing.listing_price),\n          platform_fee: Number(listing.platform_fee),\n          status: listing.status,\n          listed_at: listing.listed_at,\n          sold_at: listing.sold_at,\n          is_owner: listing.seller_user_id === user.userId,\n          is_sold: listing.status !== 'active',\n          product: listing.orders?.products ? {\n            id: listing.orders.products.id,\n            name_zh: listing.orders.products.name_zh,\n            name_tj: listing.orders.products.name_tj,\n            image_url: listing.orders.products.image_url\n          } : null\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error('获取转售商品信息失败:', error);\n    \n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '获取商品信息失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/resale/status/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 11. Maximum allowed is 10.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":93,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":45,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":45,"endColumn":62,"fix":{"range":[990,1043],"text":"!listing?.orders?.lottery_rounds?.products"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":45,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":45,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[991,998],"text":"(Boolean(listing))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":45,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":45,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1003,1043],"text":"(Boolean((listing.orders?.lottery_rounds?.products)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":78,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":78,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2034,2059],"text":"(Boolean(listing.platform_buyer_id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2241,2244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2241,2244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2252,2286],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":90,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":90,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2366,2379],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2380,2382],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2458,2461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2458,2461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":98,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":98,"endColumn":58,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2568,2596],"text":"(Boolean(listing.estimated_match_time))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":154,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":154,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4313,4328],"text":"(Boolean(buyers[buyerId]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":154,"column":10,"nodeType":"MemberExpression","endLine":154,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":154,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":154,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4329,4331],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// 转售状态查询API\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse } from '@/types';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const listingId = params.id;\n\n    // 获取转售商品详细信息\n    const { data: listing } = await supabaseAdmin\n      .from('resale_listings')\n      .select(`\n        *,\n        orders!inner (\n          id,\n          user_id,\n          lottery_rounds!inner (\n            products!inner (\n              id,\n              name_zh,\n              name_en,\n              images,\n              market_price\n            )\n          )\n        )\n      `)\n      .eq('id', listingId)\n      .single();\n\n    if (!listing || !listing.orders?.lottery_rounds?.products) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '转售记录不存在'\n      }, { status: 404 });\n    }\n\n    // 检查权限（只能查看自己的转售记录或公共信息）\n    const isOwner = listing.seller_user_id === user.userId;\n    const product = listing.orders.lottery_rounds.products;\n\n    // 生成状态描述和进度信息\n    const statusInfo = getStatusInfo(listing);\n\n    // 如果不是所有者，隐藏敏感信息\n    const responseData = {\n      id: listing.id,\n      status: listing.status,\n      listedAt: listing.listed_at,\n      soldAt: listing.sold_at,\n      estimatedMatchTime: listing.estimated_match_time,\n      product: {\n        id: product.id,\n        name: product.name_zh,\n        nameEn: product.name_en,\n        images: product.images,\n        marketPrice: product.market_price\n      },\n      price: isOwner ? listing.listing_price : null,\n      platformFee: isOwner ? listing.platform_fee : null,\n      netAmount: isOwner ? listing.net_amount : null,\n      isOwner,\n      statusInfo,\n      mysteryBuyer: isOwner && listing.platform_buyer_id ? getMysteryBuyerInfo(listing.platform_buyer_id) : null\n    };\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: responseData\n    });\n\n  } catch (error: any) {\n    console.error('查询转售状态失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '查询转售状态失败'\n    }, { status: 500 });\n  }\n}\n\nfunction getStatusInfo(listing: any) {\n  const now = new Date();\n  const listedAt = new Date(listing.listed_at);\n  const estimatedMatchTime = listing.estimated_match_time ? new Date(listing.estimated_match_time) : null;\n\n  switch (listing.status) {\n    case 'active':\n      return {\n        title: '正在寻找买家',\n        description: '您的商品已在转售市场发布，寻找合适的买家...',\n        progress: 25,\n        nextAction: '等待平台匹配买家',\n        color: 'blue'\n      };\n\n    case 'matching':\n      const matchProgress = estimatedMatchTime ? \n        Math.min(100, Math.round(((now.getTime() - listedAt.getTime()) / (estimatedMatchTime.getTime() - listedAt.getTime())) * 100)) :\n        50;\n\n      return {\n        title: '正在匹配买家',\n        description: '平台正在火速为您匹配合适的买家，请耐心等待...',\n        progress: matchProgress,\n        nextAction: estimatedMatchTime ? \n          `预计 ${Math.ceil((estimatedMatchTime.getTime() - now.getTime()) / (1000 * 60))} 分钟内完成` :\n          '匹配进行中',\n        color: 'orange'\n      };\n\n    case 'sold':\n      return {\n        title: '交易成功',\n        description: `恭喜！您的商品已成功售出，获得 ${listing.net_amount} TJS（已扣除手续费）`,\n        progress: 100,\n        nextAction: '资金已存入平台余额，可随时提现或消费',\n        color: 'green'\n      };\n\n    default:\n      return {\n        title: '未知状态',\n        description: '转售状态异常，请联系客服',\n        progress: 0,\n        nextAction: '联系客服处理',\n        color: 'red'\n      };\n  }\n}\n\nfunction getMysteryBuyerInfo(buyerId: string) {\n  const buyers = {\n    'platform_buyer_1': { username: '幸运的买家A88', avatar: '/images/bot-avatar-1.png' },\n    'platform_buyer_2': { username: '杜尚别淘金者', avatar: '/images/bot-avatar-2.png' },\n    'platform_buyer_3': { username: '塔吉克斯坦收藏家', avatar: '/images/bot-avatar-3.png' },\n    'platform_buyer_4': { username: '神秘买家M99', avatar: '/images/bot-avatar-4.png' },\n    'platform_buyer_5': { username: '本地数码爱好者', avatar: '/images/bot-avatar-5.png' }\n  };\n\n  return buyers[buyerId] || { username: '神秘买家', avatar: '/images/default-avatar.png' };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/resale/suggest-price/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 12. Maximum allowed is 10.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":149,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":22,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":22,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[601,608],"text":"(Boolean(orderId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":47,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":47,"endColumn":50,"fix":{"range":[1114,1155],"text":"!order?.lottery_rounds?.products"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":47,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":47,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1115,1120],"text":"(Boolean(order))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":47,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":47,"endColumn":50,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1125,1155],"text":"(Boolean((order.lottery_rounds?.products)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2333,2336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2333,2336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2434,2482],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":102,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":102,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2562,2573],"text":"(Boolean(customPrice))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3752,3755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3752,3755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3763,3797],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":146,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":146,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3877,3890],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3891,3893],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// 智能定价建议API\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { validationEngine } from '@/lib/validation';\nimport type { ApiResponse } from '@/types';\n\nexport async function POST(request: Request) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { orderId, customPrice } = body;\n\n    if (!orderId) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '订单ID不能为空'\n      }, { status: 400 });\n    }\n\n    // 获取订单和商品信息\n    const { data: order } = await supabaseAdmin\n      .from('orders')\n      .select(`\n        *,\n        lottery_rounds!inner (\n          product_id,\n          products!inner (\n            id,\n            name_zh,\n            market_price\n          )\n        )\n      `)\n      .eq('id', orderId)\n      .eq('user_id', user.userId)\n      .single();\n\n    if (!order || !order.lottery_rounds?.products) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '订单不存在或无权操作'\n      }, { status: 404 });\n    }\n\n    const product = order.lottery_rounds.products;\n    const marketPrice = product.market_price;\n\n    // 基础定价策略\n    const priceRecommendations = [\n      {\n        type: '建议售价',\n        price: Math.round(marketPrice * 0.8), // 80% 市场价\n        percentage: 80,\n        description: '快速成交的最佳选择',\n        estimatedTime: '1小时内快速成交'\n      },\n      {\n        type: '保守定价',\n        price: Math.round(marketPrice * 0.85), // 85% 市场价\n        percentage: 85,\n        description: '更稳妥的定价策略',\n        estimatedTime: '2-4小时成交'\n      },\n      {\n        type: '较高定价',\n        price: Math.round(marketPrice * 0.9), // 90% 市场价\n        percentage: 90,\n        description: '追求更高收益',\n        estimatedTime: '半天到一天'\n      }\n    ];\n\n    // 获取系统验证配置\n    try {\n      const { data: settings } = await supabaseAdmin\n        .from('system_validation_settings')\n        .select('*');\n      \n      if (settings) {\n        const config = settings.reduce((acc, setting) => {\n          acc[setting.setting_key] = setting.parsed_value;\n          return acc;\n        }, {} as any);\n        \n        validationEngine.setConfig(config);\n      }\n    } catch (configError) {\n      console.warn('无法获取系统验证配置，使用默认设置:', configError);\n    }\n\n    // 如果用户输入了自定义价格，计算预期手续费和到账金额\n    let customAnalysis = null;\n    if (customPrice && customPrice > 0) {\n      const customPriceNum = Number(customPrice);\n      \n      // 验证自定义价格\n      const priceValidation = validationEngine.validateResalePrice(customPriceNum, marketPrice);\n      const isReasonable = priceValidation.isValid;\n      \n      const platformFeeRate = 0.02; // 2% 平台手续费\n      const platformFee = Math.round(customPriceNum * platformFeeRate);\n      const netAmount = customPriceNum - platformFee;\n\n      // 获取建议价格范围\n      const suggestedMin = Math.round(marketPrice * (1 - 0.3)); // 70% 市场价\n      const suggestedMax = Math.round(marketPrice * (1 - 0.1)); // 90% 市场价\n\n      customAnalysis = {\n        price: customPriceNum,\n        platformFee,\n        netAmount,\n        platformFeeRate,\n        isReasonable,\n        suggestedRange: {\n          min: suggestedMin,\n          max: suggestedMax\n        },\n        validationError: priceValidation.isValid ? null : priceValidation.error\n      };\n    }\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        marketPrice,\n        orderId,\n        recommendations: priceRecommendations,\n        customAnalysis\n      },\n      message: '定价建议获取成功'\n    });\n\n  } catch (error: any) {\n    console.error('获取定价建议失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '获取定价建议失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/rewards/first-recharge/claim/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[735,738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[735,738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1531,1563],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":86,"column":59,"nodeType":"CallExpression","messageId":"substr","endLine":86,"endColumn":98,"fix":{"range":[1967,1978],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":145,"column":12,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":145,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3331,3364],"text":"(Boolean((balanceUpdateResult?.[0]?.success)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":146,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":146,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3392,3431],"text":"(Boolean((balanceUpdateResult?.[0]?.error_message)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3432,3434],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4650,4653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4650,4653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":206,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":206,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4825,4838],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":206,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":206,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4839,4841],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4929,4932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4929,4932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":213,"column":59,"nodeType":"CallExpression","messageId":"substr","endLine":213,"endColumn":98,"fix":{"range":[5054,5065],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":225,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":225,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5254,5261],"text":"(Boolean(orderId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":246,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":246,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5765,5781],"text":"(validation.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5765,5781],"text":"(validation.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5765,5781],"text":"(Boolean(validation.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":246,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":246,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5782,5784],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":257,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":257,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":266,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":266,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6173,6191],"text":"(rewardResult.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6173,6191],"text":"(rewardResult.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6173,6191],"text":"(Boolean(rewardResult.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6192,6194],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6894,6897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6894,6897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * 首充奖励领取API\n * POST /api/rewards/first-recharge/claim\n * \n * 领取首充奖励 - 通常在充值确认后自动触发\n * 请求体: { orderId: string }\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\n// 首充奖励配置\nconst FIRST_RECHARGE_REWARDS = [\n  { amount: 10, reward: 2, rate: 0.20, type: 'lucky_coins' },\n  { amount: 20, reward: 5, rate: 0.25, type: 'lucky_coins' },\n  { amount: 50, reward: 15, rate: 0.30, type: 'lucky_coins' },\n  { amount: 100, reward: 35, rate: 0.35, type: 'lucky_coins' }\n];\n\n/**\n * 检查充值订单并确定奖励档位\n */\nasync function validateAndGetRewardTier(orderId: string, userId: string): Promise<{\n  success: boolean;\n  order?: any;\n  rewardTier?: typeof FIRST_RECHARGE_REWARDS[0];\n  error?: string;\n}> {\n  try {\n    // 查找订单\n    const order = await prisma.orders.findFirst({\n      where: {\n        id: orderId,\n        userId,\n        type: 'recharge',\n        paymentStatus: 'paid',\n        fulfillmentStatus: 'completed'\n      }\n    });\n\n    if (!order) {\n      return {\n        success: false,\n        error: '订单不存在或未完成支付'\n      };\n    }\n\n    const orderAmount = Number(order.totalAmount);\n\n    // 找到对应的奖励档位\n    const rewardTier = FIRST_RECHARGE_REWARDS.find(tier => tier.amount === orderAmount);\n\n    if (!rewardTier) {\n      return {\n        success: false,\n        error: `订单金额${orderAmount} Som不在首充奖励档位内`\n      };\n    }\n\n    return {\n      success: true,\n      order,\n      rewardTier\n    };\n\n  } catch (error) {\n    console.error('验证订单失败:', error);\n    return {\n      success: false,\n      error: '验证订单失败'\n    };\n  }\n}\n\n/**\n * 发放首充奖励\n */\nasync function grantFirstRechargeReward(\n  userId: string,\n  orderId: string,\n  rewardTier: typeof FIRST_RECHARGE_REWARDS[0]\n): Promise<{ success: boolean; error?: string; rewardAmount?: number }> {\n  const logger = getLogger();\n  const requestId = `first_recharge_claim_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('开始发放首充奖励', {\n      requestId,\n      userId,\n      orderId,\n      rewardAmount: rewardTier.reward\n    });\n\n    // 使用数据库事务确保数据一致性\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. 检查用户是否已领取过首充奖励\n      const existingReward = await tx.firstRechargeRewards.findFirst({\n        where: {\n          userId,\n          status: 'claimed'\n        }\n      });\n\n      if (existingReward) {\n        throw new Error('首充奖励已领取');\n      }\n\n      // 2. 检查该订单是否已发放过奖励\n      const orderReward = await tx.firstRechargeRewards.findFirst({\n        where: {\n          orderId,\n          status: 'claimed'\n        }\n      });\n\n      if (orderReward) {\n        throw new Error('该订单的奖励已发放');\n      }\n\n      // 3. 创建奖励记录\n      const rewardRecord = await tx.firstRechargeRewards.create({\n        data: {\n          userId,\n          orderId,\n          rechargeAmount: rewardTier.amount,\n          rewardType: 'lucky_coins',\n          rewardAmount: rewardTier.reward,\n          status: 'claimed',\n          claimedAt: new Date()\n        }\n      });\n\n      // 4. 增加用户幸运币余额\n      const balanceUpdateResult = await tx.$executeRaw`\n        SELECT * FROM update_user_balance_with_optimistic_lock(\n          ${userId}::uuid,\n          ${rewardTier.reward}::decimal,\n          'add',\n          'lucky_coins'\n        )\n      `;\n\n      if (!balanceUpdateResult?.[0]?.success) {\n        throw new Error(balanceUpdateResult?.[0]?.error_message || '幸运币余额更新失败');\n      }\n\n      // 5. 记录钱包交易\n      await tx.walletTransactions.create({\n        data: {\n          userId,\n          type: 'first_recharge_reward',\n          luckyCoins: rewardTier.reward,\n          currency: 'TJS',\n          description: `首充奖励：充值${rewardTier.amount} Som获得${rewardTier.reward}幸运币奖励`,\n          status: 'completed',\n          metadata: {\n            orderId,\n            rechargeAmount: rewardTier.amount,\n            rewardRate: rewardTier.rate,\n            rewardId: rewardRecord.id,\n            rewardType: 'lucky_coins'\n          }\n        }\n      });\n\n      // 6. 创建通知\n      await tx.notifications.create({\n        data: {\n          userId,\n          type: 'first_recharge_reward',\n          content: `🎉 恭喜！首充奖励已到账：+${rewardTier.reward}幸运币！`,\n          status: 'pending'\n        }\n      });\n\n      logger.info('首充奖励发放成功', {\n        requestId,\n        userId,\n        orderId,\n        rewardAmount: rewardTier.reward,\n        rewardId: rewardRecord.id\n      });\n\n      return {\n        success: true,\n        rewardAmount: rewardTier.reward,\n        newLuckyCoins: balanceUpdateResult[0].new_lucky_coins,\n        rewardRecord\n      };\n    });\n\n    return result;\n\n  } catch (error: any) {\n    logger.error('发放首充奖励失败', error, {\n      requestId,\n      userId,\n      orderId,\n      error: error.message\n    });\n\n    return {\n      success: false,\n      error: error.message || '发放奖励失败'\n    };\n  }\n}\n\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  const logger = getLogger();\n  const requestId = `claim_first_recharge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('领取首充奖励请求', {\n      requestId,\n      userId: user.userId\n    });\n\n    const body = await request.json();\n    const { orderId } = body;\n\n    // 验证必需参数\n    if (!orderId) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'INVALID_PARAMETERS',\n            message: '缺少必要参数：orderId'\n          }\n        },\n        { status: 400 }\n      );\n    }\n\n    // 验证和获取奖励档位\n    const validation = await validateAndGetRewardTier(orderId, user.userId);\n    if (!validation.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'VALIDATION_FAILED',\n            message: validation.error || '订单验证失败'\n          }\n        },\n        { status: 400 }\n      );\n    }\n\n    // 发放奖励\n    const rewardResult = await grantFirstRechargeReward(\n      user.userId,\n      orderId,\n      validation.rewardTier!\n    );\n\n    if (!rewardResult.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'REWARD_FAILED',\n            message: rewardResult.error || '奖励发放失败'\n          }\n        },\n        { status: 500 }\n      );\n    }\n\n    logger.info('首充奖励领取成功', {\n      requestId,\n      userId: user.userId,\n      orderId,\n      rewardAmount: rewardResult.rewardAmount\n    });\n\n    // TODO: 发送Telegram通知\n    // await sendTelegramNotification(user.userId, `首充奖励领取成功！获得${rewardResult.rewardAmount}幸运币`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        claimed: true,\n        rewardAmount: rewardResult.rewardAmount,\n        rewardType: 'lucky_coins',\n        message: `首充奖励领取成功！获得${rewardResult.rewardAmount}幸运币奖励`\n      },\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('领取首充奖励失败', error, {\n      requestId,\n      userId: user.userId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'CLAIM_FAILED',\n          message: '领取首充奖励失败',\n          details: error.message\n        }\n      },\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/rewards/first-recharge/config/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'withAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":34},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":46,"column":60,"nodeType":"CallExpression","messageId":"substr","endLine":46,"endColumn":99,"fix":{"range":[1005,1016],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1895,1898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1895,1898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * 首充奖励配置API\n * GET /api/rewards/first-recharge/config\n * \n * 返回首充奖励的档位配置信息\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\n// 首充奖励配置 - 按任务要求\nconst FIRST_RECHARGE_REWARDS = [\n  {\n    amount: 10,\n    reward: 2, // 奖励2幸运币（价值2 Som）\n    description: '充值10 Som → 奖励2幸运币',\n    rate: 0.20,\n    type: 'lucky_coins'\n  },\n  {\n    amount: 20,\n    reward: 5, // 奖励5幸运币（价值5 Som）\n    description: '充值20 Som → 奖励5幸运币',\n    rate: 0.25,\n    type: 'lucky_coins'\n  },\n  {\n    amount: 50,\n    reward: 15, // 奖励15幸运币（价值15 Som）\n    description: '充值50 Som → 奖励15幸运币',\n    rate: 0.30,\n    type: 'lucky_coins'\n  },\n  {\n    amount: 100,\n    reward: 35, // 奖励35幸运币（价值35 Som）\n    description: '充值100 Som → 奖励35幸运币',\n    rate: 0.35,\n    type: 'lucky_coins'\n  }\n];\n\nexport const GET = async (request: NextRequest) => {\n  const logger = getLogger();\n  const requestId = `first_recharge_config_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('获取首充奖励配置', {\n      requestId\n    });\n\n    // 返回奖励配置\n    return NextResponse.json({\n      success: true,\n      data: {\n        rewardTiers: FIRST_RECHARGE_REWARDS,\n        rules: {\n          maxClaim: 1, // 每个用户最多享受一次\n          autoClaim: true, // 充值确认后自动发放\n          highestTierOnly: true, // 按最高档位发放，不叠加\n          preventSmallAmountAbuse: true // 防止恶意小金额充值刷奖励\n        },\n        metadata: {\n          supportedAmounts: FIRST_RECHARGE_REWARDS.map(tier => tier.amount),\n          totalRewardOptions: FIRST_RECHARGE_REWARDS.length,\n          minimumRechargeAmount: Math.min(...FIRST_RECHARGE_REWARDS.map(tier => tier.amount)),\n          maximumRewardAmount: Math.max(...FIRST_RECHARGE_REWARDS.map(tier => tier.reward))\n        }\n      },\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('获取首充奖励配置失败', error, {\n      requestId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'CONFIG_FETCH_FAILED',\n          message: '获取首充奖励配置失败',\n          details: error.message\n        }\n      },\n      { status: 500 }\n    );\n  }\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/rewards/first-recharge/status/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1710,1746],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":115,"column":23,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":115,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3324,3358],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3606,3609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3606,3609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":154,"column":60,"nodeType":"CallExpression","messageId":"substr","endLine":154,"endColumn":99,"fix":{"range":[3732,3743],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":163,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":163,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3862,3874],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4477,4480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4477,4480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * 首充奖励状态查询API\n * GET /api/rewards/first-recharge/status\n * \n * 查询用户的首充奖励状态和可用奖励信息\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\n\n// 首充奖励配置\nconst FIRST_RECHARGE_REWARDS = [\n  { amount: 10, reward: 2, rate: 0.20, type: 'lucky_coins' },\n  { amount: 20, reward: 5, rate: 0.25, type: 'lucky_coins' },\n  { amount: 50, reward: 15, rate: 0.30, type: 'lucky_coins' },\n  { amount: 100, reward: 35, rate: 0.35, type: 'lucky_coins' }\n];\n\n/**\n * 检查用户是否已有充值记录\n */\nasync function checkExistingRecharge(userId: string): Promise<{\n  hasRecharge: boolean;\n  firstRechargeAmount?: number;\n  totalRecharges?: number;\n}> {\n  try {\n    // 查询用户的首次充值记录\n    const firstRecharge = await prisma.orders.findFirst({\n      where: {\n        userId,\n        type: 'recharge',\n        paymentStatus: 'paid',\n        fulfillmentStatus: 'completed'\n      },\n      orderBy: {\n        createdAt: 'asc' // 按创建时间升序，获取首次充值\n      },\n      select: {\n        id: true,\n        totalAmount: true,\n        createdAt: true\n      }\n    });\n\n    if (!firstRecharge) {\n      return {\n        hasRecharge: false\n      };\n    }\n\n    // 查询用户总充值次数和金额\n    const rechargeStats = await prisma.orders.aggregate({\n      where: {\n        userId,\n        type: 'recharge',\n        paymentStatus: 'paid',\n        fulfillmentStatus: 'completed'\n      },\n      _count: {\n        id: true\n      },\n      _sum: {\n        totalAmount: true\n      }\n    });\n\n    return {\n      hasRecharge: true,\n      firstRechargeAmount: Number(firstRecharge.totalAmount),\n      totalRecharges: rechargeStats._count.id\n    };\n\n  } catch (error) {\n    console.error('检查用户充值记录失败:', error);\n    return {\n      hasRecharge: false\n    };\n  }\n}\n\n/**\n * 获取用户的首充奖励状态\n */\nasync function getFirstRechargeStatus(userId: string) {\n  try {\n    // 检查用户是否已有充值记录\n    const rechargeCheck = await checkExistingRecharge(userId);\n\n    // 查询用户是否已领取首充奖励\n    const existingReward = await prisma.firstRechargeRewards.findFirst({\n      where: {\n        userId,\n        status: 'claimed'\n      }\n    });\n\n    const isEligible = !rechargeCheck.hasRecharge && !existingReward;\n    const hasClaimed = !!existingReward;\n\n    // 获取可用奖励档位\n    const availableRewards = FIRST_RECHARGE_REWARDS.map(tier => ({\n      amount: tier.amount,\n      reward: tier.reward,\n      rate: tier.rate,\n      type: tier.type,\n      description: `充值${tier.amount} Som → 奖励${tier.reward}幸运币（${Math.round(tier.rate * 100)}%）`,\n      isActive: isEligible\n    }));\n\n    // 如果已领取，获取已领取的奖励信息\n    let claimedReward = null;\n    if (hasClaimed && existingReward) {\n      const rewardTier = FIRST_RECHARGE_REWARDS.find(tier => tier.amount === Number(existingReward.rechargeAmount));\n      claimedReward = {\n        amount: Number(existingReward.rechargeAmount),\n        reward: Number(existingReward.rewardAmount),\n        claimedAt: existingReward.claimedAt,\n        tier: rewardTier\n      };\n    }\n\n    return {\n      isEligible,\n      hasClaimed,\n      hasRecharge: rechargeCheck.hasRecharge,\n      availableRewards,\n      claimedReward,\n      rechargeInfo: rechargeCheck,\n      message: hasClaimed \n        ? '首充奖励已领取' \n        : isEligible \n          ? '首次充值可享受奖励！' \n          : '不符合首充奖励条件'\n    };\n\n  } catch (error) {\n    console.error('获取首充状态失败:', error);\n    return {\n      isEligible: false,\n      hasClaimed: false,\n      hasRecharge: false,\n      availableRewards: [],\n      claimedReward: null,\n      message: '获取首充状态失败'\n    };\n  }\n}\n\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  const logger = getLogger();\n  const requestId = `first_recharge_status_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    logger.info('查询首充奖励状态', {\n      requestId,\n      userId: user.userId\n    });\n\n    // 验证用户ID\n    if (!user?.userId) {\n      logger.warn('用户ID缺失', undefined, {\n        endpoint: '/api/rewards/first-recharge/status',\n        method: 'GET'\n      });\n      \n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            code: 'UNAUTHORIZED',\n            message: '用户身份验证失败'\n          }\n        },\n        { status: 401 }\n      );\n    }\n\n    const status = await getFirstRechargeStatus(user.userId);\n\n    return NextResponse.json({\n      success: true,\n      data: status,\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('查询首充奖励状态失败', error, {\n      requestId,\n      userId: user?.userId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: {\n          code: 'STATUS_QUERY_FAILED',\n          message: '查询首充奖励状态失败',\n          details: error.message\n        }\n      },\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/risk/alert/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'RiskControlService' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RiskControlService' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 27. Maximum allowed is 10.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":168,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":25,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":25,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[633,643],"text":"(Boolean(incidentId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":25,"column":25,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":25,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[648,654],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":25,"column":36,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":25,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[659,667],"text":"(Boolean(severity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":48,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1305,1317],"text":"(Boolean(incidentType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1318,1320],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":49,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1349,1358],"text":"(Boolean(riskScore))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1359,1361],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":50,"column":14,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":50,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1378,1383],"text":"(Boolean(title))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1384,1386],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":51,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":51,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1414,1425],"text":"(Boolean(description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1426,1428],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":51,"column":53,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":51,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1447,1459],"text":"(Boolean(incidentType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1460,1462],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":52,"column":23,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":52,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1500,1514],"text":"(Boolean(triggeredRules))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":52,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":52,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1515,1517],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-const","severity":2,"message":"'notificationId' is never reassigned. Use 'const' instead.","line":79,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":79,"endColumn":27,"fix":{"range":[2054,2078],"text":"const notificationId = '';"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3513,3549],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4230,4266],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":177,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":177,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4742,4767],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4742,4767],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4742,4767],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4768,4770],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":178,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":178,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4806,4832],"text":"(searchParams.get('offset') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4806,4832],"text":"(searchParams.get('offset') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4806,4832],"text":"(Boolean(searchParams.get('offset')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":178,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":178,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4833,4835],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":180,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":180,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4851,4862],"text":"incidentId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4852,4862],"text":"(incidentId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4851,4862],"text":"!Boolean(incidentId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5774,5808],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":235,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6139,6153],"text":"(Boolean(notificationId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6569,6601],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6909,6950],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6992,7026],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7209,7250],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7292,7326],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":297,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":297,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7525,7536],"text":"webhookUrl == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7526,7536],"text":"(webhookUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7525,7536],"text":"!Boolean(webhookUrl)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7968,8007],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8146,8149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8146,8149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":330,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":330,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8219,8299],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":336,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":336,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8324,8358],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":343,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":348,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":343,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":343,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8953,8985],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9321,9353],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":414,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":414,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10078,10085],"text":"Boolean(success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getRiskTelegramBot, RiskAlertMessage } from '@/lib/risk-telegram-bot';\nimport { RiskControlService } from '@/lib/risk-control';\n\n// POST /api/risk/alert - 发送风险预警通知\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      incidentId,\n      userId,\n      severity,\n      incidentType,\n      riskScore,\n      title,\n      description,\n      triggeredRules,\n      metadata,\n      channels = ['telegram'], // 通知渠道\n      priority = 'normal',\n      immediate = false // 是否立即发送\n    } = body;\n\n    // 验证必填参数\n    if (!incidentId || !userId || !severity) {\n      return NextResponse.json(\n        { error: '缺少必要参数: incidentId, userId, severity' },\n        { status: 400 }\n      );\n    }\n\n    // 验证通知渠道\n    const validChannels = ['telegram', 'email', 'sms', 'webhook'];\n    const selectedChannels = channels.filter(channel => validChannels.includes(channel));\n    \n    if (selectedChannels.length === 0) {\n      return NextResponse.json(\n        { error: '未指定有效的通知渠道' },\n        { status: 400 }\n      );\n    }\n\n    // 构建风险预警消息\n    const alertMessage: RiskAlertMessage = {\n      incidentId,\n      userId,\n      severity: severity as 'low' | 'medium' | 'high' | 'critical',\n      incidentType: incidentType || 'general',\n      riskScore: riskScore || 0,\n      title: title || '风控预警',\n      description: description || `用户 ${userId} 的 ${incidentType || '行为'} 触发风险检测`,\n      triggeredRules: triggeredRules || [],\n      timestamp: new Date(),\n      metadata: {\n        ...metadata,\n        channels: selectedChannels,\n        priority,\n        immediate\n      }\n    };\n\n    const results = {\n      successful: 0,\n      failed: 0,\n      details: [] as Array<{\n        channel: string;\n        success: boolean;\n        message?: string;\n        error?: string;\n        notificationId?: string;\n      }>\n    };\n\n    // 按渠道发送通知\n    for (const channel of selectedChannels) {\n      try {\n        let success = false;\n        let message = '';\n        let notificationId = '';\n\n        switch (channel) {\n          case 'telegram':\n            const bot = getRiskTelegramBot();\n            success = await bot.sendRiskAlert(alertMessage);\n            message = success ? 'Telegram通知发送成功' : 'Telegram通知发送失败';\n            break;\n\n          case 'email':\n            success = await sendEmailNotification(alertMessage);\n            message = success ? '邮件通知发送成功' : '邮件通知发送失败';\n            break;\n\n          case 'sms':\n            success = await sendSmsNotification(alertMessage);\n            message = success ? '短信通知发送成功' : '短信通知发送失败';\n            break;\n\n          case 'webhook':\n            success = await sendWebhookNotification(alertMessage);\n            message = success ? 'Webhook通知发送成功' : 'Webhook通知发送失败';\n            break;\n\n          default:\n            throw new Error(`不支持的通知渠道: ${channel}`);\n        }\n\n        if (success) {\n          results.successful++;\n        } else {\n          results.failed++;\n        }\n\n        results.details.push({\n          channel,\n          success,\n          message,\n          notificationId\n        });\n\n      } catch (error) {\n        results.failed++;\n        results.details.push({\n          channel,\n          success: false,\n          error: error instanceof Error ? error.message : '未知错误'\n        });\n      }\n    }\n\n    // 记录通知尝试到数据库\n    try {\n      await recordNotificationAttempts(incidentId, selectedChannels, results);\n    } catch (dbError) {\n      console.error('记录通知尝试失败:', dbError);\n      // 不影响主流程，继续执行\n    }\n\n    const response = {\n      success: results.successful > 0,\n      data: {\n        incidentId,\n        totalChannels: selectedChannels.length,\n        results,\n        summary: {\n          successful: results.successful,\n          failed: results.failed,\n          successRate: `${((results.successful / selectedChannels.length) * 100).toFixed(1)}%`\n        }\n      },\n      message: results.successful > 0 \n        ? `成功发送 ${results.successful} 个通知，失败 ${results.failed} 个`\n        : '所有通知发送失败'\n    };\n\n    const statusCode = results.successful > 0 ? 200 : 500;\n    return NextResponse.json(response, { status: statusCode });\n\n  } catch (error) {\n    console.error('发送风险预警通知错误:', error);\n    return NextResponse.json(\n      {\n        error: '发送预警通知失败',\n        message: '系统正在处理其他请求，请稍后重试'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/risk/alert - 查询通知状态\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const incidentId = searchParams.get('incidentId');\n    const notificationType = searchParams.get('type');\n    const status = searchParams.get('status');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    if (!incidentId) {\n      return NextResponse.json(\n        { error: '缺少必要参数: incidentId' },\n        { status: 400 }\n      );\n    }\n\n    // 查询通知记录\n    const notifications = await getNotificationsByIncident(incidentId, {\n      type: notificationType,\n      status,\n      limit,\n      offset\n    });\n\n    const response = {\n      success: true,\n      data: {\n        incidentId,\n        notifications,\n        pagination: {\n          total: notifications.length,\n          limit,\n          offset,\n          hasMore: notifications.length === limit\n        },\n        summary: {\n          total: notifications.length,\n          sent: notifications.filter(n => n.status === 'sent').length,\n          failed: notifications.filter(n => n.status === 'failed').length,\n          pending: notifications.filter(n => n.status === 'pending').length\n        }\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('查询通知状态错误:', error);\n    return NextResponse.json(\n      {\n        error: '查询通知状态失败',\n        message: '请检查参数并重试'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/risk/alert - 确认通知已读\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { notificationId, acknowledgedBy } = body;\n\n    if (!notificationId) {\n      return NextResponse.json(\n        { error: '缺少必要参数: notificationId' },\n        { status: 400 }\n      );\n    }\n\n    // 更新通知状态为已确认\n    const updated = await acknowledgeNotification(notificationId, acknowledgedBy);\n\n    const response = {\n      success: true,\n      data: {\n        notification: updated\n      },\n      message: '通知已确认'\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('确认通知错误:', error);\n    return NextResponse.json(\n      {\n        error: '确认通知失败',\n        message: '请检查通知ID是否正确'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// 辅助函数：发送邮件通知\nasync function sendEmailNotification(alert: RiskAlertMessage): Promise<boolean> {\n  try {\n    // 邮件发送逻辑（需要集成邮件服务，如SendGrid、AWS SES等）\n    // 这里返回模拟结果\n    console.log('发送邮件通知:', alert.incidentId);\n    return true;\n  } catch (error) {\n    console.error('发送邮件通知失败:', error);\n    return false;\n  }\n}\n\n// 辅助函数：发送短信通知\nasync function sendSmsNotification(alert: RiskAlertMessage): Promise<boolean> {\n  try {\n    // 短信发送逻辑（需要集成短信服务，如阿里云、腾讯云等）\n    // 这里返回模拟结果\n    console.log('发送短信通知:', alert.incidentId);\n    return true;\n  } catch (error) {\n    console.error('发送短信通知失败:', error);\n    return false;\n  }\n}\n\n// 辅助函数：发送Webhook通知\nasync function sendWebhookNotification(alert: RiskAlertMessage): Promise<boolean> {\n  try {\n    const webhookUrl = process.env.RISK_WEBHOOK_URL;\n    if (!webhookUrl) {\n      throw new Error('未配置RISK_WEBHOOK_URL');\n    }\n\n    const response = await fetch(webhookUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'Risk-Control-System/1.0'\n      },\n      body: JSON.stringify({\n        type: 'risk_alert',\n        timestamp: new Date().toISOString(),\n        data: alert\n      })\n    });\n\n    return response.ok;\n  } catch (error) {\n    console.error('发送Webhook通知失败:', error);\n    return false;\n  }\n}\n\n// 辅助函数：记录通知尝试\nasync function recordNotificationAttempts(\n  incidentId: string,\n  channels: string[],\n  results: any\n): Promise<void> {\n  try {\n    // 这里需要实际保存到数据库\n    // 为了演示，仅打印日志\n    console.log('记录通知尝试:', {\n      incidentId,\n      channels,\n      results\n    });\n  } catch (error) {\n    console.error('记录通知尝试失败:', error);\n  }\n}\n\n// 辅助函数：查询事件通知\nasync function getNotificationsByIncident(\n  incidentId: string,\n  filters: {\n    type?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  }\n) {\n  try {\n    // 这里需要实际查询数据库\n    // 为了演示，返回模拟数据\n    return [\n      {\n        id: 'notif_1',\n        incidentId,\n        notificationType: 'telegram',\n        recipient: 'risk_alerts',\n        channelId: 'telegram_chat_id',\n        messageContent: '风控预警通知...',\n        priority: 'high',\n        status: 'sent',\n        sentAt: new Date(),\n        createdAt: new Date()\n      }\n    ];\n  } catch (error) {\n    console.error('查询通知失败:', error);\n    return [];\n  }\n}\n\n// 辅助函数：确认通知\nasync function acknowledgeNotification(\n  notificationId: string,\n  acknowledgedBy?: string\n) {\n  try {\n    // 这里需要实际更新数据库\n    // 为了演示，返回模拟更新的通知\n    return {\n      id: notificationId,\n      status: 'acknowledged',\n      acknowledgedAt: new Date(),\n      acknowledgedBy\n    };\n  } catch (error) {\n    console.error('确认通知失败:', error);\n    throw error;\n  }\n}\n\n// 批量发送通知\nexport async function batchSendAlerts(alerts: RiskAlertMessage[]): Promise<{\n  successful: number;\n  failed: number;\n  results: Array<{ alert: RiskAlertMessage; success: boolean; error?: string }>;\n}> {\n  const results: Array<{ alert: RiskAlertMessage; success: boolean; error?: string }> = [];\n  let successful = 0;\n  let failed = 0;\n\n  for (const alert of alerts) {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/risk/alert`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(alert)\n      });\n\n      const result = await response.json();\n      const success = result.success;\n\n      if (success) {\n        successful++;\n      } else {\n        failed++;\n      }\n\n      results.push({ alert, success, error: result.error });\n    } catch (error) {\n      failed++;\n      results.push({\n        alert,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n\n    // 添加短暂延迟避免频率限制\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n\n  return { successful, failed, results };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/risk/evaluate-async/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":13,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":13,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[415,421],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":13,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":13,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[426,436],"text":"(Boolean(actionType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":13,"column":36,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":13,"endColumn":47,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[441,452],"text":"(Boolean(contextData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1310,1546],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":64,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":64,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1784,1801],"text":"(result.incidentId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1784,1801],"text":"(result.incidentId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1784,1801],"text":"(Boolean(result.incidentId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":64,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":64,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1802,1804],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2455,2498],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3216,3251],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3351,3386],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":132,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":132,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3844,3854],"text":"(requestId == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3845,3854],"text":"(requestId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3844,3854],"text":"(!Boolean(requestId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":132,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":132,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3858,3865],"text":"(userId == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3859,3865],"text":"(userId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3858,3865],"text":"(!Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4601,4635],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { RiskControlService } from '@/lib/risk-control';\nimport { getRiskTelegramBot } from '@/lib/risk-telegram-bot';\nimport crypto from 'crypto';\n\n// POST /api/risk/evaluate-async\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, actionType, contextData } = body;\n\n    // 验证必填参数\n    if (!userId || !actionType || !contextData) {\n      return NextResponse.json(\n        { error: '缺少必要参数: userId, actionType, contextData' },\n        { status: 400 }\n      );\n    }\n\n    // 生成请求ID用于追踪\n    const requestId = crypto.randomUUID();\n    \n    // 开始异步风险评估\n    const evaluationPromise = RiskControlService.evaluateRisk({\n      userId,\n      actionType,\n      contextData: {\n        ...contextData,\n        requestId\n      }\n    });\n\n    // 立即返回响应，不等待评估完成\n    const response = {\n      success: true,\n      requestId,\n      message: '风险评估已开始，正在异步处理',\n      estimatedProcessingTime: '2-5秒',\n      // 提供基础的静态风险评估作为即时反馈\n      immediateRiskAssessment: {\n        riskScore: Math.floor(Math.random() * 30), // 基础评分 0-30\n        severity: 'low',\n        note: '初步评估，实际评分将通过异步处理更新'\n      }\n    };\n\n    // 在后台继续处理风险评估\n    evaluationPromise.then(async (result) => {\n      try {\n        // 记录完整的评估结果\n        console.log(`[RiskEval] Request ${requestId} completed:`, {\n          userId,\n          actionType,\n          finalScore: result.riskScore,\n          severity: result.severity,\n          triggeredRules: result.triggeredRules\n        });\n\n        // 如果是严重风险事件，发送Telegram通知\n        if (result.severity === 'high' || result.severity === 'critical') {\n          try {\n            const bot = getRiskTelegramBot();\n            await bot.sendRiskAlert({\n              incidentId: result.incidentId || requestId,\n              userId,\n              severity: result.severity,\n              incidentType: actionType,\n              riskScore: result.riskScore,\n              title: `${actionType}风险检测`,\n              description: `用户 ${userId} 的 ${actionType} 操作触发风险评估`,\n              triggeredRules: result.triggeredRules,\n              timestamp: new Date(),\n              metadata: {\n                ipAddress: contextData.ipAddress,\n                userAgent: contextData.userAgent,\n                deviceFingerprint: contextData.deviceFingerprint,\n                requestId\n              }\n            });\n          } catch (botError) {\n            console.error('发送Telegram通知失败:', botError);\n          }\n        }\n\n        // 记录处理日志\n        await fetch('/api/monitoring/logs', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            level: result.severity === 'critical' ? 'error' : 'warn',\n            message: `风险评估完成: ${actionType} - ${result.severity} (${result.riskScore}分)`,\n            metadata: {\n              userId,\n              actionType,\n              riskScore: result.riskScore,\n              severity: result.severity,\n              requestId,\n              triggeredRules: result.triggeredRules\n            }\n          })\n        }).catch(() => {\n          // 忽略日志记录错误\n        });\n\n      } catch (error) {\n        console.error('风险评估后处理失败:', error);\n      }\n    });\n\n    return NextResponse.json(response, { status: 202 });\n\n  } catch (error) {\n    console.error('风险评估API错误:', error);\n    return NextResponse.json(\n      {\n        error: '风险评估服务暂时不可用',\n        message: '系统正在处理其他请求，请稍后重试',\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/risk/evaluate-async - 检查评估状态\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const requestId = searchParams.get('requestId');\n    const userId = searchParams.get('userId');\n\n    if (!requestId && !userId) {\n      return NextResponse.json(\n        { error: '需要提供 requestId 或 userId 参数' },\n        { status: 400 }\n      );\n    }\n\n    // 这里可以查询评估状态（实际项目中可能需要Redis或数据库存储状态）\n    // 为了简化，我们返回模拟状态\n    const status = {\n      requestId,\n      userId,\n      status: 'completed', // 'pending', 'processing', 'completed', 'failed'\n      progress: 100,\n      completedAt: new Date().toISOString(),\n      result: {\n        riskScore: Math.floor(Math.random() * 100),\n        severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],\n        triggeredRules: ['suspicious_behavior', 'unusual_pattern'],\n        recommendedActions: ['monitor', 'verify']\n      }\n    };\n\n    return NextResponse.json(status);\n\n  } catch (error) {\n    console.error('查询评估状态错误:', error);\n    return NextResponse.json(\n      { error: '无法获取评估状态' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/risk/events/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 15. Maximum allowed is 10.","line":5,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":133,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":14,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[513,538],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[513,538],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[513,538],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":14,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":14,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[539,541],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":29,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":15,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[577,603],"text":"(searchParams.get('offset') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[577,603],"text":"(searchParams.get('offset') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[577,603],"text":"(Boolean(searchParams.get('offset')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":15,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":15,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[604,606],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sortBy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sortBy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[632,658],"text":"(searchParams.get('sortBy') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[632,658],"text":"(searchParams.get('sortBy') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[632,658],"text":"(Boolean(searchParams.get('sortBy')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":16,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":16,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[659,661],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sortOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sortOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":17,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[697,726],"text":"(searchParams.get('sortOrder') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[697,726],"text":"(searchParams.get('sortOrder') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[697,726],"text":"(Boolean(searchParams.get('sortOrder')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[727,729],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[952,955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[952,955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":28,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":28,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[970,976],"text":"userId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[970,976],"text":"userId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[970,976],"text":"Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":28,"column":17,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":28,"endColumn":39,"fix":{"range":[978,1000],"text":"{where.userId = userId;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":29,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1009,1015],"text":"status != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1009,1015],"text":"status ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1009,1015],"text":"Boolean(status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":29,"column":17,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":29,"endColumn":39,"fix":{"range":[1017,1039],"text":"{where.status = status;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1048,1056],"text":"severity != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1048,1056],"text":"severity ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1048,1056],"text":"Boolean(severity)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":30,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":30,"endColumn":45,"fix":{"range":[1058,1084],"text":"{where.severity = severity;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":31,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":31,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1093,1105],"text":"incidentType != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1093,1105],"text":"incidentType ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1093,1105],"text":"Boolean(incidentType)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":31,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":31,"endColumn":58,"fix":{"range":[1107,1142],"text":"{where.incident_type = incidentType;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":34,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1170,1178],"text":"(dateFrom != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1170,1178],"text":"(dateFrom ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1170,1178],"text":"(Boolean(dateFrom))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":34,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1182,1188],"text":"(dateTo != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1182,1188],"text":"(dateTo ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1182,1188],"text":"(Boolean(dateTo))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":36,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":36,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1230,1238],"text":"dateFrom != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1230,1238],"text":"dateFrom ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1230,1238],"text":"Boolean(dateFrom)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":39,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":39,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1310,1316],"text":"dateTo != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1310,1316],"text":"dateTo ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1310,1316],"text":"Boolean(dateTo)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":45,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":45,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1403,1409],"text":"search != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1403,1409],"text":"search ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1403,1409],"text":"Boolean(search)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2173,2193],"text":"(Boolean(incident.resolved_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3734,3768],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 11. Maximum allowed is 10.","line":136,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":206,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":151,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":151,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4244,4250],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":151,"column":21,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":151,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4255,4267],"text":"(Boolean(incidentType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":151,"column":38,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":151,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4272,4277],"text":"(Boolean(title))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":159,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":159,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4454,4468],"text":"(Boolean(body.riskScore))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":159,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":159,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4469,4471],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":165,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":165,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4648,4656],"text":"(Boolean(severity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":165,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":165,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4657,4659],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":168,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":168,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4719,4730],"text":"(Boolean(description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":168,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":168,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4731,4733],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":169,"column":26,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":169,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4763,4780],"text":"(Boolean(triggerConditions))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":169,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":169,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4781,4783],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":170,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":170,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4804,4812],"text":"(Boolean(metadata))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":170,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":170,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4813,4815],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":174,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4858,4873],"text":"Boolean(autoActionTaken)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5420,5454],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":220,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":220,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5850,5860],"text":"(Boolean(incidentId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":220,"column":25,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":220,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5865,5871],"text":"(Boolean(status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6363,6397],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'incidentId' is defined but never used. Allowed unused args must match /^_/u.","line":259,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'incidentId' is defined but never used. Allowed unused args must match /^_/u.","line":259,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6707,6743],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'incidentId' is defined but never used. Allowed unused args must match /^_/u.","line":271,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":271,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'incidentId' is defined but never used. Allowed unused args must match /^_/u.","line":271,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":54},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6931,6965],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7046,7049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7046,7049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'where' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":310,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'where' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7754,7757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7754,7757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8470,8504],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9534,9568],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { RiskControlService } from '@/lib/risk-control';\n\n// GET /api/risk/events - 查询风险事件记录\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    \n    // 提取查询参数\n    const userId = searchParams.get('userId');\n    const status = searchParams.get('status');\n    const severity = searchParams.get('severity');\n    const incidentType = searchParams.get('incidentType');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const sortBy = searchParams.get('sortBy') || 'createdAt';\n    const sortOrder = searchParams.get('sortOrder') || 'desc';\n    \n    // 日期范围过滤\n    const dateFrom = searchParams.get('dateFrom');\n    const dateTo = searchParams.get('dateTo');\n    \n    // 搜索关键词\n    const search = searchParams.get('search');\n\n    // 构建查询条件\n    const where: any = {};\n    if (userId) where.userId = userId;\n    if (status) where.status = status;\n    if (severity) where.severity = severity;\n    if (incidentType) where.incident_type = incidentType;\n    \n    // 日期范围过滤\n    if (dateFrom || dateTo) {\n      where.createdAt = {};\n      if (dateFrom) {\n        where.createdAt.gte = new Date(dateFrom);\n      }\n      if (dateTo) {\n        where.createdAt.lte = new Date(dateTo);\n      }\n    }\n\n    // 搜索过滤\n    if (search) {\n      where.OR = [\n        { title: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } },\n        { userId: { contains: search, mode: 'insensitive' } }\n      ];\n    }\n\n    // 获取风险事件\n    const result = await RiskControlService.getRiskIncidents({\n      userId,\n      status,\n      severity,\n      limit,\n      offset\n    });\n\n    // 转换数据格式并添加额外信息\n    const incidentsWithDetails = await Promise.all(\n      result.incidents.map(async (incident) => {\n        // 获取相关的风险处理记录\n        const actions = await getRiskActionsForIncident(incident.id);\n        \n        // 获取相关的通知记录\n        const notifications = await getNotificationsForIncident(incident.id);\n        \n        // 计算事件持续时间\n        const duration = incident.resolved_at \n          ? new Date(incident.resolved_at).getTime() - new Date(incident.created_at).getTime()\n          : new Date().getTime() - new Date(incident.created_at).getTime();\n        \n        return {\n          ...incident,\n          duration: Math.round(duration / 1000), // 秒数\n          actions,\n          notifications,\n          priority: calculateEventPriority(incident),\n          canResolve: incident.status === 'open' || incident.status === 'investigating',\n          canEscalate: incident.status === 'open' && incident.severity !== 'critical'\n        };\n      })\n    );\n\n    // 生成统计信息\n    const stats = await generateIncidentStats(where);\n\n    const response = {\n      success: true,\n      data: {\n        incidents: incidentsWithDetails,\n        pagination: {\n          total: result.total,\n          limit,\n          offset,\n          hasMore: result.hasMore,\n          currentPage: Math.floor(offset / limit) + 1,\n          totalPages: Math.ceil(result.total / limit)\n        },\n        filters: {\n          userId,\n          status,\n          severity,\n          incidentType,\n          dateFrom,\n          dateTo,\n          search\n        },\n        stats,\n        availableFilters: {\n          statuses: ['open', 'investigating', 'resolved', 'false_positive', 'escalated'],\n          severities: ['low', 'medium', 'high', 'critical'],\n          incidentTypes: ['login', 'transaction', 'registration', 'withdrawal', 'suspicious_session']\n        }\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('查询风险事件错误:', error);\n    return NextResponse.json(\n      {\n        error: '查询风险事件失败',\n        message: '系统正在处理其他请求，请稍后重试'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/risk/events - 创建新的风险事件\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      userId,\n      incidentType,\n      severity,\n      title,\n      description,\n      triggerConditions,\n      metadata,\n      autoActionTaken\n    } = body;\n\n    // 验证必填参数\n    if (!userId || !incidentType || !title) {\n      return NextResponse.json(\n        { error: '缺少必要参数: userId, incidentType, title' },\n        { status: 400 }\n      );\n    }\n\n    // 计算风险评分（如果未提供）\n    const riskScore = body.riskScore || calculateRiskScore(severity, incidentType);\n\n    // 创建风险事件\n    const incident = await RiskControlService.createRiskIncident({\n      userId,\n      incidentType,\n      severity: severity || 'medium',\n      riskScore,\n      title,\n      description: description || '',\n      triggerConditions: triggerConditions || {},\n      metadata: metadata || {}\n    });\n\n    // 如果指定了自动行动，立即执行\n    if (autoActionTaken) {\n      await RiskControlService.executeAutomaticAction(incident.id, [autoActionTaken]);\n    }\n\n    const response = {\n      success: true,\n      data: {\n        incident: {\n          ...incident,\n          duration: 0,\n          actions: [],\n          notifications: [],\n          priority: calculateEventPriority(incident),\n          canResolve: true,\n          canEscalate: incident.severity !== 'critical'\n        }\n      },\n      message: '风险事件创建成功'\n    };\n\n    return NextResponse.json(response, { status: 201 });\n\n  } catch (error) {\n    console.error('创建风险事件错误:', error);\n    return NextResponse.json(\n      {\n        error: '创建风险事件失败',\n        message: '请检查参数格式并重试'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/risk/events - 更新风险事件状态\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      incidentId,\n      status,\n      assignedTo,\n      resolutionNotes,\n      adminId\n    } = body;\n\n    if (!incidentId || !status) {\n      return NextResponse.json(\n        { error: '缺少必要参数: incidentId, status' },\n        { status: 400 }\n      );\n    }\n\n    // 更新事件状态\n    const updatedIncident = await updateIncidentStatus(\n      incidentId,\n      status,\n      assignedTo,\n      resolutionNotes,\n      adminId\n    );\n\n    const response = {\n      success: true,\n      data: {\n        incident: updatedIncident\n      },\n      message: '风险事件状态更新成功'\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('更新风险事件错误:', error);\n    return NextResponse.json(\n      {\n        error: '更新风险事件失败',\n        message: '请检查事件ID和状态是否正确'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// 辅助函数：获取风险处理记录\nasync function getRiskActionsForIncident(incidentId: string) {\n  try {\n    // 这里需要实际查询数据库\n    // 为了演示，返回模拟数据\n    return [];\n  } catch (error) {\n    console.error('获取风险处理记录失败:', error);\n    return [];\n  }\n}\n\n// 辅助函数：获取通知记录\nasync function getNotificationsForIncident(incidentId: string) {\n  try {\n    // 这里需要实际查询数据库\n    // 为了演示，返回模拟数据\n    return [];\n  } catch (error) {\n    console.error('获取通知记录失败:', error);\n    return [];\n  }\n}\n\n// 辅助函数：计算事件优先级\nfunction calculateEventPriority(incident: any): number {\n  const severityWeights = {\n    critical: 100,\n    high: 75,\n    medium: 50,\n    low: 25\n  };\n\n  const statusWeights = {\n    open: 50,\n    investigating: 30,\n    resolved: 10,\n    false_positive: 5,\n    escalated: 80\n  };\n\n  const baseWeight = severityWeights[incident.severity as keyof typeof severityWeights] || 25;\n  const statusWeight = statusWeights[incident.status as keyof typeof statusWeights] || 0;\n  \n  // 新事件优先级更高\n  const hoursOld = (Date.now() - new Date(incident.created_at).getTime()) / (1000 * 60 * 60);\n  const ageWeight = Math.max(0, 10 - hoursOld);\n\n  return Math.min(100, baseWeight + statusWeight + ageWeight);\n}\n\n// 辅助函数：生成统计信息\nasync function generateIncidentStats(where: any) {\n  try {\n    // 这里需要实际查询数据库统计信息\n    // 为了演示，返回模拟数据\n    return {\n      total: 150,\n      bySeverity: {\n        critical: 5,\n        high: 25,\n        medium: 80,\n        low: 40\n      },\n      byStatus: {\n        open: 15,\n        investigating: 30,\n        resolved: 95,\n        false_positive: 8,\n        escalated: 2\n      },\n      byType: {\n        login: 45,\n        transaction: 65,\n        registration: 20,\n        withdrawal: 12,\n        suspicious_session: 8\n      },\n      avgResolutionTime: 4.2, // 小时\n      trends: {\n        last24h: { total: 25, change: '+15%' },\n        last7d: { total: 180, change: '-5%' },\n        last30d: { total: 750, change: '+2%' }\n      }\n    };\n  } catch (error) {\n    console.error('生成统计信息失败:', error);\n    return null;\n  }\n}\n\n// 辅助函数：计算风险评分\nfunction calculateRiskScore(severity: string, incidentType: string): number {\n  const severityScores = {\n    critical: 90,\n    high: 70,\n    medium: 50,\n    low: 25\n  };\n\n  const typeMultipliers = {\n    login: 1.0,\n    transaction: 1.2,\n    registration: 0.8,\n    withdrawal: 1.1,\n    suspicious_session: 1.3\n  };\n\n  const baseScore = severityScores[severity as keyof typeof severityScores] || 50;\n  const multiplier = typeMultipliers[incidentType as keyof typeof typeMultipliers] || 1.0;\n\n  return Math.round(baseScore * multiplier);\n}\n\n// 辅助函数：更新事件状态\nasync function updateIncidentStatus(\n  incidentId: string,\n  status: string,\n  assignedTo?: string,\n  resolutionNotes?: string,\n  adminId?: string\n) {\n  try {\n    // 这里需要实际更新数据库\n    // 为了演示，返回模拟更新的事件\n    return {\n      id: incidentId,\n      status,\n      assignedTo,\n      resolutionNotes,\n      resolvedAt: status === 'resolved' ? new Date() : null,\n      resolvedBy: adminId,\n      updatedAt: new Date()\n    };\n  } catch (error) {\n    console.error('更新事件状态失败:', error);\n    throw error;\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/risk/monitor/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":12,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":12,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[344,350],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[500,533],"text":"(request.headers.get('user-agent') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[500,533],"text":"(request.headers.get('user-agent') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[500,533],"text":"(Boolean(request.headers.get('user-agent')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[534,536],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":23,"column":23,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":23,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[683,719],"text":"((xForwardedFor?.split(',')[0]?.trim()) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[683,719],"text":"((xForwardedFor?.split(',')[0]?.trim()) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[683,719],"text":"(Boolean((xForwardedFor?.split(',')[0]?.trim())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":23,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":23,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[683,730],"text":"(xForwardedFor?.split(',')[0]?.trim() ?? xRealIp)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":23,"column":63,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":23,"endColumn":70,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[723,730],"text":"(xRealIp != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[723,730],"text":"(xRealIp ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[723,730],"text":"(Boolean(xRealIp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":23,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":23,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[731,733],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2114,2150],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2279,2314],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":104,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":104,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2661,2673],"text":"(Boolean(sessionToken))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":27,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":132,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3577,3610],"text":"(Boolean((session.session_data?.userActions)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":132,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":132,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3611,3613],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":73,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":132,"endColumn":84,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3623,3634],"text":"(Boolean(userActions))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":132,"column":85,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":132,"endColumn":87,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3635,3637],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4312,4346],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":172,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":172,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4663,4676],"text":"sessionToken == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4664,4676],"text":"(sessionToken ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4663,4676],"text":"!Boolean(sessionToken)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5551,5585],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5793,5796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5793,5796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":227,"column":5,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":227,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5876,5899],"text":"(Boolean((data.deviceInfo?.screen)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":227,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":227,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5900,5902],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":228,"column":5,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":228,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5918,5943],"text":"(Boolean((data.deviceInfo?.timezone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":228,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":228,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5944,5946],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":229,"column":5,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":229,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5962,5987],"text":"(Boolean((data.deviceInfo?.language)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":229,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":229,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5988,5990],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":230,"column":5,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":230,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6006,6031],"text":"(Boolean((data.deviceInfo?.platform)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":230,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":230,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6032,6034],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":233,"column":10,"nodeType":"CallExpression","messageId":"substring","endLine":233,"endColumn":88,"fix":{"range":[6132,6141],"text":"slice"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6735,6769],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'analyzeUserBehavior' has a complexity of 11. Maximum allowed is 10.","line":270,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":334,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6887,6890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6887,6890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6911,6914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6911,6914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6989,6992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6989,6992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":282,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":282,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7083,7085],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":283,"column":25,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":283,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7114,7126],"text":"(Boolean(activityData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":283,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":283,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7127,7129],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7303,7306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7303,7306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":292,"column":26,"nodeType":"MemberExpression","endLine":292,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7798,7801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7798,7801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":310,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":310,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8004,8016],"text":"Boolean(activityData)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":327,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":327,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8402,8434],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8635,8638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8635,8638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8681,8684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8681,8684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":372,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":372,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9463,9498],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9567,9570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9567,9570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9581,9584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9581,9584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { RiskControlService } from '@/lib/risk-control';\nimport crypto from 'crypto';\n\n// POST /api/risk/monitor - 启动实时监控会话\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, deviceInfo } = body;\n\n    // 验证必填参数\n    if (!userId) {\n      return NextResponse.json(\n        { error: '缺少必要参数: userId' },\n        { status: 400 }\n      );\n    }\n\n    // 获取客户端信息\n    const userAgent = request.headers.get('user-agent') || '';\n    const xForwardedFor = request.headers.get('x-forwarded-for');\n    const xRealIp = request.headers.get('x-real-ip');\n    const ipAddress = xForwardedFor?.split(',')[0]?.trim() || xRealIp || 'unknown';\n    \n    // 生成设备指纹\n    const deviceFingerprint = generateDeviceFingerprint({\n      userAgent,\n      userId,\n      deviceInfo\n    });\n\n    // 生成会话令牌\n    const sessionToken = crypto.randomUUID();\n\n    try {\n      // 创建监控会话\n      const session = await RiskControlService.createMonitoringSession({\n        userId,\n        sessionToken,\n        ipAddress,\n        userAgent,\n        deviceFingerprint\n      });\n\n      // 立即进行初步风险评估\n      const initialRiskScore = await performInitialRiskAssessment(userId, ipAddress, deviceFingerprint);\n\n      // 更新会话风险评分\n      await RiskControlService.updateMonitoringSession(sessionToken, {\n        riskScore: initialRiskScore,\n        isSuspicious: initialRiskScore > 50\n      });\n\n      const response = {\n        success: true,\n        session: {\n          token: sessionToken,\n          userId,\n          ipAddress,\n          userAgent,\n          deviceFingerprint,\n          startTime: session.session_start,\n          initialRiskScore,\n          isSuspicious: initialRiskScore > 50,\n          sessionDuration: '24小时',\n          features: {\n            realTimeMonitoring: true,\n            behaviorAnalysis: true,\n            anomalyDetection: true,\n            autoActions: true\n          }\n        },\n        message: '实时监控会话已创建'\n      };\n\n      return NextResponse.json(response, { status: 201 });\n\n    } catch (dbError) {\n      console.error('创建监控会话失败:', dbError);\n      return NextResponse.json(\n        { error: '监控服务暂时不可用' },\n        { status: 503 }\n      );\n    }\n\n  } catch (error) {\n    console.error('实时监控API错误:', error);\n    return NextResponse.json(\n      {\n        error: '监控服务启动失败',\n        message: '系统正在维护中，请稍后重试'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/risk/monitor - 更新监控会话\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { sessionToken, userActions, activityData } = body;\n\n    if (!sessionToken) {\n      return NextResponse.json(\n        { error: '缺少必要参数: sessionToken' },\n        { status: 400 }\n      );\n    }\n\n    // 验证会话令牌\n    const session = await RiskControlService.validateSessionToken(sessionToken);\n    if (!session) {\n      return NextResponse.json(\n        { error: '无效或已过期的会话令牌' },\n        { status: 401 }\n      );\n    }\n\n    // 分析用户行为\n    const behaviorAnalysis = await analyzeUserBehavior(session.user_id, userActions, activityData);\n    \n    // 更新监控会话\n    const newRiskScore = Math.max(session.risk_score, behaviorAnalysis.riskIncrease);\n    await RiskControlService.updateMonitoringSession(sessionToken, {\n      riskEventsCount: session.risk_events_count + (behaviorAnalysis.isSuspicious ? 1 : 0),\n      riskScore: newRiskScore,\n      isSuspicious: newRiskScore > 50,\n      sessionData: {\n        ...session.session_data,\n        lastActivity: new Date(),\n        userActions: [...(session.session_data?.userActions || []), ...(userActions || [])],\n        behaviorAnalysis\n      }\n    });\n\n    // 如果风险评分过高，触发自动处理\n    if (newRiskScore > 75) {\n      await handleHighRiskSession(sessionToken, session, newRiskScore, behaviorAnalysis);\n    }\n\n    const response = {\n      success: true,\n      sessionUpdate: {\n        sessionToken,\n        lastActivity: new Date().toISOString(),\n        riskScore: newRiskScore,\n        riskEventsCount: session.risk_events_count + (behaviorAnalysis.isSuspicious ? 1 : 0),\n        isSuspicious: newRiskScore > 50,\n        behaviorAnalysis,\n        autoAction: newRiskScore > 75 ? 'session_limited' : null\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('更新监控会话错误:', error);\n    return NextResponse.json(\n      { error: '监控会话更新失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/risk/monitor - 结束监控会话\nexport async function DELETE(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const sessionToken = searchParams.get('sessionToken');\n\n    if (!sessionToken) {\n      return NextResponse.json(\n        { error: '缺少必要参数: sessionToken' },\n        { status: 400 }\n      );\n    }\n\n    // 验证会话令牌\n    const session = await RiskControlService.validateSessionToken(sessionToken);\n    if (!session) {\n      return NextResponse.json(\n        { error: '无效或已过期的会话令牌' },\n        { status: 401 }\n      );\n    }\n\n    // 生成会话报告\n    const sessionReport = await generateSessionReport(session);\n\n    // 结束会话\n    // 注意：这里需要实际调用数据库更新，但在示例中我们只返回报告\n\n    const response = {\n      success: true,\n      sessionEnded: {\n        sessionToken,\n        endTime: new Date().toISOString(),\n        duration: sessionReport.duration,\n        totalRiskEvents: session.risk_events_count,\n        finalRiskScore: session.risk_score,\n        report: sessionReport\n      },\n      message: '监控会话已结束'\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('结束监控会话错误:', error);\n    return NextResponse.json(\n      { error: '结束监控会话失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 辅助函数：生成设备指纹\nfunction generateDeviceFingerprint(data: {\n  userAgent: string;\n  userId: string;\n  deviceInfo?: any;\n}): string {\n  const fingerprint = [\n    data.userId,\n    data.userAgent,\n    data.deviceInfo?.screen || 'unknown',\n    data.deviceInfo?.timezone || 'unknown',\n    data.deviceInfo?.language || 'unknown',\n    data.deviceInfo?.platform || 'unknown'\n  ].join('|');\n\n  return crypto.createHash('sha256').update(fingerprint).digest('hex').substring(0, 32);\n}\n\n// 辅助函数：执行初步风险评估\nasync function performInitialRiskAssessment(\n  userId: string, \n  ipAddress: string, \n  deviceFingerprint: string\n): Promise<number> {\n  try {\n    // 这里可以调用实际的风险评估逻辑\n    // 目前返回基于简单规则的评分\n    let riskScore = 0;\n\n    // IP风险评估\n    if (ipAddress === 'unknown') {\n      riskScore += 20;\n    }\n\n    // 设备指纹风险评估\n    if (!deviceFingerprint) {\n      riskScore += 10;\n    }\n\n    // 用户ID格式检查\n    if (!userId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {\n      riskScore += 15;\n    }\n\n    return Math.min(riskScore, 100);\n  } catch (error) {\n    console.error('初步风险评估失败:', error);\n    return 50; // 默认中等风险\n  }\n}\n\n// 辅助函数：分析用户行为\nasync function analyzeUserBehavior(\n  userId: string,\n  userActions?: any[],\n  activityData?: any\n): Promise<{\n  isSuspicious: boolean;\n  riskIncrease: number;\n  analysis: any;\n}> {\n  try {\n    let riskIncrease = 0;\n    const analysis = {\n      actions: userActions || [],\n      activityPatterns: activityData || {},\n      suspiciousIndicators: []\n    };\n\n    // 分析行为模式\n    if (userActions && userActions.length > 0) {\n      // 快速连续操作\n      const actionTimes = userActions.map((action: any) => new Date(action.timestamp));\n      const intervals = actionTimes.slice(1).map((time, index) => \n        time.getTime() - actionTimes[index].getTime()\n      );\n\n      const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n      if (avgInterval < 1000) { // 小于1秒的平均间隔\n        riskIncrease += 30;\n        analysis.suspiciousIndicators.push('rapid_action_sequence');\n      }\n\n      // 异常操作类型\n      const actionTypes = new Set(userActions.map((action: any) => action.type));\n      if (actionTypes.size > 10) { // 太多不同类型的操作\n        riskIncrease += 20;\n        analysis.suspiciousIndicators.push('diverse_action_pattern');\n      }\n    }\n\n    // 分析活动数据\n    if (activityData) {\n      // 时间模式分析\n      const currentHour = new Date().getHours();\n      if (currentHour < 6 || currentHour > 23) { // 深夜活动\n        riskIncrease += 10;\n        analysis.suspiciousIndicators.push('unusual_time_activity');\n      }\n    }\n\n    const isSuspicious = riskIncrease > 30;\n    \n    return {\n      isSuspicious,\n      riskIncrease,\n      analysis\n    };\n  } catch (error) {\n    console.error('行为分析失败:', error);\n    return {\n      isSuspicious: false,\n      riskIncrease: 0,\n      analysis: { error: '分析失败' }\n    };\n  }\n}\n\n// 辅助函数：处理高风险会话\nasync function handleHighRiskSession(\n  sessionToken: string,\n  session: any,\n  riskScore: number,\n  behaviorAnalysis: any\n): Promise<void> {\n  try {\n    // 创建风险事件\n    const incident = await RiskControlService.createRiskIncident({\n      userId: session.user_id,\n      incidentType: 'suspicious_session',\n      severity: riskScore > 90 ? 'critical' : 'high',\n      riskScore,\n      title: '高风险监控会话',\n      description: `用户会话${sessionToken}检测到异常行为模式`,\n      triggerConditions: {\n        sessionToken,\n        behaviorAnalysis,\n        riskScore,\n        timestamp: new Date()\n      },\n      metadata: {\n        sessionToken,\n        deviceFingerprint: session.device_fingerprint,\n        ipAddress: session.ip_address\n      }\n    });\n\n    // 自动执行限制措施\n    await RiskControlService.executeAutomaticAction(incident.id, [\n      'limit_session',\n      'require_verification'\n    ]);\n\n  } catch (error) {\n    console.error('处理高风险会话失败:', error);\n  }\n}\n\n// 辅助函数：生成会话报告\nasync function generateSessionReport(session: any): Promise<any> {\n  const startTime = new Date(session.session_start);\n  const endTime = new Date();\n  const duration = endTime.getTime() - startTime.getTime();\n  \n  return {\n    sessionId: session.id,\n    userId: session.user_id,\n    startTime,\n    endTime,\n    duration: Math.round(duration / 1000), // 秒数\n    riskEventsCount: session.risk_events_count,\n    finalRiskScore: session.risk_score,\n    sessionData: session.session_data,\n    summary: {\n      totalDuration: `${Math.floor(duration / 60000)}分钟`,\n      riskLevel: session.risk_score > 75 ? '高风险' : session.risk_score > 50 ? '中风险' : '低风险',\n      recommendations: session.risk_score > 50 ? ['建议人工审核', '增加监控频率'] : ['监控正常']\n    }\n  };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/show-off/posts/[id]/comments/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":15,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[397,421],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[397,421],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[397,421],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":15,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":15,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[422,424],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[458,483],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[458,483],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[458,483],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":16,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":16,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[484,486],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":76,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":76,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1876,1897],"text":"(Boolean(comment.user.lastName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1898,1900],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":87,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2272,2291],"text":"(Boolean(reply.user.lastName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":87,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":87,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2292,2294],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2877,2911],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 14. Maximum allowed is 10.","line":124,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":254,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":132,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3210,3223],"text":"(Boolean((session?.user)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":150,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":150,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3590,3597],"text":"(Boolean(content))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":169,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":169,"endColumn":44,"fix":{"range":[4030,4065],"text":"post?.status !== 'approved'"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":177,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":177,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4224,4239],"text":"Boolean(parentCommentId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":182,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":182,"endColumn":60,"fix":{"range":[4373,4422],"text":"parentComment?.postId !== postId"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":198,"column":28,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":198,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4837,4852],"text":"(Boolean(parentCommentId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4853,4855],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":232,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":232,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5584,5605],"text":"(Boolean(comment.user.lastName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5606,5608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5961,5993],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":265,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":265,"endColumn":40,"fix":{"range":[6363,6394],"text":"post?.userId !== userId"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7333,7367],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { auth } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// 获取评论列表\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const postId = params.id;\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n\n    if (!postId) {\n      return NextResponse.json(\n        { success: false, error: '晒单ID不能为空' },\n        { status: 400 }\n      );\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [comments, total] = await Promise.all([\n      prisma.showOffComments.findMany({\n        where: {\n          postId,\n          parentCommentId: null // 只获取顶级评论\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              firstName: true,\n              lastName: true,\n              avatarUrl: true,\n              vipLevel: true\n            }\n          },\n          // 获取回复评论\n          showOffComments: {\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  firstName: true,\n                  lastName: true,\n                  avatarUrl: true,\n                  vipLevel: true\n                }\n              }\n            },\n            orderBy: { createdAt: 'asc' }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip,\n        take: limit\n      }),\n      prisma.showOffComments.count({\n        where: {\n          postId,\n          parentCommentId: null\n        }\n      })\n    ]);\n\n    // 格式化返回数据\n    const formattedComments = comments.map(comment => ({\n      id: comment.id,\n      user: {\n        id: comment.user.id,\n        name: `${comment.user.firstName} ${comment.user.lastName || ''}`.trim(),\n        avatar: comment.user.avatarUrl,\n        vipLevel: comment.user.vipLevel\n      },\n      content: comment.content,\n      likeCount: comment.likeCount,\n      createdAt: comment.createdAt,\n      replies: comment.showOffComments.map(reply => ({\n        id: reply.id,\n        user: {\n          id: reply.user.id,\n          name: `${reply.user.firstName} ${reply.user.lastName || ''}`.trim(),\n          avatar: reply.user.avatarUrl,\n          vipLevel: reply.user.vipLevel\n        },\n        content: reply.content,\n        likeCount: reply.likeCount,\n        createdAt: reply.createdAt\n      }))\n    }));\n\n    const totalPages = Math.ceil(total / limit);\n    const hasMore = page < totalPages;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        comments: formattedComments,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages,\n          hasMore\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('获取评论列表失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取评论列表失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 发表评论\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const postId = params.id;\n    const session = await auth();\n\n    if (!session?.user) {\n      return NextResponse.json(\n        { success: false, error: '请先登录' },\n        { status: 401 }\n      );\n    }\n\n    if (!postId) {\n      return NextResponse.json(\n        { success: false, error: '晒单ID不能为空' },\n        { status: 400 }\n      );\n    }\n\n    const body = await request.json();\n    const { content, parentCommentId } = body;\n\n    // 验证必需字段\n    if (!content || content.trim().length === 0) {\n      return NextResponse.json(\n        { success: false, error: '评论内容不能为空' },\n        { status: 400 }\n      );\n    }\n\n    if (content.length > 500) {\n      return NextResponse.json(\n        { success: false, error: '评论内容不能超过500字符' },\n        { status: 400 }\n      );\n    }\n\n    // 检查晒单是否存在且已审核通过\n    const post = await prisma.showOffPosts.findUnique({\n      where: { id: postId }\n    });\n\n    if (!post || post.status !== 'approved') {\n      return NextResponse.json(\n        { success: false, error: '晒单不存在或未审核通过' },\n        { status: 404 }\n      );\n    }\n\n    // 如果是回复评论，验证父评论是否存在\n    if (parentCommentId) {\n      const parentComment = await prisma.showOffComments.findUnique({\n        where: { id: parentCommentId }\n      });\n\n      if (!parentComment || parentComment.postId !== postId) {\n        return NextResponse.json(\n          { success: false, error: '父评论不存在' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // 创建评论\n    const comment = await prisma.$transaction(async (tx) => {\n      // 创建评论\n      const newComment = await tx.showOffComments.create({\n        data: {\n          postId,\n          userId: session.user.id,\n          content: content.trim(),\n          parentCommentId: parentCommentId || null\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              firstName: true,\n              lastName: true,\n              avatarUrl: true,\n              vipLevel: true\n            }\n          }\n        }\n      });\n\n      // 更新晒单的评论数\n      await tx.showOffPosts.update({\n        where: { id: postId },\n        data: { commentCount: { increment: 1 } }\n      });\n\n      return newComment;\n    });\n\n    // 检查是否达到评论奖励上限（25条评论）\n    if (post.commentCount < 25) {\n      await processCommentReward(postId, session.user.id);\n    }\n\n    // 格式化返回数据\n    const formattedComment = {\n      id: comment.id,\n      user: {\n        id: comment.user.id,\n        name: `${comment.user.firstName} ${comment.user.lastName || ''}`.trim(),\n        avatar: comment.user.avatarUrl,\n        vipLevel: comment.user.vipLevel\n      },\n      content: comment.content,\n      likeCount: comment.likeCount,\n      createdAt: comment.createdAt\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: formattedComment,\n      message: '评论发表成功'\n    });\n\n  } catch (error) {\n    console.error('发表评论失败:', error);\n    return NextResponse.json(\n      { success: false, error: '发表评论失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 处理评论奖励\nasync function processCommentReward(postId: string, userId: string) {\n  try {\n    // 只有原帖作者能获得奖励\n    const post = await prisma.showOffPosts.findUnique({\n      where: { id: postId },\n      select: { userId: true, commentCount: true }\n    });\n\n    if (!post || post.userId !== userId) {\n      return; // 只有作者评论自己的帖子才能获得奖励\n    }\n\n    await prisma.$transaction(async (tx) => {\n      // 检查当前评论数是否在奖励范围内\n      if (post.commentCount >= 25) {\n        return; // 超过奖励上限\n      }\n\n      // 发放0.2幸运币奖励\n      await tx.users.update({\n        where: { id: userId },\n        data: {\n          luckyCoins: {\n            increment: 0.2\n          },\n          luckyCoinsVersion: {\n            increment: 1\n          }\n        }\n      });\n\n      // 记录交易\n      await tx.walletTransactions.create({\n        data: {\n          userId,\n          type: 'show_off_comment_reward',\n          amount: 0,\n          luckyCoins: 0.2,\n          currency: 'TJS',\n          description: '晒单评论奖励',\n          status: 'completed',\n          metadata: {\n            postId,\n            rewardType: 'comment_reward',\n            rewardAmount: 0.2,\n            commentCount: post.commentCount + 1\n          }\n        }\n      });\n    });\n  } catch (error) {\n    console.error('处理评论奖励失败:', error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/show-off/posts/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 13. Maximum allowed is 10.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":144,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":78,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":78,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1819,1832],"text":"Boolean((session?.user))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":95,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":95,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2207,2225],"text":"(Boolean(post.user.lastName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2226,2228],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":101,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":101,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":101,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":101,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2436,2438],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":104,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":104,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2510,2546],"text":"(Boolean(post.round.products.nameMultilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":104,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":104,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2510,2591],"text":"(post.round.products.nameMultilingual ?? \n              post.round.products.nameZh)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":105,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":105,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2565,2591],"text":"(Boolean(post.round.products.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":105,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":105,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2565,2636],"text":"(post.round.products.nameZh ?? \n              post.round.products.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":106,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":106,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2610,2636],"text":"(Boolean(post.round.products.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":106,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":106,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2637,2639],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":108,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":108,"endColumn":65,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2704,2747],"text":"(Boolean(post.round.products.descriptionMultilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":108,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":108,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2704,2806],"text":"(post.round.products.descriptionMultilingual ?? \n                     post.round.products.descriptionZh)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":109,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":109,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2773,2806],"text":"(Boolean(post.round.products.descriptionZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2773,2865],"text":"(post.round.products.descriptionZh ?? \n                     post.round.products.descriptionEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":110,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":110,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2832,2865],"text":"(Boolean(post.round.products.descriptionEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":110,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":110,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2866,2868],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3615,3649],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":155,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":155,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3953,3966],"text":"(Boolean((session?.user)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":174,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":174,"endColumn":44,"fix":{"range":[4346,4381],"text":"post?.status !== 'approved'"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6096,6128],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":272,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":272,"endColumn":40,"fix":{"range":[6475,6506],"text":"post?.userId !== userId"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7592,7626],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { auth } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// 获取晒单详情\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const postId = params.id;\n    const session = await auth();\n\n    if (!postId) {\n      return NextResponse.json(\n        { success: false, error: '晒单ID不能为空' },\n        { status: 400 }\n      );\n    }\n\n    const post = await prisma.showOffPosts.findUnique({\n      where: { id: postId },\n      include: {\n        user: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true,\n            avatarUrl: true,\n            vipLevel: true,\n            preferredLanguage: true\n          }\n        },\n        round: {\n          select: {\n            id: true,\n            productId: true,\n            roundNumber: true,\n            winningNumber: true,\n            drawTime: true,\n            products: {\n              select: {\n                id: true,\n                nameMultilingual: true,\n                nameZh: true,\n                nameEn: true,\n                nameRu: true,\n                descriptionMultilingual: true,\n                descriptionZh: true,\n                descriptionEn: true,\n                descriptionRu: true,\n                images: true,\n                marketPrice: true\n              }\n            }\n          }\n        }\n      }\n    });\n\n    if (!post) {\n      return NextResponse.json(\n        { success: false, error: '晒单不存在' },\n        { status: 404 }\n      );\n    }\n\n    // 更新浏览量\n    await prisma.showOffPosts.update({\n      where: { id: postId },\n      data: { viewCount: { increment: 1 } }\n    });\n\n    // 检查当前用户是否点赞\n    let isLiked = false;\n    if (session?.user) {\n      const like = await prisma.showOffLikes.findUnique({\n        where: {\n          postId_userId: {\n            postId: postId,\n            userId: session.user.id\n          }\n        }\n      });\n      isLiked = !!like;\n    }\n\n    // 格式化返回数据\n    const formattedPost = {\n      id: post.id,\n      user: {\n        id: post.user.id,\n        name: `${post.user.firstName} ${post.user.lastName || ''}`.trim(),\n        avatar: post.user.avatarUrl,\n        vipLevel: post.user.vipLevel,\n        preferredLanguage: post.user.preferredLanguage\n      },\n      content: post.content,\n      images: post.images || [],\n      product: {\n        id: post.round.products.id,\n        name: post.round.products.nameMultilingual || \n              post.round.products.nameZh || \n              post.round.products.nameEn || \n              post.round.products.nameRu,\n        description: post.round.products.descriptionMultilingual || \n                     post.round.products.descriptionZh || \n                     post.round.products.descriptionEn || \n                     post.round.products.descriptionRu,\n        images: post.round.products.images,\n        marketPrice: post.round.products.marketPrice,\n        winningInfo: {\n          roundNumber: post.round.roundNumber,\n          winningNumber: post.round.winningNumber,\n          drawTime: post.round.drawTime\n        }\n      },\n      stats: {\n        likeCount: post.likeCount,\n        commentCount: post.commentCount,\n        shareCount: post.shareCount,\n        viewCount: post.viewCount + 1 // 使用更新后的数值\n      },\n      hotScore: post.hotScore,\n      status: post.status,\n      createdAt: post.createdAt,\n      isLiked\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: formattedPost\n    });\n\n  } catch (error) {\n    console.error('获取晒单详情失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取晒单详情失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 点赞/取消点赞晒单\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const postId = params.id;\n    const session = await auth();\n\n    if (!session?.user) {\n      return NextResponse.json(\n        { success: false, error: '请先登录' },\n        { status: 401 }\n      );\n    }\n\n    if (!postId) {\n      return NextResponse.json(\n        { success: false, error: '晒单ID不能为空' },\n        { status: 400 }\n      );\n    }\n\n    // 检查晒单是否存在且已审核通过\n    const post = await prisma.showOffPosts.findUnique({\n      where: { id: postId }\n    });\n\n    if (!post || post.status !== 'approved') {\n      return NextResponse.json(\n        { success: false, error: '晒单不存在或未审核通过' },\n        { status: 404 }\n      );\n    }\n\n    // 检查是否已点赞\n    const existingLike = await prisma.showOffLikes.findUnique({\n      where: {\n        postId_userId: {\n          postId,\n          userId: session.user.id\n        }\n      }\n    });\n\n    let isLiked: boolean;\n    let likeCount: number;\n\n    if (existingLike) {\n      // 取消点赞\n      await prisma.$transaction(async (tx) => {\n        // 删除点赞记录\n        await tx.showOffLikes.delete({\n          where: {\n            postId_userId: {\n              postId,\n              userId: session.user.id\n            }\n          }\n        });\n\n        // 更新晒单的点赞数\n        const updatedPost = await tx.showOffPosts.update({\n          where: { id: postId },\n          data: { likeCount: { decrement: 1 } }\n        });\n\n        likeCount = updatedPost.likeCount;\n      });\n\n      isLiked = false;\n    } else {\n      // 点赞\n      await prisma.$transaction(async (tx) => {\n        // 添加点赞记录\n        await tx.showOffLikes.create({\n          data: {\n            postId,\n            userId: session.user.id\n          }\n        });\n\n        // 更新晒单的点赞数\n        const updatedPost = await tx.showOffPosts.update({\n          where: { id: postId },\n          data: { likeCount: { increment: 1 } }\n        });\n\n        likeCount = updatedPost.likeCount;\n      });\n\n      isLiked = true;\n\n      // 检查是否达到点赞奖励上限（20赞）\n      if (likeCount <= 20 && post.likeCount < 20) {\n        // 发放点赞奖励（0.5币）\n        await processLikeReward(postId, session.user.id);\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        isLiked,\n        likeCount\n      }\n    });\n\n  } catch (error) {\n    console.error('点赞操作失败:', error);\n    return NextResponse.json(\n      { success: false, error: '点赞操作失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 处理点赞奖励\nasync function processLikeReward(postId: string, userId: string) {\n  try {\n    // 只有原帖作者能获得奖励\n    const post = await prisma.showOffPosts.findUnique({\n      where: { id: postId },\n      select: { userId: true }\n    });\n\n    if (!post || post.userId !== userId) {\n      return; // 只有作者给自己点赞才能获得奖励\n    }\n\n    await prisma.$transaction(async (tx) => {\n      // 检查当前点赞数是否在奖励范围内\n      const currentPost = await tx.showOffPosts.findUnique({\n        where: { id: postId },\n        select: { likeCount: true }\n      });\n\n      if (!currentPost || currentPost.likeCount > 20) {\n        return; // 超过奖励上限\n      }\n\n      // 发放0.5幸运币奖励\n      await tx.users.update({\n        where: { id: userId },\n        data: {\n          luckyCoins: {\n            increment: 0.5\n          },\n          luckyCoinsVersion: {\n            increment: 1\n          }\n        }\n      });\n\n      // 记录交易\n      await tx.walletTransactions.create({\n        data: {\n          userId,\n          type: 'show_off_like_reward',\n          amount: 0,\n          luckyCoins: 0.5,\n          currency: 'TJS',\n          description: '晒单点赞奖励',\n          status: 'completed',\n          metadata: {\n            postId,\n            rewardType: 'like_reward',\n            rewardAmount: 0.5,\n            likeCount: currentPost.likeCount\n          }\n        }\n      });\n    });\n  } catch (error) {\n    console.error('处理点赞奖励失败:', error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/show-off/posts/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":11,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[321,345],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[321,345],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[321,345],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":11,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":11,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[346,348],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":12,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[382,407],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[382,407],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[382,407],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":12,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":12,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[408,410],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":13,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":13,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[435,459],"text":"(searchParams.get('sort') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[435,459],"text":"(searchParams.get('sort') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[435,459],"text":"(Boolean(searchParams.get('sort')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":13,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":13,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[460,462],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[613,616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[613,616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":19,"column":5,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":23,"endColumn":6,"fix":{"range":[627,748],"text":"orderBy = sort === 'hottest' ? { hotScore: 'desc' } : { createdAt: 'desc' };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[781,784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[781,784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[830,836],"text":"userId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[830,836],"text":"userId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[830,836],"text":"Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":84,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":84,"endColumn":59,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2144,2162],"text":"(Boolean(post.user.lastName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":84,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":84,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2163,2165],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":93,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":93,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2441,2477],"text":"(Boolean(post.round.products.nameMultilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":93,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":93,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2441,2522],"text":"(post.round.products.nameMultilingual ?? \n              post.round.products.nameZh)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":94,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":94,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2496,2522],"text":"(Boolean(post.round.products.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2496,2567],"text":"(post.round.products.nameZh ?? \n              post.round.products.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":95,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":95,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2541,2567],"text":"(Boolean(post.round.products.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2568,2570],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3238,3272],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 20. Maximum allowed is 10.","line":135,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":242,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":139,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":139,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3508,3521],"text":"(Boolean((session?.user)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":150,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":150,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3767,3774],"text":"(Boolean(roundId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":150,"column":22,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":150,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3779,3794],"text":"(Boolean(participationId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":150,"column":42,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":150,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3799,3805],"text":"(Boolean(images))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":166,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":166,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4162,4169],"text":"(Boolean(content))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":213,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":213,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5326,5333],"text":"(Boolean(content))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":213,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":213,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5334,5336],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5875,5907],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'images' is defined but never used. Allowed unused args must match /^_/u.","line":245,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'images' is defined but never used. Allowed unused args must match /^_/u.","line":245,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":245,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":249,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":249,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6224,6231],"text":"content != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6224,6231],"text":"content ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6224,6231],"text":"Boolean(content)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7482,7516],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { auth } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// 获取晒单列表\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const sort = searchParams.get('sort') || 'latest'; // latest | hottest\n    const userId = searchParams.get('user_id'); // 可选：获取特定用户的晒单\n\n    const skip = (page - 1) * limit;\n\n    let orderBy: any = {};\n    if (sort === 'hottest') {\n      orderBy = { hotScore: 'desc' };\n    } else {\n      orderBy = { createdAt: 'desc' };\n    }\n\n    // 构建查询条件\n    const where: any = {\n      status: 'approved'\n    };\n\n    if (userId) {\n      where.userId = userId;\n    }\n\n    const [posts, total] = await Promise.all([\n      prisma.showOffPosts.findMany({\n        where,\n        include: {\n          user: {\n            select: {\n              id: true,\n              firstName: true,\n              lastName: true,\n              avatarUrl: true,\n              vipLevel: true,\n              preferredLanguage: true\n            }\n          },\n          round: {\n            select: {\n              id: true,\n              productId: true,\n              roundNumber: true,\n              winningNumber: true,\n              products: {\n                select: {\n                  id: true,\n                  nameMultilingual: true,\n                  nameZh: true,\n                  nameEn: true,\n                  nameRu: true,\n                  images: true,\n                  marketPrice: true\n                }\n              }\n            }\n          }\n        },\n        orderBy,\n        skip,\n        take: limit\n      }),\n      prisma.showOffPosts.count({ where })\n    ]);\n\n    // 计算分页信息\n    const totalPages = Math.ceil(total / limit);\n    const hasMore = page < totalPages;\n\n    // 格式化返回数据\n    const formattedPosts = posts.map(post => ({\n      id: post.id,\n      user: {\n        id: post.user.id,\n        name: `${post.user.firstName} ${post.user.lastName || ''}`.trim(),\n        avatar: post.user.avatarUrl,\n        vipLevel: post.user.vipLevel,\n        preferredLanguage: post.user.preferredLanguage\n      },\n      content: post.content,\n      images: post.images,\n      product: {\n        id: post.round.products.id,\n        name: post.round.products.nameMultilingual || \n              post.round.products.nameZh || \n              post.round.products.nameEn || \n              post.round.products.nameRu,\n        images: post.round.products.images,\n        marketPrice: post.round.products.marketPrice\n      },\n      stats: {\n        likeCount: post.likeCount,\n        commentCount: post.commentCount,\n        shareCount: post.shareCount,\n        viewCount: post.viewCount\n      },\n      hotScore: post.hotScore,\n      createdAt: post.createdAt\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        posts: formattedPosts,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages,\n          hasMore\n        },\n        sort\n      }\n    });\n\n  } catch (error) {\n    console.error('获取晒单列表失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取晒单列表失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 发布晒单\nexport async function POST(request: NextRequest) {\n  try {\n    // 验证用户身份\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { success: false, error: '请先登录' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { roundId, participationId, content, images } = body;\n\n    // 验证必需字段\n    if (!roundId || !participationId || !images) {\n      return NextResponse.json(\n        { success: false, error: '缺少必需字段' },\n        { status: 400 }\n      );\n    }\n\n    // 验证图片数量\n    if (!Array.isArray(images) || images.length === 0 || images.length > 9) {\n      return NextResponse.json(\n        { success: false, error: '图片数量必须为1-9张' },\n        { status: 400 }\n      );\n    }\n\n    // 验证文字长度\n    if (content && (content.length < 20 || content.length > 200)) {\n      return NextResponse.json(\n        { success: false, error: '文字内容长度必须在20-200字符之间' },\n        { status: 400 }\n      );\n    }\n\n    // 验证用户是否真的中奖且未晒单\n    const participation = await prisma.participations.findFirst({\n      where: {\n        id: participationId,\n        userId: session.user.id,\n        isWinner: true\n      },\n      include: {\n        round: true\n      }\n    });\n\n    if (!participation || participation.roundId !== roundId) {\n      return NextResponse.json(\n        { success: false, error: '未找到中奖记录或参数错误' },\n        { status: 400 }\n      );\n    }\n\n    // 检查是否已经晒单\n    const existingPost = await prisma.showOffPosts.findUnique({\n      where: { participationId }\n    });\n\n    if (existingPost) {\n      return NextResponse.json(\n        { success: false, error: '该中奖记录已经晒单过了' },\n        { status: 400 }\n      );\n    }\n\n    // 基础自动审核（简单的内容过滤）\n    const autoReviewPassed = await performAutoReview(content, images);\n    \n    // 创建晒单\n    const post = await prisma.showOffPosts.create({\n      data: {\n        userId: session.user.id,\n        roundId,\n        participationId,\n        content: content || '',\n        images: images,\n        status: autoReviewPassed ? 'approved' : 'pending',\n        autoReviewPassed,\n        autoReviewReason: autoReviewPassed ? '自动审核通过' : '需要人工审核'\n      }\n    });\n\n    // 如果自动审核通过，发放奖励并更新统计数据\n    if (autoReviewPassed) {\n      await processPostReward(post.id, session.user.id);\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: post.id,\n        status: post.status,\n        message: autoReviewPassed ? '晒单发布成功并审核通过' : '晒单提交成功，等待审核'\n      }\n    });\n\n  } catch (error) {\n    console.error('发布晒单失败:', error);\n    return NextResponse.json(\n      { success: false, error: '发布晒单失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 基础自动审核逻辑\nasync function performAutoReview(content: string | null, images: string[]): Promise<boolean> {\n  // 基础敏感词过滤（实际项目中应该使用更复杂的审核服务）\n  const sensitiveWords = ['广告', '垃圾', '诈骗', '违禁']; // 简化示例\n  \n  if (content) {\n    for (const word of sensitiveWords) {\n      if (content.includes(word)) {\n        return false;\n      }\n    }\n  }\n\n  // 基础图片审核（实际项目中应该调用图片审核服务）\n  // 这里暂时假设所有图片都通过审核\n  return true;\n}\n\n// 处理晒单审核通过的奖励\nasync function processPostReward(postId: string, userId: string) {\n  try {\n    // 发放3幸运币奖励\n    await prisma.$transaction(async (tx) => {\n      // 更新用户幸运币\n      await tx.users.update({\n        where: { id: userId },\n        data: {\n          luckyCoins: {\n            increment: 3.0\n          },\n          luckyCoinsVersion: {\n            increment: 1\n          }\n        }\n      });\n\n      // 记录交易\n      await tx.walletTransactions.create({\n        data: {\n          userId,\n          type: 'show_off_reward',\n          amount: 0,\n          luckyCoins: 3.0,\n          currency: 'TJS',\n          description: '晒单审核通过奖励',\n          status: 'completed',\n          metadata: {\n            postId,\n            rewardType: 'show_off_post',\n            rewardAmount: 3.0\n          }\n        }\n      });\n\n      // 更新晒单状态\n      await tx.showOffPosts.update({\n        where: { id: postId },\n        data: {\n          status: 'approved',\n          coinRewarded: true,\n          coinRewardedAt: new Date()\n        }\n      });\n    });\n  } catch (error) {\n    console.error('处理晒单奖励失败:', error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/tasks/check-complete/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 11. Maximum allowed is 10.","line":20,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":200,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[507,510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[507,510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":30,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":30,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[697,705],"text":"(Boolean(taskType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Arrow function has a complexity of 13. Maximum allowed is 10.","line":105,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":138,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2739,2742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2739,2742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":107,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":107,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2797,2819],"text":"(Boolean(task.name_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":107,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":107,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2820,2822],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":108,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":108,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2865,2894],"text":"(Boolean(task.description_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":108,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":108,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2895,2897],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":110,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":110,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2932,2962],"text":"(Boolean(nameMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":110,"column":24,"nodeType":"MemberExpression","endLine":110,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":110,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":110,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2932,3014],"text":"(nameMultilingual[userLanguage] ?? \n                      nameMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":111,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":111,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2989,3014],"text":"(Boolean(nameMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3015,3017],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":114,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":114,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3110,3147],"text":"(Boolean(descriptionMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":114,"column":31,"nodeType":"MemberExpression","endLine":114,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3110,3213],"text":"(descriptionMultilingual[userLanguage] ?? \n                             descriptionMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":115,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":115,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3181,3213],"text":"(Boolean(descriptionMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":115,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":115,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3214,3216],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":131,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":131,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3749,3760],"text":"(Boolean(task.status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3761,3763],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":135,"column":52,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":135,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3952,3963],"text":"(Boolean(task.status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":135,"column":69,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":135,"endColumn":88,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3969,3988],"text":"(Boolean(task.reward_claimed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":136,"column":21,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":136,"endColumn":86,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4010,4075],"text":"(Boolean((checkResults.find(r => r.taskType === task.task_type)?.wasUpdated)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":87,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4076,4078],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":143,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":143,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4199,4210],"text":"(Boolean(task.status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { ApiResponse } from '@/lib/api-response';\n\nconst logger = getLogger();\n\n/**\n * 检查任务完成状态API\n * POST /api/tasks/check-complete\n * \n * 请求体：\n * {\n *   \"taskType\": \"register\" | \"first_recharge\" | \"first_lottery\" | \"all\"\n * }\n * \n * 手动触发任务完成状态检查，支持单个任务或全部任务检查\n */\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const startTime = Date.now();\n    const { userId } = user;\n\n    // 获取请求数据\n    const body = await request.json();\n    const { taskType } = body;\n\n    // 验证输入参数\n    if (!taskType) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('任务类型不能为空', 'TASK_TYPE_REQUIRED'),\n        { status: 400 }\n      );\n    }\n\n    // 验证任务类型\n    const validTaskTypes = ['register', 'first_recharge', 'first_lottery', 'all'];\n    if (!validTaskTypes.includes(taskType)) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('无效的任务类型', 'INVALID_TASK_TYPE'),\n        { status: 400 }\n      );\n    }\n\n    logger.info('开始检查任务完成状态', { userId, taskType }, {\n      endpoint: '/api/tasks/check-complete',\n      method: 'POST'\n    });\n\n    // 获取用户信息\n    const userRecord = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { preferredLanguage: true, createdAt: true }\n    });\n\n    if (!userRecord) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const userLanguage = userRecord.preferredLanguage || 'tg-TJ';\n    const checkResults = [];\n\n    // 确定要检查的任务类型\n    const tasksToCheck = taskType === 'all' \n      ? ['register', 'first_recharge', 'first_lottery'] \n      : [taskType];\n\n    // 检查每个任务\n    for (const currentTaskType of tasksToCheck) {\n      const result = await checkSingleTaskCompletion(userId, currentTaskType, userRecord.createdAt);\n      checkResults.push(result);\n    }\n\n    // 获取更新后的任务状态\n    const updatedTasks = await prisma.$queryRawUnsafe(`\n      SELECT \n        task_id,\n        task_type,\n        name_multilingual,\n        description_multilingual,\n        reward_amount,\n        reward_type,\n        status,\n        completed_at,\n        reward_claimed,\n        progress_data\n      FROM user_new_user_task_status\n      WHERE user_id = '${userId}'\n      ${taskType !== 'all' ? `AND task_type = '${taskType}'` : ''}\n      ORDER BY (\n        CASE task_type\n          WHEN 'register' THEN 1\n          WHEN 'first_recharge' THEN 2\n          WHEN 'first_lottery' THEN 3\n          ELSE 4\n        END\n      )\n    `);\n\n    // 构建响应数据\n    const tasks = updatedTasks.map((task: any) => {\n      // 解析多语言字段\n      const nameMultilingual = task.name_multilingual || {};\n      const descriptionMultilingual = task.description_multilingual || {};\n      \n      const taskName = nameMultilingual[userLanguage] || \n                      nameMultilingual['en-US'] || \n                      task.task_type;\n                      \n      const taskDescription = descriptionMultilingual[userLanguage] || \n                             descriptionMultilingual['en-US'] || \n                             task.task_type;\n\n      return {\n        taskId: task.task_id,\n        taskType: task.task_type,\n        name: taskName,\n        description: taskDescription,\n        reward: {\n          amount: parseFloat(task.reward_amount.toString()),\n          type: task.reward_type,\n          currency: task.reward_type === 'balance' ? 'TJS' : 'LC',\n          formatted: task.reward_type === 'balance' \n            ? `${task.reward_amount} TJS` \n            : `${task.reward_amount} LC`\n        },\n        status: task.status || 'pending',\n        completedAt: task.completed_at,\n        rewardClaimed: task.reward_claimed,\n        progressData: task.progress_data,\n        canClaim: (task.status === 'completed' || !task.status) && !task.reward_claimed,\n        wasUpdated: checkResults.find(r => r.taskType === task.task_type)?.wasUpdated || false\n      };\n    });\n\n    // 统计信息\n    const stats = {\n      total: tasks.length,\n      pending: tasks.filter(task => !task.status || task.status === 'pending').length,\n      completed: tasks.filter(task => task.status === 'completed').length,\n      rewarded: tasks.filter(task => task.status === 'rewarded').length,\n      updated: tasks.filter(task => task.wasUpdated).length,\n      completionRate: 0,\n      totalRewardClaimed: tasks\n        .filter(task => task.status === 'rewarded')\n        .reduce((sum, task) => sum + task.reward.amount, 0),\n      totalPossibleReward: tasks.reduce((sum, task) => sum + task.reward.amount, 0)\n    };\n    \n    if (stats.total > 0) {\n      stats.completionRate = Math.round((stats.completed / stats.total) * 100);\n    }\n\n    const duration = Date.now() - startTime;\n\n    logger.info('成功检查任务完成状态', {\n      userId,\n      taskType,\n      totalTasks: stats.total,\n      completedTasks: stats.completed,\n      updatedTasks: stats.updated,\n      completionRate: stats.completionRate\n    }, {\n      endpoint: '/api/tasks/check-complete',\n      method: 'POST',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        userId,\n        checkType: taskType,\n        tasks,\n        checkResults,\n        stats,\n        lastChecked: new Date().toISOString(),\n        version: '1.0'\n      },\n      message: `任务完成状态检查完成${stats.updated > 0 ? `，更新了${stats.updated}个任务状态` : ''}`\n    });\n\n  } catch (error) {\n    logger.error('检查任务完成状态时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/tasks/check-complete',\n      method: 'POST'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('检查任务状态失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});\n\n/**\n * 检查单个任务的完成状态\n */\nasync function checkSingleTaskCompletion(userId: string, taskType: string, userCreatedAt: string) {\n  const userCreated = new Date(userCreatedAt);\n  const now = new Date();\n  const daysSinceRegistration = (now.getTime() - userCreated.getTime()) / (1000 * 3600 * 24);\n\n  let shouldComplete = false;\n  let completionReason = '';\n\n  // 检查任务是否在有效期内（注册后7天内）\n  if (daysSinceRegistration > 7) {\n    return {\n      taskType,\n      shouldComplete: false,\n      wasUpdated: false,\n      reason: '任务已过期（注册后7天有效期）',\n      completed: false\n    };\n  }\n\n  switch (taskType) {\n    case 'register':\n      // 注册任务：检查用户是否在7天内注册\n      shouldComplete = daysSinceRegistration <= 7;\n      completionReason = shouldComplete \n        ? '用户注册时间在有效期内' \n        : '用户注册时间已超过7天有效期';\n      break;\n\n    case 'first_recharge':\n      // 首次充值任务：检查是否有成功的充值订单\n      const rechargeCheck = await prisma.$queryRawUnsafe(`\n        SELECT EXISTS (\n          SELECT 1 FROM orders \n          WHERE user_id = '${userId}'\n            AND type = 'recharge'\n            AND status = 'completed'\n            AND payment_status = 'completed'\n        ) as has_recharge\n      `);\n      shouldComplete = rechargeCheck[0]?.has_recharge === true;\n      completionReason = shouldComplete \n        ? '检测到成功的充值订单' \n        : '尚未完成首次充值';\n      break;\n\n    case 'first_lottery':\n      // 首次抽奖任务：检查是否有抽奖参与记录\n      const lotteryCheck = await prisma.$queryRawUnsafe(`\n        SELECT EXISTS (\n          SELECT 1 FROM participations \n          WHERE user_id = '${userId}'\n        ) as has_lottery\n      `);\n      shouldComplete = lotteryCheck[0]?.has_lottery === true;\n      completionReason = shouldComplete \n        ? '检测到抽奖参与记录' \n        : '尚未参与任何抽奖';\n      break;\n\n    default:\n      shouldComplete = false;\n      completionReason = '未知任务类型';\n  }\n\n  // 如果应该完成，检查当前状态并进行更新\n  let wasUpdated = false;\n  if (shouldComplete) {\n    // 检查当前任务进度状态\n    const currentProgress = await prisma.$queryRawUnsafe(`\n      SELECT status FROM user_task_progress \n      WHERE user_id = '${userId}' \n      AND task_id = (\n        SELECT id FROM new_user_tasks \n        WHERE task_type = '${taskType}' AND is_active = true\n        LIMIT 1\n      )\n    `);\n\n    const currentStatus = currentProgress[0]?.status;\n\n    // 如果当前状态不是completed，则更新为完成状态\n    if (currentStatus !== 'completed') {\n      await prisma.$queryRawUnsafe(`\n        INSERT INTO user_task_progress (user_id, task_id, status, completed_at, progress_data)\n        VALUES (\n          '${userId}', \n          (SELECT id FROM new_user_tasks WHERE task_type = '${taskType}' AND is_active = true LIMIT 1), \n          'completed', \n          CURRENT_TIMESTAMP, \n          '{\"checked_at\": \"${new Date().toISOString()}\", \"manual_check\": true}'\n        )\n        ON CONFLICT (user_id, task_id) \n        DO UPDATE SET \n          status = 'completed',\n          completed_at = CURRENT_TIMESTAMP,\n          progress_data = '{\"checked_at\": \"${new Date().toISOString()}\", \"manual_check\": true, \"updated\": true}',\n          updated_at = CURRENT_TIMESTAMP\n      `);\n      \n      wasUpdated = true;\n    }\n  }\n\n  return {\n    taskType,\n    shouldComplete,\n    wasUpdated,\n    reason: completionReason,\n    completed: shouldComplete,\n    daysSinceRegistration: Math.round(daysSinceRegistration * 100) / 100,\n    timeRemaining: Math.max(0, 7 - daysSinceRegistration)\n  };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/tasks/claim/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@/lib/auth' import is duplicated.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":6,"endColumn":45},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 28. Maximum allowed is 10.","line":21,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":225,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[523,526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[523,526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":31,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":31,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[713,721],"text":"(Boolean(taskType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'clientIp' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":53,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clientIp' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":53,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":53,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1314,1352],"text":"(request.headers.get('x-forwarded-for') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1314,1352],"text":"(request.headers.get('x-forwarded-for') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1314,1352],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":53,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":53,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1314,1388],"text":"(request.headers.get('x-forwarded-for') ?? request.headers.get('x-real-ip'))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":64,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":53,"endColumn":96,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1356,1388],"text":"(request.headers.get('x-real-ip') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1356,1388],"text":"(request.headers.get('x-real-ip') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1356,1388],"text":"(Boolean(request.headers.get('x-real-ip')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":53,"column":97,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":53,"endColumn":99,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1389,1391],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":87,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2360,2366],"text":"(Boolean(result))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":87,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":87,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2394,2410],"text":"(Boolean(result[0].result))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":90,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":90,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2478,2489],"text":"(Boolean(errorResult))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":90,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":90,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2494,2513],"text":"(Boolean(errorResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":112,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":112,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3227,3244],"text":"(Boolean(errorResult.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3245,3247],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":157,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":157,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4413,4436],"text":"(Boolean((task?.name_multilingual)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":157,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":157,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4437,4439],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":158,"column":37,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":158,"endColumn":67,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4480,4510],"text":"(Boolean((task?.description_multilingual)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":158,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":158,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4511,4513],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":160,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":160,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4544,4574],"text":"(Boolean(nameMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":160,"column":22,"nodeType":"MemberExpression","endLine":160,"endColumn":52},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":160,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":160,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4544,4624],"text":"(nameMultilingual[userLanguage] ?? \n                    nameMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":161,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":161,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4599,4624],"text":"(Boolean(nameMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4625,4627],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":164,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":164,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4708,4745],"text":"(Boolean(descriptionMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":164,"column":29,"nodeType":"MemberExpression","endLine":164,"endColumn":66},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":164,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":164,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4708,4809],"text":"(descriptionMultilingual[userLanguage] ?? \n                           descriptionMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":165,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":165,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4777,4809],"text":"(Boolean(descriptionMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":165,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":165,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4810,4812],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { ApiResponse } from '@/lib/api-response';\nimport { checkRateLimit } from '@/lib/auth';\n\nconst logger = getLogger();\n\n/**\n * 领取任务奖励API\n * POST /api/tasks/claim\n * \n * 请求体：\n * {\n *   \"taskType\": \"register\" | \"first_recharge\" | \"first_lottery\"\n * }\n * \n * 返回领取结果，包括奖励金额和类型\n */\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const startTime = Date.now();\n    const { userId } = user;\n\n    // 获取请求数据\n    const body = await request.json();\n    const { taskType } = body;\n\n    // 验证输入参数\n    if (!taskType) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('任务类型不能为空', 'TASK_TYPE_REQUIRED'),\n        { status: 400 }\n      );\n    }\n\n    // 验证任务类型\n    const validTaskTypes = ['register', 'first_recharge', 'first_lottery'];\n    if (!validTaskTypes.includes(taskType)) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('无效的任务类型', 'INVALID_TASK_TYPE'),\n        { status: 400 }\n      );\n    }\n\n    logger.info('开始领取任务奖励', { userId, taskType }, {\n      endpoint: '/api/tasks/claim',\n      method: 'POST'\n    });\n\n    // 速率限制检查\n    const clientIp = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';\n    const rateLimitKey = `claim_${userId}_${taskType}`;\n    const rateLimit = checkRateLimit(rateLimitKey, 3, 60 * 1000); // 每分钟最多3次领取尝试\n\n    if (!rateLimit.allowed) {\n      logger.warn('领取任务奖励频率超限', { userId, taskType, rateLimit }, {\n        endpoint: '/api/tasks/claim',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.rateLimitExceeded('领取过于频繁，请稍后再试', 'RATE_LIMIT_EXCEEDED'),\n        { status: 429 }\n      );\n    }\n\n    // 获取用户语言偏好\n    const userRecord = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { preferredLanguage: true, balance: true, luckyCoins: true }\n    });\n\n    if (!userRecord) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    // 调用数据库函数领取奖励\n    const result = await prisma.$queryRawUnsafe(`\n      SELECT claim_task_reward('${userId}', '${taskType}') as result\n    `);\n\n    if (!result || result.length === 0 || !result[0].result) {\n      const errorResult = result?.[0]?.result;\n      \n      if (errorResult && !errorResult.success) {\n        let errorCode = 'CLAIM_FAILED';\n        let statusCode = 400;\n        let errorMessage = '领取奖励失败';\n\n        switch (errorResult.error) {\n          case 'Task not found':\n            errorMessage = '任务不存在';\n            errorCode = 'TASK_NOT_FOUND';\n            statusCode = 404;\n            break;\n          case 'Task not completed':\n            errorMessage = '任务尚未完成，无法领取奖励';\n            errorCode = 'TASK_NOT_COMPLETED';\n            statusCode = 400;\n            break;\n          case 'Reward already claimed':\n            errorMessage = '奖励已领取，不能重复领取';\n            errorCode = 'REWARD_ALREADY_CLAIMED';\n            statusCode = 409;\n            break;\n          default:\n            errorMessage = errorResult.error || '领取奖励失败';\n            errorCode = 'CLAIM_FAILED';\n            statusCode = 400;\n        }\n\n        logger.warn('领取任务奖励业务逻辑失败', {\n          userId,\n          taskType,\n          error: errorResult.error,\n          errorCode\n        }, {\n          endpoint: '/api/tasks/claim',\n          method: 'POST'\n        });\n\n        return NextResponse.json<ApiResponse>(\n          ApiResponse.badRequest(errorMessage, errorCode),\n          { status: statusCode }\n        );\n      } else {\n        throw new Error('奖励领取处理异常');\n      }\n    }\n\n    const claimResult = result[0].result;\n    \n    // 获取更新后的用户余额信息\n    const updatedUser = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { balance: true, luckyCoins: true }\n    });\n\n    // 获取任务详细信息用于响应\n    const taskInfo = await prisma.$queryRawUnsafe(`\n      SELECT \n        t.name_multilingual,\n        t.description_multilingual,\n        t.reward_amount,\n        t.reward_type\n      FROM new_user_tasks t\n      WHERE t.task_type = '${taskType}' AND t.is_active = true\n    `);\n\n    const task = taskInfo[0];\n    const userLanguage = userRecord.preferredLanguage || 'tg-TJ';\n    const nameMultilingual = task?.name_multilingual || {};\n    const descriptionMultilingual = task?.description_multilingual || {};\n    \n    const taskName = nameMultilingual[userLanguage] || \n                    nameMultilingual['en-US'] || \n                    taskType;\n                    \n    const taskDescription = descriptionMultilingual[userLanguage] || \n                           descriptionMultilingual['en-US'] || \n                           taskType;\n\n    const duration = Date.now() - startTime;\n\n    logger.info('成功领取任务奖励', {\n      userId,\n      taskType,\n      rewardAmount: claimResult.reward_amount,\n      rewardType: claimResult.reward_type,\n      newBalance: updatedUser?.balance,\n      newLuckyCoins: updatedUser?.luckyCoins\n    }, {\n      endpoint: '/api/tasks/claim',\n      method: 'POST',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        claim: {\n          taskType,\n          taskName,\n          taskDescription,\n          reward: {\n            amount: parseFloat(claimResult.reward_amount.toString()),\n            type: claimResult.reward_type,\n            currency: claimResult.reward_type === 'balance' ? 'TJS' : 'LC',\n            formatted: claimResult.reward_type === 'balance' \n              ? `${claimResult.reward_amount} TJS` \n              : `${claimResult.reward_amount} LC`\n          },\n          claimedAt: new Date().toISOString()\n        },\n        user: {\n          balance: updatedUser?.balance ? parseFloat(updatedUser.balance.toString()) : 0,\n          luckyCoins: updatedUser?.luckyCoins ? parseFloat(updatedUser.luckyCoins.toString()) : 0\n        },\n        rateLimit: {\n          remaining: rateLimit.remaining - 1,\n          resetTime: rateLimit.resetTime\n        }\n      },\n      message: '奖励领取成功'\n    });\n\n  } catch (error) {\n    logger.error('领取任务奖励时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/tasks/claim',\n      method: 'POST'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('领取奖励失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/tasks/complete/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 14. Maximum allowed is 10.","line":23,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":217,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[703,706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[703,706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1038,1041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1038,1041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":45,"column":32,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":45,"endColumn":105,"fix":{"range":[1243,1316],"text":"`请求参数无效: ${  validationError.errors.map((e: any) => e.message).join(', ')}`"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1287,1290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1287,1290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":80,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":80,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2231,2241],"text":"(Boolean(taskStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":111,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":111,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3034,3053],"text":"Boolean(task.reward_claimed)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":145,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":145,"endColumn":52,"fix":{"range":[3912,3953],"text":"!rewardData?.result.success"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":145,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":145,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3913,3923],"text":"(Boolean(rewardData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":145,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":145,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3928,3953],"text":"(Boolean(rewardData.result.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":149,"column":18,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":149,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4050,4075],"text":"(Boolean((rewardData?.result?.error)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4076,4078],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":206,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":206,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5598,5600],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5960,5963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5960,5963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":260,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":260,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6983,6993],"text":"(Boolean(taskStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { ApiResponse } from '@/lib/api-response';\nimport { DatabaseLockManager } from '@/lib/database-lock-manager';\n\nconst logger = getLogger();\n\n// 验证请求参数\nconst completeTaskSchema = z.object({\n  taskType: z.enum(['register', 'first_recharge', 'first_lottery'], {\n    errorMap: () => ({ message: '无效的任务类型' })\n  }),\n  forceCheck: z.boolean().optional().default(false) // 是否强制检查\n});\n\n/**\n * 检查任务完成并发放奖励API\n * POST /api/tasks/complete\n */\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  const startTime = Date.now();\n  let requestData;\n\n  try {\n    const { userId } = user;\n\n    logger.info('开始检查任务完成状态', { userId }, {\n      endpoint: '/api/tasks/complete',\n      method: 'POST'\n    });\n\n    // 解析请求参数\n    try {\n      requestData = completeTaskSchema.parse(await request.json());\n    } catch (validationError: any) {\n      logger.warn('任务完成检查请求参数验证失败', validationError, {\n        userId,\n        endpoint: '/api/tasks/complete'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('请求参数无效: ' + validationError.errors.map((e: any) => e.message).join(', ')),\n        { status: 400 }\n      );\n    }\n\n    const { taskType, forceCheck } = requestData;\n\n    // 获取数据库锁以防止并发问题\n    const lockManager = DatabaseLockManager.getInstance();\n    const lockKey = `task_check_${userId}_${taskType}`;\n    \n    try {\n      await lockManager.acquireLock(lockKey, 5000); // 5秒超时\n\n      logger.info('成功获取任务检查锁', { userId, taskType }, {\n        endpoint: '/api/tasks/complete'\n      });\n\n      // 手动检查任务完成状态\n      if (forceCheck) {\n        logger.info('执行强制任务检查', { userId, taskType }, {\n          endpoint: '/api/tasks/complete'\n        });\n\n        await prisma.$executeRawUnsafe(`\n          SELECT update_user_task_progress('${userId}'::uuid, '${taskType}')\n        `);\n      }\n\n      // 获取任务状态\n      const taskStatus = await prisma.$queryRawUnsafe(`\n        SELECT * FROM user_new_user_task_status \n        WHERE user_id = '${userId}' AND task_type = '${taskType}'\n      `);\n\n      if (!taskStatus || taskStatus.length === 0) {\n        logger.warn('任务配置不存在', { userId, taskType }, {\n          endpoint: '/api/tasks/complete'\n        });\n\n        return NextResponse.json<ApiResponse>(\n          ApiResponse.notFound('任务配置不存在'),\n          { status: 404 }\n        );\n      }\n\n      const task = taskStatus[0];\n\n      // 检查任务是否已完成\n      if (task.status === 'pending') {\n        logger.info('任务尚未完成', { userId, taskType, status: task.status }, {\n          endpoint: '/api/tasks/complete'\n        });\n\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          data: {\n            taskType,\n            status: task.status,\n            message: '任务尚未完成'\n          },\n          message: '任务检查完成，但尚未完成'\n        }, { status: 200 });\n      }\n\n      // 检查是否已经领取过奖励\n      if (task.reward_claimed) {\n        logger.info('任务奖励已领取', { userId, taskType }, {\n          endpoint: '/api/tasks/complete'\n        });\n\n        return NextResponse.json<ApiResponse>({\n          success: true,\n          data: {\n            taskType,\n            status: 'rewarded',\n            alreadyClaimed: true,\n            message: '任务已完成，奖励已领取'\n          },\n          message: '任务已完成，奖励已领取'\n        }, { status: 200 });\n      }\n\n      // 自动发放奖励\n      logger.info('自动发放任务奖励', { \n        userId, \n        taskType, \n        rewardAmount: task.reward_amount,\n        rewardType: task.reward_type \n      }, {\n        endpoint: '/api/tasks/complete'\n      });\n\n      // 使用数据库函数发放奖励\n      const rewardResult = await prisma.$queryRawUnsafe(`\n        SELECT claim_task_reward('${userId}'::uuid, '${taskType}') as result\n      `);\n\n      const rewardData = rewardResult[0];\n\n      if (!rewardData || !rewardData.result.success) {\n        logger.error('自动发放奖励失败', { \n          userId, \n          taskType, \n          error: rewardData?.result?.error || '未知错误' \n        }, {\n          endpoint: '/api/tasks/complete'\n        });\n\n        return NextResponse.json<ApiResponse>(\n          ApiResponse.internal('发放奖励失败，请稍后重试'),\n          { status: 500 }\n        );\n      }\n\n      // 构建奖励响应数据\n      const rewardResponse = {\n        taskType,\n        status: 'rewarded' as const,\n        reward: {\n          amount: parseFloat(task.reward_amount.toString()),\n          type: task.reward_type,\n          currency: task.reward_type === 'balance' ? 'TJS' : 'LC'\n        },\n        claimedAt: new Date().toISOString(),\n        message: `恭喜！获得 ${task.reward_amount} ${task.reward_type === 'balance' ? 'TJS' : 'LC'} 奖励`\n      };\n\n      const duration = Date.now() - startTime;\n\n      logger.info('任务检查和奖励发放成功', {\n        userId,\n        taskType,\n        rewardAmount: task.reward_amount,\n        rewardType: task.reward_type,\n        duration\n      }, {\n        endpoint: '/api/tasks/complete',\n        method: 'POST'\n      });\n\n      // 返回成功响应\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        data: rewardResponse,\n        message: '任务检查成功，奖励已自动发放'\n      }, { status: 200 });\n\n    } finally {\n      // 释放数据库锁\n      await lockManager.releaseLock(lockKey);\n      logger.debug('释放任务检查锁', { userId, taskType }, {\n        endpoint: '/api/tasks/complete'\n      });\n    }\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('检查任务完成状态时发生异常', error as Error, {\n      userId: user?.userId,\n      taskType: requestData?.taskType || 'unknown',\n      endpoint: '/api/tasks/complete',\n      method: 'POST',\n      duration\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('检查任务完成状态失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});\n\n/**\n * 手动检查所有新手任务完成状态API\n * POST /api/tasks/complete?checkAll=true\n */\nexport const PUT = withAuth(async (request: NextRequest, user: any) => {\n  const startTime = Date.now();\n\n  try {\n    const { userId } = user;\n    const url = new URL(request.url);\n    const checkAll = url.searchParams.get('checkAll') === 'true';\n\n    if (!checkAll) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('需要指定 checkAll=true 参数'),\n        { status: 400 }\n      );\n    }\n\n    logger.info('开始检查所有新手任务', { userId }, {\n      endpoint: '/api/tasks/complete',\n      method: 'PUT'\n    });\n\n    // 获取所有任务类型\n    const taskTypes = ['register', 'first_recharge', 'first_lottery'];\n    const results = [];\n\n    for (const taskType of taskTypes) {\n      try {\n        // 调用数据库函数检查任务状态\n        await prisma.$executeRawUnsafe(`\n          SELECT update_user_task_progress('${userId}'::uuid, '${taskType}')\n        `);\n\n        // 获取更新后的状态\n        const taskStatus = await prisma.$queryRawUnsafe(`\n          SELECT status, reward_claimed FROM user_new_user_task_status \n          WHERE user_id = '${userId}' AND task_type = '${taskType}'\n        `);\n\n        if (taskStatus && taskStatus.length > 0) {\n          results.push({\n            taskType,\n            status: taskStatus[0].status,\n            rewardClaimed: taskStatus[0].reward_claimed\n          });\n        }\n      } catch (taskError) {\n        logger.error(`检查任务 ${taskType} 失败`, taskError as Error, { userId }, {\n          endpoint: '/api/tasks/complete',\n          method: 'PUT'\n        });\n\n        results.push({\n          taskType,\n          status: 'error',\n          rewardClaimed: false,\n          error: (taskError as Error).message\n        });\n      }\n    }\n\n    const duration = Date.now() - startTime;\n\n    logger.info('批量检查任务完成', { \n      userId, \n      resultsCount: results.length,\n      duration \n    }, {\n      endpoint: '/api/tasks/complete',\n      method: 'PUT'\n    });\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        userId,\n        taskResults: results,\n        checkedAt: new Date().toISOString()\n      },\n      message: '任务状态检查完成'\n    });\n\n  } catch (error) {\n    logger.error('批量检查任务完成状态时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/tasks/complete',\n      method: 'PUT'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('批量检查任务状态失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/tasks/list/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 17. Maximum allowed is 10.","line":15,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":178,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[401,404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[401,404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":70,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":70,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1688,1710],"text":"(Boolean(task.name_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1711,1713],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":71,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":71,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1756,1785],"text":"(Boolean(task.description_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1786,1788],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1823,1853],"text":"(Boolean(nameMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":73,"column":24,"nodeType":"MemberExpression","endLine":73,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1823,1905],"text":"(nameMultilingual[userLanguage] ?? \n                      nameMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":74,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1880,1905],"text":"(Boolean(nameMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":74,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":74,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1906,1908],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":77,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":77,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2001,2038],"text":"(Boolean(descriptionMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":77,"column":31,"nodeType":"MemberExpression","endLine":77,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2001,2104],"text":"(descriptionMultilingual[userLanguage] ?? \n                             descriptionMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":78,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":78,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2072,2104],"text":"(Boolean(descriptionMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2105,2107],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'completionCheck' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":85,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'completionCheck' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":85,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":118,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":118,"endColumn":72,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3521,3540],"text":"(Boolean(task.reward_claimed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { ApiResponse } from '@/lib/api-response';\n\nconst logger = getLogger();\n\n/**\n * 获取任务列表和用户进度API\n * GET /api/tasks/list\n * \n * 返回用户的任务列表，包括任务状态、进度和奖励信息\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const startTime = Date.now();\n    const { userId } = user;\n\n    logger.info('开始获取用户任务列表', { userId }, {\n      endpoint: '/api/tasks/list',\n      method: 'GET'\n    });\n\n    // 获取用户语言偏好\n    const userRecord = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { preferredLanguage: true, createdAt: true }\n    });\n\n    if (!userRecord) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const userLanguage = userRecord.preferredLanguage || 'tg-TJ';\n\n    // 获取用户任务进度状态\n    const taskStatus = await prisma.$queryRawUnsafe(`\n      SELECT \n        task_id,\n        task_type,\n        name_multilingual,\n        description_multilingual,\n        reward_amount,\n        reward_type,\n        status,\n        completed_at,\n        reward_claimed,\n        progress_data\n      FROM user_new_user_task_status\n      WHERE user_id = '${userId}'\n      ORDER BY (\n        CASE task_type\n          WHEN 'register' THEN 1\n          WHEN 'first_recharge' THEN 2\n          WHEN 'first_lottery' THEN 3\n          ELSE 4\n        END\n      )\n    `);\n\n    // 构建响应数据，包含任务自动检测逻辑\n    const tasks = [];\n    \n    for (const task of taskStatus) {\n      // 解析多语言字段\n      const nameMultilingual = task.name_multilingual || {};\n      const descriptionMultilingual = task.description_multilingual || {};\n      \n      const taskName = nameMultilingual[userLanguage] || \n                      nameMultilingual['en-US'] || \n                      task.task_type;\n                      \n      const taskDescription = descriptionMultilingual[userLanguage] || \n                             descriptionMultilingual['en-US'] || \n                             task.task_type;\n\n      // 检查任务完成状态（如果还未完成）\n      let currentStatus = task.status;\n      if (currentStatus === 'pending') {\n        // 调用数据库函数检查完成状态\n        const completionCheck = await prisma.$queryRawUnsafe(`\n          SELECT update_user_task_progress('${userId}', '${task.task_type}') as result\n        `);\n        \n        // 重新获取更新后的状态\n        const updatedStatus = await prisma.$queryRawUnsafe(`\n          SELECT status FROM user_task_progress \n          WHERE user_id = '${userId}' \n          AND task_id = '${task.task_id}'\n        `);\n        \n        if (updatedStatus.length > 0) {\n          currentStatus = updatedStatus[0].status;\n        }\n      }\n\n      tasks.push({\n        taskId: task.task_id,\n        taskType: task.task_type,\n        name: taskName,\n        description: taskDescription,\n        reward: {\n          amount: parseFloat(task.reward_amount.toString()),\n          type: task.reward_type,\n          currency: task.reward_type === 'balance' ? 'TJS' : 'LC',\n          formatted: task.reward_type === 'balance' \n            ? `${task.reward_amount} TJS` \n            : `${task.reward_amount} LC`\n        },\n        status: currentStatus, // 'pending', 'completed', 'rewarded'\n        completedAt: task.completed_at,\n        rewardClaimed: task.reward_claimed,\n        progressData: task.progress_data,\n        canClaim: currentStatus === 'completed' && !task.reward_claimed,\n        isExpired: false // 新手任务在注册后7天内有效\n      });\n    }\n\n    // 统计任务进度\n    const stats = {\n      total: tasks.length,\n      pending: tasks.filter(task => task.status === 'pending').length,\n      completed: tasks.filter(task => task.status === 'completed').length,\n      rewarded: tasks.filter(task => task.status === 'rewarded').length,\n      completionRate: 0,\n      totalRewardClaimed: tasks\n        .filter(task => task.status === 'rewarded')\n        .reduce((sum, task) => sum + task.reward.amount, 0),\n      totalPossibleReward: tasks.reduce((sum, task) => sum + task.reward.amount, 0)\n    };\n    \n    if (stats.total > 0) {\n      stats.completionRate = Math.round((stats.completed / stats.total) * 100);\n    }\n\n    const duration = Date.now() - startTime;\n\n    logger.info('成功获取用户任务列表', {\n      userId,\n      totalTasks: stats.total,\n      completionRate: stats.completionRate,\n      claimedRewards: stats.totalRewardClaimed\n    }, {\n      endpoint: '/api/tasks/list',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        userId,\n        tasks,\n        stats,\n        lastUpdated: new Date().toISOString(),\n        version: '1.0'\n      },\n      message: '任务列表获取成功'\n    });\n\n  } catch (error) {\n    logger.error('获取用户任务列表时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/tasks/list',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('获取任务列表失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/tasks/new-user/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[372,375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[372,375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1582,1585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1582,1585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":66,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1640,1662],"text":"(Boolean(task.name_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1663,1665],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":67,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":67,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1708,1737],"text":"(Boolean(task.description_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1738,1740],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":69,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1775,1805],"text":"(Boolean(nameMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":69,"column":24,"nodeType":"MemberExpression","endLine":69,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1775,1857],"text":"(nameMultilingual[userLanguage] ?? \n                      nameMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":70,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":70,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1832,1857],"text":"(Boolean(nameMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1858,1860],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1953,1990],"text":"(Boolean(descriptionMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":73,"column":31,"nodeType":"MemberExpression","endLine":73,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1953,2056],"text":"(descriptionMultilingual[userLanguage] ?? \n                             descriptionMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":74,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2024,2056],"text":"(Boolean(descriptionMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":74,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":74,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2057,2059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { ApiResponse } from '@/lib/api-response';\n\nconst logger = getLogger();\n\n/**\n * 查询用户新手任务状态API\n * GET /api/tasks/new-user\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const startTime = Date.now();\n    const { userId } = user;\n\n    logger.info('开始查询用户新手任务状态', { userId }, {\n      endpoint: '/api/tasks/new-user',\n      method: 'GET'\n    });\n\n    // 获取用户语言偏好\n    const userRecord = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { preferredLanguage: true, createdAt: true }\n    });\n\n    if (!userRecord) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const userLanguage = userRecord.preferredLanguage || 'tg-TJ';\n\n    // 获取用户新手任务状态\n    const taskStatus = await prisma.$queryRawUnsafe(`\n      SELECT \n        task_id,\n        task_type,\n        name_multilingual,\n        description_multilingual,\n        reward_amount,\n        reward_type,\n        status,\n        completed_at,\n        reward_claimed,\n        progress_data\n      FROM user_new_user_task_status\n      WHERE user_id = '${userId}'\n      ORDER BY (\n        CASE task_type\n          WHEN 'register' THEN 1\n          WHEN 'first_recharge' THEN 2\n          WHEN 'first_lottery' THEN 3\n          ELSE 4\n        END\n      )\n    `);\n\n    // 构建响应数据\n    const tasks = taskStatus.map((task: any) => {\n      // 解析多语言字段\n      const nameMultilingual = task.name_multilingual || {};\n      const descriptionMultilingual = task.description_multilingual || {};\n      \n      const taskName = nameMultilingual[userLanguage] || \n                      nameMultilingual['en-US'] || \n                      task.task_type;\n                      \n      const taskDescription = descriptionMultilingual[userLanguage] || \n                             descriptionMultilingual['en-US'] || \n                             task.task_type;\n\n      return {\n        taskId: task.task_id,\n        taskType: task.task_type,\n        name: taskName,\n        description: taskDescription,\n        reward: {\n          amount: parseFloat(task.reward_amount.toString()),\n          type: task.reward_type, // 'balance' 或 'lucky_coins'\n          currency: task.reward_type === 'balance' ? 'TJS' : 'LC'\n        },\n        status: task.status, // 'pending', 'completed', 'rewarded'\n        completedAt: task.completed_at,\n        rewardClaimed: task.reward_claimed,\n        progressData: task.progress_data\n      };\n    });\n\n    // 统计任务进度\n    const stats = {\n      total: tasks.length,\n      pending: tasks.filter(task => task.status === 'pending').length,\n      completed: tasks.filter(task => task.status === 'completed').length,\n      rewarded: tasks.filter(task => task.status === 'rewarded').length,\n      completionRate: 0\n    };\n    \n    if (stats.total > 0) {\n      stats.completionRate = Math.round((stats.completed / stats.total) * 100);\n    }\n\n    const duration = Date.now() - startTime;\n\n    logger.info('成功获取用户新手任务状态', {\n      userId,\n      totalTasks: stats.total,\n      completionRate: stats.completionRate\n    }, {\n      endpoint: '/api/tasks/new-user',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        userId,\n        tasks,\n        stats,\n        lastUpdated: new Date().toISOString()\n      },\n      message: '新手任务状态查询成功'\n    });\n\n  } catch (error) {\n    logger.error('查询用户新手任务状态时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/tasks/new-user',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('查询任务状态失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/tasks/progress/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 33. Maximum allowed is 10.","line":19,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":286,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[519,522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[519,522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":40,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1033,1045],"text":"(statusFilter != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1033,1045],"text":"(statusFilter ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1033,1045],"text":"(Boolean(statusFilter))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":49,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1347,1361],"text":"(taskTypeFilter != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1347,1361],"text":"(taskTypeFilter ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1347,1361],"text":"(Boolean(taskTypeFilter))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":73,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":73,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2026,2038],"text":"statusFilter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2026,2038],"text":"statusFilter ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2026,2038],"text":"Boolean(statusFilter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":75,"column":7,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":79,"endColumn":8,"fix":{"range":[2089,2249],"text":"whereClause += statusFilter === 'pending' ? ` AND status IS NULL` : ` AND status = '${statusFilter}'`;"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2264,2278],"text":"taskTypeFilter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2264,2278],"text":"taskTypeFilter ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2264,2278],"text":"Boolean(taskTypeFilter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":117,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":117,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3142,3155],"text":"(Boolean(currentStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":173,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":173,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5377,5399],"text":"(Boolean(task.name_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":173,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":173,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5400,5402],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":174,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5445,5474],"text":"(Boolean(task.description_multilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5475,5477],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":176,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":176,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5512,5542],"text":"(Boolean(nameMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":176,"column":24,"nodeType":"MemberExpression","endLine":176,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":176,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":176,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5512,5594],"text":"(nameMultilingual[userLanguage] ?? \n                      nameMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":177,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":177,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5569,5594],"text":"(Boolean(nameMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5595,5597],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":180,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":180,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5690,5727],"text":"(Boolean(descriptionMultilingual[userLanguage]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":180,"column":31,"nodeType":"MemberExpression","endLine":180,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":180,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":180,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5690,5793],"text":"(descriptionMultilingual[userLanguage] ?? \n                             descriptionMultilingual['en-US'])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":181,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":181,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5761,5793],"text":"(Boolean(descriptionMultilingual['en-US']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5794,5796],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":197,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":197,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6340,6353],"text":"(Boolean(currentStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":197,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":197,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6354,6356],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":201,"column":81,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":201,"endColumn":100,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6575,6594],"text":"(Boolean(task.reward_claimed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":218,"column":16,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":218,"endColumn":66,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6999,7049],"text":"(Boolean((allTasksStatus.find(s => s.status === null)?.count)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":218,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":218,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7050,7052],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":219,"column":18,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":219,"endColumn":75,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7073,7130],"text":"(Boolean((allTasksStatus.find(s => s.status === 'completed')?.count)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":219,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":219,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7131,7133],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":220,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":220,"endColumn":73,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7153,7209],"text":"(Boolean((allTasksStatus.find(s => s.status === 'rewarded')?.count)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":220,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":220,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7210,7212],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Function 'calculateProgress' has a complexity of 13. Maximum allowed is 10.","line":291,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":315,"endColumn":2}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { getLogger } from '@/lib/logger';\nimport { ApiResponse } from '@/lib/api-response';\n\nconst logger = getLogger();\n\n/**\n * 查询用户任务完成情况API\n * GET /api/tasks/progress\n * \n * 可选查询参数：\n * - status: 任务状态过滤 (pending|completed|rewarded)\n * - taskType: 特定任务类型 (register|first_recharge|first_lottery)\n * \n * 返回用户的详细任务进度信息\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const startTime = Date.now();\n    const { userId } = user;\n\n    // 解析查询参数\n    const { searchParams } = new URL(request.url);\n    const statusFilter = searchParams.get('status');\n    const taskTypeFilter = searchParams.get('taskType');\n\n    logger.info('开始查询用户任务进度', { \n      userId, \n      statusFilter, \n      taskTypeFilter \n    }, {\n      endpoint: '/api/tasks/progress',\n      method: 'GET'\n    });\n\n    // 验证状态过滤参数\n    const validStatuses = ['pending', 'completed', 'rewarded'];\n    if (statusFilter && !validStatuses.includes(statusFilter)) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('无效的状态过滤参数', 'INVALID_STATUS_FILTER'),\n        { status: 400 }\n      );\n    }\n\n    // 验证任务类型过滤参数\n    const validTaskTypes = ['register', 'first_recharge', 'first_lottery'];\n    if (taskTypeFilter && !validTaskTypes.includes(taskTypeFilter)) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('无效的任务类型过滤参数', 'INVALID_TASK_TYPE_FILTER'),\n        { status: 400 }\n      );\n    }\n\n    // 获取用户语言偏好\n    const userRecord = await prisma.users.findUnique({\n      where: { id: userId },\n      select: { preferredLanguage: true, createdAt: true }\n    });\n\n    if (!userRecord) {\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const userLanguage = userRecord.preferredLanguage || 'tg-TJ';\n\n    // 构建查询条件\n    let whereClause = `WHERE user_id = '${userId}'`;\n    if (statusFilter) {\n      // 注意：视图中的status可能为NULL（pending状态）\n      if (statusFilter === 'pending') {\n        whereClause += ` AND status IS NULL`;\n      } else {\n        whereClause += ` AND status = '${statusFilter}'`;\n      }\n    }\n    if (taskTypeFilter) {\n      whereClause += ` AND task_type = '${taskTypeFilter}'`;\n    }\n\n    // 获取用户任务进度状态\n    const taskStatus = await prisma.$queryRawUnsafe(`\n      SELECT \n        task_id,\n        task_type,\n        name_multilingual,\n        description_multilingual,\n        reward_amount,\n        reward_type,\n        status,\n        completed_at,\n        reward_claimed,\n        progress_data\n      FROM user_new_user_task_status\n      ${whereClause}\n      ORDER BY (\n        CASE task_type\n          WHEN 'register' THEN 1\n          WHEN 'first_recharge' THEN 2\n          WHEN 'first_lottery' THEN 3\n          ELSE 4\n        END\n      )\n    `);\n\n    // 检查并更新任务完成状态（如果需要）\n    const updatedTasks = [];\n    for (const task of taskStatus) {\n      let currentStatus = task.status;\n      let updatedProgressData = task.progress_data;\n\n      // 如果任务状态为pending，重新检查完成状态\n      if (!currentStatus || currentStatus === 'pending') {\n        // 先检查是否真的完成了\n        let shouldUpdate = false;\n        switch (task.task_type) {\n          case 'register':\n            // 检查注册时间是否在7天内\n            const userCreatedAt = new Date(userRecord.createdAt);\n            const now = new Date();\n            const daysDiff = (now.getTime() - userCreatedAt.getTime()) / (1000 * 3600 * 24);\n            shouldUpdate = daysDiff <= 7;\n            break;\n          case 'first_recharge':\n            // 检查是否有成功的充值订单\n            const rechargeCheck = await prisma.$queryRawUnsafe(`\n              SELECT EXISTS (\n                SELECT 1 FROM orders \n                WHERE user_id = '${userId}'\n                  AND type = 'recharge'\n                  AND status = 'completed'\n                  AND payment_status = 'completed'\n              ) as has_recharge\n            `);\n            shouldUpdate = rechargeCheck[0]?.has_recharge === true;\n            break;\n          case 'first_lottery':\n            // 检查是否有抽奖参与记录\n            const lotteryCheck = await prisma.$queryRawUnsafe(`\n              SELECT EXISTS (\n                SELECT 1 FROM participations \n                WHERE user_id = '${userId}'\n              ) as has_lottery\n            `);\n            shouldUpdate = lotteryCheck[0]?.has_lottery === true;\n            break;\n        }\n\n        // 如果应该更新为完成状态\n        if (shouldUpdate) {\n          await prisma.$queryRawUnsafe(`\n            INSERT INTO user_task_progress (user_id, task_id, status, completed_at, progress_data)\n            VALUES ('${userId}', '${task.task_id}', 'completed', CURRENT_TIMESTAMP, \n                    '{\"checked_at\": \"' || CURRENT_TIMESTAMP || '\", \"auto_updated\": true}')\n            ON CONFLICT (user_id, task_id) \n            DO UPDATE SET \n              status = 'completed',\n              completed_at = CURRENT_TIMESTAMP,\n              progress_data = '{\"checked_at\": \"' || CURRENT_TIMESTAMP || '\", \"auto_updated\": true}',\n              updated_at = CURRENT_TIMESTAMP\n          `);\n          \n          currentStatus = 'completed';\n          updatedProgressData = { checked_at: new Date().toISOString(), auto_updated: true };\n        }\n      }\n\n      // 解析多语言字段\n      const nameMultilingual = task.name_multilingual || {};\n      const descriptionMultilingual = task.description_multilingual || {};\n      \n      const taskName = nameMultilingual[userLanguage] || \n                      nameMultilingual['en-US'] || \n                      task.task_type;\n                      \n      const taskDescription = descriptionMultilingual[userLanguage] || \n                             descriptionMultilingual['en-US'] || \n                             task.task_type;\n\n      updatedTasks.push({\n        taskId: task.task_id,\n        taskType: task.task_type,\n        name: taskName,\n        description: taskDescription,\n        reward: {\n          amount: parseFloat(task.reward_amount.toString()),\n          type: task.reward_type,\n          currency: task.reward_type === 'balance' ? 'TJS' : 'LC',\n          formatted: task.reward_type === 'balance' \n            ? `${task.reward_amount} TJS` \n            : `${task.reward_amount} LC`\n        },\n        status: currentStatus || 'pending',\n        completedAt: task.completed_at,\n        rewardClaimed: task.reward_claimed,\n        progressData: updatedProgressData,\n        canClaim: (currentStatus === 'completed' || currentStatus === null) && !task.reward_claimed,\n        progress: calculateProgress(task.task_type, userRecord.createdAt, currentStatus)\n      });\n    }\n\n    // 统计信息\n    const allTasksStatus = await prisma.$queryRawUnsafe(`\n      SELECT \n        status,\n        COUNT(*) as count\n      FROM user_new_user_task_status\n      WHERE user_id = '${userId}'\n      GROUP BY status\n    `);\n\n    const stats = {\n      total: updatedTasks.length,\n      pending: allTasksStatus.find(s => s.status === null)?.count || 0,\n      completed: allTasksStatus.find(s => s.status === 'completed')?.count || 0,\n      rewarded: allTasksStatus.find(s => s.status === 'rewarded')?.count || 0,\n      completionRate: 0,\n      totalRewardClaimed: updatedTasks\n        .filter(task => task.status === 'rewarded')\n        .reduce((sum, task) => sum + task.reward.amount, 0),\n      totalPossibleReward: updatedTasks.reduce((sum, task) => sum + task.reward.amount, 0),\n      availableToClaim: updatedTasks.filter(task => task.canClaim).length\n    };\n    \n    if (stats.total > 0) {\n      stats.completionRate = Math.round((stats.completed / stats.total) * 100);\n    }\n\n    // 时间信息\n    const timeInfo = {\n      userCreatedAt: userRecord.createdAt,\n      isNewUser: (new Date().getTime() - new Date(userRecord.createdAt).getTime()) / (1000 * 3600 * 24) <= 7,\n      daysSinceRegistration: Math.floor((new Date().getTime() - new Date(userRecord.createdAt).getTime()) / (1000 * 3600 * 24)),\n      taskDeadline: new Date(new Date(userRecord.createdAt).getTime() + 7 * 24 * 60 * 60 * 1000).toISOString()\n    };\n\n    const duration = Date.now() - startTime;\n\n    logger.info('成功查询用户任务进度', {\n      userId,\n      totalTasks: stats.total,\n      completionRate: stats.completionRate,\n      completedTasks: stats.completed,\n      claimedRewards: stats.totalRewardClaimed,\n      availableToClaim: stats.availableToClaim\n    }, {\n      endpoint: '/api/tasks/progress',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        userId,\n        tasks: updatedTasks,\n        stats,\n        timeInfo,\n        filters: {\n          status: statusFilter,\n          taskType: taskTypeFilter\n        },\n        lastUpdated: new Date().toISOString(),\n        version: '1.0'\n      },\n      message: '任务进度查询成功'\n    });\n\n  } catch (error) {\n    logger.error('查询用户任务进度时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/tasks/progress',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('查询任务进度失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});\n\n/**\n * 计算任务进度百分比\n */\nfunction calculateProgress(taskType: string, userCreatedAt: string, currentStatus: string | null): number {\n  const userCreated = new Date(userCreatedAt);\n  const now = new Date();\n  const daysSinceRegistration = (now.getTime() - userCreated.getTime()) / (1000 * 3600 * 24);\n\n  switch (taskType) {\n    case 'register':\n      return currentStatus === 'rewarded' ? 100 : \n             currentStatus === 'completed' ? 90 : \n             daysSinceRegistration <= 7 ? 50 : 0;\n    \n    case 'first_recharge':\n      return currentStatus === 'rewarded' ? 100 : \n             currentStatus === 'completed' ? 90 : \n             daysSinceRegistration <= 7 ? 30 : 0;\n    \n    case 'first_lottery':\n      return currentStatus === 'rewarded' ? 100 : \n             currentStatus === 'completed' ? 90 : \n             daysSinceRegistration <= 7 ? 10 : 0;\n    \n    default:\n      return 0;\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/addresses-consistent/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[840,843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[840,843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":40,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":40,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1023,1036],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1037,1039],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 12. Maximum allowed is 10.","line":46,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":125,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":69,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1562,1575],"text":"(Boolean(recipientName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":28,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":69,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1580,1594],"text":"(Boolean(recipientPhone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":47,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":69,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1599,1607],"text":"(Boolean(province))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":60,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":69,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1612,1616],"text":"(Boolean(city))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":69,"column":69,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":69,"endColumn":82,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1621,1634],"text":"(Boolean(detailAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":88,"column":17,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":88,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2048,2056],"text":"(Boolean(district))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":88,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":88,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2057,2059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":90,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":90,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2104,2113],"text":"(Boolean(isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2114,2116],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":93,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":93,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2141,2147],"text":"(Boolean(result))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2597,2600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2597,2600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":122,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":122,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2778,2791],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":122,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":122,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2792,2794],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 用户地址管理（缓存一致性版本）\nimport { NextResponse } from 'next/server';\nimport { userService } from '@/lib/user-service';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse, UserAddress } from '@/types';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\n// 获取用户地址列表\nexport async function GET(request: Request) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    logger.info('获取用户地址列表', { userId: user.userId });\n\n    // 使用用户服务获取地址列表（带缓存）\n    const addresses = await userService.getUserAddresses(user.userId);\n\n    return NextResponse.json<ApiResponse<UserAddress[]>>({\n      success: true,\n      data: addresses\n    });\n\n  } catch (error: any) {\n    logger.error('获取地址列表失败', {\n      error: error.message,\n      stack: error.stack\n    });\n    \n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '获取地址列表失败'\n    }, { status: 500 });\n  }\n}\n\n// 创建新地址\nexport async function POST(request: Request) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const {\n      recipientName,\n      recipientPhone,\n      province,\n      city,\n      district,\n      detailAddress,\n      isDefault\n    } = body;\n\n    // 验证必填字段\n    if (!recipientName || !recipientPhone || !province || !city || !detailAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '缺少必填字段'\n      }, { status: 400 });\n    }\n\n    logger.info('创建用户地址', {\n      userId: user.userId,\n      recipientName,\n      isDefault\n    });\n\n    // 使用用户服务添加地址（缓存失效+重载）\n    const result = await userService.addUserAddress(user.userId, {\n      recipientName,\n      recipientPhone,\n      province,\n      city,\n      district: district || null,\n      detailAddress,\n      isDefault: isDefault || false\n    });\n\n    if (!result) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '添加地址失败'\n      }, { status: 500 });\n    }\n\n    // 获取最新添加的地址\n    const newAddress = result[result.length - 1];\n\n    logger.info('用户地址创建成功', {\n      userId: user.userId,\n      addressId: newAddress.id\n    });\n\n    return NextResponse.json<ApiResponse<UserAddress>>({\n      success: true,\n      data: newAddress,\n      message: '地址添加成功'\n    });\n\n  } catch (error: any) {\n    logger.error('添加地址失败', {\n      error: error.message,\n      stack: error.stack\n    });\n    \n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '添加地址失败'\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/addresses-fixed/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'checkSQLInjectionRisk' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkSQLInjectionRisk' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'maskSensitiveData' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maskSensitiveData' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'AppError' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppError' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"complexity","severity":2,"message":"Async function 'PUT' has a complexity of 25. Maximum allowed is 10.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":288,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":83,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2173,2186],"text":"(contentLength != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2173,2186],"text":"(contentLength ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2173,2186],"text":"(Boolean(contentLength))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3155,3158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3155,3158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":136,"column":29,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":136,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3709,3717],"text":"(Boolean(district))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":177,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":177,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4892,4907],"text":"(Boolean(existingAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":189,"column":43,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":189,"endColumn":68,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5204,5229],"text":"(Boolean(existingAddress.isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5430,5472],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5974,6006],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":232,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":232,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7312,7315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7312,7315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7323,7355],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'DELETE' has a complexity of 15. Maximum allowed is 10.","line":290,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":471,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":350,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":350,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9270,9285],"text":"(Boolean(existingAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":362,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":362,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9549,9574],"text":"Boolean(existingAddress.isDefault)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":389,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":389,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10384,10426],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10661,10693],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11987,11990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11987,11990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11998,12030],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":483,"column":17,"nodeType":"CallExpression","messageId":"substring","endLine":483,"endColumn":38,"fix":{"range":[12588,12597],"text":"slice"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":484,"column":15,"nodeType":"CallExpression","messageId":"substring","endLine":484,"endColumn":48,"fix":{"range":[12625,12651],"text":"slice(Math.max(0, phone.length - 4)"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":495,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":495,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12807,12810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12807,12810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":508,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":508,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13098,13132],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13248,13251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13248,13251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":534,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":534,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13634,13668],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// 更新和删除地址（增强安全版本）\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse, UserAddress } from '@/types';\nimport {\n  validateAndSanitizeName,\n  validateAndSanitizePhone,\n  validateAndSanitizeAddress,\n  validateIdParam,\n  checkSQLInjectionRisk,\n  detectXSSAttempt,\n  setSecurityResponseHeaders,\n  getClientIP,\n  RateLimitChecker,\n  maskSensitiveData\n} from '@/lib/security-validation';\nimport { AppError, ErrorFactory } from '@/lib/errors';\n\n// 速率限制检查器\nconst rateLimitChecker = new RateLimitChecker();\n\n// 地址操作频率限制配置\nconst ADDRESS_OPERATION_LIMITS = {\n  UPDATE: { limit: 20, windowMs: 60 * 60 * 1000 }, // 每小时最多更新20次\n  DELETE: { limit: 10, windowMs: 60 * 60 * 1000 }, // 每小时最多删除10次\n};\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const startTime = Date.now();\n    \n    // 1. 参数验证\n    if (!params.id) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址ID不能为空'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    const addressId = validateIdParam(params.id);\n    \n    // 2. 用户认证\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { \n        status: 401,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 3. 频率限制检查\n    const clientIP = getClientIP(request);\n    const rateLimitKey = `${user.userId}:${clientIP}:address_update:${addressId}`;\n    \n    const rateLimitResult = rateLimitChecker.check(\n      rateLimitKey,\n      ADDRESS_OPERATION_LIMITS.UPDATE.limit,\n      ADDRESS_OPERATION_LIMITS.UPDATE.windowMs\n    );\n\n    if (!rateLimitResult.allowed) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址更新操作过于频繁，请稍后再试'\n      }, {\n        status: 429,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 4. 请求体解析和大小限制\n    const contentLength = request.headers.get('content-length');\n    if (contentLength && parseInt(contentLength) > 10 * 1024) { // 10KB限制\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '请求数据过大'\n      }, {\n        status: 413,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    const body = await request.json();\n    \n    // 5. 输入验证和清洗\n    const {\n      recipientName,\n      recipientPhone,\n      province,\n      city,\n      district,\n      detailAddress,\n      isDefault\n    } = body;\n\n    // 检查是否有更新字段\n    const updateFields = { recipientName, recipientPhone, province, city, district, detailAddress, isDefault };\n    const hasUpdateFields = Object.values(updateFields).some(value => value !== undefined);\n    \n    if (!hasUpdateFields) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '没有提供要更新的字段'\n      }, { \n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 6. 安全验证和清洗\n    const updateData: any = { updatedAt: new Date().toISOString() };\n    \n    if (recipientName !== undefined) {\n      updateData.recipientName = validateAndSanitizeName(recipientName);\n    }\n    if (recipientPhone !== undefined) {\n      updateData.recipientPhone = validateAndSanitizePhone(recipientPhone);\n    }\n    if (province !== undefined) {\n      updateData.province = validateAndSanitizeAddress(province);\n    }\n    if (city !== undefined) {\n      updateData.city = validateAndSanitizeAddress(city);\n    }\n    if (district !== undefined) {\n      updateData.district = district ? validateAndSanitizeAddress(district) : null;\n    }\n    if (detailAddress !== undefined) {\n      updateData.detailAddress = validateAndSanitizeAddress(detailAddress);\n    }\n    if (isDefault !== undefined) {\n      updateData.isDefault = Boolean(isDefault);\n    }\n\n    // 检查恶意输入\n    const inputValues = Object.values(updateData).filter(v => typeof v === 'string');\n    if (inputValues.some(data => detectXSSAttempt(data))) {\n      await logSecurityEvent({\n        type: 'XSS_ATTACK_ATTEMPT',\n        userId: user.userId,\n        ip: clientIP,\n        details: { \n          addressId,\n          input: inputValues,\n          endpoint: `/api/user/addresses/${addressId}`,\n          method: 'PUT'\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '输入包含非法内容'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 7. 权限验证：检查地址归属\n    const { data: existingAddress, error: checkError } = await supabaseAdmin\n      .from('user_addresses')\n      .select('*')\n      .eq('id', addressId)\n      .eq('userId', user.userId)\n      .single();\n\n    if (checkError || !existingAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址不存在或无权操作'\n      }, { \n        status: 404,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 8. 业务逻辑验证\n    // 如果设置为默认地址，先取消其他默认地址\n    if (updateData.isDefault === true && !existingAddress.isDefault) {\n      const { error: updateError } = await supabaseAdmin\n        .from('user_addresses')\n        .update({ isDefault: false })\n        .eq('userId', user.userId);\n\n      if (updateError) {\n        console.error('取消其他默认地址失败:', updateError);\n        throw new Error('设置默认地址失败');\n      }\n    }\n\n    // 9. 更新地址\n    const { data: updatedAddress, error } = await supabaseAdmin\n      .from('user_addresses')\n      .update(updateData)\n      .eq('id', addressId)\n      .eq('userId', user.userId) // 双重验证，防止TOCTOU攻击\n      .select(`\n        id,\n        recipientName,\n        recipientPhone,\n        province,\n        city,\n        district,\n        detailAddress,\n        isDefault,\n        updatedAt\n      `)\n      .single();\n\n    if (error) {\n      console.error('更新地址失败:', error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '更新地址失败'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 10. 验证更新是否成功（并发安全检查）\n    if (!updatedAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址已被删除或不存在'\n      }, {\n        status: 404,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 11. 记录操作日志\n    await logUserActivity({\n      userId: user.userId,\n      action: 'UPDATE_ADDRESS',\n      details: {\n        addressId,\n        updatedFields: Object.keys(updateData),\n        operationTime: Date.now() - startTime\n      },\n      ip: clientIP,\n      userAgent: request.headers.get('user-agent')\n    });\n\n    // 12. 返回响应\n    const response = NextResponse.json<ApiResponse<UserAddress>>({\n      success: true,\n      data: {\n        ...updatedAddress,\n        recipientPhone: maskPhoneNumber(updatedAddress.recipientPhone) // 返回脱敏手机号\n      },\n      message: '地址更新成功',\n      meta: {\n        rateLimit: {\n          remaining: rateLimitResult.remaining,\n          resetTime: new Date(rateLimitResult.resetTime).toISOString()\n        }\n      }\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n\n  } catch (error: any) {\n    console.error('更新地址失败:', error);\n    \n    const appError = ErrorFactory.wrapError(error, '更新地址');\n    const response = NextResponse.json<ApiResponse>({\n      success: false,\n      error: appError.message,\n      code: appError.code\n    }, {\n      status: appError.statusCode || 500,\n      headers: setSecurityResponseHeaders(new Headers())\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const startTime = Date.now();\n    \n    // 1. 参数验证\n    if (!params.id) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址ID不能为空'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    const addressId = validateIdParam(params.id);\n    \n    // 2. 用户认证\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { \n        status: 401,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 3. 频率限制检查\n    const clientIP = getClientIP(request);\n    const rateLimitKey = `${user.userId}:${clientIP}:address_delete:${addressId}`;\n    \n    const rateLimitResult = rateLimitChecker.check(\n      rateLimitKey,\n      ADDRESS_OPERATION_LIMITS.DELETE.limit,\n      ADDRESS_OPERATION_LIMITS.DELETE.windowMs\n    );\n\n    if (!rateLimitResult.allowed) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址删除操作过于频繁，请稍后再试'\n      }, {\n        status: 429,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 4. 权限验证：检查地址归属\n    const { data: existingAddress, error: checkError } = await supabaseAdmin\n      .from('user_addresses')\n      .select('*')\n      .eq('id', addressId)\n      .eq('userId', user.userId)\n      .single();\n\n    if (checkError || !existingAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址不存在或无权操作'\n      }, { \n        status: 404,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 5. 业务逻辑检查\n    // 检查是否为默认地址，如果是则需要特殊处理\n    if (existingAddress.isDefault) {\n      // 查询用户是否还有其他地址\n      const { data: otherAddresses } = await supabaseAdmin\n        .from('user_addresses')\n        .select('id, isDefault')\n        .eq('userId', user.userId)\n        .neq('id', addressId);\n\n      // 如果没有其他地址，不允许删除最后一个地址\n      if (!otherAddresses || otherAddresses.length === 0) {\n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '不能删除最后一个地址'\n        }, {\n          status: 400,\n          headers: setSecurityResponseHeaders(new Headers())\n        });\n      }\n\n      // 如果有其他地址，将第一个设置为默认地址\n      if (otherAddresses.length > 0) {\n        const { error: updateError } = await supabaseAdmin\n          .from('user_addresses')\n          .update({ isDefault: true })\n          .eq('id', otherAddresses[0].id);\n\n        if (updateError) {\n          console.error('设置新的默认地址失败:', updateError);\n        }\n      }\n    }\n\n    // 6. 删除地址（使用软删除或硬删除策略）\n    const { error } = await supabaseAdmin\n      .from('user_addresses')\n      .delete()\n      .eq('id', addressId)\n      .eq('userId', user.userId); // 双重验证\n\n    if (error) {\n      console.error('删除地址失败:', error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '删除地址失败'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 7. 验证删除是否成功\n    const { data: verifyAddress } = await supabaseAdmin\n      .from('user_addresses')\n      .select('id')\n      .eq('id', addressId)\n      .single();\n\n    if (verifyAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址删除失败'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 8. 记录操作日志\n    await logUserActivity({\n      userId: user.userId,\n      action: 'DELETE_ADDRESS',\n      details: {\n        addressId,\n        wasDefault: existingAddress.isDefault,\n        operationTime: Date.now() - startTime\n      },\n      ip: clientIP,\n      userAgent: request.headers.get('user-agent')\n    });\n\n    // 9. 返回响应\n    const response = NextResponse.json<ApiResponse>({\n      success: true,\n      message: '地址删除成功',\n      meta: {\n        rateLimit: {\n          remaining: rateLimitResult.remaining,\n          resetTime: new Date(rateLimitResult.resetTime).toISOString()\n        }\n      }\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n\n  } catch (error: any) {\n    console.error('删除地址失败:', error);\n    \n    const appError = ErrorFactory.wrapError(error, '删除地址');\n    const response = NextResponse.json<ApiResponse>({\n      success: false,\n      error: appError.message,\n      code: appError.code\n    }, {\n      status: appError.statusCode || 500,\n      headers: setSecurityResponseHeaders(new Headers())\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n  }\n}\n\n// ============= 工具函数 =============\n\n/**\n * 手机号脱敏\n */\nfunction maskPhoneNumber(phone: string): string {\n  if (phone.length <= 7) {\n    return phone;\n  }\n  \n  const start = phone.substring(0, 3);\n  const end = phone.substring(phone.length - 4);\n  return `${start}****${end}`;\n}\n\n/**\n * 安全事件记录\n */\nasync function logSecurityEvent(event: {\n  type: string;\n  userId?: string;\n  ip: string;\n  details: any;\n}) {\n  try {\n    await supabaseAdmin\n      .from('security_logs')\n      .insert({\n        event_type: event.type,\n        user_id: event.userId,\n        ip_address: event.ip,\n        details: event.details,\n        created_at: new Date().toISOString()\n      });\n  } catch (error) {\n    console.error('记录安全事件失败:', error);\n  }\n}\n\n/**\n * 用户活动记录\n */\nasync function logUserActivity(activity: {\n  userId: string;\n  action: string;\n  details: any;\n  ip: string;\n  userAgent?: string | null;\n}) {\n  try {\n    await supabaseAdmin\n      .from('user_activities')\n      .insert({\n        user_id: activity.userId,\n        action: activity.action,\n        details: activity.details,\n        ip_address: activity.ip,\n        user_agent: activity.userAgent,\n        created_at: new Date().toISOString()\n      });\n  } catch (error) {\n    console.error('记录用户活动失败:', error);\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/addresses-fixed/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'maskSensitiveData' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maskSensitiveData' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'AppError' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppError' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2945,2979],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":124,"column":33,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":124,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4067,4070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4067,4070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4078,4112],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 20. Maximum allowed is 10.","line":173,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":389,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":211,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":211,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5516,5529],"text":"(contentLength != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5516,5529],"text":"(contentLength ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5516,5529],"text":"(Boolean(contentLength))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":235,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6020,6033],"text":"(Boolean(recipientName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":28,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":235,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6038,6052],"text":"(Boolean(recipientPhone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":47,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":235,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6057,6065],"text":"(Boolean(province))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":60,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":235,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6070,6074],"text":"(Boolean(city))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":235,"column":69,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":235,"endColumn":82,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6079,6092],"text":"(Boolean(detailAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":250,"column":26,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":250,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6600,6608],"text":"(Boolean(district))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":283,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":283,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7589,7601],"text":"(addressCount != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7589,7601],"text":"(addressCount ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7589,7601],"text":"(Boolean(addressCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":294,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":294,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7868,7877],"text":"(Boolean(isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8119,8161],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8863,8895],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":374,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9897,9900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9897,9900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":375,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":375,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9908,9940],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":401,"column":17,"nodeType":"CallExpression","messageId":"substring","endLine":401,"endColumn":38,"fix":{"range":[10498,10507],"text":"slice"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":402,"column":15,"nodeType":"CallExpression","messageId":"substring","endLine":402,"endColumn":48,"fix":{"range":[10535,10561],"text":"slice(Math.max(0, phone.length - 4)"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":413,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10717,10720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10717,10720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11008,11042],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11158,11161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11158,11161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":452,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":452,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11544,11578],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// 获取和创建用户地址（增强安全版本）\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse, UserAddress } from '@/types';\nimport {\n  validateAndSanitizeName,\n  validateAndSanitizePhone,\n  validateAndSanitizeAddress,\n  checkSQLInjectionRisk,\n  detectXSSAttempt,\n  setSecurityResponseHeaders,\n  getClientIP,\n  RateLimitChecker,\n  maskSensitiveData\n} from '@/lib/security-validation';\nimport { AppError, ErrorFactory } from '@/lib/errors';\n\n// 速率限制检查器\nconst rateLimitChecker = new RateLimitChecker();\n\n// 地址操作频率限制配置\nconst ADDRESS_RATE_LIMITS = {\n  CREATE: { limit: 10, windowMs: 60 * 60 * 1000 }, // 每小时最多创建10个地址\n  LIST: { limit: 100, windowMs: 60 * 60 * 1000 },   // 每小时最多查询100次\n};\n\nexport async function GET(request: Request) {\n  try {\n    const startTime = Date.now();\n    \n    // 1. 用户认证\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { \n        status: 401,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 2. 频率限制检查\n    const clientIP = getClientIP(request);\n    const rateLimitKey = `${user.userId}:${clientIP}:address_list`;\n    \n    const rateLimitResult = rateLimitChecker.check(\n      rateLimitKey,\n      ADDRESS_RATE_LIMITS.LIST.limit,\n      ADDRESS_RATE_LIMITS.LIST.windowMs\n    );\n\n    if (!rateLimitResult.allowed) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '请求过于频繁，请稍后再试'\n      }, {\n        status: 429,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 3. 参数安全检查\n    const url = new URL(request.url);\n    const searchParams = url.searchParams;\n    \n    // 检查是否存在SQL注入攻击迹象\n    for (const [key, value] of searchParams.entries()) {\n      if (checkSQLInjectionRisk(value) || detectXSSAttempt(value)) {\n        await logSecurityEvent({\n          type: 'SUSPICIOUS_REQUEST',\n          userId: user.userId,\n          ip: clientIP,\n          details: { \n            parameter: key, \n            value,\n            endpoint: '/api/user/addresses',\n            method: 'GET'\n          }\n        });\n        \n        return NextResponse.json<ApiResponse>({\n          success: false,\n          error: '请求包含非法参数'\n        }, {\n          status: 400,\n          headers: setSecurityResponseHeaders(new Headers())\n        });\n      }\n    }\n\n    // 4. 数据库查询优化：使用索引字段\n    const { data: addresses, error } = await supabaseAdmin\n      .from('user_addresses')\n      .select(`\n        id,\n        recipientName,\n        recipientPhone,\n        province,\n        city,\n        district,\n        detailAddress,\n        isDefault,\n        createdAt,\n        updatedAt\n      `)\n      .eq('userId', user.userId)\n      .order('isDefault', { ascending: false })\n      .order('createdAt', { ascending: false });\n\n    if (error) {\n      console.error('获取地址列表失败:', error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '获取地址列表失败'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 5. 数据脱敏处理\n    const sanitizedAddresses = (addresses || []).map(address => ({\n      ...address,\n      recipientPhone: maskPhoneNumber(address.recipientPhone), // 脱敏手机号\n    }));\n\n    // 6. 记录操作日志\n    await logUserActivity({\n      userId: user.userId,\n      action: 'VIEW_ADDRESSES',\n      details: {\n        count: sanitizedAddresses.length,\n        operationTime: Date.now() - startTime\n      },\n      ip: clientIP,\n      userAgent: request.headers.get('user-agent')\n    });\n\n    // 7. 返回响应（包含安全头）\n    const response = NextResponse.json<ApiResponse<UserAddress[]>>({\n      success: true,\n      data: sanitizedAddresses,\n      meta: {\n        rateLimit: {\n          remaining: rateLimitResult.remaining,\n          resetTime: new Date(rateLimitResult.resetTime).toISOString()\n        }\n      }\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n\n  } catch (error: any) {\n    console.error('获取地址列表失败:', error);\n    \n    const appError = ErrorFactory.wrapError(error, '获取地址列表');\n    const response = NextResponse.json<ApiResponse>({\n      success: false,\n      error: appError.message,\n      code: appError.code\n    }, {\n      status: appError.statusCode || 500,\n      headers: setSecurityResponseHeaders(new Headers())\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n  }\n}\n\n// 创建新地址\nexport async function POST(request: Request) {\n  try {\n    const startTime = Date.now();\n    \n    // 1. 用户认证\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { \n        status: 401,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 2. 频率限制检查\n    const clientIP = getClientIP(request);\n    const rateLimitKey = `${user.userId}:${clientIP}:address_create`;\n    \n    const rateLimitResult = rateLimitChecker.check(\n      rateLimitKey,\n      ADDRESS_RATE_LIMITS.CREATE.limit,\n      ADDRESS_RATE_LIMITS.CREATE.windowMs\n    );\n\n    if (!rateLimitResult.allowed) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址创建操作过于频繁，请稍后再试'\n      }, {\n        status: 429,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 3. 请求体解析和大小限制\n    const contentLength = request.headers.get('content-length');\n    if (contentLength && parseInt(contentLength) > 10 * 1024) { // 10KB限制\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '请求数据过大'\n      }, {\n        status: 413,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    const body = await request.json();\n    \n    // 4. 输入验证和清洗\n    const {\n      recipientName,\n      recipientPhone,\n      province,\n      city,\n      district,\n      detailAddress,\n      isDefault\n    } = body;\n\n    // 验证必填字段\n    if (!recipientName || !recipientPhone || !province || !city || !detailAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '缺少必填字段'\n      }, { \n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 安全验证和清洗\n    const safeRecipientName = validateAndSanitizeName(recipientName);\n    const safeRecipientPhone = validateAndSanitizePhone(recipientPhone);\n    const safeProvince = validateAndSanitizeAddress(province);\n    const safeCity = validateAndSanitizeAddress(city);\n    const safeDistrict = district ? validateAndSanitizeAddress(district) : null;\n    const safeDetailAddress = validateAndSanitizeAddress(detailAddress);\n\n    // 检查恶意输入\n    const inputData = [safeRecipientName, safeRecipientPhone, safeProvince, safeCity, safeDetailAddress];\n    if (inputData.some(data => detectXSSAttempt(data))) {\n      await logSecurityEvent({\n        type: 'XSS_ATTACK_ATTEMPT',\n        userId: user.userId,\n        ip: clientIP,\n        details: { \n          input: inputData,\n          endpoint: '/api/user/addresses',\n          method: 'POST'\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '输入包含非法内容'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 5. 业务逻辑验证\n    // 检查用户地址数量限制\n    const { count: addressCount } = await supabaseAdmin\n      .from('user_addresses')\n      .select('id', { count: 'exact', head: true })\n      .eq('userId', user.userId);\n\n    if (addressCount && addressCount >= 20) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址数量已达上限（最多20个）'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 6. 事务处理：设置默认地址\n    if (isDefault && isDefault === true) {\n      // 先取消其他默认地址\n      const { error: updateError } = await supabaseAdmin\n        .from('user_addresses')\n        .update({ isDefault: false })\n        .eq('userId', user.userId);\n\n      if (updateError) {\n        console.error('取消其他默认地址失败:', updateError);\n        throw new Error('设置默认地址失败');\n      }\n    }\n\n    // 7. 插入新地址\n    const { data: newAddress, error } = await supabaseAdmin\n      .from('user_addresses')\n      .insert({\n        userId: user.userId,\n        recipientName: safeRecipientName,\n        recipientPhone: safeRecipientPhone,\n        province: safeProvince,\n        city: safeCity,\n        district: safeDistrict,\n        detailAddress: safeDetailAddress,\n        isDefault: isDefault === true\n      })\n      .select(`\n        id,\n        recipientName,\n        recipientPhone,\n        province,\n        city,\n        district,\n        detailAddress,\n        isDefault,\n        createdAt\n      `)\n      .single();\n\n    if (error) {\n      console.error('插入地址失败:', error);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '创建地址失败'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 8. 记录操作日志\n    await logUserActivity({\n      userId: user.userId,\n      action: 'CREATE_ADDRESS',\n      details: {\n        addressId: newAddress.id,\n        operationTime: Date.now() - startTime\n      },\n      ip: clientIP,\n      userAgent: request.headers.get('user-agent')\n    });\n\n    // 9. 返回响应\n    const response = NextResponse.json<ApiResponse<UserAddress>>({\n      success: true,\n      data: {\n        ...newAddress,\n        recipientPhone: maskPhoneNumber(newAddress.recipientPhone) // 返回脱敏手机号\n      },\n      message: '地址添加成功',\n      meta: {\n        rateLimit: {\n          remaining: rateLimitResult.remaining,\n          resetTime: new Date(rateLimitResult.resetTime).toISOString()\n        }\n      }\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n\n  } catch (error: any) {\n    console.error('添加地址失败:', error);\n    \n    const appError = ErrorFactory.wrapError(error, '创建地址');\n    const response = NextResponse.json<ApiResponse>({\n      success: false,\n      error: appError.message,\n      code: appError.code\n    }, {\n      status: appError.statusCode || 500,\n      headers: setSecurityResponseHeaders(new Headers())\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n  }\n}\n\n// ============= 工具函数 =============\n\n/**\n * 手机号脱敏\n */\nfunction maskPhoneNumber(phone: string): string {\n  if (phone.length <= 7) {\n    return phone;\n  }\n  \n  const start = phone.substring(0, 3);\n  const end = phone.substring(phone.length - 4);\n  return `${start}****${end}`;\n}\n\n/**\n * 安全事件记录\n */\nasync function logSecurityEvent(event: {\n  type: string;\n  userId?: string;\n  ip: string;\n  details: any;\n}) {\n  try {\n    await supabaseAdmin\n      .from('security_logs')\n      .insert({\n        event_type: event.type,\n        user_id: event.userId,\n        ip_address: event.ip,\n        details: event.details,\n        created_at: new Date().toISOString()\n      });\n  } catch (error) {\n    console.error('记录安全事件失败:', error);\n  }\n}\n\n/**\n * 用户活动记录\n */\nasync function logUserActivity(activity: {\n  userId: string;\n  action: string;\n  details: any;\n  ip: string;\n  userAgent?: string | null;\n}) {\n  try {\n    await supabaseAdmin\n      .from('user_activities')\n      .insert({\n        user_id: activity.userId,\n        action: activity.action,\n        details: activity.details,\n        ip_address: activity.ip,\n        user_agent: activity.userAgent,\n        created_at: new Date().toISOString()\n      });\n  } catch (error) {\n    console.error('记录用户活动失败:', error);\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/addresses/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async function 'PUT' has a complexity of 11. Maximum allowed is 10.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":87,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":40,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":40,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[974,989],"text":"(Boolean(existingAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":48,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1160,1169],"text":"(Boolean(isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":48,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1174,1199],"text":"(Boolean(existingAddress.isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":63,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":63,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1561,1569],"text":"(Boolean(district))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":63,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":63,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1570,1572],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":65,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1621,1630],"text":"(Boolean(isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1631,1633],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1943,1946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1943,1946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1954,1986],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":84,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":84,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2066,2079],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":84,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":84,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2080,2082],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":112,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":112,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2702,2717],"text":"(Boolean(existingAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3129,3132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3129,3132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3140,3172],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":136,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":136,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3252,3265],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3266,3268],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 更新和删除地址\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse, UserAddress } from '@/types';\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const addressId = parseInt(params.id);\n    const body = await request.json();\n    const {\n      recipientName,\n      recipientPhone,\n      province,\n      city,\n      district,\n      detailAddress,\n      isDefault\n    } = body;\n\n    // 验证地址归属\n    const { data: existingAddress, error: checkError } = await supabaseAdmin\n      .from('user_addresses')\n      .select('*')\n      .eq('id', addressId)\n      .eq('userId', user.userId)\n      .single();\n\n    if (checkError || !existingAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址不存在或无权操作'\n      }, { status: 404 });\n    }\n\n    // 如果设置为默认地址，先取消其他默认地址\n    if (isDefault && !existingAddress.isDefault) {\n      await supabaseAdmin\n        .from('user_addresses')\n        .update({ isDefault: false })\n        .eq('userId', user.userId);\n    }\n\n    // 更新地址\n    const { data: updatedAddress, error } = await supabaseAdmin\n      .from('user_addresses')\n      .update({\n        recipientName,\n        recipientPhone,\n        province,\n        city,\n        district: district || null,\n        detailAddress,\n        isDefault: isDefault || false,\n        updatedAt: new Date().toISOString()\n      })\n      .eq('id', addressId)\n      .select()\n      .single();\n\n    if (error) {throw error;}\n\n    return NextResponse.json<ApiResponse<UserAddress>>({\n      success: true,\n      data: updatedAddress,\n      message: '地址更新成功'\n    });\n\n  } catch (error: any) {\n    console.error('更新地址失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '更新地址失败'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const addressId = parseInt(params.id);\n\n    // 验证地址归属\n    const { data: existingAddress, error: checkError } = await supabaseAdmin\n      .from('user_addresses')\n      .select('*')\n      .eq('id', addressId)\n      .eq('userId', user.userId)\n      .single();\n\n    if (checkError || !existingAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '地址不存在或无权操作'\n      }, { status: 404 });\n    }\n\n    // 删除地址\n    const { error } = await supabaseAdmin\n      .from('user_addresses')\n      .delete()\n      .eq('id', addressId);\n\n    if (error) {throw error;}\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      message: '地址删除成功'\n    });\n\n  } catch (error: any) {\n    console.error('删除地址失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '删除地址失败'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/addresses/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":30,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":30,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[886,889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[886,889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[897,931],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":37,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":37,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1011,1024],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":37,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":37,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1025,1027],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 13. Maximum allowed is 10.","line":43,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":112,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":66,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1550,1563],"text":"(Boolean(recipientName))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":28,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":66,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1568,1582],"text":"(Boolean(recipientPhone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":47,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":66,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1587,1595],"text":"(Boolean(province))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":60,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":66,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1600,1604],"text":"(Boolean(city))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":66,"column":69,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":66,"endColumn":82,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1609,1622],"text":"(Boolean(detailAddress))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":74,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1789,1798],"text":"Boolean(isDefault)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":90,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":90,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2186,2194],"text":"(Boolean(district))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2195,2197],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":92,"column":20,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":92,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2246,2255],"text":"(Boolean(isDefault))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":92,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":92,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2256,2258],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2492,2495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2492,2495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2503,2535],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":109,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":109,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2615,2628],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2629,2631],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 获取用户地址列表\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse, UserAddress } from '@/types';\n\nexport async function GET(request: Request) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    // 查询用户地址\n    const { data: addresses, error } = await supabaseAdmin\n      .from('user_addresses')\n      .select('*')\n      .eq('userId', user.userId)\n      .order('isDefault', { ascending: false })\n      .order('createdAt', { ascending: false });\n\n    if (error) {throw error;}\n\n    return NextResponse.json<ApiResponse<UserAddress[]>>({\n      success: true,\n      data: addresses || []\n    });\n\n  } catch (error: any) {\n    console.error('获取地址列表失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '获取地址列表失败'\n    }, { status: 500 });\n  }\n}\n\n// 创建新地址\nexport async function POST(request: Request) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const {\n      recipientName,\n      recipientPhone,\n      province,\n      city,\n      district,\n      detailAddress,\n      isDefault\n    } = body;\n\n    // 验证必填字段\n    if (!recipientName || !recipientPhone || !province || !city || !detailAddress) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '缺少必填字段'\n      }, { status: 400 });\n    }\n\n    // 如果设置为默认地址，先取消其他默认地址\n    if (isDefault) {\n      await supabaseAdmin\n        .from('user_addresses')\n        .update({ isDefault: false })\n        .eq('userId', user.userId);\n    }\n\n    // 插入新地址\n    const { data: newAddress, error } = await supabaseAdmin\n      .from('user_addresses')\n      .insert({\n        userId: user.userId,\n        recipientName,\n        recipientPhone,\n        province,\n        city,\n        district: district || null,\n        detailAddress,\n        isDefault: isDefault || false\n      })\n      .select()\n      .single();\n\n    if (error) {throw error;}\n\n    return NextResponse.json<ApiResponse<UserAddress>>({\n      success: true,\n      data: newAddress,\n      message: '地址添加成功'\n    });\n\n  } catch (error: any) {\n    console.error('添加地址失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '添加地址失败'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/language/route.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Decorators are not valid here.","line":9,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withI18n, ApiLanguageContext } from '@/lib/i18n-middleware';\nimport { validateLanguageParameter } from '@/lib/i18n-middleware';\n\n/**\n * 更新用户语言偏好设置\n */\n@validateLanguageParameter('language')\nasync function PUT(request: NextRequest & { languageContext: ApiLanguageContext }) {\n  const { languageContext, formatter } = request;\n  \n  try {\n    const body = await request.json();\n    const { userId, language } = body;\n\n    // 验证必需参数\n    if (!userId || !language) {\n      return NextResponse.json(\n        formatter.formatError(\n          'validation_error',\n          'validation_error',\n          { requiredFields: ['userId', 'language'] }\n        ),\n        { status: 400 }\n      );\n    }\n\n    // 更新用户语言偏好\n    const updatedUser = await prisma.user.update({\n      where: { id: userId },\n      data: { preferredLanguage: language },\n      select: {\n        id: true,\n        preferredLanguage: true,\n        email: true,\n        createdAt: true\n      }\n    });\n\n    // 返回成功响应\n    const response = formatter.formatSuccess(\n      { user: updatedUser },\n      'success',\n      {\n        languageChanged: true,\n        previousLanguage: languageContext.detectedLanguage,\n        newLanguage: language\n      }\n    );\n\n    // 设置cookie来持久化语言偏好\n    const headers = new Headers(response.headers);\n    headers.append('Set-Cookie', \n      `preferred_language=${language}; Path=/; Max-Age=31536000; SameSite=Lax`\n    );\n\n    return NextResponse.json(response, {\n      headers: formatter.addLanguageHeaders(headers)\n    });\n\n  } catch (error: any) {\n    console.error('Update user language error:', error);\n    \n    // 处理特定错误类型\n    if (error.code === 'P2025') {\n      return NextResponse.json(\n        formatter.formatError('user_not_found', 'user_not_found'),\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(\n      formatter.formatError('internal_error', 'error', { \n        originalError: error.message \n      }),\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * 获取用户语言偏好设置\n */\nasync function GET(request: NextRequest & { languageContext: ApiLanguageContext }) {\n  const { languageContext, formatter } = request;\n  \n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json(\n        formatter.formatError('validation_error', 'validation_error', {\n          requiredField: 'userId'\n        }),\n        { status: 400 }\n      );\n    }\n\n    // 获取用户信息（包含语言偏好）\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        preferredLanguage: true,\n        email: true,\n        createdAt: true\n      }\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        formatter.formatError('user_not_found', 'user_not_found'),\n        { status: 404 }\n      );\n    }\n\n    // 返回用户语言设置信息\n    const response = formatter.formatSuccess(\n      { \n        user: {\n          id: user.id,\n          preferredLanguage: user.preferredLanguage,\n          email: user.email,\n          createdAt: user.createdAt\n        },\n        availableLanguages: ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ']\n      },\n      undefined,\n      {\n        currentDetectedLanguage: languageContext.detectedLanguage,\n        fallbackUsed: languageContext.fallbackUsed\n      }\n    );\n\n    return NextResponse.json(response);\n\n  } catch (error: any) {\n    console.error('Get user language error:', error);\n    \n    return NextResponse.json(\n      formatter.formatError('internal_error', 'error', {\n        originalError: error.message\n      }),\n      { status: 500 }\n    );\n  }\n}\n\n// 使用i18n中间件包装处理程序\nconst PUTWithI18n = withI18n(PUT);\nconst GETWithI18n = withI18n(GET);\n\n// 导出包装后的处理程序\nexport { PUTWithI18n as PUT, GETWithI18n as GET };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/profile-fixed/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@/types' import is duplicated.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":5,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'respond' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'respond' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'FREE_COUNT_RULES' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FREE_COUNT_RULES' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":17,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":17,"endColumn":57,"fix":{"range":[629,677],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":17,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[629,640],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[630,640],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[629,640],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":21,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":21,"endColumn":42,"fix":{"range":[772,783],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":22,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":22,"endColumn":62},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":24,"column":52,"nodeType":"CallExpression","messageId":"substr","endLine":24,"endColumn":91,"fix":{"range":[951,962],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1158,1162],"text":"(Boolean(user))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":54,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":54,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1716,1730],"text":"Boolean(result.success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3083,3086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3083,3086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":110,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":116,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3467,3504],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'PUT' has a complexity of 11. Maximum allowed is 10.","line":128,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":225,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":131,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":131,"endColumn":57,"fix":{"range":[3762,3810],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":131,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":131,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3762,3773],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3763,3773],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3762,3773],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":135,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":135,"endColumn":42,"fix":{"range":[3917,3928],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":136,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":136,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":141,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":141,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4097,4105],"text":"(Boolean(language))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":145,"column":55,"nodeType":"CallExpression","messageId":"substr","endLine":145,"endColumn":94,"fix":{"range":[4308,4319],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":156,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":156,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4557,4571],"text":"(Boolean(result.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":159,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":159,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4647,4659],"text":"(Boolean(result.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":159,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":159,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4660,4662],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":179,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":186,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5380,5417],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":195,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":195,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5526,5544],"text":"(messages[language] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5526,5544],"text":"(messages[language] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5526,5544],"text":"(Boolean(messages[language]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":195,"column":18,"nodeType":"MemberExpression","endLine":195,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":195,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":195,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5545,5547],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5675,5678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5675,5678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":209,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":215,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6066,6103],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport { userService } from '@/lib/user-service';\nimport { convertUserFromPrisma } from '@/types';\nimport { ApiResponse } from '@/types';\nimport { TajikistanTimeUtils } from '@/lib/timezone-utils';\nimport { getLogger } from '@/lib/logger';\nimport { NextResponseHelper, respond } from '@/lib/api-response';\nimport { FREE_COUNT_RULES } from '@/lib/business-config';\n\nconst logger = getLogger();\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponseHelper.unauthorized('未授权访问');\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    const requestId = `profile_get_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    logger.info('获取用户档案请求', { \n      userId: decoded.userId,\n      requestId\n    });\n\n    // 使用用户服务获取档案（带缓存）\n    const user = await userService.getUserProfile(decoded.userId);\n\n    if (!user) {\n      return NextResponseHelper.notFound('用户不存在');\n    }\n\n    // 检查并重置每日免费次数（使用塔吉克斯坦时区）\n    const needsReset = TajikistanTimeUtils.isNewDay(user.lastFreeResetDate);\n    \n    if (needsReset) {\n      logger.info('重置用户每日免费次数', { \n        userId: decoded.userId,\n        requestId,\n        previousCount: user.freeDailyCount\n      });\n      \n      // 使用事务性缓存更新\n      const result = await userService.updateUserProfile(decoded.userId, {\n        freeDailyCount: 3,\n        lastFreeResetDate: TajikistanTimeUtils.getCurrentTime()\n      });\n      \n      if (result.success) {\n        // 记录重置日志\n        await prisma.transactions.create({\n          data: {\n            userId: user.id,\n            type: 'free_count_reset',\n            amount: 0,\n            balanceType: 'system',\n            description: `免费次数重置 - ${TajikistanTimeUtils.getCurrentDateString()}`\n          }\n        });\n        \n        user.freeDailyCount = 3;\n        user.lastFreeResetDate = TajikistanTimeUtils.getCurrentTime();\n        \n        logger.info('免费次数重置成功', {\n          userId: decoded.userId,\n          requestId,\n          cacheUpdated: result.cacheUpdated\n        });\n      } else {\n        logger.error('免费次数重置失败', {\n          userId: decoded.userId,\n          requestId,\n          error: result.error\n        });\n      }\n    }\n\n    logger.info('用户档案获取成功', { \n      userId: decoded.userId,\n      requestId,\n      freeDailyCount: user.freeDailyCount,\n      balance: user.balance \n    });\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        ...convertUserFromPrisma(user),\n        // 添加时区信息用于调试\n        timezone: TajikistanTimeUtils.TIMEZONE,\n        lastResetDateLocal: TajikistanTimeUtils.formatLocal(user.lastFreeResetDate),\n        currentTimeLocal: TajikistanTimeUtils.formatLocal(new Date()),\n        isNewDay: TajikistanTimeUtils.isNewDay(user.lastFreeResetDate)\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('获取用户档案失败', {\n      error: error.message,\n      stack: error.stack\n    });\n    \n    // 记录错误日志\n    try {\n      await prisma.$executeRaw`\n        SELECT log_system_event('profile_error', '获取用户信息失败', $1)\n      `, {\n        error: error.message,\n        user_id: decoded?.userId,\n        timestamp: new Date().toISOString()\n      };\n    } catch (logError) {\n      console.error('记录错误日志失败:', logError);\n    }\n    \n    return NextResponse.json(\n      { error: '获取用户信息失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    const body = await request.json();\n    const { language } = body;\n\n    if (language && !['zh', 'en', 'ru'].includes(language)) {\n      return NextResponse.json({ error: '无效的语言' }, { status: 400 });\n    }\n\n    const requestId = `profile_update_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    logger.info('更新用户档案请求', { \n      userId: decoded.userId,\n      requestId,\n      updates: { language }\n    });\n\n    // 使用事务性缓存更新\n    const result = await userService.updateUserProfile(decoded.userId, { language });\n\n    if (!result.success) {\n      return NextResponse.json({\n        success: false,\n        error: result.error || '更新失败'\n      }, { status: 500 });\n    }\n\n    const messages: Record<string, string> = {\n      zh: '语言已切换为中文',\n      en: 'Language switched to English',\n      ru: 'Язык переключен на русский'\n    };\n\n    logger.info('用户档案更新成功', { \n      userId: decoded.userId,\n      requestId,\n      language,\n      cacheUpdated: result.cacheUpdated,\n      dbUpdated: result.dbUpdated\n    });\n\n    // 记录更新日志\n    try {\n      await prisma.$executeRaw`\n        SELECT log_system_event('profile_updated', '用户档案更新', $1)\n      `, {\n        user_id: decoded.userId,\n        updates: JSON.stringify({ language }),\n        cache_updated: result.cacheUpdated,\n        timestamp: new Date().toISOString()\n      };\n    } catch (logError) {\n      console.error('记录更新日志失败:', logError);\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        language,\n        message: messages[language] || messages.zh,\n        cacheUpdated: result.cacheUpdated,\n        dbUpdated: result.dbUpdated\n      }\n    });\n\n  } catch (error: any) {\n    logger.error('更新用户档案失败', {\n      error: error.message,\n      stack: error.stack\n    });\n    \n    // 记录错误日志\n    try {\n      await prisma.$executeRaw`\n        SELECT log_system_event('profile_update_error', '更新用户信息失败', $1)\n      `, {\n        error: error.message,\n        user_id: decoded?.userId,\n        timestamp: new Date().toISOString()\n      };\n    } catch (logError) {\n      console.error('记录错误日志失败:', logError);\n    }\n    \n    return NextResponse.json(\n      { error: '更新失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/profile-optimized/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'logger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":20,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":44,"column":43,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":44,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1298,1310],"text":"(Boolean((ctx.user?.id)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":44,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":44,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1311,1313],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async method 'executeBusinessLogic' has a complexity of 13. Maximum allowed is 10.","line":71,"column":29,"nodeType":"FunctionExpression","messageId":"complex","endLine":178,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2122,2125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2122,2125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2136,2139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2136,2139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2199,2226],"text":"(Boolean((ctx as any).validatedInput))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2207,2210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2207,2210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2227,2229],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":77,"column":43,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":77,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2307,2319],"text":"(Boolean((ctx.user?.id)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2320,2322],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":85,"column":34,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":85,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2621,2627],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":88,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":88,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2699,2717],"text":"Boolean(isViewingOtherUser)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":89,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":89,"endColumn":38,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2733,2758],"text":"(this.options.requireAdmin ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2733,2758],"text":"(this.options.requireAdmin === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":89,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":89,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2762,2771],"text":"(Boolean(ctx.admin))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":106,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":108,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3229,3281],"text":"userId ??= ctx.user.id;"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":106,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":106,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3234,3240],"text":"(Boolean(userId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":155,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":155,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4411,4449],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":155,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":155,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4450,4452],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5785,5788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5785,5788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5799,5802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5799,5802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5870,5873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5870,5873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":223,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":223,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6400,6438],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":223,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":223,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6439,6441],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":258,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":258,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7336,7374],"text":"(Boolean(request.headers.get('x-forwarded-for')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":258,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":258,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7375,7377],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 优化后的用户资料API\n * 展示如何使用新的API基础组件和优化措施\n */\n\nimport { NextRequest } from 'next/server';\nimport { z } from 'zod';\nimport { PrismaClient } from '@prisma/client';\nimport { BaseApiHandler, ApiOptions, validationSchemas, permissionConfigs } from '@/lib/api-base';\nimport { InputValidator, RateLimiter, PermissionValidator, AuditLogger, DataMasker } from '@/lib/security-validator';\nimport { createDatabaseOptimizer } from '@/lib/database-optimizer';\nimport { getMonitor } from '@/lib/monitoring';\nimport { getLogger } from '@/lib/logger';\n\n// 数据库客户端\nconst prisma = new PrismaClient();\n\n// 监控和日志\nconst monitor = getMonitor();\nconst logger = getLogger();\n\n// 输入验证模式\nconst UpdateProfileSchema = z.object({\n  firstName: z.string().min(1).max(255).optional(),\n  lastName: z.string().max(255).optional(),\n  language: z.string().min(2).max(5).optional(),\n  avatarUrl: z.string().url().optional()\n});\n\nconst GetProfileSchema = z.object({\n  userId: validationSchemas.userId.optional() // 管理员可以查看其他用户\n});\n\n// API选项配置\nconst apiOptions: ApiOptions = {\n  ...permissionConfigs.user,\n  validateInput: true,\n  inputSchema: GetProfileSchema,\n  trackPerformance: true,\n  trackBusinessMetrics: true,\n  metricName: 'user_profile_requests',\n  enableCache: true,\n  cacheTtl: 300,\n  cacheKeyBuilder: (ctx, data) => `user:${ctx.user?.id || 'unknown'}:profile`,\n  enableRateLimit: true,\n  rateLimitConfig: RateLimiter.getConfig('DEFAULT')\n};\n\n// 用户资料API处理器\nclass UserProfileApiHandler extends BaseApiHandler {\n  private inputValidator: InputValidator;\n  private rateLimiter: RateLimiter;\n  private permissionValidator: PermissionValidator;\n  private auditLogger: AuditLogger;\n  private databaseOptimizer: ReturnType<typeof createDatabaseOptimizer>;\n\n  constructor() {\n    super(apiOptions);\n    \n    // 初始化安全组件\n    this.inputValidator = new InputValidator(prisma);\n    this.rateLimiter = new RateLimiter();\n    this.permissionValidator = new PermissionValidator(prisma);\n    this.auditLogger = new AuditLogger();\n    this.databaseOptimizer = createDatabaseOptimizer(monitor);\n  }\n\n  /**\n   * 处理GET请求 - 获取用户资料\n   */\n  async executeBusinessLogic(ctx: any): Promise<any> {\n    const { request } = ctx;\n    const validatedInput = (ctx as any).validatedInput || {};\n    \n    try {\n      // 检查频率限制\n      const rateLimitKey = `profile_get:${ctx.user?.id || 'anonymous'}`;\n      const rateLimitResult = await this.rateLimiter.checkRateLimit(rateLimitKey);\n      \n      if (!rateLimitResult.allowed) {\n        throw this.createError('RATE_LIMIT_EXCEEDED', '请求频率超限，请稍后再试');\n      }\n\n      let userId = validatedInput.userId;\n      const isViewingOtherUser = userId && userId !== ctx.user.id;\n\n      // 权限检查 - 如果查看其他用户，需要管理员权限\n      if (isViewingOtherUser) {\n        if (this.options.requireAdmin && ctx.admin) {\n          // 管理员权限验证\n          const adminPermission = await this.permissionValidator.validateAdminPermissions(\n            ctx.admin.id,\n            'users',\n            'read'\n          );\n          \n          if (!adminPermission.canPerform) {\n            throw this.createError('FORBIDDEN', '没有查看用户资料的权限');\n          }\n        } else {\n          throw this.createError('FORBIDDEN', '无权限查看其他用户资料');\n        }\n      }\n\n      // 如果没有指定用户ID，使用当前用户\n      if (!userId) {\n        userId = ctx.user.id;\n      }\n\n      // 使用数据库优化器构建查询\n      const optimizedQuery = this.databaseOptimizer.queryOptimizer.optimizeJoinQuery(\n        prisma,\n        'users',\n        {\n          where: { id: userId },\n          select: {\n            id: true,\n            telegramId: true,\n            username: true,\n            firstName: true,\n            lastName: true,\n            avatarUrl: true,\n            language: true,\n            balance: true,\n            vipLevel: true,\n            totalSpent: true,\n            freeDailyCount: true,\n            lastFreeResetDate: true,\n            createdAt: true,\n            updatedAt: true\n          }\n        }\n      );\n\n      // 执行查询\n      const user = await prisma.users.findUnique(optimizedQuery);\n\n      if (!user) {\n        throw this.createError('NOT_FOUND', '用户不存在');\n      }\n\n      // 脱敏敏感数据\n      const maskedUser = DataMasker.maskSensitiveData(user, ['telegramId']);\n\n      // 记录审计日志\n      this.auditLogger.logUserAction(\n        ctx.user.id,\n        'view_profile',\n        'user',\n        {\n          targetUserId: userId,\n          isViewingOtherUser\n        },\n        {\n          ipAddress: request.headers.get('x-forwarded-for') || '127.0.0.1',\n          userAgent: request.headers.get('user-agent'),\n          sessionId: ctx.sessionId\n        }\n      );\n\n      // 记录业务指标\n      this.monitor.increment('user_profile_viewed', 1, {\n        userId: userId,\n        isViewingOtherUser: isViewingOtherUser.toString()\n      });\n\n      return maskedUser;\n\n    } catch (error) {\n      this.logger.error('User profile fetch failed', error as Error, {\n        requestId: ctx.requestId,\n        userId: ctx.user?.id,\n        targetUserId: validatedInput.userId\n      });\n      \n      throw error;\n    }\n  }\n}\n\n// POST请求处理器 - 更新用户资料\nclass UpdateUserProfileHandler extends BaseApiHandler {\n  private inputValidator: InputValidator;\n  private rateLimiter: RateLimiter;\n  private auditLogger: AuditLogger;\n  private databaseOptimizer: ReturnType<typeof createDatabaseOptimizer>;\n\n  constructor() {\n    super({\n      ...permissionConfigs.user,\n      validateInput: true,\n      inputSchema: UpdateProfileSchema,\n      trackPerformance: true,\n      enableRateLimit: true,\n      rateLimitConfig: RateLimiter.getConfig('SENSITIVE')\n    });\n    \n    this.inputValidator = new InputValidator(prisma);\n    this.rateLimiter = new RateLimiter();\n    this.auditLogger = new AuditLogger();\n    this.databaseOptimizer = createDatabaseOptimizer(monitor);\n  }\n\n  async executeBusinessLogic(ctx: any): Promise<any> {\n    const { request } = ctx;\n    const validatedInput = (ctx as any).validatedInput;\n    \n    try {\n      // 检查频率限制\n      const rateLimitKey = `profile_update:${ctx.user.id}`;\n      const rateLimitResult = await this.rateLimiter.checkRateLimit(rateLimitKey);\n      \n      if (!rateLimitResult.allowed) {\n        throw this.createError('RATE_LIMIT_EXCEEDED', '更新频率超限，请稍后再试');\n      }\n\n      // 安全验证和输入清理\n      const sanitizedInput = await this.inputValidator.validateAndSanitize(\n        validatedInput,\n        UpdateProfileSchema,\n        {\n          userId: ctx.user.id,\n          ipAddress: request.headers.get('x-forwarded-for') || '127.0.0.1'\n        }\n      );\n\n      // 执行优化的事务更新\n      const updatedUser = await this.databaseOptimizer.transactionOptimizer.executeOptimizedTransaction(\n        prisma,\n        async (tx) => {\n          return tx.users.update({\n            where: { id: ctx.user.id },\n            data: {\n              ...sanitizedInput,\n              updatedAt: new Date()\n            }\n          });\n        }\n      );\n\n      // 脱敏返回数据\n      const maskedUser = DataMasker.maskSensitiveData(updatedUser, ['telegramId']);\n\n      // 记录审计日志\n      this.auditLogger.logUserAction(\n        ctx.user.id,\n        'update_profile',\n        'user',\n        {\n          updatedFields: Object.keys(sanitizedInput),\n          previousData: {\n            firstName: ctx.user.firstName,\n            lastName: ctx.user.lastName,\n            language: ctx.user.language\n          }\n        },\n        {\n          ipAddress: request.headers.get('x-forwarded-for') || '127.0.0.1',\n          userAgent: request.headers.get('user-agent'),\n          sessionId: ctx.sessionId\n        }\n      );\n\n      // 清除相关缓存\n      // TODO: 实现缓存失效逻辑\n      \n      return maskedUser;\n\n    } catch (error) {\n      this.logger.error('User profile update failed', error as Error, {\n        requestId: ctx.requestId,\n        userId: ctx.user.id,\n        errorType: error.name\n      });\n      \n      throw error;\n    }\n  }\n}\n\n// 导出API路由\nexport async function GET(request: NextRequest) {\n  const handler = new UserProfileApiHandler();\n  return handler.handleRequest(request);\n}\n\nexport async function POST(request: NextRequest) {\n  const handler = new UpdateUserProfileHandler();\n  return handler.handleRequest(request);\n}\n\n/**\n * API文档和使用示例\n * \n * GET /api/user/profile\n * 获取当前用户的资料信息\n * \n * Headers:\n *   Authorization: Bearer <token>\n * \n * Query Parameters:\n *   userId?: string - 用户ID（管理员权限才能查看其他用户）\n * \n * Response:\n *   {\n *     \"success\": true,\n *     \"data\": {\n *       \"id\": \"uuid\",\n *       \"username\": \"string\",\n *       \"firstName\": \"string\",\n *       \"lastName\": \"string\",\n *       \"avatarUrl\": \"string\",\n *       \"language\": \"zh\",\n *       \"balance\": \"decimal\",\n *       \"vipLevel\": 0,\n *       \"totalSpent\": \"decimal\",\n *       \"freeDailyCount\": 0,\n *       \"lastFreeResetDate\": \"datetime\",\n *       \"createdAt\": \"datetime\",\n *       \"updatedAt\": \"datetime\"\n *     },\n *     \"timestamp\": \"2025-10-31T10:08:09.000Z\",\n *     \"requestId\": \"req_1727687890123_abc123def\"\n *   }\n * \n * POST /api/user/profile\n * 更新当前用户的资料信息\n * \n * Headers:\n *   Authorization: Bearer <token>\n *   Content-Type: application/json\n * \n * Request Body:\n *   {\n *     \"firstName\": \"string\", // 可选\n *     \"lastName\": \"string\",  // 可选\n *     \"language\": \"zh\",      // 可选\n *     \"avatarUrl\": \"string\"  // 可选\n *   }\n * \n * Response:\n *   {\n *     \"success\": true,\n *     \"data\": {\n *       // 更新后的用户资料\n *     },\n *     \"timestamp\": \"2025-10-31T10:08:09.000Z\",\n *     \"requestId\": \"req_1727687890456_def456ghi\"\n *   }\n * \n * 错误响应:\n *   {\n *     \"success\": false,\n *     \"error\": \"错误描述\",\n *     \"code\": \"ERROR_CODE\",\n *     \"timestamp\": \"2025-10-31T10:08:09.000Z\",\n *     \"requestId\": \"req_1727687890789_ghi789jkl\"\n *   }\n * \n * 常见错误码:\n *   - UNAUTHORIZED: 未授权访问\n *   - FORBIDDEN: 权限不足\n *   - NOT_FOUND: 用户不存在\n *   - INVALID_INPUT: 输入参数无效\n *   - RATE_LIMIT_EXCEEDED: 请求频率超限\n * \n * 性能优化:\n *   - 使用数据库查询优化器\n *   - 实现缓存机制\n *   - 添加频率限制\n *   - 记录详细的审计日志\n *   - 脱敏敏感数据\n * \n * 安全特性:\n *   - 输入验证和清理\n *   - SQL注入防护\n *   - XSS防护\n *   - 权限验证\n *   - 审计日志记录\n */","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/profile/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@/types' import is duplicated.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":5,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":11,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":11,"endColumn":57,"fix":{"range":[363,411],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":11,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[363,374],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[364,374],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[363,374],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":15,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":15,"endColumn":42,"fix":{"range":[518,529],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1403,1406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1403,1406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1414,1457],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":62,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":62,"endColumn":57,"fix":{"range":[1704,1752],"text":"!authHeader?.startsWith('Bearer ')"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":62,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1704,1715],"text":"(authHeader == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1705,1715],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1704,1715],"text":"(!Boolean(authHeader))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":66,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":66,"endColumn":42,"fix":{"range":[1859,1870],"text":"slice(7"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":67,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":67,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":72,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2039,2047],"text":"(Boolean(language))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":91,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":91,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2573,2591],"text":"(messages[language] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2573,2591],"text":"(messages[language] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2573,2591],"text":"(Boolean(messages[language]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":91,"column":18,"nodeType":"MemberExpression","endLine":91,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":91,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":91,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2592,2594],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2653,2699],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { convertUserFromPrisma } from '@/types';\nimport { ApiResponse } from '@/types';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证JWT Token\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    // 获取用户信息\n    const user = await prisma.users.findUnique({\n      where: { id: decoded.userId }\n    });\n\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '用户不存在'\n      }, { status: 404 });\n    }\n\n    // 检查并重置每日免费次数\n    const today = new Date().toISOString().split('T')[0];\n    const lastResetDate = user.lastFreeResetDate.toISOString().split('T')[0];\n\n    if (today !== lastResetDate) {\n      await prisma.users.update({\n        where: { id: user.id },\n        data: {\n          freeDailyCount: 3,\n          lastFreeResetDate: new Date()\n        }\n      });\n      user.freeDailyCount = 3;\n    }\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: convertUserFromPrisma(user)\n    });\n\n  } catch (error: any) {\n    console.error('Get profile error:', error);\n    return NextResponse.json(\n      { error: '获取用户信息失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: '未授权' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };\n\n    const body = await request.json();\n    const { language } = body;\n\n    if (language && !['zh', 'en', 'ru'].includes(language)) {\n      return NextResponse.json({ error: '无效的语言' }, { status: 400 });\n    }\n\n    const updatedUser = await prisma.users.update({\n      where: { id: decoded.userId },\n      data: { language }\n    });\n\n    const messages: Record<string, string> = {\n      zh: '语言已切换为中文',\n      en: 'Language switched to English',\n      ru: 'Язык переключен на русский'\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        language: updatedUser.language,\n        message: messages[language] || messages.zh\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Update profile error:', error);\n    return NextResponse.json(\n      { error: '更新失败', message: error.message },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/show-off/posts/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":11,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":11,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[290,303],"text":"(Boolean((session?.user)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":19,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":19,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[499,523],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[499,523],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[499,523],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":19,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":19,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[524,526],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[560,585],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[560,585],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[560,585],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[586,588],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[726,729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[726,729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[780,786],"text":"status != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[780,786],"text":"status ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[780,786],"text":"Boolean(status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1805,1841],"text":"(Boolean(post.round.products.nameMultilingual))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1805,1886],"text":"(post.round.products.nameMultilingual ?? \n              post.round.products.nameZh)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":73,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1860,1886],"text":"(Boolean(post.round.products.nameZh))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1860,1931],"text":"(post.round.products.nameZh ?? \n              post.round.products.nameEn)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":74,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":74,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1905,1931],"text":"(Boolean(post.round.products.nameEn))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":74,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":74,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1932,1934],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3033,3069],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { auth } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// 获取用户的晒单列表\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { success: false, error: '请先登录' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const status = searchParams.get('status'); // 可选：筛选特定状态\n\n    const skip = (page - 1) * limit;\n\n    // 构建查询条件\n    const where: any = {\n      userId: session.user.id\n    };\n\n    if (status) {\n      where.status = status;\n    }\n\n    const [posts, total] = await Promise.all([\n      prisma.showOffPosts.findMany({\n        where,\n        include: {\n          round: {\n            select: {\n              id: true,\n              roundNumber: true,\n              winningNumber: true,\n              drawTime: true,\n              products: {\n                select: {\n                  id: true,\n                  nameMultilingual: true,\n                  nameZh: true,\n                  nameEn: true,\n                  nameRu: true,\n                  images: true,\n                  marketPrice: true\n                }\n              }\n            }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip,\n        take: limit\n      }),\n      prisma.showOffPosts.count({ where })\n    ]);\n\n    // 格式化返回数据\n    const formattedPosts = posts.map(post => ({\n      id: post.id,\n      content: post.content,\n      images: post.images,\n      product: {\n        id: post.round.products.id,\n        name: post.round.products.nameMultilingual || \n              post.round.products.nameZh || \n              post.round.products.nameEn || \n              post.round.products.nameRu,\n        images: post.round.products.images,\n        marketPrice: post.round.products.marketPrice,\n        winningInfo: {\n          roundNumber: post.round.roundNumber,\n          winningNumber: post.round.winningNumber,\n          drawTime: post.round.drawTime\n        }\n      },\n      stats: {\n        likeCount: post.likeCount,\n        commentCount: post.commentCount,\n        shareCount: post.shareCount,\n        viewCount: post.viewCount\n      },\n      status: post.status,\n      review: {\n        reviewedAt: post.reviewedAt,\n        rejectReason: post.rejectReason,\n        coinRewarded: post.coinRewarded,\n        coinRewardedAt: post.coinRewardedAt\n      },\n      createdAt: post.createdAt\n    }));\n\n    const totalPages = Math.ceil(total / limit);\n    const hasMore = page < totalPages;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        posts: formattedPosts,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages,\n          hasMore\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('获取我的晒单列表失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取我的晒单列表失败' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/transactions/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":9,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[300,306],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[301,306],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[300,306],"text":"!Boolean(token)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1145,1148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1145,1148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1156,1204],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":48,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1271,1284],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1285,1287],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyToken } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 验证token\n    const token = request.headers.get('authorization')?.replace('Bearer ', '');\n    if (!token) {\n      return NextResponse.json({\n        success: false,\n        error: '未登录'\n      }, { status: 401 });\n    }\n\n    const payload = await verifyToken(token);\n    if (!payload) {\n      return NextResponse.json({\n        success: false,\n        error: 'Token无效'\n      }, { status: 401 });\n    }\n\n    // 获取交易记录\n    const transactions = await prisma.transactions.findMany({\n      where: { userId: payload.userId },\n      orderBy: { createdAt: 'desc' },\n      take: 50\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        transactions: transactions.map(t => ({\n          id: t.id,\n          type: t.type,\n          amount: Number(t.amount),\n          balance: Number(t.balance),\n          description: t.description,\n          createdAt: t.createdAt.toISOString()\n        }))\n      }\n    });\n  } catch (error: any) {\n    console.error('Get transactions error:', error);\n    return NextResponse.json({\n      success: false,\n      error: error.message || '获取交易记录失败'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/wallet/balance/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":11,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[309,315],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[310,315],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[309,315],"text":"!Boolean(token)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[415,418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[415,418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":18,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":28,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":28,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[602,609],"text":"(Boolean(decoded))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":48,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":48,"endColumn":14,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[985,989],"text":"(Boolean(user))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":60,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":60,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1261,1274],"text":"(Boolean(user.currency))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":60,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":60,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1275,1277],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1325,1359],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// JWT验证中间件\nfunction verifyToken(req: NextRequest) {\n  const token = req.headers.get('authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return null;\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\n// 获取用户钱包余额\nexport async function GET(req: NextRequest) {\n  try {\n    const decoded = verifyToken(req);\n    \n    if (!decoded) {\n      return NextResponse.json(\n        { success: false, error: '未授权访问' },\n        { status: 401 }\n      );\n    }\n\n    const { userId } = decoded;\n\n    // 获取用户信息\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        balance: true,\n        luckyCoins: true,\n        currency: true\n      }\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { success: false, error: '用户不存在' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        balance: user.balance,\n        luckyCoins: user.luckyCoins,\n        currency: user.currency || 'TJS'\n      }\n    });\n\n  } catch (error) {\n    console.error('获取钱包余额失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取余额失败' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/wallet/transactions/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":11,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[309,315],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[310,315],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[309,315],"text":"!Boolean(token)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[415,418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[415,418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":18,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":28,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":28,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[604,611],"text":"(Boolean(decoded))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[885,888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[885,888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[930,934],"text":"(type != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[930,934],"text":"(type ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[930,934],"text":"(Boolean(type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":64,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":64,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1444,1467],"text":"(Boolean(transaction.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":64,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":64,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1468,1470],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1732,1766],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":93,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":93,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2129,2147],"text":"(descriptions[type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2129,2147],"text":"(descriptions[type] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2129,2147],"text":"(Boolean(descriptions[type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":93,"column":10,"nodeType":"MemberExpression","endLine":93,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":93,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":93,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2148,2150],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// JWT验证中间件\nfunction verifyToken(req: NextRequest) {\n  const token = req.headers.get('authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return null;\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\n// 获取用户钱包交易记录\nexport async function GET(req: NextRequest) {\n  try {\n    const decoded = verifyToken(req);\n    \n    if (!decoded) {\n      return NextResponse.json(\n        { success: false, error: '未授权访问' },\n        { status: 401 }\n      );\n    }\n\n    const { userId } = decoded;\n    const { searchParams } = new URL(req.url);\n    const type = searchParams.get('type');\n\n    // 构建查询条件\n    const where: any = {\n      userId: userId\n    };\n\n    if (type && type !== 'all') {\n      where.type = type;\n    }\n\n    // 获取交易记录\n    const transactions = await prisma.walletTransaction.findMany({\n      where,\n      orderBy: {\n        createdAt: 'desc'\n      },\n      take: 50 // 限制返回50条记录\n    });\n\n    // 格式化交易记录\n    const formattedTransactions = transactions.map(transaction => ({\n      id: transaction.id,\n      type: transaction.type,\n      amount: transaction.amount,\n      luckyCoins: transaction.luckyCoins,\n      currency: transaction.currency,\n      description: transaction.description || getTransactionDescription(transaction.type),\n      status: transaction.status,\n      createdAt: transaction.createdAt.toISOString()\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: formattedTransactions\n    });\n\n  } catch (error) {\n    console.error('获取交易记录失败:', error);\n    return NextResponse.json(\n      { success: false, error: '获取交易记录失败' },\n      { status: 500 }\n    );\n  }\n}\n\n// 获取交易类型描述\nfunction getTransactionDescription(type: string): string {\n  const descriptions: Record<string, string> = {\n    recharge: '账户充值',\n    transfer_in: '余额转入',\n    transfer_out: '余额转出',\n    purchase: '商品购买',\n    reward: '奖励收入'\n  };\n  \n  return descriptions[type] || '未知交易';\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/user/wallet/transfer/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":11,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[309,315],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[310,315],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[309,315],"text":"!Boolean(token)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[415,418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[415,418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":18,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":28,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":28,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[601,608],"text":"(Boolean(decoded))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'luckyCoins' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'luckyCoins' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":39,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":39,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[835,841],"text":"(Boolean(amount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":65,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":65,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1421,1425],"text":"(Boolean(user))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":101,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":101,"endColumn":34,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2236,2249],"text":"(Boolean(user.currency))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":101,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":101,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2250,2252],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3233,3267],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// JWT验证中间件\nfunction verifyToken(req: NextRequest) {\n  const token = req.headers.get('authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return null;\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\n// 余额转幸运币\nexport async function POST(req: NextRequest) {\n  try {\n    const decoded = verifyToken(req);\n    \n    if (!decoded) {\n      return NextResponse.json(\n        { success: false, error: '未授权访问' },\n        { status: 401 }\n      );\n    }\n\n    const { userId } = decoded;\n    const { amount, luckyCoins } = await req.json();\n\n    // 验证输入\n    if (!amount || amount <= 0) {\n      return NextResponse.json(\n        { success: false, error: '转换金额必须大于0' },\n        { status: 400 }\n      );\n    }\n\n    if (amount < 1) {\n      return NextResponse.json(\n        { success: false, error: '最小转换金额为1 TJS' },\n        { status: 400 }\n      );\n    }\n\n    // 开启事务\n    const result = await prisma.$transaction(async (tx) => {\n      // 获取用户当前余额\n      const user = await tx.user.findUnique({\n        where: { id: userId },\n        select: {\n          balance: true,\n          luckyCoins: true,\n          currency: true\n        }\n      });\n\n      if (!user) {\n        throw new Error('用户不存在');\n      }\n\n      // 检查余额是否足够\n      if (user.balance < amount) {\n        throw new Error('余额不足');\n      }\n\n      // 计算应该获得的幸运币数量\n      const calculatedLuckyCoins = Math.floor(amount);\n\n      // 更新用户余额和幸运币\n      const updatedUser = await tx.user.update({\n        where: { id: userId },\n        data: {\n          balance: {\n            decrement: amount\n          },\n          luckyCoins: {\n            increment: calculatedLuckyCoins\n          }\n        },\n        select: {\n          balance: true,\n          luckyCoins: true,\n          currency: true\n        }\n      });\n\n      // 创建转出交易记录\n      const transferOutTransaction = await tx.walletTransaction.create({\n        data: {\n          userId,\n          type: 'transfer_out',\n          amount: amount,\n          currency: user.currency || 'TJS',\n          description: `余额转幸运币：-${amount} TJS`,\n          status: 'completed'\n        }\n      });\n\n      // 创建转入交易记录\n      const transferInTransaction = await tx.walletTransaction.create({\n        data: {\n          userId,\n          type: 'transfer_in',\n          luckyCoins: calculatedLuckyCoins,\n          description: `转换为幸运币：+${calculatedLuckyCoins} LC`,\n          status: 'completed'\n        }\n      });\n\n      return {\n        updatedUser,\n        transferOutTransaction,\n        transferInTransaction\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        newBalance: result.updatedUser.balance,\n        newLuckyCoins: result.updatedUser.luckyCoins,\n        convertedAmount: amount,\n        convertedLuckyCoins: Math.floor(amount),\n        transactions: {\n          outId: result.transferOutTransaction.id,\n          inId: result.transferInTransaction.id\n        }\n      },\n      message: '转换成功'\n    });\n\n  } catch (error) {\n    console.error('余额转幸运币失败:', error);\n    \n    // 处理业务错误\n    if (error instanceof Error) {\n      if (error.message === '余额不足') {\n        return NextResponse.json(\n          { success: false, error: '余额不足' },\n          { status: 400 }\n        );\n      }\n      if (error.message === '用户不存在') {\n        return NextResponse.json(\n          { success: false, error: '用户不存在' },\n          { status: 404 }\n        );\n      }\n    }\n\n    return NextResponse.json(\n      { success: false, error: '转换失败，请重试' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/wallet/balance/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'DatabaseLockManager' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DatabaseLockManager' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":20,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":20,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[548,560],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":43,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":43,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1165,1182],"text":"(Boolean(walletBalanceInfo))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\nimport { DatabaseLockManager } from '@/lib/database-lock-manager';\n\nconst logger = getLogger();\n\n/**\n * 获取用户双货币余额API\n * GET /api/wallet/balance\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('获取钱包余额失败：用户ID缺失', undefined, {\n        endpoint: '/api/wallet/balance',\n        method: 'GET'\n      });\n      \n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始获取用户双货币余额', { userId: user.userId }, {\n      endpoint: '/api/wallet/balance',\n      method: 'GET'\n    });\n\n    // 使用专用函数获取用户双货币余额信息，确保数据一致性\n    const walletBalanceInfo = await prisma.$queryRawUnsafe(`\n      SELECT * FROM get_user_wallet_balance('${user.userId}'::uuid)\n    `);\n\n    // 如果用户不存在，返回错误\n    if (!walletBalanceInfo || walletBalanceInfo.length === 0) {\n      requestLogger.warn('获取钱包余额失败：用户不存在', { userId: user.userId }, {\n        endpoint: '/api/wallet/balance',\n        method: 'GET'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.notFound('用户不存在'),\n        { status: 404 }\n      );\n    }\n\n    const balanceData = walletBalanceInfo[0];\n\n    // 构建响应数据\n    const responseData = {\n      userId: balanceData.user_id,\n      balances: {\n        balance: {\n          amount: parseFloat(balanceData.balance.toString()),\n          version: balanceData.balance_version,\n          currency: 'TJS' // 塔吉克斯坦索莫尼\n        },\n        luckyCoins: {\n          amount: parseFloat(balanceData.lucky_coins.toString()),\n          version: balanceData.lucky_coins_version,\n          currency: 'LC' // LuckyCoins\n        },\n        platformBalance: {\n          amount: parseFloat(balanceData.platform_balance.toString()),\n          version: balanceData.platform_balance_version,\n          currency: 'TJS' // 平台余额\n        }\n      },\n      totalAssets: {\n        tjs: parseFloat(balanceData.total_tjs.toString()),\n        lc: parseFloat(balanceData.total_lc.toString())\n      },\n      lastUpdated: new Date() // 当前时间作为最后更新时间\n    };\n\n    const duration = Date.now() - startTime;\n    \n    requestLogger.info('成功获取用户双货币余额', { \n      userId: user.userId,\n      balance: responseData.balances.balance.amount,\n      luckyCoins: responseData.balances.luckyCoins.amount\n    }, {\n      endpoint: '/api/wallet/balance',\n      method: 'GET',\n      duration\n    });\n\n    // 返回成功响应\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: responseData,\n      message: '余额查询成功'\n    });\n\n  } catch (error) {\n    logger.error('获取钱包余额时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/wallet/balance',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('获取余额失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/wallet/transactions/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 33. Maximum allowed is 10.","line":31,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":219,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[759,762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[759,762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":37,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":37,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[869,881],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":57,"column":13,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":57,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1400,1424],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1400,1424],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1400,1424],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":57,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":57,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1425,1427],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":58,"column":14,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":58,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1446,1471],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1446,1471],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1446,1471],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":58,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":58,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1472,1474],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":59,"column":20,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":59,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1500,1531],"text":"(searchParams.get('balanceType') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1500,1531],"text":"(searchParams.get('balanceType') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1500,1531],"text":"(Boolean(searchParams.get('balanceType')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":59,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":59,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1532,1534],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":13,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":60,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1558,1582],"text":"(searchParams.get('type') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1558,1582],"text":"(searchParams.get('type') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1558,1582],"text":"(Boolean(searchParams.get('type')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":60,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":60,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1583,1585],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":61,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":61,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1614,1643],"text":"(searchParams.get('startDate') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1614,1643],"text":"(searchParams.get('startDate') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1614,1643],"text":"(Boolean(searchParams.get('startDate')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":61,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":61,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1644,1646],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":62,"column":16,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":62,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1673,1700],"text":"(searchParams.get('endDate') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1673,1700],"text":"(searchParams.get('endDate') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1673,1700],"text":"(Boolean(searchParams.get('endDate')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":62,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":62,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1701,1703],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'offset' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'offset' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1959,1962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1959,1962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":75,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":75,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2009,2027],"text":"(params.balanceType != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2009,2027],"text":"(params.balanceType ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2009,2027],"text":"(Boolean(params.balanceType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":79,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":79,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2181,2192],"text":"params.type != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2181,2192],"text":"params.type ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2181,2192],"text":"Boolean(params.type)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":86,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":86,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2310,2326],"text":"params.startDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2310,2326],"text":"params.startDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2310,2326],"text":"Boolean(params.startDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":96,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":96,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2560,2574],"text":"params.endDate != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2560,2574],"text":"params.endDate ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2560,2574],"text":"Boolean(params.endDate)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":112,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":112,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3008,3026],"text":"(params.balanceType != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3008,3026],"text":"(params.balanceType ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3008,3026],"text":"(Boolean(params.balanceType))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":113,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":113,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3076,3087],"text":"(params.type != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3076,3087],"text":"(params.type ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3076,3087],"text":"(Boolean(params.type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":114,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3130,3146],"text":"(params.startDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3130,3146],"text":"(params.startDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3130,3146],"text":"(Boolean(params.startDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":115,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":115,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3194,3208],"text":"(params.endDate != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3194,3208],"text":"(params.endDate ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3194,3208],"text":"(Boolean(params.endDate))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":120,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":120,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3283,3305],"text":"(Boolean(transactionQueryResult))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":133,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":133,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3704,3726],"text":"(Boolean(queryData.transactions))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":133,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":133,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3727,3729],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":134,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":134,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3757,3778],"text":"(Boolean(queryData.total_count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":134,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":134,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3779,3781],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":135,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":135,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3808,3828],"text":"(Boolean(queryData.pagination))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":135,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":135,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3829,3831],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":136,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":136,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3859,3879],"text":"(Boolean(queryData.statistics))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3880,3882],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4213,4216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4213,4216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":157,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":161,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4368,4479],"text":"(Boolean({\n        balance: '普通余额',\n        lucky_coins: '幸运币',\n        platform_balance: '平台余额'\n      }[tx.balanceType]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4480,4482],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":173,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":173,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4893,4908],"text":"(Boolean(pagination.page))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":173,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":173,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4909,4911],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":174,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":174,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4933,4949],"text":"(Boolean(pagination.limit))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4950,4952],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":176,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":176,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5007,5028],"text":"(Boolean(pagination.totalPages))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":176,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":176,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5029,5031],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":177,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":177,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5080,5098],"text":"(Boolean(pagination.hasNext))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5099,5101],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":178,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":178,"endColumn":36,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5148,5166],"text":"(Boolean(pagination.hasPrev))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":178,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":178,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5167,5169],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5460,5463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5460,5463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":190,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":194,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5539,5668],"text":"(Boolean({\n            balance: '普通余额',\n            lucky_coins: '幸运币',\n            platform_balance: '平台余额'\n          }[stat.balanceType]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":194,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":194,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5669,5671],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":195,"column":35,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":195,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5724,5752],"text":"(Boolean((stat.totalAmount?.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":195,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":195,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5753,5755],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":196,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":196,"endColumn":50,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5790,5811],"text":"(Boolean(stat.transactionCount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":196,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":196,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5812,5814],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 15. Maximum allowed is 10.","line":221,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":397,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6336,6339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6336,6339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":242,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":242,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6796,6808],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":314,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":314,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8764,8778],"text":"(relatedOrderId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8764,8778],"text":"(relatedOrderId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8764,8778],"text":"(Boolean(relatedOrderId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":367,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":371,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10167,10287],"text":"({\n        balance: '普通余额',\n        lucky_coins: '幸运币',\n        platform_balance: '平台余额'\n      }[transaction.balanceType] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10167,10287],"text":"({\n        balance: '普通余额',\n        lucky_coins: '幸运币',\n        platform_balance: '平台余额'\n      }[transaction.balanceType] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10167,10287],"text":"(Boolean({\n        balance: '普通余额',\n        lucky_coins: '幸运币',\n        platform_balance: '平台余额'\n      }[transaction.balanceType]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":371,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":371,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10288,10290],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":58,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\n\nconst logger = getLogger();\n\ninterface CreateTransactionRequest {\n  type: string;\n  amount: number;\n  balanceType: 'balance' | 'lucky_coins' | 'platform_balance';\n  description?: string;\n  relatedOrderId?: string;\n}\n\ninterface QueryParams {\n  page?: string;\n  limit?: string;\n  balanceType?: string;\n  type?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\n/**\n * 双货币交易记录API\n * GET  /api/wallet/transactions - 查询交易记录\n * POST /api/wallet/transactions - 创建交易记录\n */\nexport const GET = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('查询交易记录失败：用户ID缺失', undefined, {\n        endpoint: '/api/wallet/transactions',\n        method: 'GET'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始查询用户交易记录', { userId: user.userId }, {\n      endpoint: '/api/wallet/transactions',\n      method: 'GET'\n    });\n\n    // 解析查询参数\n    const { searchParams } = new URL(request.url);\n    const params: QueryParams = {\n      page: searchParams.get('page') || '1',\n      limit: searchParams.get('limit') || '20',\n      balanceType: searchParams.get('balanceType') || undefined,\n      type: searchParams.get('type') || undefined,\n      startDate: searchParams.get('startDate') || undefined,\n      endDate: searchParams.get('endDate') || undefined\n    };\n\n    // 验证分页参数\n    const page = Math.max(1, parseInt(params.page, 10) || 1);\n    const limit = Math.min(100, Math.max(1, parseInt(params.limit, 10) || 20));\n    const offset = (page - 1) * limit;\n\n    // 构建查询条件\n    const whereConditions: any = {\n      userId: user.userId\n    };\n\n    if (params.balanceType && ['balance', 'lucky_coins', 'platform_balance'].includes(params.balanceType)) {\n      whereConditions.balanceType = params.balanceType;\n    }\n\n    if (params.type) {\n      whereConditions.type = {\n        contains: params.type,\n        mode: 'insensitive'\n      };\n    }\n\n    if (params.startDate) {\n      const startDate = new Date(params.startDate);\n      if (!isNaN(startDate.getTime())) {\n        whereConditions.createdAt = {\n          ...whereConditions.createdAt,\n          gte: startDate\n        };\n      }\n    }\n\n    if (params.endDate) {\n      const endDate = new Date(params.endDate);\n      if (!isNaN(endDate.getTime())) {\n        whereConditions.createdAt = {\n          ...whereConditions.createdAt,\n          lte: endDate\n        };\n      }\n    }\n\n    // 使用优化后的分页查询函数\n    const transactionQueryResult = await prisma.$queryRawUnsafe(`\n      SELECT * FROM get_user_transactions_paginated(\n        '${user.userId}'::uuid,\n        ${page},\n        ${limit},\n        ${params.balanceType ? `'${params.balanceType}'` : 'NULL'},\n        ${params.type ? `'${params.type}'` : 'NULL'},\n        ${params.startDate ? `'${params.startDate}'` : 'NULL'},\n        ${params.endDate ? `'${params.endDate}'` : 'NULL'}\n      )\n    `);\n\n    // 检查查询结果\n    if (!transactionQueryResult || transactionQueryResult.length === 0) {\n      requestLogger.warn('查询交易记录失败：无返回数据', { userId: user.userId }, {\n        endpoint: '/api/wallet/transactions',\n        method: 'GET'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.internal('查询交易记录失败，请稍后重试'),\n        { status: 500 }\n      );\n    }\n\n    const queryData = transactionQueryResult[0];\n    const transactions = queryData.transactions || [];\n    const totalCount = queryData.total_count || 0;\n    const pagination = queryData.pagination || {};\n    const statistics = queryData.statistics || [];\n\n    const duration = Date.now() - startTime;\n\n    requestLogger.info('成功查询用户交易记录', {\n      userId: user.userId,\n      totalCount,\n      page,\n      limit\n    }, {\n      endpoint: '/api/wallet/transactions',\n      method: 'GET',\n      duration\n    });\n\n    // 格式化交易记录数据\n    const formattedTransactions = transactions.map((tx: any) => ({\n      id: tx.id,\n      type: tx.type,\n      amount: parseFloat(tx.amount.toString()),\n      balanceType: tx.balanceType,\n      balanceTypeName: {\n        balance: '普通余额',\n        lucky_coins: '幸运币',\n        platform_balance: '平台余额'\n      }[tx.balanceType] || tx.balanceType,\n      relatedOrderId: tx.relatedOrderId,\n      description: tx.description,\n      createdAt: new Date(tx.createdAt),\n      formattedDate: new Date(tx.createdAt).toISOString().split('T')[0],\n      formattedTime: new Date(tx.createdAt).toTimeString().split(' ')[0]\n    }));\n\n    // 构建响应数据\n    const transactionData = {\n      transactions: formattedTransactions,\n      pagination: {\n        page: pagination.page || page,\n        limit: pagination.limit || limit,\n        total: totalCount,\n        totalPages: pagination.totalPages || Math.ceil(totalCount / limit),\n        hasNext: pagination.hasNext || (page * limit < totalCount),\n        hasPrev: pagination.hasPrev || (page > 1)\n      },\n      filters: {\n        balanceType: params.balanceType,\n        type: params.type,\n        startDate: params.startDate,\n        endDate: params.endDate\n      },\n      statistics: {\n        totalTransactions: totalCount,\n        balanceTypeStats: statistics.map((stat: any) => ({\n          balanceType: stat.balanceType,\n          balanceTypeName: {\n            balance: '普通余额',\n            lucky_coins: '幸运币',\n            platform_balance: '平台余额'\n          }[stat.balanceType] || stat.balanceType,\n          totalAmount: parseFloat(stat.totalAmount?.toString() || '0'),\n          transactionCount: stat.transactionCount || 0\n        }))\n      }\n    };\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: transactionData,\n      message: '交易记录查询成功'\n    });\n\n  } catch (error) {\n    logger.error('查询交易记录时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/wallet/transactions',\n      method: 'GET'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('查询交易记录失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});\n\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证请求方法\n    if (request.method !== 'POST') {\n      requestLogger.warn('创建交易记录失败：不支持的请求方法', {\n        method: request.method\n      }, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('不支持的请求方法'),\n        { status: 405 }\n      );\n    }\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('创建交易记录失败：用户ID缺失', undefined, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始创建交易记录', { userId: user.userId }, {\n      endpoint: '/api/wallet/transactions',\n      method: 'POST'\n    });\n\n    // 解析请求体\n    let body: CreateTransactionRequest;\n    try {\n      body = await request.json();\n    } catch (error) {\n      requestLogger.warn('创建交易记录失败：请求体格式错误', error as Error, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('请求体格式错误'),\n        { status: 400 }\n      );\n    }\n\n    // 验证必需字段\n    const { type, amount, balanceType, description, relatedOrderId } = body;\n\n    if (!type || typeof type !== 'string') {\n      requestLogger.warn('创建交易记录失败：交易类型无效', { type }, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('交易类型不能为空'),\n        { status: 400 }\n      );\n    }\n\n    if (typeof amount !== 'number' || isNaN(amount) || amount === 0) {\n      requestLogger.warn('创建交易记录失败：金额无效', { amount }, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('金额必须为非零数字'),\n        { status: 400 }\n      );\n    }\n\n    if (!balanceType || !['balance', 'lucky_coins', 'platform_balance'].includes(balanceType)) {\n      requestLogger.warn('创建交易记录失败：余额类型无效', { balanceType }, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('余额类型无效，必须是 balance、lucky_coins 或 platform_balance'),\n        { status: 400 }\n      );\n    }\n\n    if (relatedOrderId && typeof relatedOrderId !== 'string') {\n      requestLogger.warn('创建交易记录失败：订单ID格式无效', { relatedOrderId }, {\n        endpoint: '/api/wallet/transactions',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('订单ID格式无效'),\n        { status: 400 }\n      );\n    }\n\n    // 创建交易记录\n    const transaction = await prisma.transactions.create({\n      data: {\n        userId: user.userId,\n        type: type.trim(),\n        amount: amount,\n        balanceType: balanceType,\n        description: description?.trim(),\n        relatedOrderId: relatedOrderId\n      },\n      select: {\n        id: true,\n        type: true,\n        amount: true,\n        balanceType: true,\n        relatedOrderId: true,\n        description: true,\n        createdAt: true\n      }\n    });\n\n    const duration = Date.now() - startTime;\n\n    requestLogger.info('成功创建交易记录', {\n      userId: user.userId,\n      transactionId: transaction.id,\n      type: transaction.type,\n      amount: transaction.amount,\n      balanceType: transaction.balanceType\n    }, {\n      endpoint: '/api/wallet/transactions',\n      method: 'POST',\n      duration\n    });\n\n    // 格式化响应数据\n    const transactionData = {\n      id: transaction.id,\n      type: transaction.type,\n      amount: parseFloat(transaction.amount.toString()),\n      balanceType: transaction.balanceType,\n      balanceTypeName: {\n        balance: '普通余额',\n        lucky_coins: '幸运币',\n        platform_balance: '平台余额'\n      }[transaction.balanceType] || transaction.balanceType,\n      relatedOrderId: transaction.relatedOrderId,\n      description: transaction.description,\n      createdAt: transaction.createdAt,\n      formattedDate: transaction.createdAt.toISOString().split('T')[0],\n      formattedTime: transaction.createdAt.toTimeString().split(' ')[0]\n    };\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: transactionData,\n      message: '交易记录创建成功'\n    }, { status: 201 });\n\n  } catch (error) {\n    logger.error('创建交易记录时发生异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/wallet/transactions',\n      method: 'POST'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('创建交易记录失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/wallet/transfer/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 19. Maximum allowed is 10.","line":19,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":228,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[499,502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[499,502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":40,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":40,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[955,967],"text":"(Boolean((user?.userId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":129,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":129,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3202,3216],"text":"(Boolean(transferResult))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":129,"column":60,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":129,"endColumn":85,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3252,3277],"text":"(Boolean(transferResult[0].success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":130,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":130,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3308,3342],"text":"(Boolean((transferResult?.[0]?.error_message)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3343,3345],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":131,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":131,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3385,3417],"text":"(Boolean((transferResult?.[0]?.new_balance)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3418,3420],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":132,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":132,"endColumn":69,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3456,3492],"text":"(Boolean((transferResult?.[0]?.new_lucky_coins)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":132,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":132,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3493,3495],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":194,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":194,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4963,4990],"text":"((updatedUser?.balanceVersion) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4963,4990],"text":"((updatedUser?.balanceVersion) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4963,4990],"text":"(Boolean((updatedUser?.balanceVersion)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":194,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":194,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4991,4993],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":199,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":199,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5151,5181],"text":"((updatedUser?.luckyCoinsVersion) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5151,5181],"text":"((updatedUser?.luckyCoinsVersion) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5151,5181],"text":"(Boolean((updatedUser?.luckyCoinsVersion)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":199,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":199,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5182,5184],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":203,"column":30,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":203,"endColumn":69,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5280,5319],"text":"((updatedUser?.platformBalance.toString()) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5280,5319],"text":"((updatedUser?.platformBalance.toString()) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5280,5319],"text":"(Boolean((updatedUser?.platformBalance.toString())))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":203,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":203,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5320,5322],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":204,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":204,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5348,5383],"text":"((updatedUser?.platformBalanceVersion) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5348,5383],"text":"((updatedUser?.platformBalanceVersion) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5348,5383],"text":"(Boolean((updatedUser?.platformBalanceVersion)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":204,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":204,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5384,5386],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { withAuth } from '@/lib/auth';\nimport { ApiResponse } from '@/lib/api-response';\nimport { getLogger } from '@/lib/logger';\nimport { DatabaseLockManager } from '@/lib/database-lock-manager';\n\nconst logger = getLogger();\n\ninterface TransferRequest {\n  amount: number;\n}\n\n/**\n * 余额转幸运币API\n * POST /api/wallet/transfer\n * 1:1 转换比例\n */\nexport const POST = withAuth(async (request: NextRequest, user: any) => {\n  try {\n    const requestLogger = logger;\n    const startTime = Date.now();\n\n    // 验证请求方法\n    if (request.method !== 'POST') {\n      requestLogger.warn('余额转幸运币失败：不支持的请求方法', {\n        method: request.method\n      }, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('不支持的请求方法'),\n        { status: 405 }\n      );\n    }\n\n    // 验证必需参数\n    if (!user?.userId) {\n      requestLogger.warn('余额转幸运币失败：用户ID缺失', undefined, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.unauthorized('用户身份验证失败'),\n        { status: 401 }\n      );\n    }\n\n    requestLogger.info('开始余额转幸运币操作', { userId: user.userId }, {\n      endpoint: '/api/wallet/transfer',\n      method: 'POST'\n    });\n\n    // 解析请求体\n    let body: TransferRequest;\n    try {\n      body = await request.json();\n    } catch (error) {\n      requestLogger.warn('余额转幸运币失败：请求体格式错误', error as Error, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('请求体格式错误'),\n        { status: 400 }\n      );\n    }\n\n    // 验证金额参数\n    const { amount } = body;\n    \n    if (typeof amount !== 'number' || isNaN(amount)) {\n      requestLogger.warn('余额转幸运币失败：金额参数无效', { amount }, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('金额参数无效'),\n        { status: 400 }\n      );\n    }\n\n    if (amount <= 0) {\n      requestLogger.warn('余额转幸运币失败：转换金额必须大于0', { amount }, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest('转换金额必须大于0'),\n        { status: 400 }\n      );\n    }\n\n    // 检查余额是否充足\n    const balanceCheck = await DatabaseLockManager.checkUserBalanceSufficient(\n      user.userId,\n      amount,\n      'balance'\n    );\n\n    if (!balanceCheck.sufficient) {\n      requestLogger.warn('余额转幸运币失败：余额不足', { \n        userId: user.userId,\n        requiredAmount: amount,\n        currentBalance: balanceCheck.currentBalance\n      }, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.insufficientBalance(`余额不足，当前余额：${balanceCheck.currentBalance} TJS`),\n        { status: 400 }\n      );\n    }\n\n    // 使用参数化查询防止SQL注入\n    const transferResult = await prisma.$queryRawUnsafe`\n      SELECT * FROM transfer_balance_to_luckycoins(${user.userId}::uuid, ${amount})\n    `;\n\n    // 检查转换结果\n    if (!transferResult || transferResult.length === 0 || !transferResult[0].success) {\n      const errorMessage = transferResult?.[0]?.error_message || '转换操作失败';\n      const currentBalance = transferResult?.[0]?.new_balance || 0;\n      const currentLuckyCoins = transferResult?.[0]?.new_lucky_coins || 0;\n\n      requestLogger.warn('余额转幸运币操作失败', {\n        userId: user.userId,\n        amount,\n        errorMessage,\n        currentBalance,\n        currentLuckyCoins\n      }, {\n        endpoint: '/api/wallet/transfer',\n        method: 'POST'\n      });\n\n      return NextResponse.json<ApiResponse>(\n        ApiResponse.badRequest(errorMessage),\n        { status: 400 }\n      );\n    }\n\n    // 获取转换后的完整余额信息\n    const updatedUser = await prisma.users.findUnique({\n      where: { id: user.userId },\n      select: {\n        balance: true,\n        balanceVersion: true,\n        luckyCoins: true,\n        luckyCoinsVersion: true,\n        platformBalance: true,\n        platformBalanceVersion: true\n      }\n    });\n\n    const duration = Date.now() - startTime;\n\n    requestLogger.info('余额转幸运币操作成功', {\n      userId: user.userId,\n      amount,\n      oldBalance: balanceCheck.currentBalance,\n      newBalance: transferResult[0].new_balance,\n      newLuckyCoins: transferResult[0].new_lucky_coins\n    }, {\n      endpoint: '/api/wallet/transfer',\n      method: 'POST',\n      duration\n    });\n\n    // 构建响应数据\n    const transferData = {\n      userId: user.userId,\n      transfer: {\n        from: 'balance',\n        to: 'luckyCoins',\n        amount: amount,\n        ratio: '1:1',\n        currency: {\n          from: 'TJS',\n          to: 'LC'\n        }\n      },\n      balances: {\n        balance: {\n          amount: parseFloat(transferResult[0].new_balance.toString()),\n          version: updatedUser?.balanceVersion || 1,\n          currency: 'TJS'\n        },\n        luckyCoins: {\n          amount: parseFloat(transferResult[0].new_lucky_coins.toString()),\n          version: updatedUser?.luckyCoinsVersion || 1,\n          currency: 'LC'\n        },\n        platformBalance: {\n          amount: parseFloat(updatedUser?.platformBalance.toString() || '0'),\n          version: updatedUser?.platformBalanceVersion || 1,\n          currency: 'TJS'\n        }\n      }\n    };\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: transferData,\n      message: `转换成功：${amount} TJS → ${amount} LC`\n    });\n\n  } catch (error) {\n    logger.error('余额转幸运币操作异常', error as Error, {\n      userId: user?.userId,\n      endpoint: '/api/wallet/transfer',\n      method: 'POST'\n    });\n\n    return NextResponse.json<ApiResponse>(\n      ApiResponse.internal('转换操作失败，请稍后重试'),\n      { status: 500 }\n    );\n  }\n});","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/withdraw/create-fixed/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'maskSensitiveData' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maskSensitiveData' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'AppError' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppError' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"complexity","severity":2,"message":"Async function 'POST' has a complexity of 25. Maximum allowed is 10.","line":38,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":429,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":89,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":89,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2445,2458],"text":"(contentLength != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2445,2458],"text":"(contentLength ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2445,2458],"text":"(Boolean(contentLength))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":222,"column":23,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":222,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":227,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":227,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6283,6301],"text":"(Boolean(userData.is_active))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7559,7599],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8101,8139],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":333,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":333,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9218,9258],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11269,11272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11269,11272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":415,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":415,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11280,11314],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":451,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":451,"endColumn":22,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12249,12261],"text":"(Boolean(verification))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12475,12508],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":481,"column":19,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":481,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12948,12953],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[12948,12953],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12948,12953],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":481,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":481,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12954,12956],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":499,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":499,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13330,13379],"text":"((data?.reduce((sum, item) => sum + item.amount, 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13330,13379],"text":"((data?.reduce((sum, item) => sum + item.amount, 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13330,13379],"text":"(Boolean((data?.reduce((sum, item) => sum + item.amount, 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":499,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":499,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13380,13382],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":517,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":517,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13787,13836],"text":"((data?.reduce((sum, item) => sum + item.amount, 0)) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13787,13836],"text":"((data?.reduce((sum, item) => sum + item.amount, 0)) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13787,13836],"text":"(Boolean((data?.reduce((sum, item) => sum + item.amount, 0))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":517,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":517,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13837,13839],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":2,"message":"Async function 'assessWithdrawRisk' has a complexity of 12. Maximum allowed is 10.","line":523,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":587,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":578,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":578,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15275,15290],"text":"(data.userAgent == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15276,15290],"text":"(data.userAgent ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15275,15290],"text":"(!Boolean(data.userAgent))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":584,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":584,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15415,15447],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":597,"column":17,"nodeType":"CallExpression","messageId":"substring","endLine":597,"endColumn":40,"fix":{"range":[15628,15637],"text":"slice"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":598,"column":15,"nodeType":"CallExpression","messageId":"substring","endLine":598,"endColumn":52,"fix":{"range":[15667,15695],"text":"slice(Math.max(0, account.length - 4)"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":609,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15851,15854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15851,15854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":622,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":622,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16142,16176],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":632,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":632,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16292,16295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16292,16295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":648,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":648,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16678,16712],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// 创建提现申请（增强安全版本）\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { calculateWithdrawFee } from '@/lib/utils';\nimport type { ApiResponse, WithdrawRequest } from '@/types';\nimport {\n  validateWithdrawRequest,\n  validateAndSanitizeAmount,\n  validateIPAddress,\n  setSecurityResponseHeaders,\n  getClientIP,\n  RateLimitChecker,\n  maskSensitiveData,\n  checkSQLInjectionRisk,\n  detectXSSAttempt\n} from '@/lib/security-validation';\nimport { AppError, ErrorFactory } from '@/lib/errors';\n\n// 速率限制检查器\nconst rateLimitChecker = new RateLimitChecker();\n\n// 提现操作频率限制配置\nconst WITHDRAW_RATE_LIMITS = {\n  CREATE: { limit: 5, windowMs: 24 * 60 * 60 * 1000 },      // 每天最多5次提现\n  VERIFICATION: { limit: 3, windowMs: 60 * 60 * 1000 },      // 每小时最多3次验证码请求\n};\n\n// 提现限制配置\nconst WITHDRAW_CONFIG = {\n  MIN_AMOUNT: 50,        // 最低提现金额\n  MAX_AMOUNT: 10000,     // 最高提现金额\n  DAILY_LIMIT: 50000,    // 每日提现总限制\n  MONTHLY_LIMIT: 500000, // 每月提现总限制\n  MIN_INTERVAL: 30 * 60 * 1000, // 最短提现间隔（30分钟）\n};\n\nexport async function POST(request: Request) {\n  try {\n    const startTime = Date.now();\n    \n    // 1. 用户认证\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { \n        status: 401,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 2. 获取客户端信息\n    const clientIP = getClientIP(request);\n    const userAgent = request.headers.get('user-agent');\n    \n    // 验证IP地址格式\n    if (clientIP !== 'unknown' && !validateIPAddress(clientIP)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '无效的IP地址'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 3. 请求频率限制检查\n    const rateLimitKey = `${user.userId}:${clientIP}:withdraw_create`;\n    const rateLimitResult = rateLimitChecker.check(\n      rateLimitKey,\n      WITHDRAW_RATE_LIMITS.CREATE.limit,\n      WITHDRAW_RATE_LIMITS.CREATE.windowMs\n    );\n\n    if (!rateLimitResult.allowed) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '提现操作过于频繁，请明日再来'\n      }, {\n        status: 429,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 4. 请求体解析和大小限制\n    const contentLength = request.headers.get('content-length');\n    if (contentLength && parseInt(contentLength) > 5 * 1024) { // 5KB限制\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '请求数据过大'\n      }, {\n        status: 413,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    const body = await request.json();\n    \n    // 5. 输入验证和清洗\n    const validatedData = validateWithdrawRequest(body);\n    \n    // 检查恶意输入\n    const inputData = [\n      validatedData.paymentAccount,\n      validatedData.verificationCode\n    ];\n    if (inputData.some(data => checkSQLInjectionRisk(data) || detectXSSAttempt(data))) {\n      await logSecurityEvent({\n        type: 'WITHDRAW_SUSPICIOUS_INPUT',\n        userId: user.userId,\n        ip: clientIP,\n        details: { \n          input: inputData,\n          endpoint: '/api/withdraw/create',\n          method: 'POST'\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '输入包含非法内容'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 6. 验证码验证\n    const isCodeValid = await verifySMSCode(\n      user.userId,\n      validatedData.paymentAccount,\n      validatedData.verificationCode\n    );\n    \n    if (!isCodeValid) {\n      await logSecurityEvent({\n        type: 'WITHDRAW_INVALID_CODE',\n        userId: user.userId,\n        ip: clientIP,\n        details: { \n          account: maskAccountNumber(validatedData.paymentAccount),\n          endpoint: '/api/withdraw/create'\n        }\n      });\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '验证码错误或已过期'\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 7. 提现金额验证\n    const amount = validateAndSanitizeAmount(validatedData.amount);\n    \n    if (amount < WITHDRAW_CONFIG.MIN_AMOUNT) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `最低提现金额为 ${WITHDRAW_CONFIG.MIN_AMOUNT} TJS`\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n    \n    if (amount > WITHDRAW_CONFIG.MAX_AMOUNT) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `单次最高提现金额为 ${WITHDRAW_CONFIG.MAX_AMOUNT} TJS`\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 8. 提现频率检查\n    const recentWithdraw = await checkWithdrawFrequency(user.userId);\n    if (recentWithdraw.tooFrequent) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '提现操作过于频繁，请稍后再试'\n      }, {\n        status: 429,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 9. 业务限制检查\n    const dailyTotal = await getWithdrawTotalToday(user.userId);\n    if (dailyTotal + amount > WITHDRAW_CONFIG.DAILY_LIMIT) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `今日提现额度已用完（${dailyTotal}/${WITHDRAW_CONFIG.DAILY_LIMIT} TJS）`\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    const monthlyTotal = await getWithdrawTotalThisMonth(user.userId);\n    if (monthlyTotal + amount > WITHDRAW_CONFIG.MONTHLY_LIMIT) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `本月提现额度已用完（${monthlyTotal}/${WITHDRAW_CONFIG.MONTHLY_LIMIT} TJS）`\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 10. 查询用户信息\n    const { data: userData, error: userError } = await supabaseAdmin\n      .from('users')\n      .select('platform_balance, phone, is_active')\n      .eq('id', user.userId)\n      .single();\n\n    if (userError || !userData) {\n      throw new Error('用户不存在');\n    }\n\n    // 验证用户状态\n    if (!userData.is_active) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '账户已被冻结，无法提现'\n      }, {\n        status: 403,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 11. 计算手续费和余额验证\n    const fee = calculateWithdrawFee(amount);\n    const totalRequired = amount + fee;\n\n    // 检查余额\n    if (userData.platform_balance < totalRequired) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `余额不足。需要 ${totalRequired} TJS（含手续费 ${fee} TJS），当前余额 ${userData.platform_balance} TJS`\n      }, {\n        status: 400,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 12. 创建提现申请（使用事务保证原子性）\n    const { data: withdrawRequest, error: insertError } = await supabaseAdmin\n      .from('withdraw_requests')\n      .insert({\n        user_id: user.userId,\n        amount,\n        fee,\n        actual_amount: amount - fee,\n        withdraw_method: validatedData.paymentMethod,\n        account_info: { \n          account: maskAccountNumber(validatedData.paymentAccount),\n          verified: true\n        },\n        status: 'pending',\n        ip_address: clientIP,\n        user_agent: userAgent\n      })\n      .select()\n      .single();\n\n    if (insertError) {\n      console.error('创建提现申请失败:', insertError);\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '创建提现申请失败'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 13. 扣除余额（使用原子操作）\n    const { error: updateError } = await supabaseAdmin.rpc('atomic_balance_deduction', {\n      p_user_id: user.userId,\n      p_deduction_amount: totalRequired,\n      p_operation_type: 'withdraw',\n      p_related_id: withdrawRequest.id\n    });\n\n    if (updateError) {\n      console.error('扣除余额失败:', updateError);\n      \n      // 增强的回滚机制\n      try {\n        // 1. 回滚提现申请状态\n        await supabaseAdmin\n          .from('withdraw_requests')\n          .update({ \n            status: 'failed',\n            error_message: '余额操作失败',\n            processed_at: new Date().toISOString()\n          })\n          .eq('id', withdrawRequest.id);\n        \n        // 2. 记录回滚操作日志\n        await logSecurityEvent({\n          type: 'WITHDRAW_ROLLBACK',\n          userId: user.userId,\n          ip: clientIP,\n          details: { \n            withdrawId: withdrawRequest.id,\n            amount,\n            error: updateError.message,\n            rollbackTime: new Date().toISOString()\n          }\n        });\n        \n        // 3. 记录用户活动\n        await logUserActivity({\n          userId: user.userId,\n          action: 'WITHDRAW_ROLLBACK',\n          details: {\n            withdrawId: withdrawRequest.id,\n            amount,\n            error: updateError.message,\n            rollbackReason: '余额扣除失败'\n          },\n          ip: clientIP,\n          userAgent\n        });\n      } catch (rollbackError) {\n        console.error('回滚操作失败:', rollbackError);\n        // 如果回滚也失败，需要人工干预标记\n        await supabaseAdmin\n          .from('withdraw_requests')\n          .update({ \n            requires_manual_review: true,\n            risk_score: 100,\n            error_message: '系统异常：需要人工干预'\n          })\n          .eq('id', withdrawRequest.id);\n      }\n      \n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '余额操作失败，正在尝试回滚',\n        code: 'BALANCE_DEDUCTION_FAILED'\n      }, {\n        status: 500,\n        headers: setSecurityResponseHeaders(new Headers())\n      });\n    }\n\n    // 14. 记录交易日志\n    await logUserActivity({\n      userId: user.userId,\n      action: 'CREATE_WITHDRAW',\n      details: {\n        withdrawId: withdrawRequest.id,\n        amount,\n        fee,\n        method: validatedData.paymentMethod,\n        operationTime: Date.now() - startTime\n      },\n      ip: clientIP,\n      userAgent\n    });\n\n    // 15. 风险评估和标记\n    const riskScore = await assessWithdrawRisk({\n      userId: user.userId,\n      amount,\n      clientIP,\n      userAgent\n    });\n    \n    if (riskScore > 80) {\n      // 高风险标记，需要人工审核\n      await supabaseAdmin\n        .from('withdraw_requests')\n        .update({ \n          risk_score: riskScore,\n          requires_manual_review: true \n        })\n        .eq('id', withdrawRequest.id);\n    }\n\n    // 16. 返回响应\n    const response = NextResponse.json<ApiResponse<WithdrawRequest>>({\n      success: true,\n      data: {\n        ...withdrawRequest,\n        account_info: {\n          ...withdrawRequest.account_info,\n          account: maskAccountNumber(validatedData.paymentAccount)\n        }\n      },\n      message: riskScore > 80 ? \n        '提现申请提交成功，正在进行安全审核' : \n        '提现申请提交成功，请等待审核',\n      meta: {\n        rateLimit: {\n          remaining: rateLimitResult.remaining,\n          resetTime: new Date(rateLimitResult.resetTime).toISOString()\n        },\n        riskScore,\n        requiresManualReview: riskScore > 80\n      }\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n\n  } catch (error: any) {\n    console.error('创建提现申请失败:', error);\n    \n    const appError = ErrorFactory.wrapError(error, '创建提现申请');\n    const response = NextResponse.json<ApiResponse>({\n      success: false,\n      error: appError.message,\n      code: appError.code\n    }, {\n      status: appError.statusCode || 500,\n      headers: setSecurityResponseHeaders(new Headers())\n    });\n\n    return setSecurityResponseHeaders(response.headers);\n  }\n}\n\n// ============= 工具函数 =============\n\n/**\n * 验证码验证\n */\nasync function verifySMSCode(userId: string, account: string, code: string): Promise<boolean> {\n  try {\n    // 检查验证码是否存在且未过期\n    const { data: verification } = await supabaseAdmin\n      .from('sms_verifications')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('phone', account)\n      .eq('code', code)\n      .eq('type', 'withdraw_verification')\n      .gte('expires_at', new Date().toISOString())\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (!verification) {\n      return false;\n    }\n\n    // 标记验证码为已使用\n    await supabaseAdmin\n      .from('sms_verifications')\n      .update({ is_used: true })\n      .eq('id', verification.id);\n\n    return true;\n  } catch (error) {\n    console.error('验证码验证失败:', error);\n    return false;\n  }\n}\n\n/**\n * 检查提现频率\n */\nasync function checkWithdrawFrequency(userId: string): Promise<{ tooFrequent: boolean }> {\n  const recentTime = new Date(Date.now() - WITHDRAW_CONFIG.MIN_INTERVAL);\n  \n  const { count } = await supabaseAdmin\n    .from('withdraw_requests')\n    .select('id', { count: 'exact', head: true })\n    .eq('user_id', userId)\n    .gte('created_at', recentTime.toISOString());\n\n  return {\n    tooFrequent: (count || 0) > 0\n  };\n}\n\n/**\n * 获取今日提现总额\n */\nasync function getWithdrawTotalToday(userId: string): Promise<number> {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  \n  const { data } = await supabaseAdmin\n    .from('withdraw_requests')\n    .select('amount')\n    .eq('user_id', userId)\n    .eq('status', 'completed')\n    .gte('created_at', today.toISOString());\n\n  return data?.reduce((sum, item) => sum + item.amount, 0) || 0;\n}\n\n/**\n * 获取本月提现总额\n */\nasync function getWithdrawTotalThisMonth(userId: string): Promise<number> {\n  const thisMonth = new Date();\n  thisMonth.setDate(1);\n  thisMonth.setHours(0, 0, 0, 0);\n  \n  const { data } = await supabaseAdmin\n    .from('withdraw_requests')\n    .select('amount')\n    .eq('user_id', userId)\n    .eq('status', 'completed')\n    .gte('created_at', thisMonth.toISOString());\n\n  return data?.reduce((sum, item) => sum + item.amount, 0) || 0;\n}\n\n/**\n * 提现风险评估\n */\nasync function assessWithdrawRisk(data: {\n  userId: string;\n  amount: number;\n  clientIP: string;\n  userAgent?: string | null;\n}): Promise<number> {\n  let riskScore = 0;\n\n  try {\n    // 1. 大额提现风险\n    if (data.amount > 5000) {\n      riskScore += 30;\n    } else if (data.amount > 1000) {\n      riskScore += 15;\n    }\n\n    // 2. 提现频率风险\n    const { data: recentWithdraws } = await supabaseAdmin\n      .from('withdraw_requests')\n      .select('amount, created_at')\n      .eq('user_id', data.userId)\n      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());\n\n    if (recentWithdraws && recentWithdraws.length > 3) {\n      riskScore += 20;\n    }\n\n    // 3. IP地址风险检查\n    const { data: ipHistory } = await supabaseAdmin\n      .from('withdraw_requests')\n      .select('ip_address')\n      .eq('user_id', data.userId)\n      .neq('ip_address', data.clientIP)\n      .order('created_at', { ascending: false })\n      .limit(5);\n\n    if (ipHistory && ipHistory.length > 0) {\n      riskScore += 25; // IP地址变化\n    }\n\n    // 4. 新用户风险\n    const { data: userData } = await supabaseAdmin\n      .from('users')\n      .select('created_at')\n      .eq('id', data.userId)\n      .single();\n\n    if (userData) {\n      const userAge = Date.now() - new Date(userData.created_at).getTime();\n      if (userAge < 7 * 24 * 60 * 60 * 1000) { // 注册不到7天\n        riskScore += 20;\n      }\n    }\n\n    // 5. User-Agent检查\n    if (!data.userAgent || data.userAgent.length < 10) {\n      riskScore += 10;\n    }\n\n    return Math.min(100, riskScore);\n  } catch (error) {\n    console.error('风险评估失败:', error);\n    return 50; // 中等风险\n  }\n}\n\n/**\n * 账号脱敏\n */\nfunction maskAccountNumber(account: string): string {\n  if (account.length <= 4) {\n    return account;\n  }\n  \n  const start = account.substring(0, 4);\n  const end = account.substring(account.length - 4);\n  return `${start}****${end}`;\n}\n\n/**\n * 安全事件记录\n */\nasync function logSecurityEvent(event: {\n  type: string;\n  userId?: string;\n  ip: string;\n  details: any;\n}) {\n  try {\n    await supabaseAdmin\n      .from('security_logs')\n      .insert({\n        event_type: event.type,\n        user_id: event.userId,\n        ip_address: event.ip,\n        details: event.details,\n        created_at: new Date().toISOString()\n      });\n  } catch (error) {\n    console.error('记录安全事件失败:', error);\n  }\n}\n\n/**\n * 用户活动记录\n */\nasync function logUserActivity(activity: {\n  userId: string;\n  action: string;\n  details: any;\n  ip: string;\n  userAgent?: string | null;\n}) {\n  try {\n    await supabaseAdmin\n      .from('user_activities')\n      .insert({\n        user_id: activity.userId,\n        action: activity.action,\n        details: activity.details,\n        ip_address: activity.ip,\n        user_agent: activity.userAgent,\n        created_at: new Date().toISOString()\n      });\n  } catch (error) {\n    console.error('记录用户活动失败:', error);\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/withdraw/create/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"complexity","severity":2,"message":"Async arrow function has a complexity of 20. Maximum allowed is 10.","line":12,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":184,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1067,1080],"text":"(Boolean(paymentMethod))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":41,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":41,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1275,1289],"text":"(Boolean(paymentAccount))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":73,"column":23,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":73,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2552,2555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2552,2555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2653,2701],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4613,4616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4613,4616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4624,4658],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":181,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":181,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5118,5131],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5132,5134],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":188,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":188,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":188,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":42}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 创建提现申请\nimport { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport { calculateWithdrawFee } from '@/lib/utils';\nimport { validationEngine } from '@/lib/validation';\nimport { withRateLimit, withdrawRateLimit } from '@/lib/rate-limit-middleware';\nimport { rateLimitMonitor } from '@/lib/rate-limit-monitor';\nimport type { ApiResponse, WithdrawRequest } from '@/types';\n\n// 应用速率限制的提现处理函数\nconst handleWithdrawRequest = async (request: NextRequest) => {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { amount, paymentMethod, paymentAccount } = body;\n\n    // 基础参数验证\n    if (amount === undefined || amount === null) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '提现金额是必填项'\n      }, { status: 400 });\n    }\n\n    if (!paymentMethod || !['alif_mobi', 'dc_bank'].includes(paymentMethod)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '无效的支付方式'\n      }, { status: 400 });\n    }\n\n    if (!paymentAccount || typeof paymentAccount !== 'string') {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '请提供有效的收款账号'\n      }, { status: 400 });\n    }\n\n    // 验证提现金额\n    const amountNum = Number(amount);\n    if (isNaN(amountNum)) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '提现金额必须是有效数字'\n      }, { status: 400 });\n    }\n\n    // 验证账户信息\n    const accountValidation = validationEngine.validateAccountInfo(paymentAccount, '收款账号');\n    if (!accountValidation.isValid) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: accountValidation.error\n      }, { status: 400 });\n    }\n\n    // 查询用户余额\n    const { data: userData, error: userError } = await supabaseAdmin\n      .from('users')\n      .select('platform_balance')\n      .eq('id', user.userId)\n      .single();\n\n    if (userError || !userData) {\n      throw new Error('用户不存在');\n    }\n\n    // 获取系统验证配置\n    try {\n      const { data: settings } = await supabaseAdmin\n        .from('system_validation_settings')\n        .select('*');\n      \n      if (settings) {\n        const config = settings.reduce((acc, setting) => {\n          acc[setting.setting_key] = setting.parsed_value;\n          return acc;\n        }, {} as any);\n        \n        validationEngine.setConfig(config);\n      }\n    } catch (configError) {\n      console.warn('无法获取系统验证配置，使用默认设置:', configError);\n    }\n\n    // 严格的提现金额验证\n    const withdrawValidation = validationEngine.validateWithdrawAmount(amountNum, userData.platform_balance);\n    if (!withdrawValidation.isValid) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: withdrawValidation.error\n      }, { status: 400 });\n    }\n\n    // 计算手续费\n    const fee = calculateWithdrawFee(amountNum);\n    const totalRequired = amountNum + fee;\n\n    // 重新检查余额（包含手续费）\n    if (userData.platform_balance < totalRequired) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: `余额不足。需要 ${totalRequired} TJS（含手续费 ${fee} TJS），当前余额 ${userData.platform_balance} TJS`\n      }, { status: 400 });\n    }\n\n    // 创建提现申请\n    const { data: withdrawRequest, error: insertError } = await supabaseAdmin\n      .from('withdraw_requests')\n      .insert({\n        user_id: user.userId,\n        amount: amountNum,\n        fee,\n        actual_amount: amountNum - fee,\n        withdraw_method: paymentMethod,\n        account_info: { account: paymentAccount },\n        status: 'pending'\n      })\n      .select()\n      .single();\n\n    if (insertError) {throw insertError;}\n\n    // 扣除余额\n    const { error: updateError } = await supabaseAdmin\n      .from('users')\n      .update({ \n        platform_balance: userData.platform_balance - totalRequired \n      })\n      .eq('id', user.userId);\n\n    if (updateError) {throw updateError;}\n\n    // 记录交易\n    await supabaseAdmin\n      .from('transactions')\n      .insert({\n        user_id: user.userId,\n        type: 'withdraw',\n        amount: -totalRequired,\n        balance_type: 'platform_balance',\n        related_order_id: withdrawRequest.id,\n        description: `提现申请 ${amountNum} TJS（手续费 ${fee} TJS）`\n      });\n\n    return NextResponse.json<ApiResponse<WithdrawRequest>>({\n      success: true,\n      data: withdrawRequest,\n      message: '提现申请提交成功，请等待审核'\n    });\n\n  } catch (error: any) {\n    console.error('创建提现申请失败:', error);\n    \n    // 记录速率限制监控数据\n    rateLimitMonitor.recordMetric({\n      timestamp: Date.now(),\n      endpoint: '/api/withdraw/create',\n      identifier: 'unknown',\n      hits: 1,\n      blocked: false,\n      strategy: 'token_bucket',\n      windowMs: 60 * 60 * 1000,\n      limit: 3,\n      remaining: 0,\n      resetTime: Date.now() + 60 * 60 * 1000,\n      responseTime: Date.now()\n    });\n\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '创建提现申请失败'\n    }, { status: 500 });\n  }\n};\n\n// 应用速率限制并导出处理函数\nconst processRequest = withRateLimit(handleWithdrawRequest, withdrawRateLimit({\n  onLimitExceeded: async (result, request) => {\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: '提现操作过于频繁，请稍后再试',\n      rateLimit: {\n        limit: result.totalHits + result.remaining,\n        remaining: result.remaining,\n        resetTime: new Date(result.resetTime).toISOString()\n      }\n    }, {\n      status: 429,\n      headers: {\n        'X-RateLimit-Limit': (result.totalHits + result.remaining).toString(),\n        'X-RateLimit-Remaining': result.remaining.toString(),\n        'X-RateLimit-Reset': result.resetTime.toString()\n      }\n    });\n  }\n}));\n\n// 导出主处理函数\nexport { processRequest as POST };\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/app/api/withdraw/list/route.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'WithdrawRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WithdrawRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":43},{"ruleId":"complexity","severity":2,"message":"Async function 'GET' has a complexity of 12. Maximum allowed is 10.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":62,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":21,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":21,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[609,633],"text":"(searchParams.get('page') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[609,633],"text":"(searchParams.get('page') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[609,633],"text":"(Boolean(searchParams.get('page')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[634,636],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[670,695],"text":"(searchParams.get('limit') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[670,695],"text":"(searchParams.get('limit') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[670,695],"text":"(Boolean(searchParams.get('limit')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[696,698],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[963,969],"text":"(status != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[963,969],"text":"(status ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[963,969],"text":"(Boolean(status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":47,"column":22,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":47,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":48,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":48,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1384,1389],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1384,1389],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1384,1389],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1390,1392],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":51,"column":32,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":51,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1456,1461],"text":"(count != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1456,1461],"text":"(count ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1456,1461],"text":"(Boolean(count))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1462,1464],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1512,1515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1512,1515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1523,1557],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":59,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":59,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1637,1650],"text":"(Boolean(error.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":59,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":59,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1651,1653],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 获取提现申请列表\nimport { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { getUserFromRequest } from '@/lib/auth';\nimport type { ApiResponse, WithdrawRequest } from '@/types';\n\nexport async function GET(request: Request) {\n  try {\n    // 验证用户\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: '未授权访问'\n      }, { status: 401 });\n    }\n\n    // 获取查询参数\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = (page - 1) * limit;\n\n    // 构建查询\n    let query = supabaseAdmin\n      .from('withdraw_requests')\n      .select('*', { count: 'exact' })\n      .eq('userId', user.userId)\n      .order('createdAt', { ascending: false });\n\n    // 状态筛选\n    if (status && ['pending', 'processing', 'completed', 'rejected'].includes(status)) {\n      query = query.eq('status', status);\n    }\n\n    // 分页\n    query = query.range(offset, offset + limit - 1);\n\n    const { data: withdrawals, error, count } = await query;\n\n    if (error) {throw error;}\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        withdrawals: withdrawals || [],\n        total: count || 0,\n        page,\n        limit,\n        totalPages: Math.ceil((count || 0) / limit)\n      }\n    });\n\n  } catch (error: any) {\n    console.error('获取提现列表失败:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: error.message || '获取提现列表失败'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]}]