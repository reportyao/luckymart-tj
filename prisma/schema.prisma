// Prisma Schema for LuckyMart TJ
// 注意：根据Supabase最佳实践，不使用Prisma relations，手动查询关联数据

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                  String              @id @default(uuid()) @db.Uuid
  telegramId          String              @unique @map("telegram_id")
  username            String?             @db.VarChar(255)
  firstName           String              @map("first_name") @db.VarChar(255)
  lastName            String?             @map("last_name") @db.VarChar(255)
  avatarUrl           String?             @map("avatar_url")
  language            String              @default("zh") @db.VarChar(5)
  balance             Decimal             @default(0) @db.Decimal(10, 2)
  platformBalance     Decimal             @default(0) @map("platform_balance") @db.Decimal(10, 2)
  vipLevel            Int                 @default(0) @map("vip_level")
  totalSpent          Decimal             @default(0) @map("total_spent") @db.Decimal(10, 2)
  freeDailyCount      Int                 @default(0) @map("free_daily_count")
  lastFreeResetDate   DateTime            @default(now()) @map("last_free_reset_date") @db.Date
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @default(now()) @updatedAt @map("updated_at")
}

model userAddresses {
  id            String   @id @default(uuid()) @db.Uuid @map("id")
  userId        String   @map("user_id") @db.Uuid
  recipientName String   @map("recipient_name") @db.VarChar(255)
  phone         String   @db.VarChar(50)
  city          String   @db.VarChar(100)
  district      String?  @db.VarChar(100)
  addressLine   String   @map("address_line")
  postalCode    String?  @map("postal_code") @db.VarChar(20)
  isDefault     Boolean  @default(false) @map("is_default")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([userId, isDefault])
  @@map("user_addresses")
}

model products {
  id              String   @id @default(uuid()) @db.Uuid
  nameZh          String   @map("name_zh") @db.VarChar(255)
  nameEn          String   @map("name_en") @db.VarChar(255)
  nameRu          String   @map("name_ru") @db.VarChar(255)
  descriptionZh   String?  @map("description_zh")
  descriptionEn   String?  @map("description_en")
  descriptionRu   String?  @map("description_ru")
  images          String[]
  marketPrice     Decimal  @map("market_price") @db.Decimal(10, 2)
  totalShares     Int      @map("total_shares")
  pricePerShare   Decimal  @default(1.00) @map("price_per_share") @db.Decimal(10, 2)
  category        String?  @db.VarChar(100)
  stock           Int      @default(0)
  status          String   @default("active") @db.VarChar(20)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([status])
  @@index([category])
}

model lotteryRounds {
  id                String   @id @default(uuid()) @db.Uuid
  productId         String   @map("product_id") @db.Uuid
  roundNumber       Int      @map("round_number")
  totalShares       Int      @map("total_shares")
  pricePerShare     Decimal  @default(1.00) @map("price_per_share") @db.Decimal(10, 2)
  soldShares        Int      @default(0) @map("sold_shares")
  status            String   @default("active") @db.VarChar(20)
  winnerUserId      String?  @map("winner_user_id") @db.Uuid
  winningNumber     Int?     @map("winning_number")
  drawTime          DateTime? @map("draw_time")
  drawAlgorithmData Json?    @map("draw_algorithm_data")
  participants      Int      @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([productId, roundNumber])
  @@index([productId])
  @@index([status])
  @@map("lottery_rounds")
}

model participations {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  roundId     String   @map("round_id") @db.Uuid
  productId   String   @map("product_id") @db.Uuid
  numbers     Int[]
  sharesCount Int      @map("shares_count")
  type        String   @db.VarChar(10)
  cost        Decimal  @default(0) @db.Decimal(10, 2)
  isWinner    Boolean  @default(false) @map("is_winner")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([userId, roundId])
  @@index([roundId])
  @@index([isWinner])
}

model orders {
  id                String   @id @default(uuid()) @db.Uuid
  orderNumber       String   @unique @map("order_number") @db.VarChar(50)
  userId            String   @map("user_id") @db.Uuid
  roundId           String?  @map("round_id") @db.Uuid
  productId         String?  @map("product_id") @db.Uuid
  type              String   @db.VarChar(20)
  quantity          Int      @default(1)
  totalAmount       Decimal  @map("total_amount") @db.Decimal(10, 2)
  status            String   @default("pending") @db.VarChar(20)
  paymentMethod     String?  @map("payment_method") @db.VarChar(50)
  paymentStatus     String   @default("pending") @map("payment_status") @db.VarChar(20)
  fulfillmentStatus String   @default("pending") @map("fulfillment_status") @db.VarChar(20)
  shippingAddress   Json?    @map("shipping_address")
  trackingNumber    String?  @map("tracking_number") @db.VarChar(255)
  notes             String?
  // 转售相关字段
  isResale          Boolean  @default(false) @map("is_resale")
  resalePrice       Decimal? @map("resale_price") @db.Decimal(10, 2)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([fulfillmentStatus])
}

model transactions {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  type           String   @db.VarChar(50)
  amount         Decimal  @db.Decimal(10, 2)
  balanceType    String   @map("balance_type") @db.VarChar(20)
  relatedOrderId String?  @map("related_order_id") @db.Uuid
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model resaleListings {
  id           String    @id @default(uuid()) @db.Uuid
  sellerUserId String    @map("seller_user_id") @db.Uuid
  buyerUserId  String?   @map("buyer_user_id") @db.Uuid
  orderId      String    @map("order_id") @db.Uuid
  productId    String?   @map("product_id") @db.Uuid
  listingPrice Decimal   @map("listing_price") @db.Decimal(10, 2)
  platformFee  Decimal   @map("platform_fee") @db.Decimal(10, 2)
  status       String    @default("pending") @db.VarChar(20)
  listedAt     DateTime  @default(now()) @map("listed_at")
  soldAt       DateTime? @map("sold_at")

  @@index([sellerUserId])
  @@index([status])
  @@index([orderId])
  @@map("resale_listings")
}

model withdrawRequests {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  amount         Decimal   @db.Decimal(10, 2)
  fee            Decimal   @db.Decimal(10, 2)
  actualAmount   Decimal   @map("actual_amount") @db.Decimal(10, 2)
  withdrawMethod String    @map("withdraw_method") @db.VarChar(20)
  accountInfo    Json      @map("account_info")
  status         String    @default("pending") @db.VarChar(20)
  rejectReason   String?   @map("reject_reason")
  adminNote      String?   @map("admin_note")
  processedAt    DateTime? @map("processed_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("withdraw_requests")
}

model rechargePackages {
  id          String   @id @default(uuid()) @db.Uuid
  nameZh      String   @map("name_zh") @db.VarChar(255)
  nameEn      String   @map("name_en") @db.VarChar(255)
  nameRu      String   @map("name_ru") @db.VarChar(255)
  price       Decimal  @db.Decimal(10, 2)
  coins       Int
  bonusCoins  Int      @default(0) @map("bonus_coins")
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("recharge_packages")
}

model notifications {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  type      String    @db.VarChar(50)
  content   String
  status    String    @default("pending") @db.VarChar(20)
  error     String?
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([status])
}

model admins {
  id           String    @id @default(uuid()) @db.Uuid
  username     String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  role         String    @default("admin") @db.VarChar(50)
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
}
