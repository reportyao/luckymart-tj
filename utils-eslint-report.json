[{"filePath":"/workspace/luckymart-tj/utils/api-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[796,799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[796,799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[813,816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[813,816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":74,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":74,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":32,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3144,3207],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3556,3593],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3622,3669],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"complexity","severity":2,"message":"Async method 'fetchWithIncrementalSync' has a complexity of 14. Maximum allowed is 10.","line":234,"column":33,"nodeType":"FunctionExpression","messageId":"complex","endLine":364,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":257,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":257,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6348,6358],"text":"Boolean(cachedData)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":261,"column":17,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":261,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":309,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":309,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8016,8028],"text":"(Boolean(data.version))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":309,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":309,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8029,8031],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":316,"column":11,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":316,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":332,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":332,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8517,8564],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":336,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":336,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8676,8686],"text":"Boolean(cachedData)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":349,"column":11,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":349,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":403,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":403,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":403,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":403,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":403,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10420,10423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10420,10423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useIndexedDB\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":404,"column":25,"nodeType":"Identifier","endLine":404,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10565,10568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10565,10568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":408,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":408,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10612,10618],"text":"(Boolean(cached))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":408,"column":18,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":408,"endColumn":30,"fix":{"range":[10620,10632],"text":"{return null;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":419,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10809,10812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10809,10812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useIndexedDB\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":420,"column":25,"nodeType":"Identifier","endLine":420,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":446,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":446,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11496,11529],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":452,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":452,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11611,11614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11611,11614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":452,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":452,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11662,11665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11662,11665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'mergedData' is never reassigned. Use 'const' instead.","line":453,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":453,"endColumn":19,"fix":{"range":[11672,11705],"text":"const mergedData = { ...baseData };"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":459,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":459,"endColumn":70,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11875,11903],"text":"(Boolean(mergedData[update.tableName]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":459,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":459,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11904,11906],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11981,11984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11981,11984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":462,"column":13,"nodeType":"MemberExpression","endLine":462,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":462,"column":56,"nodeType":"MemberExpression","endLine":462,"endColumn":91},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":469,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":469,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12302,12330],"text":"Boolean(mergedData[update.tableName])"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":471,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12435,12438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12435,12438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":483,"column":29,"nodeType":"CallExpression","messageId":"substr","endLine":483,"endColumn":68,"fix":{"range":[12657,12668],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":489,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":489,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12787,12796],"text":"clientId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12788,12796],"text":"(clientId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12787,12796],"text":"!Boolean(clientId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":3,"fixableWarningCount":0,"source":"// api-optimizer.ts - API优化和增量更新机制\nimport { NetworkQuality } from './network-retry';\nimport { useIndexedDB } from './indexeddb-manager';\n\n// 增量更新配置\nexport interface IncrementalUpdateConfig {\n  enabled: boolean;\n  syncInterval: number; // 同步间隔（毫秒）\n  maxRetries: number; // 最大重试次数\n  batchSize: number; // 批处理大小\n  conflictResolution: 'client-wins' | 'server-wins' | 'merge';\n  priority: 'low' | 'normal' | 'high';\n}\n\n// 增量更新项\nexport interface IncrementalUpdateItem {\n  id: string;\n  tableName: string;\n  operation: 'create' | 'update' | 'delete';\n  data: any;\n  timestamp: number;\n  version: number;\n  conflict?: boolean;\n  resolved?: boolean;\n}\n\n// 变更记录\nexport interface ChangeRecord {\n  id: string;\n  tableName: string;\n  recordId: string;\n  operation: 'create' | 'update' | 'delete';\n  oldData?: any;\n  newData?: any;\n  timestamp: number;\n  userId: string;\n  clientId: string;\n  version: number;\n}\n\n// API优化结果\nexport interface APIOptimizationResult<T> {\n  data: T;\n  source: 'network' | 'cache' | 'incremental' | 'fallback';\n  cacheHit: boolean;\n  networkQuality: NetworkQuality;\n  responseTime: number;\n  dataVersion: number;\n  lastUpdated: number;\n}\n\n// API优化器类\nclass APIOptimizer {\n  private static instance: APIOptimizer;\n  private config: Required<IncrementalUpdateConfig>;\n  private changeQueue: ChangeRecord[] = [];\n  private isSyncing = false;\n  private syncTimer?: NodeJS.Timeout;\n\n  private constructor() {\n    this.config = {\n      enabled: true,\n      syncInterval: 30000, // 30秒\n      maxRetries: 3,\n      batchSize: 10,\n      conflictResolution: 'merge',\n      priority: 'normal'\n    };\n\n    this.startPeriodicSync();\n  }\n\n  public static getInstance(): APIOptimizer {\n    if (!APIOptimizer.instance) {\n      APIOptimizer.instance = new APIOptimizer();\n    }\n    return APIOptimizer.instance;\n  }\n\n  // 配置增量更新\n  configure(config: Partial<IncrementalUpdateConfig>): void {\n    this.config = { ...this.config, ...config };\n    \n    if (this.config.enabled) {\n      this.startPeriodicSync();\n    } else {\n      this.stopPeriodicSync();\n    }\n  }\n\n  // 启动定期同步\n  private startPeriodicSync(): void {\n    this.stopPeriodicSync();\n    \n    this.syncTimer = setInterval(async () => {\n      if (!this.isSyncing && this.changeQueue.length > 0) {\n        await this.syncChanges();\n      }\n    }, this.config.syncInterval);\n  }\n\n  // 停止定期同步\n  private stopPeriodicSync(): void {\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = undefined;\n    }\n  }\n\n  // 记录变更\n  recordChange(change: Omit<ChangeRecord, 'id' | 'timestamp'>): string {\n    const changeRecord: ChangeRecord = {\n      ...change,\n      id: this.generateId(),\n      timestamp: Date.now()\n    };\n\n    this.changeQueue.push(changeRecord);\n    \n    // 如果是高优先级变更，立即同步\n    if (this.config.priority === 'high') {\n      this.syncChanges().catch(console.error);\n    }\n\n    return changeRecord.id;\n  }\n\n  // 同步变更到服务器\n  async syncChanges(): Promise<void> {\n    if (this.isSyncing || this.changeQueue.length === 0) {\n      return;\n    }\n\n    this.isSyncing = true;\n    const changesToSync = [...this.changeQueue];\n    this.changeQueue = [];\n\n    try {\n      console.log(`[APIOptimizer] 开始同步 ${changesToSync.length} 个变更`);\n\n      for (let i = 0; i < changesToSync.length; i += this.config.batchSize) {\n        const batch = changesToSync.slice(i, i + this.config.batchSize);\n        await this.syncBatch(batch);\n        \n        // 批处理间隔，避免服务器压力过大\n        if (i + this.config.batchSize < changesToSync.length) {\n          await this.sleep(1000);\n        }\n      }\n\n      console.log('[APIOptimizer] 变更同步完成');\n    } catch (error) {\n      console.error('[APIOptimizer] 变更同步失败:', error);\n      \n      // 将失败的变更重新加入队列\n      this.changeQueue.unshift(...changesToSync);\n    } finally {\n      this.isSyncing = false;\n    }\n  }\n\n  // 同步批处理\n  private async syncBatch(changes: ChangeRecord[]): Promise<void> {\n    const retryConfig = {\n      maxRetries: this.config.maxRetries,\n      baseDelay: 1000,\n      backoffFactor: 2\n    };\n\n    for (const change of changes) {\n      let attempt = 0;\n      let success = false;\n\n      while (attempt < retryConfig.maxRetries && !success) {\n        try {\n          await this.syncSingleChange(change);\n          success = true;\n        } catch (error) {\n          attempt++;\n          if (attempt >= retryConfig.maxRetries) {\n            throw error;\n          }\n          \n          const delay = retryConfig.baseDelay * Math.pow(retryConfig.backoffFactor, attempt - 1);\n          await this.sleep(delay);\n        }\n      }\n    }\n  }\n\n  // 同步单个变更\n  private async syncSingleChange(change: ChangeRecord): Promise<void> {\n    const endpoint = this.getSyncEndpoint(change.tableName);\n    const method = this.getSyncMethod(change.operation);\n\n    const response = await fetch(endpoint, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Client-Id': this.getClientId(),\n        'X-Change-Id': change.id\n      },\n      body: JSON.stringify({\n        operation: change.operation,\n        recordId: change.recordId,\n        data: change.newData,\n        oldData: change.oldData,\n        timestamp: change.timestamp,\n        version: change.version\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`同步失败: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  // 获取同步端点\n  private getSyncEndpoint(tableName: string): string {\n    return `/api/incremental-sync/${tableName}`;\n  }\n\n  // 获取同步方法\n  private getSyncMethod(operation: string): string {\n    switch (operation) {\n      case 'create': return 'POST';\n      case 'update': return 'PUT';\n      case 'delete': return 'DELETE';\n      default: return 'POST';\n    }\n  }\n\n  // 智能获取数据\n  async fetchWithIncrementalSync<T>(\n    endpoint: string,\n    options: {\n      useCache?: boolean;\n      cacheTimeout?: number;\n      enableIncremental?: boolean;\n      networkQuality?: NetworkQuality;\n      fallbackData?: T;\n    } = {}\n  ): Promise<APIOptimizationResult<T>> {\n    const startTime = performance.now();\n    const {\n      useCache = true,\n      cacheTimeout = 5 * 60 * 1000, // 5分钟\n      enableIncremental = true,\n      networkQuality = NetworkQuality.GOOD,\n      fallbackData\n    } = options;\n\n    try {\n      // 1. 尝试从缓存获取数据\n      if (useCache) {\n        const cachedData = await this.getCachedData<T>(endpoint, cacheTimeout);\n        if (cachedData) {\n          // 如果有增量更新，尝试获取增量数据\n          if (enableIncremental) {\n            const incrementalData = await this.getIncrementalUpdates(endpoint, cachedData.version);\n            if (incrementalData && incrementalData.length > 0) {\n              const mergedData = this.mergeIncrementalData(cachedData.data, incrementalData);\n              const responseTime = performance.now() - startTime;\n              \n              return {\n                data: mergedData,\n                source: 'incremental',\n                cacheHit: true,\n                networkQuality,\n                responseTime,\n                dataVersion: cachedData.version + incrementalData.length,\n                lastUpdated: Date.now()\n              };\n            }\n          }\n\n          const responseTime = performance.now() - startTime;\n          return {\n            data: cachedData.data,\n            source: 'cache',\n            cacheHit: true,\n            networkQuality,\n            responseTime,\n            dataVersion: cachedData.version,\n            lastUpdated: cachedData.timestamp\n          };\n        }\n      }\n\n      // 2. 网络请求\n      if (navigator.onLine) {\n        const response = await this.fetchWithRetry(endpoint);\n        const responseTime = performance.now() - startTime;\n\n        if (response.ok) {\n          const data = await response.json();\n          \n          // 缓存数据\n          if (useCache) {\n            await this.cacheData(endpoint, data, cacheTimeout);\n          }\n\n          return {\n            data,\n            source: 'network',\n            cacheHit: false,\n            networkQuality,\n            responseTime,\n            dataVersion: data.version || 1,\n            lastUpdated: Date.now()\n          };\n        }\n      }\n\n      // 3. 降级到离线数据\n      if (fallbackData) {\n        const responseTime = performance.now() - startTime;\n        return {\n          data: fallbackData,\n          source: 'fallback',\n          cacheHit: false,\n          networkQuality,\n          responseTime,\n          dataVersion: 0,\n          lastUpdated: Date.now()\n        };\n      }\n\n      throw new Error('无法获取数据：网络不可用且无缓存数据');\n\n    } catch (error) {\n      console.error('[APIOptimizer] 获取数据失败:', error);\n      \n      // 降级到缓存或默认数据\n      const cachedData = await this.getCachedData<T>(endpoint, Infinity);\n      if (cachedData) {\n        const responseTime = performance.now() - startTime;\n        return {\n          data: cachedData.data,\n          source: 'cache',\n          cacheHit: true,\n          networkQuality: NetworkQuality.POOR,\n          responseTime,\n          dataVersion: cachedData.version,\n          lastUpdated: cachedData.timestamp\n        };\n      }\n\n      if (fallbackData) {\n        const responseTime = performance.now() - startTime;\n        return {\n          data: fallbackData,\n          source: 'fallback',\n          cacheHit: false,\n          networkQuality: NetworkQuality.POOR,\n          responseTime,\n          dataVersion: 0,\n          lastUpdated: Date.now()\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  // 带重试的网络请求\n  private async fetchWithRetry(endpoint: string): Promise<Response> {\n    const maxRetries = 3;\n    const baseDelay = 1000;\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        const response = await fetch(endpoint, {\n          cache: 'no-cache',\n          signal: AbortSignal.timeout(10000) // 10秒超时\n        });\n\n        if (response.ok) {\n          return response;\n        }\n\n        if (response.status >= 500 && attempt < maxRetries - 1) {\n          const delay = baseDelay * Math.pow(2, attempt);\n          await this.sleep(delay);\n          continue;\n        }\n\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      } catch (error) {\n        if (attempt === maxRetries - 1) {\n          throw error;\n        }\n\n        const delay = baseDelay * Math.pow(2, attempt);\n        await this.sleep(delay);\n      }\n    }\n\n    throw new Error('所有重试均失败');\n  }\n\n  // 获取缓存数据\n  private async getCachedData<T>(endpoint: string, timeout: number): Promise<any> {\n    const { getItem } = useIndexedDB();\n    const cacheKey = `api_cache_${this.hashEndpoint(endpoint)}`;\n    const cached = await getItem<any>('cacheMetadata', cacheKey);\n    \n    if (!cached) return null;\n\n    // 检查是否过期\n    if (Date.now() - cached.timestamp > timeout) {\n      return null;\n    }\n\n    return cached;\n  }\n\n  // 缓存数据\n  private async cacheData(endpoint: string, data: any, timeout: number): Promise<void> {\n    const { setItem } = useIndexedDB();\n    const cacheKey = `api_cache_${this.hashEndpoint(endpoint)}`;\n    \n    await setItem('cacheMetadata', {\n      ...data,\n      timestamp: Date.now(),\n      expiresAt: Date.now() + timeout,\n      endpoint\n    }, {\n      id: cacheKey\n    });\n  }\n\n  // 获取增量更新\n  private async getIncrementalUpdates(endpoint: string, lastVersion: number): Promise<IncrementalUpdateItem[]> {\n    try {\n      const response = await fetch(`${endpoint}?since=${lastVersion}`, {\n        cache: 'no-cache'\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      return [];\n    } catch (error) {\n      console.warn('获取增量更新失败:', error);\n      return [];\n    }\n  }\n\n  // 合并增量数据\n  private mergeIncrementalData(baseData: any, incrementalUpdates: IncrementalUpdateItem[]): any {\n    let mergedData = { ...baseData };\n\n    for (const update of incrementalUpdates) {\n      switch (update.operation) {\n        case 'create':\n        case 'update':\n          mergedData[update.tableName] = mergedData[update.tableName] || [];\n          const index = mergedData[update.tableName].findIndex((item: any) => item.id === update.data.id);\n          if (index >= 0) {\n            mergedData[update.tableName][index] = { ...mergedData[update.tableName][index], ...update.data };\n          } else {\n            mergedData[update.tableName].push(update.data);\n          }\n          break;\n\n        case 'delete':\n          if (mergedData[update.tableName]) {\n            mergedData[update.tableName] = mergedData[update.tableName].filter(\n              (item: any) => item.id !== update.data.id\n            );\n          }\n          break;\n      }\n    }\n\n    return mergedData;\n  }\n\n  // 生成唯一ID\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // 获取客户端ID\n  private getClientId(): string {\n    let clientId = localStorage.getItem('client_id');\n    if (!clientId) {\n      clientId = this.generateId();\n      localStorage.setItem('client_id', clientId);\n    }\n    return clientId;\n  }\n\n  // 端点哈希\n  private hashEndpoint(endpoint: string): string {\n    let hash = 0;\n    for (let i = 0; i < endpoint.length; i++) {\n      const char = endpoint.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // 转换为32位整数\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  // 延迟工具\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // 清理资源\n  destroy(): void {\n    this.stopPeriodicSync();\n    this.changeQueue = [];\n  }\n}\n\n// React Hook for API Optimization\nimport { useState, useEffect, useCallback } from 'react';\n\nexport function useAPIOptimizer(config?: Partial<IncrementalUpdateConfig>) {\n  const [isOptimizing, setIsOptimizing] = useState(false);\n  const optimizer = APIOptimizer.getInstance();\n\n  useEffect(() => {\n    if (config) {\n      optimizer.configure(config);\n    }\n\n    return () => {\n      optimizer.destroy();\n    };\n  }, [config, optimizer]);\n\n  const fetchOptimized = useCallback(async <T>(\n    endpoint: string,\n    options?: Parameters<typeof optimizer.fetchWithIncrementalSync>[1]\n  ): Promise<APIOptimizationResult<T>> => {\n    setIsOptimizing(true);\n    try {\n      return await optimizer.fetchWithIncrementalSync(endpoint, options);\n    } finally {\n      setIsOptimizing(false);\n    }\n  }, [optimizer]);\n\n  const recordChange = useCallback((change: Parameters<typeof optimizer.recordChange>[0]) => {\n    return optimizer.recordChange(change);\n  }, [optimizer]);\n\n  const forceSync = useCallback(async () => {\n    await optimizer.syncChanges();\n  }, [optimizer]);\n\n  return {\n    fetchOptimized,\n    recordChange,\n    forceSync,\n    isOptimizing\n  };\n}\n\n// 单例导出\nexport const apiOptimizer = APIOptimizer.getInstance();\n\nexport default APIOptimizer;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/automated-quality-checker.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'QualityMetrics' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'QualityMetrics' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'getQualityLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getQualityLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'BatchResult' is defined but never used. Allowed unused vars must match /^_/u.","line":77,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BatchResult' is defined but never used. Allowed unused vars must match /^_/u.","line":77,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2828,2860],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":134,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3033,3062],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":145,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":145,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3438,3524],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3642,3674],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3806,3828],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":181,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":181,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4289,4308],"text":"(content.target[key] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4289,4308],"text":"(content.target[key] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4289,4308],"text":"(Boolean(content.target[key]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":181,"column":32,"nodeType":"MemberExpression","endLine":181,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4309,4311],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4641,4685],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":224,"column":28,"nodeType":"MemberExpression","endLine":224,"endColumn":72},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":226,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":226,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5535,5545],"text":"targetTerm != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5535,5545],"text":"targetTerm ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5535,5545],"text":"Boolean(targetTerm)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sourceCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":228,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sourceCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":228,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":231,"column":11,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":233,"endColumn":12,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[5748,5829],"text":"termUsage[sourceTerm] ??= {};"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":231,"column":16,"nodeType":"MemberExpression","endLine":231,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":232,"column":13,"nodeType":"MemberExpression","endLine":232,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":234,"column":11,"nodeType":"MemberExpression","endLine":234,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":234,"column":11,"nodeType":"MemberExpression","endLine":234,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'languages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":241,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'languages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":241,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7464,7489],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":300,"column":35,"nodeType":"CallExpression","endLine":300,"endColumn":65},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found stat from package \"fs/promises\" with non literal argument at index 0","line":301,"column":33,"nodeType":"CallExpression","endLine":301,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":310,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":312,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":312,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8224,8258],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":317,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":317,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8361,8417],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8446,8480],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":326,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":326,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8601,8626],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":338,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":338,"endColumn":21},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":339,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":339,"endColumn":21},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":339,"column":36,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":339,"endColumn":50,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9119,9120],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":339,"column":63,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":339,"endColumn":77,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9146,9147],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9175,9289],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":341,"column":26,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":341,"endColumn":40,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9207,9208],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":341,"column":68,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":341,"endColumn":82,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9249,9250],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":341,"column":96,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":341,"endColumn":110,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9277,9278],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":372,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":372,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10562,10606],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":388,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":388,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10811,10828],"text":"(file.content[key] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10811,10828],"text":"(file.content[key] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10811,10828],"text":"(Boolean(file.content[key]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":388,"column":32,"nodeType":"MemberExpression","endLine":388,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":388,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":388,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10829,10831],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":404,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":404,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11185,11230],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":421,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12035,12038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12035,12038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":427,"column":7,"nodeType":"MemberExpression","endLine":427,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":455,"column":28,"nodeType":"MemberExpression","endLine":455,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":456,"column":7,"nodeType":"MemberExpression","endLine":456,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":456,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":456,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13083,13093],"text":"(acc[value] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13083,13093],"text":"(acc[value] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13083,13093],"text":"(Boolean(acc[value]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":456,"column":21,"nodeType":"MemberExpression","endLine":456,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":456,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":456,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13094,13096],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":461,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":461,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13197,13200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13197,13200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":469,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":469,"endColumn":60,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[13477,13520],"text":"(Boolean((issues.find(i => i.type === type)?.severity)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":469,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":469,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13521,13523],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":489,"column":12,"nodeType":"MemberExpression","endLine":489,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":496,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":496,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14512,14534],"text":"(this.config.outputPath != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[14512,14534],"text":"(this.config.outputPath ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14512,14534],"text":"(Boolean(this.config.outputPath))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":496,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":496,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14535,14537],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdir from package \"fs/promises\" with non literal argument at index 0","line":524,"column":11,"nodeType":"CallExpression","endLine":524,"endColumn":66},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFile from package \"fs/promises\" with non literal argument at index 0","line":525,"column":11,"nodeType":"CallExpression","endLine":525,"endColumn":77},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":527,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":527,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15608,15646],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":564,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":564,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16700,16725],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":571,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":571,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16883,16939],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":591,"column":7,"nodeType":"CallExpression","endLine":591,"endColumn":37},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":592,"column":7,"nodeType":"CallExpression","endLine":592,"endColumn":39},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":603,"column":27,"nodeType":"CallExpression","endLine":603,"endColumn":57},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":609,"column":19,"nodeType":"NewExpression","endLine":609,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":623,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":623,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18654,18806],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":46,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 自动化翻译质量检查工具\n * Automated Translation Quality Checker\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { \n  QualityAssessor, \n  TranslationQualityAssessment, \n  QualityMetrics,\n  IssueType,\n  SeverityLevel,\n  QualityDimension,\n  getQualityLevel,\n  TERMINOLOGY_RULES\n} from './translation-quality-metrics';\n\n// 检查配置\nexport interface QualityCheckConfig {\n  sourceLanguage: string;\n  targetLanguages: string[];\n  namespaces: string[];\n  threshold: number; // 最低可接受质量分数\n  autoFix: boolean;\n  generateReport: boolean;\n  outputPath?: string;\n  batchSize: number; // 批处理大小\n  parallel: boolean; // 是否并行处理\n  excludePatterns: string[]; // 排除模式\n  includeOnlyUpdated: boolean; // 仅检查更新的文件\n}\n\n// 检查结果统计\nexport interface QualityCheckStats {\n  totalTranslations: number;\n  passedCount: number;\n  failedCount: number;\n  warningCount: number;\n  averageScore: number;\n  dimensionAverages: Record<QualityDimension, number>;\n  issuesByType: Record<IssueType, number>;\n  issuesBySeverity: Record<SeverityLevel, number>;\n  topIssues: QualityIssueSummary[];\n  processingTime: number;\n  timestamp: Date;\n}\n\n// 问题汇总\nexport interface QualityIssueSummary {\n  type: IssueType;\n  severity: SeverityLevel;\n  count: number;\n  examples: string[];\n  suggestion: string;\n}\n\n// 检查状态\nexport interface QualityCheckProgress {\n  total: number;\n  processed: number;\n  current: string;\n  percentage: number;\n  startTime: Date;\n}\n\n// 翻译文件结构\ninterface TranslationFile {\n  path: string;\n  language: string;\n  namespace: string;\n  content: Record<string, string>;\n  lastModified: Date;\n}\n\n// 批处理结果\ninterface BatchResult {\n  assessments: TranslationQualityAssessment[];\n  issues: QualityIssueSummary[];\n  stats: QualityCheckStats;\n}\n\n// 自动化质量检查器主类\nexport class AutomatedQualityChecker {\n  private config: QualityCheckConfig;\n  private translationFiles: TranslationFile[] = [];\n  private progress: QualityCheckProgress | null = null;\n\n  constructor(config: QualityCheckConfig) {\n    this.config = config;\n  }\n\n  /**\n   * 执行质量检查\n   */\n  async performQualityCheck(): Promise<{\n    stats: QualityCheckStats;\n    assessments: TranslationQualityAssessment[];\n    report?: string;\n  }> {\n    const startTime = Date.now();\n    this.initializeProgress();\n\n    try {\n      // 1. 扫描翻译文件\n      await this.scanTranslationFiles();\n      \n      // 2. 批量评估质量\n      const assessments = await this.assessTranslationQuality();\n      \n      // 3. 生成统计报告\n      const stats = this.generateStats(assessments, Date.now() - startTime);\n      \n      // 4. 生成详细报告\n      const report = this.config.generateReport ? \n        await this.generateReport(assessessments, stats) : undefined;\n      \n      // 5. 自动修复（如果启用）\n      if (this.config.autoFix) {\n        await this.autoFixIssues(assessments);\n      }\n\n      return { stats, assessments, report };\n    } catch (error) {\n      console.error('质量检查失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 实时监控翻译质量\n   */\n  async monitorTranslationQuality(\n    callback?: (progress: QualityCheckProgress) => void\n  ): Promise<void> {\n    console.log('开始实时翻译质量监控...');\n    \n    const monitorInterval = setInterval(async () => {\n      try {\n        // 执行快速检查\n        const result = await this.performQualityCheck();\n        \n        if (callback) {\n          this.updateProgress(result.stats);\n          callback(this.progress!);\n        }\n\n        // 检查是否有严重问题\n        if (result.stats.issuesBySeverity[SeverityLevel.CRITICAL] > 0) {\n          console.warn(`⚠️ 发现 ${result.stats.issuesBySeverity[SeverityLevel.CRITICAL]} 个严重问题！`);\n        }\n\n        // 检查质量趋势\n        await this.analyzeQualityTrends(result.stats);\n\n      } catch (error) {\n        console.error('监控检查失败:', error);\n      }\n    }, 30000); // 每30秒检查一次\n\n    // 模拟持续监控（实际应用中应该是常驻进程）\n    setTimeout(() => {\n      clearInterval(monitorInterval);\n      console.log('质量监控结束');\n    }, 5 * 60 * 1000); // 5分钟后结束\n  }\n\n  /**\n   * 验证特定翻译文件\n   */\n  async validateTranslationFile(\n    filePath: string,\n    language: string,\n    namespace: string\n  ): Promise<TranslationQualityAssessment[]> {\n    try {\n      const content = await this.loadTranslationFile(filePath, language);\n      const assessments: TranslationQualityAssessment[] = [];\n\n      for (const [key, sourceText] of Object.entries(content.source)) {\n        const translatedText = content.target[key] || '';\n        \n        const assessment = QualityAssessor.assessTranslation(\n          sourceText,\n          translatedText,\n          this.config.sourceLanguage,\n          language,\n          namespace,\n          key\n        );\n\n        assessments.push(assessment);\n      }\n\n      return assessments;\n    } catch (error) {\n      console.error(`验证文件失败: ${filePath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 检查翻译一致性\n   */\n  async checkConsistency(\n    sourceLanguage: string,\n    targetLanguages: string[],\n    namespace: string\n  ): Promise<{\n    inconsistencies: InconsistencyReport[];\n    summary: ConsistencySummary;\n  }> {\n    const inconsistencies: InconsistencyReport[] = [];\n    const termUsage: Record<string, Record<string, number>> = {};\n\n    // 收集术语使用情况\n    for (const targetLanguage of targetLanguages) {\n      const sourceContent = await this.loadTranslationFileContent(sourceLanguage, namespace);\n      const targetContent = await this.loadTranslationFileContent(targetLanguage, namespace);\n      \n      // 检查术语一致性\n      for (const termRule of TERMINOLOGY_RULES) {\n        const sourceTerm = termRule.term;\n        const targetTerm = termRule.allowedTranslations[targetLanguage];\n        \n        if (targetTerm) {\n          // 计算术语使用频率\n          const sourceCount = this.countTermUsage(sourceContent, sourceTerm);\n          const targetCount = this.countTermUsage(targetContent, targetTerm);\n          \n          if (!termUsage[sourceTerm]) {\n            termUsage[sourceTerm] = {};\n          }\n          termUsage[sourceTerm][targetLanguage] = targetCount;\n        }\n      }\n    }\n\n    // 生成不一致报告\n    for (const [sourceTerm, usage] of Object.entries(termUsage)) {\n      const languages = Object.keys(usage);\n      const counts = Object.values(usage);\n      \n      // 检查是否有显著差异\n      const maxCount = Math.max(...counts);\n      const minCount = Math.min(...counts);\n      const variance = (maxCount - minCount) / maxCount;\n      \n      if (variance > 0.5) {\n        inconsistencies.push({\n          type: 'terminology_variance',\n          sourceTerm,\n          usage: usage as Record<string, number>,\n          severity: variance > 0.8 ? SeverityLevel.HIGH : SeverityLevel.MEDIUM,\n          message: `术语 \"${sourceTerm}\" 在不同语言中的使用频率差异较大`\n        });\n      }\n    }\n\n    const summary: ConsistencySummary = {\n      totalTerms: Object.keys(termUsage).length,\n      inconsistentTerms: inconsistencies.length,\n      severityDistribution: this.groupBySeverity(inconsistencies),\n      consistencyScore: Math.max(0, 100 - (inconsistencies.length * 10))\n    };\n\n    return { inconsistencies, summary };\n  }\n\n  // 私有方法\n  private initializeProgress(): void {\n    this.progress = {\n      total: 0,\n      processed: 0,\n      current: '',\n      percentage: 0,\n      startTime: new Date()\n    };\n  }\n\n  private updateProgress(stats: QualityCheckStats): void {\n    if (this.progress) {\n      this.progress.processed = stats.totalTranslations;\n      this.progress.percentage = stats.totalTranslations > 0 ? \n        (stats.processingTime / stats.totalTranslations) * 100 : 0;\n    }\n  }\n\n  private async scanTranslationFiles(): Promise<void> {\n    console.log('扫描翻译文件...');\n    \n    const localesPath = path.join(process.cwd(), 'src', 'locales');\n    \n    try {\n      for (const language of this.config.targetLanguages) {\n        for (const namespace of this.config.namespaces) {\n          const filePath = path.join(localesPath, language, `${namespace}.json`);\n          \n          try {\n            const content = await fs.readFile(filePath, 'utf-8');\n            const stats = await fs.stat(filePath);\n            \n            this.translationFiles.push({\n              path: filePath,\n              language,\n              namespace,\n              content: JSON.parse(content),\n              lastModified: stats.mtime\n            });\n          } catch (error) {\n            // 文件不存在或读取失败，跳过\n            console.warn(`跳过文件: ${filePath}`);\n          }\n        }\n      }\n      \n      this.progress!.total = this.translationFiles.length;\n      console.log(`发现 ${this.translationFiles.length} 个翻译文件`);\n    } catch (error) {\n      console.error('扫描翻译文件失败:', error);\n      throw error;\n    }\n  }\n\n  private async assessTranslationQuality(): Promise<TranslationQualityAssessment[]> {\n    console.log('开始质量评估...');\n    \n    const assessments: TranslationQualityAssessment[] = [];\n    const batches = this.createBatches(this.translationFiles, this.config.batchSize);\n    \n    for (const batch of batches) {\n      const batchResults = this.config.parallel ? \n        await this.processBatchParallel(batch) :\n        await this.processBatchSequential(batch);\n      \n      assessments.push(...batchResults);\n      \n      this.progress!.processed += batch.length;\n      this.progress!.percentage = (this.progress!.processed / this.progress!.total) * 100;\n      \n      console.log(`进度: ${this.progress!.percentage.toFixed(1)}% (${this.progress!.processed}/${this.progress!.total})`);\n    }\n    \n    return assessments;\n  }\n\n  private createBatches(files: TranslationFile[], batchSize: number): TranslationFile[][] {\n    const batches: TranslationFile[][] = [];\n    for (let i = 0; i < files.length; i += batchSize) {\n      batches.push(files.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n\n  private async processBatchParallel(files: TranslationFile[]): Promise<TranslationQualityAssessment[]> {\n    const promises = files.map(file => this.processFile(file));\n    return (await Promise.all(promises)).flat();\n  }\n\n  private async processBatchSequential(files: TranslationFile[]): Promise<TranslationQualityAssessment[]> {\n    const assessments: TranslationQualityAssessment[] = [];\n    \n    for (const file of files) {\n      const fileAssessments = await this.processFile(file);\n      assessments.push(...fileAssessments);\n    }\n    \n    return assessments;\n  }\n\n  private async processFile(file: TranslationFile): Promise<TranslationQualityAssessment[]> {\n    this.progress!.current = `${file.language}/${file.namespace}`;\n    \n    try {\n      // 获取源语言内容\n      const sourceFile = this.translationFiles.find(f => \n        f.language === this.config.sourceLanguage && f.namespace === file.namespace\n      );\n      \n      if (!sourceFile) {\n        console.warn(`未找到源语言文件: ${file.namespace}`);\n        return [];\n      }\n\n      const assessments: TranslationQualityAssessment[] = [];\n      \n      for (const [key, sourceText] of Object.entries(sourceFile.content)) {\n        const translatedText = file.content[key] || '';\n        \n        const assessment = QualityAssessor.assessTranslation(\n          sourceText,\n          translatedText,\n          this.config.sourceLanguage,\n          file.language,\n          file.namespace,\n          key\n        );\n        \n        assessments.push(assessment);\n      }\n      \n      return assessments;\n    } catch (error) {\n      console.error(`处理文件失败: ${file.path}`, error);\n      return [];\n    }\n  }\n\n  private generateStats(assessments: TranslationQualityAssessment[], processingTime: number): QualityCheckStats {\n    const passedCount = assessments.filter(a => a.overallScore >= this.config.threshold).length;\n    const failedCount = assessments.filter(a => a.overallScore < this.config.threshold).length;\n    const warningCount = assessments.filter(a => \n      a.overallScore >= this.config.threshold && a.overallScore < 80\n    ).length;\n    \n    const totalScore = assessments.reduce((sum, a) => sum + a.overallScore, 0);\n    const averageScore = assessments.length > 0 ? totalScore / assessments.length : 0;\n    \n    // 计算各维度平均分\n    const dimensionScores = assessments.flatMap(a => a.dimensionScores);\n    const dimensionAverages: Record<QualityDimension, number> = {} as any;\n    \n    for (const dimension of Object.values(QualityDimension)) {\n      const scores = dimensionScores.filter(ds => ds.dimension === dimension);\n      const avg = scores.length > 0 ? \n        scores.reduce((sum, ds) => sum + ds.score, 0) / scores.length : 0;\n      dimensionAverages[dimension] = avg;\n    }\n    \n    // 统计问题类型\n    const allIssues = assessments.flatMap(a => a.issues);\n    const issuesByType = this.countBy(allIssues, 'type');\n    const issuesBySeverity = this.countBy(allIssues, 'severity');\n    \n    // 找出主要问题\n    const topIssues = this.getTopIssues(allIssues);\n    \n    return {\n      totalTranslations: assessments.length,\n      passedCount,\n      failedCount,\n      warningCount,\n      averageScore,\n      dimensionAverages,\n      issuesByType,\n      issuesBySeverity,\n      topIssues,\n      processingTime,\n      timestamp: new Date()\n    };\n  }\n\n  private countBy<T>(array: T[], key: keyof T): Record<string, number> {\n    return array.reduce((acc, item) => {\n      const value = String(item[key]);\n      acc[value] = (acc[value] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  private getTopIssues(issues: any[]): QualityIssueSummary[] {\n    const grouped = this.countBy(issues, 'type');\n    const topTypes = Object.entries(grouped)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5);\n    \n    return topTypes.map(([type, count]) => ({\n      type: type as IssueType,\n      severity: issues.find(i => i.type === type)?.severity || SeverityLevel.LOW,\n      count: count as number,\n      examples: issues.filter(i => i.type === type).slice(0, 3).map(i => i.description),\n      suggestion: this.getSuggestionForType(type as IssueType)\n    }));\n  }\n\n  private getSuggestionForType(type: IssueType): string {\n    const suggestions: Record<IssueType, string> = {\n      [IssueType.MISSING_TRANSLATION]: '提供完整的翻译内容',\n      [IssueType.INACCURATE_TRANSLATION]: '修正翻译不准确的地方',\n      [IssueType.STYLISTIC_ISSUE]: '改善表达风格',\n      [IssueType.TERMINOLOGY_INCONSISTENCY]: '统一术语翻译',\n      [IssueType.PLACEHOLDER_MISMATCH]: '修正占位符不匹配',\n      [IssueType.CULTURAL_INAPPROPRIATE]: '调整文化适应性',\n      [IssueType.LENGTH_ISSUE]: '调整文本长度',\n      [IssueType.GRAMMAR_ISSUE]: '修正语法错误',\n      [IssueType.PUNCTUATION_ISSUE]: '修正标点符号问题'\n    };\n    \n    return suggestions[type] || '需要进一步检查';\n  }\n\n  private async generateReport(\n    assessments: TranslationQualityAssessment[],\n    stats: QualityCheckStats\n  ): Promise<string> {\n    const reportPath = this.config.outputPath || \n      path.join(process.cwd(), 'quality-reports', `quality-report-${Date.now()}.json`);\n    \n    const report = {\n      metadata: {\n        generatedAt: new Date().toISOString(),\n        sourceLanguage: this.config.sourceLanguage,\n        targetLanguages: this.config.targetLanguages,\n        threshold: this.config.threshold,\n        totalFiles: this.translationFiles.length\n      },\n      summary: stats,\n      assessments: assessments.map(a => ({\n        key: a.translationKey,\n        namespace: a.namespace,\n        sourceLanguage: a.sourceLanguage,\n        targetLanguage: a.targetLanguage,\n        score: a.overallScore,\n        issues: a.issues.map(i => ({\n          type: i.type,\n          severity: i.severity,\n          description: i.description\n        })),\n        recommendations: a.recommendations\n      })),\n      recommendations: this.generateGlobalRecommendations(assessments, stats)\n    };\n    \n    await fs.mkdir(path.dirname(reportPath), { recursive: true });\n    await fs.writeFile(reportPath, JSON.stringify(report, null, 2), 'utf-8');\n    \n    console.log(`质量报告已生成: ${reportPath}`);\n    return reportPath;\n  }\n\n  private generateGlobalRecommendations(\n    assessments: TranslationQualityAssessment[],\n    stats: QualityCheckStats\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    // 基于统计数据生成建议\n    if (stats.averageScore < 80) {\n      recommendations.push('整体翻译质量需要改进，建议进行全面审核');\n    }\n    \n    if (stats.failedCount > stats.totalTranslations * 0.1) {\n      recommendations.push('超过10%的翻译未达到质量标准，需要重点关注');\n    }\n    \n    const criticalIssues = stats.issuesBySeverity[SeverityLevel.CRITICAL] || 0;\n    if (criticalIssues > 0) {\n      recommendations.push('存在严重问题需要立即处理');\n    }\n    \n    // 基于维度分析生成建议\n    const dimensionScores = stats.dimensionAverages;\n    const lowestDimension = Object.entries(dimensionScores)\n      .sort(([,a], [,b]) => a - b)[0];\n    \n    if (lowestDimension && lowestDimension[1] < 70) {\n      recommendations.push(`需要重点改善 ${lowestDimension[0]} 方面的翻译质量`);\n    }\n    \n    return recommendations;\n  }\n\n  private async autoFixIssues(assessments: TranslationQualityAssessment[]): Promise<void> {\n    console.log('开始自动修复...');\n    \n    const autoFixableIssues = assessments.flatMap(a => \n      a.issues.filter(issue => this.canAutoFix(issue.type))\n    );\n    \n    // 这里可以实现自动修复逻辑\n    console.log(`发现 ${autoFixableIssues.length} 个可自动修复的问题`);\n  }\n\n  private canAutoFix(issueType: IssueType): boolean {\n    // 定义可自动修复的问题类型\n    const autoFixableTypes = [\n      IssueType.GRAMMAR_ISSUE,\n      IssueType.PUNCTUATION_ISSUE,\n      IssueType.PLACEHOLDER_MISMATCH\n    ];\n    \n    return autoFixableTypes.includes(issueType);\n  }\n\n  private async loadTranslationFile(filePath: string, language: string): Promise<{\n    source: Record<string, string>;\n    target: Record<string, string>;\n  }> {\n    const targetPath = path.join(path.dirname(filePath), language, path.basename(filePath));\n    const [sourceContent, targetContent] = await Promise.all([\n      fs.readFile(filePath, 'utf-8'),\n      fs.readFile(targetPath, 'utf-8')\n    ]);\n    \n    return {\n      source: JSON.parse(sourceContent),\n      target: JSON.parse(targetContent)\n    };\n  }\n\n  private async loadTranslationFileContent(language: string, namespace: string): Promise<string> {\n    const filePath = path.join(process.cwd(), 'src', 'locales', language, `${namespace}.json`);\n    const content = await fs.readFile(filePath, 'utf-8');\n    const parsed = JSON.parse(content);\n    return Object.values(parsed).join(' ');\n  }\n\n  private countTermUsage(content: string, term: string): number {\n    const regex = new RegExp(term, 'gi');\n    const matches = content.match(regex);\n    return matches ? matches.length : 0;\n  }\n\n  private groupBySeverity(inconsistencies: InconsistencyReport[]): Record<SeverityLevel, number> {\n    return inconsistencies.reduce((acc, issue) => {\n      acc[issue.severity] = (acc[issue.severity] || 0) + 1;\n      return acc;\n    }, {} as Record<SeverityLevel, number>);\n  }\n\n  private async analyzeQualityTrends(stats: QualityCheckStats): Promise<void> {\n    // 这里可以实现质量趋势分析\n    console.log('质量趋势分析:', {\n      averageScore: stats.averageScore,\n      totalIssues: Object.values(stats.issuesByType).reduce((a, b) => a + b, 0)\n    });\n  }\n}\n\n// 类型定义\ninterface InconsistencyReport {\n  type: string;\n  sourceTerm: string;\n  usage: Record<string, number>;\n  severity: SeverityLevel;\n  message: string;\n}\n\ninterface ConsistencySummary {\n  totalTerms: number;\n  inconsistentTerms: number;\n  severityDistribution: Record<SeverityLevel, number>;\n  consistencyScore: number;\n}\n\n// 导出便捷函数\nexport async function quickQualityCheck(\n  sourceLanguage: string = 'zh-CN',\n  targetLanguages: string[] = ['en-US', 'ru-RU', 'tg-TJ']\n): Promise<QualityCheckStats> {\n  const checker = new AutomatedQualityChecker({\n    sourceLanguage,\n    targetLanguages,\n    namespaces: ['common', 'auth', 'lottery', 'wallet', 'referral', 'task', 'error', 'admin', 'bot'],\n    threshold: 70,\n    autoFix: false,\n    generateReport: true,\n    batchSize: 10,\n    parallel: true,\n    excludePatterns: [],\n    includeOnlyUpdated: false\n  });\n  \n  const result = await checker.performQualityCheck();\n  return result.stats;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/bundle-analyzer.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":45,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":45,"endColumn":33},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":74,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":74,"endColumn":19,"fix":{"range":[1766,1949],"text":"for (const chunk of chunks) {\n      const src = chunk.getAttribute('src');\n      if (src) {\n        // 这里应该实际获取文件大小，目前用模拟值\n        totalSize += this.estimateFileSize(src);\n      }\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":76,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1847,1850],"text":"src != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1847,1850],"text":"src ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1847,1850],"text":"Boolean(src)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":237,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":237,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7190,7244],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Bundle分析工具\n * 用于分析和监控JavaScript包的大小、性能和优化建议\n */\n\ninterface BundleAnalysisResult {\n  totalSize: number;\n  chunks: ChunkInfo[];\n  suggestions: OptimizationSuggestion[];\n  mobileOptimization: MobileOptimizationReport;\n}\n\ninterface ChunkInfo {\n  name: string;\n  size: number;\n  compressedSize?: number;\n  modules: string[];\n  isDynamic: boolean;\n  loadingPriority: 'high' | 'medium' | 'low';\n}\n\ninterface OptimizationSuggestion {\n  type: 'tree_shaking' | 'code_splitting' | 'dynamic_import' | 'compression' | 'caching';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  estimatedSaving: string;\n  implementation: string;\n}\n\ninterface MobileOptimizationReport {\n  initialBundleSize: number;\n  targetBundleSize: number;\n  lazyLoadableComponents: string[];\n  codeSplittingOpportunities: string[];\n  performanceScore: number;\n  loadingTime: number;\n}\n\nexport class BundleAnalyzer {\n  private static instance: BundleAnalyzer;\n  private analysisHistory: BundleAnalysisResult[] = [];\n\n  static getInstance(): BundleAnalyzer {\n    if (!BundleAnalyzer.instance) {\n      BundleAnalyzer.instance = new BundleAnalyzer();\n    }\n    return BundleAnalyzer.instance;\n  }\n\n  /**\n   * 分析当前包的组成和大小\n   */\n  analyzeBundle(): BundleAnalysisResult {\n    const result: BundleAnalysisResult = {\n      totalSize: this.calculateTotalBundleSize(),\n      chunks: this.analyzeChunks(),\n      suggestions: this.generateOptimizationSuggestions(),\n      mobileOptimization: this.generateMobileOptimizationReport()\n    };\n\n    this.analysisHistory.push(result);\n    return result;\n  }\n\n  /**\n   * 计算总Bundle大小\n   */\n  private calculateTotalBundleSize(): number {\n    // 模拟包大小计算\n    const chunks = document.querySelectorAll('script[src]');\n    let totalSize = 0;\n\n    chunks.forEach(chunk => {\n      const src = chunk.getAttribute('src');\n      if (src) {\n        // 这里应该实际获取文件大小，目前用模拟值\n        totalSize += this.estimateFileSize(src);\n      }\n    });\n\n    return totalSize;\n  }\n\n  /**\n   * 分析代码块\n   */\n  private analyzeChunks(): ChunkInfo[] {\n    const chunks: ChunkInfo[] = [\n      {\n        name: 'main-bundle',\n        size: 850000, // 850KB (未压缩)\n        compressedSize: 280000, // 280KB (gzip压缩)\n        modules: ['react', 'next', 'i18next', 'components'],\n        isDynamic: false,\n        loadingPriority: 'high'\n      },\n      {\n        name: 'vendor-libs',\n        size: 450000, // 450KB\n        compressedSize: 120000, // 120KB\n        modules: ['@prisma/client', '@supabase/supabase-js', 'telegraf'],\n        isDynamic: true,\n        loadingPriority: 'medium'\n      },\n      {\n        name: 'admin-bundle',\n        size: 650000, // 650KB\n        compressedSize: 180000, // 180KB\n        modules: ['admin-pages', 'admin-components', 'charts'],\n        isDynamic: true,\n        loadingPriority: 'low'\n      },\n      {\n        name: 'bot-bundle',\n        size: 320000, // 320KB\n        compressedSize: 85000, // 85KB\n        modules: ['bot-utils', 'notification-service'],\n        isDynamic: true,\n        loadingPriority: 'low'\n      }\n    ];\n\n    return chunks;\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateOptimizationSuggestions(): OptimizationSuggestion[] {\n    return [\n      {\n        type: 'tree_shaking',\n        priority: 'high',\n        title: '启用Tree Shaking优化',\n        description: '移除未使用的代码，估算可减少30-40%的Bundle大小',\n        estimatedSaving: '~340KB (gzip压缩后)',\n        implementation: '确保使用ES6模块并在next.config.js中配置optimization.splitChunks'\n      },\n      {\n        type: 'code_splitting',\n        priority: 'high',\n        title: '实现智能代码分割',\n        description: '将admin页面和bot相关代码分离到独立chunk',\n        estimatedSaving: '~180KB (gzip压缩后)',\n        implementation: '使用dynamic()导入和路由级别的代码分割'\n      },\n      {\n        type: 'dynamic_import',\n        priority: 'medium',\n        title: '动态导入非关键组件',\n        description: '对图表库、复杂的admin组件使用动态导入',\n        estimatedSaving: '~120KB (gzip压缩后)',\n        implementation: '使用next/dynamic和Suspense包装非关键组件'\n      },\n      {\n        type: 'compression',\n        priority: 'medium',\n        title: '启用Brotli压缩',\n        description: '比gzip压缩率更高，节省15-20%传输大小',\n        estimatedSaving: '~45KB (相比gzip)',\n        implementation: '在服务器配置中启用Brotli压缩'\n      },\n      {\n        type: 'caching',\n        priority: 'low',\n        title: '优化缓存策略',\n        description: '为静态资源设置长期缓存，为API响应设置适当缓存',\n        estimatedSaving: '减少重复下载，提升加载速度',\n        implementation: '配置Cache-Control头和Service Worker'\n      }\n    ];\n  }\n\n  /**\n   * 生成移动端优化报告\n   */\n  private generateMobileOptimizationReport(): MobileOptimizationReport {\n    return {\n      initialBundleSize: 850000,\n      targetBundleSize: 250000, // 减少70%以上\n      lazyLoadableComponents: [\n        'AdminDashboard',\n        'Charts',\n        'ProductCarousel',\n        'InstagramPoster',\n        'BotNotifications'\n      ],\n      codeSplittingOpportunities: [\n        '/admin/*',\n        '/bot/*',\n        '/performance/*',\n        '/multilingual-test/*'\n      ],\n      performanceScore: 65,\n      loadingTime: 3.2 // 秒\n    };\n  }\n\n  /**\n   * 估算文件大小\n   */\n  private estimateFileSize(filename: string): number {\n    const sizeMap: Record<string, number> = {\n      'main': 850000,\n      'vendor': 450000,\n      'admin': 650000,\n      'bot': 320000\n    };\n\n    for (const [key, size] of Object.entries(sizeMap)) {\n      if (filename.includes(key)) {\n        return size;\n      }\n    }\n\n    return 100000; // 默认大小\n  }\n\n  /**\n   * 生成Bundle分析报告\n   */\n  generateReport(): string {\n    const analysis = this.analyzeBundle();\n    const report = `\n# Bundle分析报告\n\n## 总体概况\n- **总大小**: ${(analysis.totalSize / 1024).toFixed(2)} KB\n- **压缩后大小**: ${(analysis.totalSize * 0.35 / 1024).toFixed(2)} KB (估算)\n- **包数量**: ${analysis.chunks.length}\n\n## 包组成分析\n${analysis.chunks.map(chunk => `\n### ${chunk.name}\n- **大小**: ${(chunk.size / 1024).toFixed(2)} KB\n- **压缩后**: ${(chunk.compressedSize! / 1024).toFixed(2)} KB\n- **优先级**: ${chunk.loadingPriority}\n- **动态加载**: ${chunk.isDynamic ? '是' : '否'}\n`).join('')}\n\n## 移动端优化报告\n- **初始包大小**: ${(analysis.mobileOptimization.initialBundleSize / 1024).toFixed(2)} KB\n- **目标包大小**: ${(analysis.mobileOptimization.targetBundleSize / 1024).toFixed(2)} KB\n- **性能评分**: ${analysis.mobileOptimization.performanceScore}/100\n- **预估加载时间**: ${analysis.mobileOptimization.loadingTime}秒\n\n## 优化建议\n${analysis.suggestions.map(suggestion => `\n### ${suggestion.title}\n- **优先级**: ${suggestion.priority}\n- **预期收益**: ${suggestion.estimatedSaving}\n- **实施方案**: ${suggestion.implementation}\n- **描述**: ${suggestion.description}\n`).join('')}\n\n## 可懒加载组件\n${analysis.mobileOptimization.lazyLoadableComponents.map(component => `- ${component}`).join('\\n')}\n\n## 代码分割机会\n${analysis.mobileOptimization.codeSplittingOpportunities.map(route => `- ${route}`).join('\\n')}\n`;\n\n    return report;\n  }\n\n  /**\n   * 实时监控Bundle大小变化\n   */\n  startMonitoring(interval: number = 30000): void {\n    setInterval(() => {\n      const currentSize = this.calculateTotalBundleSize();\n      const lastAnalysis = this.analysisHistory[this.analysisHistory.length - 1];\n      \n      if (lastAnalysis) {\n        const change = ((currentSize - lastAnalysis.totalSize) / lastAnalysis.totalSize) * 100;\n        if (Math.abs(change) > 5) {\n          console.warn(`Bundle大小变化超过5%: ${change.toFixed(2)}%`);\n        }\n      }\n    }, interval);\n  }\n\n  /**\n   * 获取分析历史\n   */\n  getAnalysisHistory(): BundleAnalysisResult[] {\n    return this.analysisHistory;\n  }\n}\n\n// 导出单例实例\nexport const bundleAnalyzer = BundleAnalyzer.getInstance();\n\n// 便捷函数\nexport const analyzeBundle = () => bundleAnalyzer.analyzeBundle();\nexport const generateBundleReport = () => bundleAnalyzer.generateReport();","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/concurrency-controller.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'priorityManager' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priorityManager' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'QueueItemStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'QueueItemStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'QueueItem' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'QueueItem' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[360,363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[360,363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":60,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":60,"endColumn":46},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":121,"column":43,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":121,"endColumn":56,"fix":{"range":[3485,3498],"text":"{return false;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":186,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":186,"endColumn":30,"fix":{"range":[5425,5432],"text":"{return;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":204,"column":37,"nodeType":"MemberExpression","endLine":204,"endColumn":61},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":208,"column":11,"nodeType":"MemberExpression","endLine":208,"endColumn":35},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":219,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":219,"endColumn":36,"fix":{"range":[6401,6414],"text":"{return false;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":246,"column":11,"nodeType":"MemberExpression","endLine":246,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7675,7732],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":300,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":300,"endColumn":47,"fix":{"range":[8956,8965],"text":"{return 0;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":327,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":327,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9722,9789],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9940,9996],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10326,10405],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11168,11217],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":386,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":386,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":386,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":386,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":392,"column":7,"nodeType":"MemberExpression","endLine":392,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11701,11745],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":420,"column":27,"nodeType":"MemberExpression","endLine":420,"endColumn":61},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":421,"column":19,"nodeType":"MemberExpression","endLine":421,"endColumn":65},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":435,"column":15,"nodeType":"MemberExpression","endLine":435,"endColumn":49},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":436,"column":15,"nodeType":"MemberExpression","endLine":436,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":437,"column":14,"nodeType":"MemberExpression","endLine":437,"endColumn":60},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":438,"column":21,"nodeType":"MemberExpression","endLine":438,"endColumn":55},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":438,"column":58,"nodeType":"MemberExpression","endLine":438,"endColumn":104},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":476,"column":26,"nodeType":"MemberExpression","endLine":476,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'requestId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":478,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":478,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requestId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":478,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":500,"column":36,"nodeType":"MemberExpression","endLine":500,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'requestId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":511,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":511,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requestId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":511,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":511,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":525,"column":12,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":525,"endColumn":91,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[15258,15337],"text":"(Boolean((predictions.sort((a, b) => b.expectedImpact - a.expectedImpact)[0]?.requestInfo)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":525,"column":92,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":525,"endColumn":94,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15338,15340],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'queueInfo' is defined but never used. Allowed unused args must match /^_/u.","line":529,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":529,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'queueInfo' is defined but never used. Allowed unused args must match /^_/u.","line":529,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":529,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":550,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":550,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16101,16160],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":36,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":4,"fixableWarningCount":0,"source":"// concurrency-controller.ts - 全局并发控制器\nimport { RequestPriority, priorityManager } from './priority-manager';\nimport { QueueItemStatus, QueueItem } from './request-queue';\n\nexport interface RequestInfo {\n  id: string;\n  priority: RequestPriority;\n  startTime: number;\n  expectedDuration: number;\n  abortController: AbortController;\n  metadata?: Record<string, any>;\n}\n\nexport interface ConcurrencyMetrics {\n  totalActive: number;\n  activeByPriority: Record<RequestPriority, number>;\n  maxConcurrent: number;\n  utilizationRate: number;\n  averageWaitTime: number;\n  queueDepthByPriority: Record<RequestPriority, number>;\n}\n\n// 全局并发控制器\nexport class GlobalConcurrencyController {\n  private static instance: GlobalConcurrencyController;\n  private maxGlobalConcurrent = 20;\n  private activeRequests = new Map<string, RequestInfo>();\n  private priorityQueues = new Map<RequestPriority, RequestQueue>();\n  private metrics: ConcurrencyMetrics;\n  private preemptiveThreshold = 0.9; // 抢占阈值\n  private waitingRequests = new Set<string>();\n  \n  // 并发限制配置\n  private concurrencyLimits = {\n    [RequestPriority.CRITICAL]: 10,\n    [RequestPriority.NORMAL]: 5,\n    [RequestPriority.LOW]: 2\n  };\n\n  // 活跃请求按优先级分组\n  private activeByPriority = {\n    [RequestPriority.CRITICAL]: new Set<string>(),\n    [RequestPriority.NORMAL]: new Set<string>(),\n    [RequestPriority.LOW]: new Set<string>()\n  };\n\n  // 队列信息\n  private queueInfo = {\n    [RequestPriority.CRITICAL]: new Set<string>(),\n    [RequestPriority.NORMAL]: new Set<string>(),\n    [RequestPriority.LOW]: new Set<string>()\n  };\n\n  private constructor() {\n    this.metrics = this.initializeMetrics();\n    this.startMetricsCollection();\n  }\n\n  public static getInstance(): GlobalConcurrencyController {\n    if (!GlobalConcurrencyController.instance) {\n      GlobalConcurrencyController.instance = new GlobalConcurrencyController();\n    }\n    return GlobalConcurrencyController.instance;\n  }\n\n  // 初始化指标\n  private initializeMetrics(): ConcurrencyMetrics {\n    return {\n      totalActive: 0,\n      activeByPriority: {\n        [RequestPriority.CRITICAL]: 0,\n        [RequestPriority.NORMAL]: 0,\n        [RequestPriority.LOW]: 0\n      },\n      maxConcurrent: this.maxGlobalConcurrent,\n      utilizationRate: 0,\n      averageWaitTime: 0,\n      queueDepthByPriority: {\n        [RequestPriority.CRITICAL]: 0,\n        [RequestPriority.NORMAL]: 0,\n        [RequestPriority.LOW]: 0\n      }\n    };\n  }\n\n  // 请求准入检查\n  async acquireSlot(requestInfo: RequestInfo): Promise<boolean> {\n    const totalActive = this.getTotalActiveRequests();\n    \n    // 检查全局限制\n    if (totalActive >= this.maxGlobalConcurrent) {\n      // 尝试抢占低优先级请求\n      if (requestInfo.priority === RequestPriority.CRITICAL) {\n        return this.tryPreemptLowPriority();\n      }\n      return false;\n    }\n\n    // 检查优先级限制\n    const priorityLimit = this.concurrencyLimits[requestInfo.priority];\n    const currentPriorityActive = this.activeByPriority[requestInfo.priority].size;\n\n    if (currentPriorityActive >= priorityLimit) {\n      // 检查是否可以抢占同优先级请求\n      if (this.canPreemptSamePriority(requestInfo)) {\n        return this.preemptSamePriority(requestInfo);\n      }\n      return false;\n    }\n\n    // 记录请求\n    this.recordRequest(requestInfo);\n    return true;\n  }\n\n  // 尝试抢占低优先级请求\n  private tryPreemptLowPriority(): boolean {\n    const lowPriorityRequests = Array.from(this.activeRequests.values())\n      .filter(req => req.priority === RequestPriority.LOW);\n\n    if (lowPriorityRequests.length === 0) return false;\n\n    // 选择最适合抢占的请求\n    const requestToPreempt = this.selectRequestToPreempt(lowPriorityRequests);\n    \n    if (requestToPreempt) {\n      this.cancelRequest(requestToPreempt.id, 'preempted_by_critical');\n      return true;\n    }\n\n    return false;\n  }\n\n  // 选择最适合抢占的请求\n  private selectRequestToPreempt(requests: RequestInfo[]): RequestInfo | null {\n    // 按执行时间排序，选择执行时间最长的\n    return requests.sort((a, b) => {\n      const aElapsed = Date.now() - a.startTime;\n      const bElapsed = Date.now() - b.startTime;\n      return bElapsed - aElapsed;\n    })[0];\n  }\n\n  // 检查是否可以抢占同优先级请求\n  private canPreemptSamePriority(requestInfo: RequestInfo): boolean {\n    const activeSamePriority = Array.from(this.activeByPriority[requestInfo.priority])\n      .map(id => this.activeRequests.get(id))\n      .filter(Boolean) as RequestInfo[];\n\n    // 如果有请求执行时间超过预期，可以抢占\n    return activeSamePriority.some(req => {\n      const elapsed = Date.now() - req.startTime;\n      return elapsed > req.expectedDuration * 1.5;\n    });\n  }\n\n  // 抢占同优先级请求\n  private preemptSamePriority(requestInfo: RequestInfo): boolean {\n    const activeSamePriority = Array.from(this.activeByPriority[requestInfo.priority])\n      .map(id => this.activeRequests.get(id))\n      .filter(Boolean) as RequestInfo[];\n\n    const slowRequest = activeSamePriority.find(req => {\n      const elapsed = Date.now() - req.startTime;\n      return elapsed > req.expectedDuration * 1.5;\n    });\n\n    if (slowRequest) {\n      this.cancelRequest(slowRequest.id, 'slow_request_preemption');\n      return true;\n    }\n\n    return false;\n  }\n\n  // 记录请求\n  private recordRequest(requestInfo: RequestInfo) {\n    this.activeRequests.set(requestInfo.id, requestInfo);\n    this.activeByPriority[requestInfo.priority].add(requestInfo.id);\n    this.updateMetrics();\n  }\n\n  // 释放请求槽位\n  releaseSlot(requestId: string): void {\n    const requestInfo = this.activeRequests.get(requestId);\n    if (!requestInfo) return;\n\n    this.activeRequests.delete(requestId);\n    this.activeByPriority[requestInfo.priority].delete(requestId);\n    this.waitingRequests.delete(requestId);\n    \n    this.updateMetrics();\n    \n    // 尝试执行等待队列中的下一个请求\n    this.processWaitingQueue();\n  }\n\n  // 处理等待队列\n  private processWaitingQueue(): void {\n    // 按优先级排序处理等待队列\n    const priorities = [RequestPriority.CRITICAL, RequestPriority.NORMAL, RequestPriority.LOW];\n    \n    for (const priority of priorities) {\n      const waitingIds = Array.from(this.queueInfo[priority]);\n      \n      for (const requestId of waitingIds) {\n        if (this.acquireSlotForWaitingRequest(requestId)) {\n          this.queueInfo[priority].delete(requestId);\n          this.waitingRequests.delete(requestId);\n          break; // 一次只处理一个请求\n        }\n      }\n    }\n  }\n\n  // 为等待请求获取槽位\n  private acquireSlotForWaitingRequest(requestId: string): boolean {\n    const requestInfo = this.activeRequests.get(requestId);\n    if (!requestInfo) return false;\n\n    const totalActive = this.getTotalActiveRequests();\n    \n    if (totalActive < this.maxGlobalConcurrent) {\n      const priorityLimit = this.concurrencyLimits[requestInfo.priority];\n      const currentPriorityActive = this.activeByPriority[requestInfo.priority].size;\n\n      if (currentPriorityActive < priorityLimit) {\n        this.recordRequest(requestInfo);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // 添加到等待队列\n  addToQueue(requestInfo: RequestInfo): void {\n    this.queueInfo[requestInfo.priority].add(requestInfo.id);\n    this.waitingRequests.add(requestInfo.id);\n    this.updateMetrics();\n  }\n\n  // 从队列中移除\n  removeFromQueue(requestId: string): boolean {\n    for (const priority of Object.keys(this.queueInfo) as RequestPriority[]) {\n      if (this.queueInfo[priority].delete(requestId)) {\n        this.waitingRequests.delete(requestId);\n        this.updateMetrics();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // 取消请求\n  cancelRequest(requestId: string, reason: string): void {\n    const requestInfo = this.activeRequests.get(requestId);\n    if (requestInfo) {\n      requestInfo.abortController.abort();\n      this.releaseSlot(requestId);\n    } else {\n      this.removeFromQueue(requestId);\n    }\n\n    // 记录取消事件\n    console.log(`Request ${requestId} cancelled: ${reason}`);\n  }\n\n  // 获取总活跃请求数\n  private getTotalActiveRequests(): number {\n    return this.activeRequests.size;\n  }\n\n  // 更新指标\n  private updateMetrics(): void {\n    this.metrics = {\n      totalActive: this.activeRequests.size,\n      activeByPriority: {\n        [RequestPriority.CRITICAL]: this.activeByPriority[RequestPriority.CRITICAL].size,\n        [RequestPriority.NORMAL]: this.activeByPriority[RequestPriority.NORMAL].size,\n        [RequestPriority.LOW]: this.activeByPriority[RequestPriority.LOW].size\n      },\n      maxConcurrent: this.maxGlobalConcurrent,\n      utilizationRate: (this.activeRequests.size / this.maxGlobalConcurrent) * 100,\n      averageWaitTime: this.calculateAverageWaitTime(),\n      queueDepthByPriority: {\n        [RequestPriority.CRITICAL]: this.queueInfo[RequestPriority.CRITICAL].size,\n        [RequestPriority.NORMAL]: this.queueInfo[RequestPriority.NORMAL].size,\n        [RequestPriority.LOW]: this.queueInfo[RequestPriority.LOW].size\n      }\n    };\n  }\n\n  // 计算平均等待时间\n  private calculateAverageWaitTime(): number {\n    const queuedRequests = Array.from(this.waitingRequests)\n      .map(id => this.activeRequests.get(id))\n      .filter(Boolean) as RequestInfo[];\n\n    if (queuedRequests.length === 0) return 0;\n\n    const now = Date.now();\n    const totalWaitTime = queuedRequests.reduce((sum, req) => {\n      return sum + (now - req.startTime);\n    }, 0);\n\n    return totalWaitTime / queuedRequests.length;\n  }\n\n  // 获取当前指标\n  getMetrics(): ConcurrencyMetrics {\n    return { ...this.metrics };\n  }\n\n  // 获取等待队列信息\n  getQueueInfo() {\n    return {\n      [RequestPriority.CRITICAL]: Array.from(this.queueInfo[RequestPriority.CRITICAL]),\n      [RequestPriority.NORMAL]: Array.from(this.queueInfo[RequestPriority.NORMAL]),\n      [RequestPriority.LOW]: Array.from(this.queueInfo[RequestPriority.LOW])\n    };\n  }\n\n  // 动态调整并发限制\n  adjustConcurrencyLimits(adjustments: Partial<typeof this.concurrencyLimits>): void {\n    Object.assign(this.concurrencyLimits, adjustments);\n    console.log('Concurrency limits updated:', this.concurrencyLimits);\n  }\n\n  // 调整全局并发限制\n  setGlobalConcurrentLimit(limit: number): void {\n    this.maxGlobalConcurrent = Math.max(1, limit);\n    this.updateMetrics();\n    console.log(`Global concurrent limit set to: ${limit}`);\n  }\n\n  // 设置抢占阈值\n  setPreemptiveThreshold(threshold: number): void {\n    this.preemptiveThreshold = Math.max(0, Math.min(1, threshold));\n  }\n\n  // 启动指标收集\n  private startMetricsCollection(): void {\n    setInterval(() => {\n      this.updateMetrics();\n      \n      // 记录高利用率告警\n      if (this.metrics.utilizationRate > 90) {\n        console.warn(`High concurrency utilization: ${this.metrics.utilizationRate}%`);\n      }\n    }, 1000);\n  }\n\n  // 获取系统状态\n  getSystemStatus() {\n    return {\n      health: this.metrics.utilizationRate < 80 ? 'healthy' : 'warning',\n      utilization: this.metrics.utilizationRate,\n      activeRequests: this.metrics.totalActive,\n      queueDepth: this.getTotalQueueDepth(),\n      isOverloaded: this.metrics.totalActive >= this.maxGlobalConcurrent\n    };\n  }\n\n  // 获取总队列深度\n  private getTotalQueueDepth(): number {\n    return Object.values(this.queueInfo).reduce((sum, queue) => sum + queue.size, 0);\n  }\n\n  // 清理超时请求\n  cleanupStaleRequests(): void {\n    const now = Date.now();\n    const staleThreshold = 300000; // 5分钟\n\n    for (const [id, request] of this.activeRequests.entries()) {\n      if (now - request.startTime > staleThreshold) {\n        console.warn(`Cleaning up stale request: ${id}`);\n        this.cancelRequest(id, 'stale_request_cleanup');\n      }\n    }\n  }\n\n  // 重置控制器\n  reset(): void {\n    // 取消所有活跃请求\n    for (const [id, request] of this.activeRequests.entries()) {\n      this.cancelRequest(id, 'controller_reset');\n    }\n\n    // 清空等待队列\n    for (const priority of Object.keys(this.queueInfo) as RequestPriority[]) {\n      this.queueInfo[priority].clear();\n    }\n    this.waitingRequests.clear();\n\n    // 重置指标\n    this.metrics = this.initializeMetrics();\n    \n    console.log('Concurrency controller reset');\n  }\n\n  // 销毁控制器\n  destroy(): void {\n    this.reset();\n    // 清理其他资源\n  }\n}\n\n// 基于优先级的并发控制器\nexport class PriorityBasedConcurrencyController {\n  private controller: GlobalConcurrencyController;\n\n  constructor() {\n    this.controller = GlobalConcurrencyController.getInstance();\n  }\n\n  // 按优先级检查并发限制\n  canExecute(priority: RequestPriority): boolean {\n    const metrics = this.controller.getMetrics();\n    const currentActive = metrics.activeByPriority[priority];\n    const limit = this.controller['concurrencyLimits'][priority];\n    \n    return currentActive < limit;\n  }\n\n  // 动态调整并发限制\n  adjustLimits(adjustments: Partial<Record<RequestPriority, number>>): void {\n    this.controller.adjustConcurrencyLimits(adjustments);\n  }\n\n  // 获取优先级指标\n  getPriorityMetrics(priority: RequestPriority) {\n    const metrics = this.controller.getMetrics();\n    return {\n      active: metrics.activeByPriority[priority],\n      queued: metrics.queueDepthByPriority[priority],\n      limit: this.controller['concurrencyLimits'][priority],\n      utilization: (metrics.activeByPriority[priority] / this.controller['concurrencyLimits'][priority]) * 100\n    };\n  }\n}\n\n// 智能调度器\nexport class IntelligentScheduler {\n  private controller: GlobalConcurrencyController;\n  private schedulingStrategy: 'fifo' | 'priority' | 'weighted_fair' | 'predictive' = 'weighted_fair';\n\n  constructor() {\n    this.controller = GlobalConcurrencyController.getInstance();\n  }\n\n  // 选择下一个执行的请求\n  selectNextRequest(): RequestInfo | null {\n    const queueInfo = this.controller.getQueueInfo();\n\n    switch (this.schedulingStrategy) {\n      case 'priority':\n        return this.scheduleByPriority(queueInfo);\n      \n      case 'weighted_fair':\n        return this.scheduleByWeightedFair(queueInfo);\n      \n      case 'predictive':\n        return this.scheduleByPrediction(queueInfo);\n      \n      default:\n        return this.scheduleFIFO(queueInfo);\n    }\n  }\n\n  // 优先级调度\n  private scheduleByPriority(queueInfo: ReturnType<GlobalConcurrencyController['getQueueInfo']>): RequestInfo | null {\n    const priorities = [RequestPriority.CRITICAL, RequestPriority.NORMAL, RequestPriority.LOW];\n    \n    for (const priority of priorities) {\n      const requestIds = queueInfo[priority];\n      if (requestIds.length > 0) {\n        const requestId = requestIds[0]; // 先进先出\n        // 这里应该从实际存储中获取请求信息\n        return null; // 简化实现\n      }\n    }\n    \n    return null;\n  }\n\n  // 加权公平调度\n  private scheduleByWeightedFair(queueInfo: ReturnType<GlobalConcurrencyController['getQueueInfo']>): RequestInfo | null {\n    const weights = {\n      [RequestPriority.CRITICAL]: 0.5,\n      [RequestPriority.NORMAL]: 0.35,\n      [RequestPriority.LOW]: 0.15\n    };\n\n    // 计算每个优先级的权重分数\n    const scores = Object.entries(queueInfo).map(([priority, requestIds]) => {\n      const p = parseInt(priority) as RequestPriority;\n      return {\n        priority: p,\n        score: requestIds.length * weights[p],\n        requestCount: requestIds.length\n      };\n    });\n\n    // 选择分数最高的优先级\n    const selected = scores\n      .filter(s => s.requestCount > 0)\n      .sort((a, b) => b.score - a.score)[0];\n\n    if (selected) {\n      const requestId = queueInfo[selected.priority][0];\n      // 返回请求信息\n      return null; // 简化实现\n    }\n\n    return null;\n  }\n\n  // 预测性调度\n  private scheduleByPrediction(queueInfo: ReturnType<GlobalConcurrencyController['getQueueInfo']>): RequestInfo | null {\n    // 基于历史数据和用户行为预测最优调度\n    const predictions = this.generatePredictions(queueInfo);\n    \n    // 选择预期影响最大的请求\n    return predictions.sort((a, b) => b.expectedImpact - a.expectedImpact)[0]?.requestInfo || null;\n  }\n\n  // 生成预测\n  private generatePredictions(queueInfo: ReturnType<GlobalConcurrencyController['getQueueInfo']>) {\n    // 实现预测算法\n    // 这里可以根据用户行为、网络条件、系统负载等生成预测\n    return [];\n  }\n\n  // FIFO调度\n  private scheduleFIFO(queueInfo: ReturnType<GlobalConcurrencyController['getQueueInfo']>): RequestInfo | null {\n    // 按创建时间排序\n    const allRequests = Object.entries(queueInfo)\n      .flatMap(([priority, requestIds]) => \n        requestIds.map(id => ({ id, priority: parseInt(priority) as RequestPriority }))\n      )\n      .sort((a, b) => a.id.localeCompare(b.id));\n\n    return allRequests.length > 0 ? null : null; // 简化实现\n  }\n\n  // 设置调度策略\n  setSchedulingStrategy(strategy: typeof this.schedulingStrategy): void {\n    this.schedulingStrategy = strategy;\n    console.log(`Scheduling strategy changed to: ${strategy}`);\n  }\n}\n\n// 单例导出\nexport const concurrencyController = GlobalConcurrencyController.getInstance();\nexport const priorityConcurrencyController = new PriorityBasedConcurrencyController();\nexport const intelligentScheduler = new IntelligentScheduler();\n\nexport default GlobalConcurrencyController;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/css-conflict-fixer.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":116,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":116,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2836,2848],"text":"(mapping[cls] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2836,2848],"text":"(mapping[cls] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2836,2848],"text":"(Boolean(mapping[cls]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":116,"column":19,"nodeType":"MemberExpression","endLine":116,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":116,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":116,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2849,2851],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CSS类名冲突修复工具\n * 为高频冲突的类名提供语义化替代方案\n */\n\nexport const semanticClassNames = {\n  // 布局相关\n  layout: {\n    flex: 'luckymart-layout-flex',\n    center: 'luckymart-layout-center',\n    spacing: {\n      small: 'luckymart-spacing-sm',\n      medium: 'luckymart-spacing-md', \n      large: 'luckymart-spacing-lg'\n    },\n    container: 'luckymart-layout-container',\n    wrapper: 'luckymart-layout-wrapper'\n  },\n\n  // 文本颜色\n  text: {\n    primary: 'luckymart-text-primary',\n    secondary: 'luckymart-text-secondary',\n    success: 'luckymart-text-success',\n    error: 'luckymart-text-error',\n    warning: 'luckymart-text-warning',\n    info: 'luckymart-text-info'\n  },\n\n  // 背景色\n  background: {\n    primary: 'luckymart-bg-primary',\n    secondary: 'luckymart-bg-secondary',\n    success: 'luckymart-bg-success',\n    error: 'luckymart-bg-error'\n  },\n\n  // 间距\n  margin: {\n    xs: 'luckymart-m-xs',\n    sm: 'luckymart-m-sm',\n    md: 'luckymart-m-md',\n    lg: 'luckymart-m-lg',\n    xl: 'luckymart-m-xl'\n  },\n\n  padding: {\n    xs: 'luckymart-p-xs',\n    sm: 'luckymart-p-sm',\n    md: 'luckymart-p-md',\n    lg: 'luckymart-p-lg',\n    xl: 'luckymart-p-xl'\n  },\n\n  // 尺寸\n  size: {\n    xs: 'luckymart-size-xs',\n    sm: 'luckymart-size-sm',\n    md: 'luckymart-size-md',\n    lg: 'luckymart-size-lg',\n    xl: 'luckymart-size-xl'\n  },\n\n  // 动画\n  animation: {\n    spin: 'luckymart-animation-spin',\n    pulse: 'luckymart-animation-pulse',\n    bounce: 'luckymart-animation-bounce',\n    fade: 'luckymart-animation-fade',\n    slide: 'luckymart-animation-slide'\n  },\n\n  // 组件特定\n  component: {\n    button: {\n      primary: 'luckymart-btn-primary',\n      secondary: 'luckymart-btn-secondary',\n      success: 'luckymart-btn-success',\n      error: 'luckymart-btn-error'\n    },\n    card: {\n      base: 'luckymart-card-base',\n      elevated: 'luckymart-card-elevated',\n      bordered: 'luckymart-card-bordered'\n    },\n    input: {\n      base: 'luckymart-input-base',\n      focused: 'luckymart-input-focused',\n      error: 'luckymart-input-error'\n    }\n  }\n};\n\n/**\n * 快速类名映射工具\n */\nexport const classNameMapper = {\n  // 将通用类名映射到语义化类名\n  toSemantic: (commonClasses: string[]): string => {\n    const mapping: Record<string, string> = {\n      'flex': semanticClassNames.layout.flex,\n      'items-center': semanticClassNames.layout.center,\n      'space-x-3': semanticClassNames.layout.spacing.medium,\n      'mb-4': semanticClassNames.margin.md,\n      'animate-spin': semanticClassNames.animation.spin,\n      'text-blue-500': semanticClassNames.text.primary,\n      'text-green-500': semanticClassNames.text.success,\n      'text-red-500': semanticClassNames.text.error,\n      'h-5': semanticClassNames.size.sm,\n      'w-5': semanticClassNames.size.sm,\n      'p-4': semanticClassNames.padding.md,\n      'm-4': semanticClassNames.margin.md\n    };\n\n    return commonClasses\n      .map(cls => mapping[cls] || cls)\n      .join(' ');\n  },\n\n  // 为特定组件生成专用类名\n  forComponent: (componentName: string, baseClasses: string[]): string => {\n    const prefix = `luckymart-${componentName.toLowerCase()}`;\n    return `${prefix}-container ${baseClasses.join(' ')}`;\n  }\n};\n\n/**\n * 主题系统\n */\nexport const theme = {\n  colors: {\n    primary: {\n      50: '#eff6ff',\n      100: '#dbeafe', \n      500: '#3b82f6',\n      600: '#2563eb',\n      700: '#1d4ed8'\n    },\n    success: {\n      50: '#f0fdf4',\n      100: '#dcfce7',\n      500: '#22c55e', \n      600: '#16a34a'\n    },\n    error: {\n      50: '#fef2f2',\n      100: '#fee2e2',\n      500: '#ef4444',\n      600: '#dc2626'\n    }\n  },\n  \n  spacing: {\n    xs: '0.25rem',\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem'\n  },\n  \n  borderRadius: {\n    sm: '0.125rem',\n    md: '0.375rem',\n    lg: '0.5rem',\n    xl: '0.75rem'\n  }\n};\n\n/**\n * CSS模块生成工具\n */\nexport const generateCSSModule = (componentName: string) => {\n  const moduleName = componentName.toLowerCase();\n  return {\n    container: `luckymart-${moduleName}-container`,\n    content: `luckymart-${moduleName}-content`,\n    header: `luckymart-${moduleName}-header`,\n    footer: `luckymart-${moduleName}-footer`,\n    button: `luckymart-${moduleName}-button`,\n    input: `luckymart-${moduleName}-input`,\n    title: `luckymart-${moduleName}-title`,\n    description: `luckymart-${moduleName}-description`\n  };\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/feedback-analytics.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3962,3965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3962,3965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'resolvedRate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":233,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resolvedRate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":233,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":233,"endColumn":23},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":240,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":240,"endColumn":22,"fix":{"range":[6520,6830],"text":"for (const feedback of feedbacks) {\n      const lang = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageStats[lang]) {\n        languageStats[lang] = { count: 0, totalRating: 0 };\n      }\n      languageStats[lang].count++;\n      languageStats[lang].totalRating += feedback.rating;\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":242,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":244,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[6634,6729],"text":"languageStats[lang] ??= { count: 0, totalRating: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":242,"column":12,"nodeType":"MemberExpression","endLine":242,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":243,"column":9,"nodeType":"MemberExpression","endLine":243,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":245,"column":7,"nodeType":"MemberExpression","endLine":245,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":246,"column":7,"nodeType":"MemberExpression","endLine":246,"endColumn":26},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":290,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":290,"endColumn":22,"fix":{"range":[7842,8840],"text":"for (const feedback of feedbacks) {\n      // 基于评分的情感分数\n      const ratingScore = (feedback.rating - 3) / 2; // 转换为-1到1\n      sentimentScores.push(ratingScore);\n\n      // 基于评论的情感分析（简化关键词匹配）\n      const comment = (feedback.comment || '').toLowerCase();\n      const suggestion = (feedback.improvementSuggestion || '').toLowerCase();\n      const text = comment + ' ' + suggestion;\n\n      if (text.includes('错误') || text.includes('不对') || text.includes('糟糕')) {\n        emotionCounts.anger++;\n      }\n      if (text.includes('困惑') || text.includes('不清楚') || text.includes('不明白')) {\n        emotionCounts.confusion++;\n      }\n      if (text.includes('满意') || text.includes('好') || text.includes('不错')) {\n        emotionCounts.satisfaction++;\n      }\n      if (text.includes('谢谢') || text.includes('感谢') || text.includes('很好')) {\n        emotionCounts.appreciation++;\n      }\n      if (text.includes('问题') || text.includes('需要改进') || text.includes('建议')) {\n        emotionCounts.frustration++;\n      }\n    }"}},{"ruleId":"complexity","severity":2,"message":"Arrow function has a complexity of 18. Maximum allowed is 10.","line":290,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":315,"endColumn":6},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":296,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":296,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8050,8066],"text":"(feedback.comment != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8050,8066],"text":"(feedback.comment ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8050,8066],"text":"(Boolean(feedback.comment))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":296,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":296,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8067,8069],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":297,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":297,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8115,8145],"text":"(feedback.improvementSuggestion != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8115,8145],"text":"(feedback.improvementSuggestion ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8115,8145],"text":"(Boolean(feedback.improvementSuggestion))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":297,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":297,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8146,8148],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":298,"column":20,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":298,"endColumn":46,"fix":{"range":[8187,8213],"text":"`${comment  } ${  suggestion}`"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":345,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":345,"endColumn":47,"fix":{"range":[9843,9866],"text":"{return 'very_negative';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":346,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":346,"endColumn":42,"fix":{"range":[9890,9908],"text":"{return 'negative';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":347,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":347,"endColumn":46,"fix":{"range":[9931,9954],"text":"{return 'very_positive';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":348,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":348,"endColumn":41,"fix":{"range":[9977,9995],"text":"{return 'positive';}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":358,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":358,"endColumn":22,"fix":{"range":[10214,10461],"text":"for (const feedback of feedbacks) {\n      const dateKey = feedback.timestamp.toISOString().split('T')[0];\n      if (!dailyGroups[dateKey]) {\n        dailyGroups[dateKey] = [];\n      }\n      dailyGroups[dateKey].push((feedback.rating - 3) / 2);\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":360,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":362,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[10322,10393],"text":"dailyGroups[dateKey] ??= [];"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":360,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":360,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10327,10347],"text":"(Boolean(dailyGroups[dateKey]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":360,"column":12,"nodeType":"MemberExpression","endLine":360,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":361,"column":9,"nodeType":"MemberExpression","endLine":361,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":363,"column":7,"nodeType":"MemberExpression","endLine":363,"endColumn":27},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":381,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":381,"endColumn":22,"fix":{"range":[10921,11164],"text":"for (const feedback of feedbacks) {\n      const lang = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageGroups[lang]) {\n        languageGroups[lang] = [];\n      }\n      languageGroups[lang].push(feedback.rating);\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":383,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":385,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[11035,11106],"text":"languageGroups[lang] ??= [];"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":383,"column":12,"nodeType":"MemberExpression","endLine":383,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":384,"column":9,"nodeType":"MemberExpression","endLine":384,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":386,"column":7,"nodeType":"MemberExpression","endLine":386,"endColumn":27},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":410,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":410,"endColumn":22,"fix":{"range":[11765,12512],"text":"for (const feedback of feedbacks) {\n      feedback.issues.forEach(issue => {\n        const patternKey = `${issue.type}_${issue.description}`;\n        \n        if (!patterns.has(patternKey)) {\n          patterns.set(patternKey, {\n            count: 0,\n            languages: new Set(),\n            contexts: new Set(),\n            severities: [],\n            descriptions: []\n          });\n        }\n        \n        const pattern = patterns.get(patternKey)!;\n        pattern.count++;\n        pattern.languages.add(`${feedback.sourceLanguage}→${feedback.targetLanguage}`);\n        pattern.contexts.add(feedback.translationContext);\n        pattern.severities.push(issue.severity);\n        pattern.descriptions.push(issue.description);\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":411,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":411,"endColumn":30,"fix":{"range":[11803,12504],"text":"for (const issue of feedback.issues) {\n        const patternKey = `${issue.type}_${issue.description}`;\n        \n        if (!patterns.has(patternKey)) {\n          patterns.set(patternKey, {\n            count: 0,\n            languages: new Set(),\n            contexts: new Set(),\n            severities: [],\n            descriptions: []\n          });\n        }\n        \n        const pattern = patterns.get(patternKey)!;\n        pattern.count++;\n        pattern.languages.add(`${feedback.sourceLanguage}→${feedback.targetLanguage}`);\n        pattern.contexts.add(feedback.translationContext);\n        pattern.severities.push(issue.severity);\n        pattern.descriptions.push(issue.description);\n      }"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":424,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":424,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":456,"column":7,"nodeType":"MemberExpression","endLine":456,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":456,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":456,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13479,13487],"text":"(acc[sev] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13479,13487],"text":"(acc[sev] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13479,13487],"text":"(Boolean(acc[sev]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":456,"column":19,"nodeType":"MemberExpression","endLine":456,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":456,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":456,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13488,13490],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":460,"column":68,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":460,"endColumn":86,"fix":{"range":[13626,13644],"text":"{return 'critical';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":461,"column":68,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":461,"endColumn":82,"fix":{"range":[13712,13726],"text":"{return 'high';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":462,"column":39,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":462,"endColumn":55,"fix":{"range":[13765,13781],"text":"{return 'medium';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":469,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":469,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13866,13869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13866,13869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":471,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":471,"endColumn":67,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[13904,13962],"text":"Boolean(pattern.descriptions.some((d: string) => d.includes('术语')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":474,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":474,"endColumn":67,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14007,14065],"text":"Boolean(pattern.descriptions.some((d: string) => d.includes('语法')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":477,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":477,"endColumn":67,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14108,14166],"text":"Boolean(pattern.descriptions.some((d: string) => d.includes('语境')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Method 'categorizePatternType' has a complexity of 11. Maximum allowed is 10.","line":486,"column":32,"nodeType":"FunctionExpression","messageId":"complex","endLine":493,"endColumn":4},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":487,"column":74,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":487,"endColumn":95,"fix":{"range":[14409,14430],"text":"{return 'terminology';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":488,"column":70,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":488,"endColumn":87,"fix":{"range":[14500,14517],"text":"{return 'grammar';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":489,"column":70,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":489,"endColumn":87,"fix":{"range":[14587,14604],"text":"{return 'context';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":490,"column":71,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":490,"endColumn":89,"fix":{"range":[14675,14693],"text":"{return 'cultural';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":491,"column":68,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":491,"endColumn":83,"fix":{"range":[14761,14776],"text":"{return 'style';}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":509,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":509,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[15225,15239],"text":"(Boolean(fixes[baseKey]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":509,"column":12,"nodeType":"MemberExpression","endLine":509,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":509,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":509,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15240,15242],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":576,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":576,"endColumn":22,"fix":{"range":[16933,17196],"text":"for (const feedback of feedbacks) {\n      const date = feedback.timestamp;\n      hourly[date.getHours()]++;\n      daily[date.getDay()]++;\n      const weekOfYear = Math.ceil(date.getTime() / (7 * 24 * 60 * 60 * 1000));\n      weekly[Math.min(weekOfYear, 51)]++;\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":591,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorOther","endLine":591,"endColumn":84,"suggestions":[{"messageId":"explicitBooleanReturnType","fix":{"range":[17405,17406],"text":"(f): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":591,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":591,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17410,17419],"text":"(f.comment != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[17410,17419],"text":"(f.comment ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17410,17419],"text":"(Boolean(f.comment))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":593,"column":14,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":593,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17527,17544],"text":"((f.comment?.length) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[17527,17544],"text":"((f.comment?.length) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17527,17544],"text":"(Boolean((f.comment?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":593,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":593,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17545,17547],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":596,"column":8,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":596,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17620,17637],"text":"((f.comment?.length) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[17620,17637],"text":"((f.comment?.length) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17620,17637],"text":"(Boolean((f.comment?.length)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":596,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":596,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17638,17640],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":615,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":615,"endColumn":22,"fix":{"range":[18368,18692],"text":"for (const feedback of feedbacks) {\n      const region = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageGroups[region]) {\n        languageGroups[region] = { count: 0, totalRating: 0 };\n      }\n      languageGroups[region].count++;\n      languageGroups[region].totalRating += feedback.rating;\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":617,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":619,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[18484,18585],"text":"languageGroups[region] ??= { count: 0, totalRating: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":617,"column":12,"nodeType":"MemberExpression","endLine":617,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":618,"column":9,"nodeType":"MemberExpression","endLine":618,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":620,"column":7,"nodeType":"MemberExpression","endLine":620,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":621,"column":7,"nodeType":"MemberExpression","endLine":621,"endColumn":29},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":709,"column":25,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":709,"endColumn":32,"fix":{"range":[21145,21701],"text":"for (const [index, issue] of highFrequencyIssues.entries()) {\n      opportunities.push({\n        id: `quick_win_${index}`,\n        type: 'quick_win',\n        title: `修复${issue.type}问题`,\n        description: `针对高频出现的${issue.type}问题进行快速修复`,\n        impact: {\n          userSatisfaction: 15,\n          businessValue: 20,\n          implementation: 'low'\n        },\n        effort: {\n          timeRequired: 8,\n          resources: ['翻译团队', '质量控制'],\n          dependencies: ['问题确认']\n        },\n        priority: 8,\n        roi: 2.5,\n        riskLevel: 'low'\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":740,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":740,"endColumn":22,"fix":{"range":[21885,22045],"text":"for (const feedback of feedbacks) {\n      feedback.issues.forEach(issue => {\n        issueCounts[issue.type] = (issueCounts[issue.type] || 0) + 1;\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":741,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":741,"endColumn":30,"fix":{"range":[21923,22037],"text":"for (const issue of feedback.issues) {\n        issueCounts[issue.type] = (issueCounts[issue.type] || 0) + 1;\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":742,"column":36,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":742,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[21993,22016],"text":"(issueCounts[issue.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[21993,22016],"text":"(issueCounts[issue.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[21993,22016],"text":"(Boolean(issueCounts[issue.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":742,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":742,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22017,22019],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":60,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":13,"fixableWarningCount":11,"source":"/**\n * 反馈数据分析工具\n * 用于深度分析和挖掘用户反馈数据，提供数据驱动的翻译优化建议\n */\n\nimport { FeedbackData } from '../components/TranslationFeedbackCollector';\nimport { feedbackDataManager } from './feedback-data-manager';\n\nexport interface DeepAnalysisResult {\n  overview: AnalysisOverview;\n  sentimentAnalysis: SentimentAnalysis;\n  problemPatterns: ProblemPattern[];\n  userBehaviorAnalysis: UserBehaviorAnalysis;\n  qualityTrends: QualityTrend[];\n  improvementOpportunities: ImprovementOpportunity[];\n  predictions: PredictionResult[];\n  recommendations: DataDrivenRecommendation[];\n}\n\nexport interface AnalysisOverview {\n  totalFeedbacks: number;\n  analysisPeriod: {\n    start: Date;\n    end: Date;\n    duration: number; // 天数\n  };\n  keyMetrics: {\n    averageRating: number;\n    satisfactionRate: number; // 4-5星占比\n    criticalIssuesCount: number;\n    resolutionRate: number;\n    averageResponseTime: number; // 小时\n  };\n  topLanguages: Array<{\n    language: string;\n    feedbackCount: number;\n    averageRating: number;\n  }>;\n}\n\nexport interface SentimentAnalysis {\n  overallSentiment: 'very_negative' | 'negative' | 'neutral' | 'positive' | 'very_positive';\n  sentimentScore: number; // -1 to 1\n  emotionDistribution: {\n    anger: number;\n    frustration: number;\n    satisfaction: number;\n    appreciation: number;\n    confusion: number;\n  };\n  sentimentTrends: Array<{\n    date: string;\n    sentimentScore: number;\n    feedbackCount: number;\n  }>;\n  languageSentiment: Array<{\n    language: string;\n    sentimentScore: number;\n    feedbackCount: number;\n  }>;\n}\n\nexport interface ProblemPattern {\n  id: string;\n  pattern: string;\n  frequency: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  affectedLanguages: string[];\n  commonContexts: string[];\n  userImpact: number; // 0-100\n  rootCause: string;\n  patternType: 'terminology' | 'grammar' | 'style' | 'context' | 'cultural' | 'technical';\n  suggestedFix: string;\n  confidence: number; // 0-1\n}\n\nexport interface UserBehaviorAnalysis {\n  userSegments: Array<{\n    segment: string;\n    size: number;\n    characteristics: string[];\n    satisfactionLevel: number;\n    commonIssues: string[];\n  }>;\n  feedbackFrequency: {\n    hourly: number[];\n    daily: number[];\n    weekly: number[];\n  };\n  userEngagement: {\n    averageFeedbackLength: number;\n    detailedFeedbackRatio: number;\n    repeatReporterRatio: number;\n  };\n  geographicDistribution: Array<{\n    region: string;\n    feedbackCount: number;\n    averageRating: number;\n  }>;\n}\n\nexport interface QualityTrend {\n  metric: string;\n  trend: 'improving' | 'declining' | 'stable';\n  changeRate: number; // 百分比\n  currentValue: number;\n  previousValue: number;\n  confidence: number;\n  contributingFactors: string[];\n  forecast: {\n    nextWeek: number;\n    nextMonth: number;\n    confidence: number;\n  };\n}\n\nexport interface ImprovementOpportunity {\n  id: string;\n  type: 'quick_win' | 'strategic' | 'infrastructure' | 'training';\n  title: string;\n  description: string;\n  impact: {\n    userSatisfaction: number;\n    businessValue: number;\n    implementation: 'low' | 'medium' | 'high';\n  };\n  effort: {\n    timeRequired: number; // 小时\n    resources: string[];\n    dependencies: string[];\n  };\n  priority: number; // 1-10\n  roi: number;\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface PredictionResult {\n  metric: string;\n  prediction: {\n    nextWeek: number;\n    nextMonth: number;\n    nextQuarter: number;\n  };\n  confidence: number;\n  factors: string[];\n  warnings: string[];\n}\n\nexport interface DataDrivenRecommendation {\n  id: string;\n  category: 'immediate' | 'short_term' | 'long_term';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  title: string;\n  description: string;\n  rationale: string;\n  expectedOutcome: string;\n  implementation: {\n    steps: string[];\n    timeline: string;\n    resources: string[];\n    risks: string[];\n  };\n  successMetrics: string[];\n  monitoringPlan: string;\n}\n\nclass FeedbackAnalytics {\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\n  private readonly CACHE_DURATION = 10 * 60 * 1000; // 10分钟\n\n  /**\n   * 执行深度分析\n   */\n  async performDeepAnalysis(period: 'week' | 'month' | 'quarter' = 'month'): Promise<DeepAnalysisResult> {\n    const cacheKey = `deep_analysis_${period}`;\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n      return cached.data;\n    }\n\n    const endDate = new Date();\n    const startDate = new Date();\n    \n    switch (period) {\n      case 'week':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(endDate.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(endDate.getMonth() - 3);\n        break;\n    }\n\n    const filter = { dateRange: { start: startDate, end: endDate } };\n    const allFeedbacks = feedbackDataManager.getAllFeedback(filter);\n    \n    if (allFeedbacks.length === 0) {\n      throw new Error('分析期间内没有反馈数据');\n    }\n\n    const result: DeepAnalysisResult = {\n      overview: this.generateOverview(allFeedbacks, startDate, endDate),\n      sentimentAnalysis: this.performSentimentAnalysis(allFeedbacks),\n      problemPatterns: this.identifyProblemPatterns(allFeedbacks),\n      userBehaviorAnalysis: this.analyzeUserBehavior(allFeedbacks),\n      qualityTrends: this.analyzeQualityTrends(allFeedbacks),\n      improvementOpportunities: this.identifyImprovementOpportunities(allFeedbacks),\n      predictions: this.generatePredictions(allFeedbacks),\n      recommendations: this.generateRecommendations(allFeedbacks)\n    };\n\n    // 缓存结果\n    this.cache.set(cacheKey, { data: result, timestamp: Date.now() });\n\n    return result;\n  }\n\n  /**\n   * 生成概览分析\n   */\n  private generateOverview(feedbacks: FeedbackData[], startDate: Date, endDate: Date): AnalysisOverview {\n    const totalFeedbacks = feedbacks.length;\n    const averageRating = feedbacks.reduce((sum, f) => sum + f.rating, 0) / totalFeedbacks;\n    const satisfactionRate = feedbacks.filter(f => f.rating >= 4).length / totalFeedbacks;\n    const criticalIssuesCount = feedbacks.filter(f => \n      f.urgency === 'high' && f.issues.some(issue => \n        issue.severity === 'critical' || issue.severity === 'major'\n      )\n    ).length;\n    const resolvedRate = feedbacks.filter(f => f.isResolved).length / totalFeedbacks;\n    \n    // 计算平均响应时间（简化处理）\n    const averageResponseTime = 24; // 假设24小时平均响应时间\n\n    // 统计语言分布\n    const languageStats: { [key: string]: { count: number; totalRating: number } } = {};\n    feedbacks.forEach(feedback => {\n      const lang = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageStats[lang]) {\n        languageStats[lang] = { count: 0, totalRating: 0 };\n      }\n      languageStats[lang].count++;\n      languageStats[lang].totalRating += feedback.rating;\n    });\n\n    const topLanguages = Object.entries(languageStats)\n      .map(([lang, stats]) => ({\n        language: lang,\n        feedbackCount: stats.count,\n        averageRating: stats.totalRating / stats.count\n      }))\n      .sort((a, b) => b.feedbackCount - a.feedbackCount)\n      .slice(0, 5);\n\n    return {\n      totalFeedbacks,\n      analysisPeriod: {\n        start: startDate,\n        end: endDate,\n        duration: Math.ceil((endDate.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000))\n      },\n      keyMetrics: {\n        averageRating,\n        satisfactionRate,\n        criticalIssuesCount,\n        resolutionRate,\n        averageResponseTime\n      },\n      topLanguages\n    };\n  }\n\n  /**\n   * 执行情感分析\n   */\n  private performSentimentAnalysis(feedbacks: FeedbackData[]): SentimentAnalysis {\n    // 简化的情感分析，基于评分和评论关键词\n    const sentimentScores: number[] = [];\n    const emotionCounts = {\n      anger: 0,\n      frustration: 0,\n      satisfaction: 0,\n      appreciation: 0,\n      confusion: 0\n    };\n\n    feedbacks.forEach(feedback => {\n      // 基于评分的情感分数\n      const ratingScore = (feedback.rating - 3) / 2; // 转换为-1到1\n      sentimentScores.push(ratingScore);\n\n      // 基于评论的情感分析（简化关键词匹配）\n      const comment = (feedback.comment || '').toLowerCase();\n      const suggestion = (feedback.improvementSuggestion || '').toLowerCase();\n      const text = comment + ' ' + suggestion;\n\n      if (text.includes('错误') || text.includes('不对') || text.includes('糟糕')) {\n        emotionCounts.anger++;\n      }\n      if (text.includes('困惑') || text.includes('不清楚') || text.includes('不明白')) {\n        emotionCounts.confusion++;\n      }\n      if (text.includes('满意') || text.includes('好') || text.includes('不错')) {\n        emotionCounts.satisfaction++;\n      }\n      if (text.includes('谢谢') || text.includes('感谢') || text.includes('很好')) {\n        emotionCounts.appreciation++;\n      }\n      if (text.includes('问题') || text.includes('需要改进') || text.includes('建议')) {\n        emotionCounts.frustration++;\n      }\n    });\n\n    const overallSentiment = this.categorizeSentiment(sentimentScores.reduce((a, b) => a + b, 0) / sentimentScores.length);\n    const sentimentScore = sentimentScores.reduce((a, b) => a + b, 0) / sentimentScores.length;\n\n    // 生成情感趋势\n    const sentimentTrends = this.generateSentimentTrends(feedbacks);\n\n    // 语言情感分析\n    const languageSentiment = this.analyzeLanguageSentiment(feedbacks);\n\n    return {\n      overallSentiment,\n      sentimentScore,\n      emotionDistribution: {\n        anger: emotionCounts.anger / feedbacks.length,\n        frustration: emotionCounts.frustration / feedbacks.length,\n        satisfaction: emotionCounts.satisfaction / feedbacks.length,\n        appreciation: emotionCounts.appreciation / feedbacks.length,\n        confusion: emotionCounts.confusion / feedbacks.length\n      },\n      sentimentTrends,\n      languageSentiment\n    };\n  }\n\n  /**\n   * 分类情感\n   */\n  private categorizeSentiment(score: number): SentimentAnalysis['overallSentiment'] {\n    if (score <= -0.5) return 'very_negative';\n    if (score <= -0.2) return 'negative';\n    if (score >= 0.5) return 'very_positive';\n    if (score >= 0.2) return 'positive';\n    return 'neutral';\n  }\n\n  /**\n   * 生成情感趋势\n   */\n  private generateSentimentTrends(feedbacks: FeedbackData[]): SentimentAnalysis['sentimentTrends'] {\n    const dailyGroups: { [key: string]: number[] } = {};\n    \n    feedbacks.forEach(feedback => {\n      const dateKey = feedback.timestamp.toISOString().split('T')[0];\n      if (!dailyGroups[dateKey]) {\n        dailyGroups[dateKey] = [];\n      }\n      dailyGroups[dateKey].push((feedback.rating - 3) / 2);\n    });\n\n    return Object.entries(dailyGroups)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([date, scores]) => ({\n        date,\n        sentimentScore: scores.reduce((a, b) => a + b, 0) / scores.length,\n        feedbackCount: scores.length\n      }));\n  }\n\n  /**\n   * 分析语言情感\n   */\n  private analyzeLanguageSentiment(feedbacks: FeedbackData[]): SentimentAnalysis['languageSentiment'] {\n    const languageGroups: { [key: string]: number[] } = {};\n    \n    feedbacks.forEach(feedback => {\n      const lang = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageGroups[lang]) {\n        languageGroups[lang] = [];\n      }\n      languageGroups[lang].push(feedback.rating);\n    });\n\n    return Object.entries(languageGroups)\n      .map(([language, ratings]) => ({\n        language,\n        sentimentScore: (ratings.reduce((a, b) => a + b, 0) / ratings.length - 3) / 2,\n        feedbackCount: ratings.length\n      }))\n      .sort((a, b) => b.feedbackCount - a.feedbackCount);\n  }\n\n  /**\n   * 识别问题模式\n   */\n  private identifyProblemPatterns(feedbacks: FeedbackData[]): ProblemPattern[] {\n    const patterns: Map<string, {\n      count: number;\n      languages: Set<string>;\n      contexts: Set<string>;\n      severities: string[];\n      descriptions: string[];\n    }> = new Map();\n\n    feedbacks.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        const patternKey = `${issue.type}_${issue.description}`;\n        \n        if (!patterns.has(patternKey)) {\n          patterns.set(patternKey, {\n            count: 0,\n            languages: new Set(),\n            contexts: new Set(),\n            severities: [],\n            descriptions: []\n          });\n        }\n        \n        const pattern = patterns.get(patternKey)!;\n        pattern.count++;\n        pattern.languages.add(`${feedback.sourceLanguage}→${feedback.targetLanguage}`);\n        pattern.contexts.add(feedback.translationContext);\n        pattern.severities.push(issue.severity);\n        pattern.descriptions.push(issue.description);\n      });\n    });\n\n    return Array.from(patterns.entries())\n      .filter(([, pattern]) => pattern.count >= 3) // 至少3次出现\n      .map(([patternKey, pattern], index) => ({\n        id: `pattern_${index}`,\n        pattern: patternKey,\n        frequency: pattern.count,\n        severity: this.calculatePatternSeverity(pattern.severities),\n        affectedLanguages: Array.from(pattern.languages),\n        commonContexts: Array.from(pattern.contexts),\n        userImpact: Math.min(pattern.count * 10, 100),\n        rootCause: this.identifyRootCause(pattern),\n        patternType: this.categorizePatternType(patternKey),\n        suggestedFix: this.generatePatternFix(patternKey),\n        confidence: Math.min(pattern.count / 10, 0.9)\n      }))\n      .sort((a, b) => b.frequency - a.frequency);\n  }\n\n  /**\n   * 计算模式严重程度\n   */\n  private calculatePatternSeverity(severities: string[]): ProblemPattern['severity'] {\n    const severityCounts = severities.reduce((acc, sev) => {\n      acc[sev] = (acc[sev] || 0) + 1;\n      return acc;\n    }, {} as { [key: string]: number });\n\n    if (severityCounts.critical >= 2 || severityCounts.major >= 3) return 'critical';\n    if (severityCounts.major >= 2 || severityCounts.moderate >= 4) return 'high';\n    if (severityCounts.moderate >= 2) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * 识别根本原因\n   */\n  private identifyRootCause(pattern: any): string {\n    // 简化的根因分析\n    if (pattern.descriptions.some((d: string) => d.includes('术语'))) {\n      return '术语库不完整或不准确';\n    }\n    if (pattern.descriptions.some((d: string) => d.includes('语法'))) {\n      return '语法规则应用错误';\n    }\n    if (pattern.descriptions.some((d: string) => d.includes('语境'))) {\n      return '上下文理解不足';\n    }\n    return '需要进一步调查';\n  }\n\n  /**\n   * 分类模式类型\n   */\n  private categorizePatternType(patternKey: string): ProblemPattern['patternType'] {\n    if (patternKey.includes('terminology') || patternKey.includes('术语')) return 'terminology';\n    if (patternKey.includes('grammar') || patternKey.includes('语法')) return 'grammar';\n    if (patternKey.includes('context') || patternKey.includes('语境')) return 'context';\n    if (patternKey.includes('cultural') || patternKey.includes('文化')) return 'cultural';\n    if (patternKey.includes('style') || patternKey.includes('风格')) return 'style';\n    return 'technical';\n  }\n\n  /**\n   * 生成模式修复建议\n   */\n  private generatePatternFix(patternKey: string): string {\n    const fixes: { [key: string]: string } = {\n      'terminology': '更新术语库，确保专业术语翻译一致性',\n      'grammar': '改进语法检查规则，加强语法验证',\n      'context': '增强上下文分析，提高语境适配能力',\n      'cultural': '建立文化适应指南，加强本地化培训',\n      'style': '制定风格指南，统一表达规范',\n      'technical': '修复技术实现问题，优化翻译算法'\n    };\n\n    const baseKey = patternKey.split('_')[0];\n    return fixes[baseKey] || '需要进一步分析和修复';\n  }\n\n  /**\n   * 分析用户行为\n   */\n  private analyzeUserBehavior(feedbacks: FeedbackData[]): UserBehaviorAnalysis {\n    // 用户分群分析\n    const userSegments = this.identifyUserSegments(feedbacks);\n    \n    // 反馈频率分析\n    const feedbackFrequency = this.analyzeFeedbackFrequency(feedbacks);\n    \n    // 用户参与度分析\n    const userEngagement = this.analyzeUserEngagement(feedbacks);\n    \n    // 地理分布分析\n    const geographicDistribution = this.analyzeGeographicDistribution(feedbacks);\n\n    return {\n      userSegments,\n      feedbackFrequency,\n      userEngagement,\n      geographicDistribution\n    };\n  }\n\n  /**\n   * 识别用户分群\n   */\n  private identifyUserSegments(feedbacks: FeedbackData[]): UserBehaviorAnalysis['userSegments'] {\n    // 简化的用户分群逻辑\n    const segments = [\n      {\n        segment: '质量敏感型用户',\n        size: Math.floor(feedbacks.length * 0.3),\n        characteristics: ['频繁反馈', '详细评论', '低容忍度'],\n        satisfactionLevel: 3.2,\n        commonIssues: ['准确性', '专业性']\n      },\n      {\n        segment: '普通用户',\n        size: Math.floor(feedbacks.length * 0.5),\n        characteristics: ['偶尔反馈', '简单描述', '中等要求'],\n        satisfactionLevel: 3.8,\n        commonIssues: ['理解度', '表达方式']\n      },\n      {\n        segment: '满意用户',\n        size: Math.floor(feedbacks.length * 0.2),\n        characteristics: ['积极反馈', '正面评价', '高容忍度'],\n        satisfactionLevel: 4.5,\n        commonIssues: ['改进建议']\n      }\n    ];\n\n    return segments;\n  }\n\n  /**\n   * 分析反馈频率\n   */\n  private analyzeFeedbackFrequency(feedbacks: FeedbackData[]): UserBehaviorAnalysis['feedbackFrequency'] {\n    const hourly = new Array(24).fill(0);\n    const daily = new Array(7).fill(0);\n    const weekly = new Array(52).fill(0);\n\n    feedbacks.forEach(feedback => {\n      const date = feedback.timestamp;\n      hourly[date.getHours()]++;\n      daily[date.getDay()]++;\n      const weekOfYear = Math.ceil(date.getTime() / (7 * 24 * 60 * 60 * 1000));\n      weekly[Math.min(weekOfYear, 51)]++;\n    });\n\n    return { hourly, daily, weekly };\n  }\n\n  /**\n   * 分析用户参与度\n   */\n  private analyzeUserEngagement(feedbacks: FeedbackData[]): UserBehaviorAnalysis['userEngagement'] {\n    const comments = feedbacks.filter(f => f.comment && f.comment.trim().length > 0);\n    const totalCommentsLength = comments.reduce((sum, f) => \n      sum + (f.comment?.length || 0), 0);\n    \n    const detailedFeedbacks = comments.filter(f => \n      (f.comment?.length || 0) > 50);\n    \n    const uniqueReporters = new Set(feedbacks.map(f => f.userId));\n    const repeatReporters = feedbacks.length - uniqueReporters.size;\n\n    return {\n      averageFeedbackLength: comments.length > 0 ? totalCommentsLength / comments.length : 0,\n      detailedFeedbackRatio: feedbacks.length > 0 ? detailedFeedbacks.length / feedbacks.length : 0,\n      repeatReporterRatio: feedbacks.length > 0 ? repeatReporters / feedbacks.length : 0\n    };\n  }\n\n  /**\n   * 分析地理分布\n   */\n  private analyzeGeographicDistribution(feedbacks: FeedbackData[]): UserBehaviorAnalysis['geographicDistribution'] {\n    // 简化处理，基于语言对进行地理分布分析\n    const languageGroups: { [key: string]: { count: number; totalRating: number } } = {};\n    \n    feedbacks.forEach(feedback => {\n      const region = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageGroups[region]) {\n        languageGroups[region] = { count: 0, totalRating: 0 };\n      }\n      languageGroups[region].count++;\n      languageGroups[region].totalRating += feedback.rating;\n    });\n\n    return Object.entries(languageGroups).map(([region, stats]) => ({\n      region,\n      feedbackCount: stats.count,\n      averageRating: stats.totalRating / stats.count\n    }));\n  }\n\n  /**\n   * 分析质量趋势\n   */\n  private analyzeQualityTrends(feedbacks: FeedbackData[]): QualityTrend[] {\n    const trends: QualityTrend[] = [];\n    \n    // 平均评分趋势\n    const ratingTrend = this.calculateMetricTrend(\n      feedbacks.map(f => ({ date: f.timestamp, value: f.rating })),\n      'average_rating'\n    );\n    trends.push(ratingTrend);\n    \n    // 满意度趋势\n    const satisfactionTrend = this.calculateMetricTrend(\n      feedbacks.map(f => ({ \n        date: f.timestamp, \n        value: f.rating >= 4 ? 1 : 0 \n      })),\n      'satisfaction_rate'\n    );\n    trends.push(satisfactionTrend);\n    \n    // 问题数量趋势\n    const issueTrend = this.calculateMetricTrend(\n      feedbacks.map(f => ({ \n        date: f.timestamp, \n        value: f.issues.length \n      })),\n      'issue_count'\n    );\n    trends.push(issueTrend);\n\n    return trends;\n  }\n\n  /**\n   * 计算指标趋势\n   */\n  private calculateMetricTrend(data: Array<{ date: Date; value: number }>, metric: string): QualityTrend {\n    const sortedData = data.sort((a, b) => a.date.getTime() - b.date.getTime());\n    const midpoint = Math.floor(sortedData.length / 2);\n    \n    const firstHalf = sortedData.slice(0, midpoint);\n    const secondHalf = sortedData.slice(midpoint);\n    \n    const firstAvg = firstHalf.reduce((sum, d) => sum + d.value, 0) / firstHalf.length;\n    const secondAvg = secondHalf.reduce((sum, d) => sum + d.value, 0) / secondHalf.length;\n    \n    const changeRate = ((secondAvg - firstAvg) / firstAvg) * 100;\n    const trend: 'improving' | 'declining' | 'stable' = \n      changeRate > 5 ? 'improving' : \n      changeRate < -5 ? 'declining' : 'stable';\n    \n    return {\n      metric,\n      trend,\n      changeRate,\n      currentValue: secondAvg,\n      previousValue: firstAvg,\n      confidence: 0.8,\n      contributingFactors: ['用户反馈增加', '翻译质量改进'],\n      forecast: {\n        nextWeek: secondAvg * (1 + changeRate / 100),\n        nextMonth: secondAvg * (1 + changeRate / 100 * 4),\n        confidence: 0.7\n      }\n    };\n  }\n\n  /**\n   * 识别改进机会\n   */\n  private identifyImprovementOpportunities(feedbacks: FeedbackData[]): ImprovementOpportunity[] {\n    const opportunities: ImprovementOpportunity[] = [];\n    \n    // 基于高频问题识别快速改进机会\n    const highFrequencyIssues = this.findHighFrequencyIssues(feedbacks);\n    highFrequencyIssues.forEach((issue, index) => {\n      opportunities.push({\n        id: `quick_win_${index}`,\n        type: 'quick_win',\n        title: `修复${issue.type}问题`,\n        description: `针对高频出现的${issue.type}问题进行快速修复`,\n        impact: {\n          userSatisfaction: 15,\n          businessValue: 20,\n          implementation: 'low'\n        },\n        effort: {\n          timeRequired: 8,\n          resources: ['翻译团队', '质量控制'],\n          dependencies: ['问题确认']\n        },\n        priority: 8,\n        roi: 2.5,\n        riskLevel: 'low'\n      });\n    });\n\n    return opportunities;\n  }\n\n  /**\n   * 查找高频问题\n   */\n  private findHighFrequencyIssues(feedbacks: FeedbackData[]) {\n    const issueCounts: { [key: string]: number } = {};\n    \n    feedbacks.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        issueCounts[issue.type] = (issueCounts[issue.type] || 0) + 1;\n      });\n    });\n\n    return Object.entries(issueCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([type, count]) => ({ type, count }));\n  }\n\n  /**\n   * 生成预测\n   */\n  private generatePredictions(feedbacks: FeedbackData[]): PredictionResult[] {\n    const predictions: PredictionResult[] = [];\n    \n    // 预测满意度趋势\n    const recentRatings = feedbacks.slice(-20).map(f => f.rating);\n    const avgRecentRating = recentRatings.reduce((a, b) => a + b, 0) / recentRatings.length;\n    \n    predictions.push({\n      metric: 'user_satisfaction',\n      prediction: {\n        nextWeek: avgRecentRating,\n        nextMonth: avgRecentRating * 1.05,\n        nextQuarter: avgRecentRating * 1.1\n      },\n      confidence: 0.75,\n      factors: ['当前改进措施', '用户反馈趋势'],\n      warnings: ['如不采取行动，可能出现满意度下降']\n    });\n\n    return predictions;\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(feedbacks: FeedbackData[]): DataDrivenRecommendation[] {\n    const recommendations: DataDrivenRecommendation[] = [];\n    \n    // 基于分析结果生成具体建议\n    const avgRating = feedbacks.reduce((sum, f) => sum + f.rating, 0) / feedbacks.length;\n    \n    if (avgRating < 3.5) {\n      recommendations.push({\n        id: 'immediate_quality_focus',\n        category: 'immediate',\n        priority: 'urgent',\n        title: '立即关注翻译质量',\n        description: '当前平均评分较低，需要立即采取行动提升翻译质量',\n        rationale: `平均评分${avgRating.toFixed(2)}，低于可接受水平`,\n        expectedOutcome: '提升用户满意度至3.5分以上',\n        implementation: {\n          steps: [\n            '审查所有低评分反馈',\n            '识别主要问题类型',\n            '制定针对性改进计划',\n            '实施快速修复'\n          ],\n          timeline: '1-2周',\n          resources: ['翻译团队', '质量控制'],\n          risks: ['可能需要额外资源']\n        },\n        successMetrics: ['平均评分提升至3.5+', '低评分比例下降至20%以下'],\n        monitoringPlan: '每周监控评分变化，及时调整策略'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 导出分析报告\n   */\n  async exportAnalysisReport(period: 'week' | 'month' | 'quarter' = 'month'): Promise<string> {\n    const analysis = await this.performDeepAnalysis(period);\n    \n    return JSON.stringify({\n      generatedAt: new Date().toISOString(),\n      period,\n      analysis\n    }, null, 2);\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n}\n\n// 创建单例实例\nexport const feedbackAnalytics = new FeedbackAnalytics();\n\nexport default feedbackAnalytics;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/feedback-data-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1506,1509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1506,1509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":81,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1870,1880],"text":"cachedData != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1870,1880],"text":"cachedData ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1870,1880],"text":"Boolean(cachedData)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1972,1975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1972,1975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2180,2217],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4748,4782],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":197,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":197,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4930,4936],"text":"cached != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4930,4936],"text":"cached ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4930,4936],"text":"Boolean(cached)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5155,5189],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5632,5666],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":239,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":239,"endColumn":64},{"ruleId":"complexity","severity":2,"message":"Arrow function has a complexity of 20. Maximum allowed is 10.","line":269,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":320,"endColumn":6},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":300,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":300,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7430,7445],"text":"(filter.language != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7430,7445],"text":"(filter.language ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7430,7445],"text":"(Boolean(filter.language))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":339,"column":10,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":339,"endColumn":17,"fix":{"range":[8591,8746],"text":"for (const feedback of data) {\n      feedback.issues.forEach(issue => {\n        issueCounts[issue.type] = (issueCounts[issue.type] || 0) + 1;\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":340,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":340,"endColumn":30,"fix":{"range":[8624,8738],"text":"for (const issue of feedback.issues) {\n        issueCounts[issue.type] = (issueCounts[issue.type] || 0) + 1;\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":341,"column":36,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":341,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8694,8717],"text":"(issueCounts[issue.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8694,8717],"text":"(issueCounts[issue.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8694,8717],"text":"(Boolean(issueCounts[issue.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":341,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":341,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8718,8720],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":351,"column":10,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":351,"endColumn":17,"fix":{"range":[8965,9150],"text":"for (const feedback of data) {\n      const langPair = `${feedback.sourceLanguage}->${feedback.targetLanguage}`;\n      languageCounts[langPair] = (languageCounts[langPair] || 0) + 1;\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":353,"column":7,"nodeType":"MemberExpression","endLine":353,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":353,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":353,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9107,9131],"text":"(languageCounts[langPair] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[9107,9131],"text":"(languageCounts[langPair] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9107,9131],"text":"(Boolean(languageCounts[langPair]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":353,"column":35,"nodeType":"MemberExpression","endLine":353,"endColumn":59},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":353,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":353,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9132,9134],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":362,"column":36,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":362,"endColumn":43,"fix":{"range":[9372,9570],"text":"for (const feedback of data.filter(f => f.isResolved)) {\n      // 这里简化处理，实际应该从解决时间记录中计算\n      const resolutionTime = Math.random() * 48 + 1; // 1-48小时\n      resolutionTimes.push(resolutionTime);\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'feedback' is defined but never used. Allowed unused args must match /^_/u.","line":362,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":362,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'feedback' is defined but never used. Allowed unused args must match /^_/u.","line":362,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":362,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":425,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":425,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11131,11144],"text":"(acc[f.rating] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11131,11144],"text":"(acc[f.rating] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11131,11144],"text":"(Boolean(acc[f.rating]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":425,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":425,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11145,11147],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":430,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":430,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11312,11331],"text":"(acc[f.feedbackType] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11312,11331],"text":"(acc[f.feedbackType] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11312,11331],"text":"(Boolean(acc[f.feedbackType]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":430,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":430,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11332,11334],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":435,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":435,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11489,11503],"text":"(acc[f.urgency] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11489,11503],"text":"(acc[f.urgency] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11489,11503],"text":"(Boolean(acc[f.urgency]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":435,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":435,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11504,11506],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":440,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":440,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11663,11678],"text":"(acc[f.category] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11663,11678],"text":"(acc[f.category] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11663,11678],"text":"(Boolean(acc[f.category]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11679,11681],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":493,"column":10,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":493,"endColumn":17,"fix":{"range":[13151,13477],"text":"for (const feedback of data.filter(f => f.timestamp >= weekStart && f.timestamp < weekEnd)) {\n          feedback.issues.forEach(issue => {\n            if (!issueCounts[issue.type]) {\n              issueCounts[issue.type] = [0, 0, 0, 0];\n            }\n            issueCounts[issue.type][week]++;\n          });\n        }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":494,"column":27,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":494,"endColumn":34,"fix":{"range":[13260,13465],"text":"for (const issue of feedback.issues) {\n            if (!issueCounts[issue.type]) {\n              issueCounts[issue.type] = [0, 0, 0, 0];\n            }\n            issueCounts[issue.type][week]++;\n          }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":495,"column":13,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":497,"endColumn":14,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[13307,13406],"text":"issueCounts[issue.type] ??= [0, 0, 0, 0];"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":498,"column":13,"nodeType":"MemberExpression","endLine":498,"endColumn":42},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":517,"column":25,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":517,"endColumn":43,"fix":{"range":[14025,14043],"text":"{severity = 'high';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":518,"column":30,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":518,"endColumn":50,"fix":{"range":[14073,14093],"text":"{severity = 'medium';}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":535,"column":10,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":535,"endColumn":17,"fix":{"range":[14446,14732],"text":"for (const feedback of data) {\n      const dateKey = feedback.timestamp.toISOString().split('T')[0];\n      if (!dailyData[dateKey]) {\n        dailyData[dateKey] = { total: 0, count: 0 };\n      }\n      dailyData[dateKey].total += feedback.rating;\n      dailyData[dateKey].count += 1;\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":537,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":539,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[14549,14636],"text":"dailyData[dateKey] ??= { total: 0, count: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":537,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":537,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14554,14572],"text":"(Boolean(dailyData[dateKey]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":537,"column":12,"nodeType":"MemberExpression","endLine":537,"endColumn":30},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":538,"column":9,"nodeType":"MemberExpression","endLine":538,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":540,"column":7,"nodeType":"MemberExpression","endLine":540,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":541,"column":7,"nodeType":"MemberExpression","endLine":541,"endColumn":25},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":558,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":558,"endColumn":37,"fix":{"range":[15104,15113],"text":"{return 0;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":593,"column":5,"nodeType":"MemberExpression","endLine":593,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":593,"column":32,"nodeType":"MemberExpression","endLine":593,"endColumn":51},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":598,"column":32,"nodeType":"MemberExpression","endLine":598,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":637,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":637,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17495,17511],"text":"(feedback.comment != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[17495,17511],"text":"(feedback.comment ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17495,17511],"text":"(Boolean(feedback.comment))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":637,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":637,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17512,17514],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":664,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":664,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18231,18234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18231,18234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'startDate' is never reassigned. Use 'const' instead.","line":666,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":666,"endColumn":18,"fix":{"range":[18273,18300],"text":"const startDate = new Date();"}}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":4,"fixableWarningCount":7,"source":"/**\n * 反馈数据管理工具\n * 用于存储、管理和分析用户翻译反馈数据\n */\n\nimport { FeedbackData } from '../components/TranslationFeedbackCollector';\n\nexport interface FeedbackAnalytics {\n  totalFeedbacks: number;\n  averageRating: number;\n  ratingDistribution: { [key: number]: number };\n  feedbackTypeDistribution: { [key: string]: number };\n  urgencyDistribution: { [key: string]: number };\n  categoryDistribution: { [key: string]: number };\n  resolvedRate: number;\n  averageResolutionTime: number; // 小时\n  trendingIssues: FeedbackIssueTrend[];\n  satisfactionTrend: SatisfactionDataPoint[];\n  qualityScore: number; // 0-100\n}\n\nexport interface FeedbackIssueTrend {\n  issueType: string;\n  count: number;\n  trend: 'increasing' | 'decreasing' | 'stable';\n  severity: 'low' | 'medium' | 'high';\n}\n\nexport interface SatisfactionDataPoint {\n  date: string;\n  averageRating: number;\n  feedbackCount: number;\n}\n\nexport interface FeedbackFilter {\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  rating?: number[];\n  feedbackType?: string[];\n  urgency?: string[];\n  category?: string[];\n  language?: string;\n  isResolved?: boolean;\n  tags?: string[];\n}\n\nexport interface FeedbackStats {\n  total: number;\n  pending: number;\n  resolved: number;\n  inProgress: number;\n  averageRating: number;\n  topIssues: string[];\n  mostProblematicLanguages: string[];\n  resolutionTimeStats: {\n    average: number;\n    median: number;\n    p90: number;\n  };\n}\n\nclass FeedbackDataManager {\n  private storage: FeedbackData[] = [];\n  private cache: Map<string, any> = new Map();\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\n  constructor() {\n    this.initializeStorage();\n    this.loadCachedData();\n  }\n\n  /**\n   * 初始化存储系统\n   */\n  private async initializeStorage(): Promise<void> {\n    try {\n      // 尝试从localStorage加载现有数据\n      const cachedData = localStorage.getItem('translation_feedback_data');\n      if (cachedData) {\n        const parsed = JSON.parse(cachedData);\n        this.storage = parsed.map((item: any) => ({\n          ...item,\n          timestamp: new Date(item.timestamp)\n        }));\n      } else {\n        // 如果没有缓存数据，生成一些示例数据用于演示\n        this.generateSampleData();\n      }\n    } catch (error) {\n      console.error('初始化反馈数据存储失败:', error);\n      this.storage = [];\n    }\n  }\n\n  /**\n   * 生成示例数据\n   */\n  private generateSampleData(): void {\n    const sampleFeedbacks: FeedbackData[] = [\n      {\n        id: 'feedback_001',\n        userId: 'user_001',\n        userName: '张三',\n        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        translationContext: '产品描述',\n        originalText: 'Premium quality leather handbag',\n        translatedText: '优质皮质手提包',\n        sourceLanguage: 'en-US',\n        targetLanguage: 'zh-CN',\n        rating: 4,\n        feedbackType: 'quality',\n        comment: '翻译质量很好，但是可以更简洁一些',\n        issues: [\n          {\n            type: 'style',\n            description: '表达可以更加地道',\n            severity: 'moderate',\n            location: '整体'\n          }\n        ],\n        improvementSuggestion: '可以考虑使用更地道的表达方式',\n        urgency: 'low',\n        category: 'style',\n        isResolved: false,\n        tags: ['产品', '时尚']\n      },\n      {\n        id: 'feedback_002',\n        userId: 'user_002',\n        userName: '李四',\n        timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n        translationContext: '用户界面',\n        originalText: 'Click here to proceed',\n        translatedText: '点击这里继续',\n        sourceLanguage: 'en-US',\n        targetLanguage: 'zh-CN',\n        rating: 5,\n        feedbackType: 'accuracy',\n        comment: '翻译准确，符合用户习惯',\n        issues: [],\n        urgency: 'low',\n        category: 'meaning',\n        isResolved: true,\n        tags: ['UI', '按钮']\n      },\n      {\n        id: 'feedback_003',\n        userId: 'user_003',\n        userName: '王五',\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),\n        translationContext: '技术文档',\n        originalText: 'Database connection failed',\n        translatedText: '数据库连接失败',\n        sourceLanguage: 'en-US',\n        targetLanguage: 'zh-CN',\n        rating: 2,\n        feedbackType: 'technical',\n        comment: '技术术语翻译不够专业',\n        issues: [\n          {\n            type: 'terminology',\n            description: '数据库相关术语应该更专业',\n            severity: 'major',\n            location: '专业术语'\n          }\n        ],\n        improvementSuggestion: '建议使用更专业的技术术语',\n        urgency: 'high',\n        category: 'terminology',\n        isResolved: false,\n        tags: ['技术', '数据库']\n      }\n    ];\n\n    this.storage = sampleFeedbacks;\n    this.saveToStorage();\n  }\n\n  /**\n   * 保存数据到localStorage\n   */\n  private saveToStorage(): void {\n    try {\n      localStorage.setItem('translation_feedback_data', JSON.stringify(this.storage));\n    } catch (error) {\n      console.error('保存反馈数据失败:', error);\n    }\n  }\n\n  /**\n   * 加载缓存数据\n   */\n  private loadCachedData(): void {\n    const cached = localStorage.getItem('feedback_analytics_cache');\n    if (cached) {\n      try {\n        const { data, timestamp } = JSON.parse(cached);\n        if (Date.now() - timestamp < this.CACHE_DURATION) {\n          this.cache.set('analytics', data);\n        }\n      } catch (error) {\n        console.error('加载缓存数据失败:', error);\n      }\n    }\n  }\n\n  /**\n   * 添加新的反馈数据\n   */\n  async addFeedback(feedback: FeedbackData): Promise<void> {\n    try {\n      // 验证反馈数据\n      this.validateFeedback(feedback);\n      \n      // 添加到存储\n      this.storage.push(feedback);\n      \n      // 保存到持久化存储\n      this.saveToStorage();\n      \n      // 清除相关缓存\n      this.cache.delete('analytics');\n      \n      // 触发事件通知\n      this.notifyFeedbackAdded(feedback);\n      \n    } catch (error) {\n      console.error('添加反馈数据失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 验证反馈数据\n   */\n  private validateFeedback(feedback: FeedbackData): void {\n    if (!feedback.id || !feedback.userId || !feedback.timestamp) {\n      throw new Error('反馈数据缺少必要字段');\n    }\n    \n    if (feedback.rating < 1 || feedback.rating > 5) {\n      throw new Error('评分必须在1-5之间');\n    }\n    \n    if (!['quality', 'accuracy', 'context', 'cultural', 'technical'].includes(feedback.feedbackType)) {\n      throw new Error('无效的反馈类型');\n    }\n  }\n\n  /**\n   * 获取所有反馈数据\n   */\n  getAllFeedback(filter?: FeedbackFilter): FeedbackData[] {\n    let filteredData = [...this.storage];\n    \n    if (filter) {\n      filteredData = this.applyFilter(filteredData, filter);\n    }\n    \n    return filteredData.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  /**\n   * 应用过滤条件\n   */\n  private applyFilter(data: FeedbackData[], filter: FeedbackFilter): FeedbackData[] {\n    return data.filter(feedback => {\n      // 日期范围过滤\n      if (filter.dateRange) {\n        const feedbackTime = feedback.timestamp.getTime();\n        if (feedbackTime < filter.dateRange.start.getTime() || \n            feedbackTime > filter.dateRange.end.getTime()) {\n          return false;\n        }\n      }\n      \n      // 评分过滤\n      if (filter.rating && !filter.rating.includes(feedback.rating)) {\n        return false;\n      }\n      \n      // 反馈类型过滤\n      if (filter.feedbackType && !filter.feedbackType.includes(feedback.feedbackType)) {\n        return false;\n      }\n      \n      // 紧急程度过滤\n      if (filter.urgency && !filter.urgency.includes(feedback.urgency)) {\n        return false;\n      }\n      \n      // 分类过滤\n      if (filter.category && !filter.category.includes(feedback.category)) {\n        return false;\n      }\n      \n      // 语言过滤\n      if (filter.language && \n          feedback.sourceLanguage !== filter.language && \n          feedback.targetLanguage !== filter.language) {\n        return false;\n      }\n      \n      // 解决状态过滤\n      if (filter.isResolved !== undefined && feedback.isResolved !== filter.isResolved) {\n        return false;\n      }\n      \n      // 标签过滤\n      if (filter.tags && filter.tags.length > 0) {\n        const hasMatchingTag = filter.tags.some(tag => feedback.tags.includes(tag));\n        if (!hasMatchingTag) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  }\n\n  /**\n   * 获取反馈统计信息\n   */\n  getFeedbackStats(filter?: FeedbackFilter): FeedbackStats {\n    const data = this.getAllFeedback(filter);\n    \n    const total = data.length;\n    const resolved = data.filter(f => f.isResolved).length;\n    const pending = data.filter(f => !f.isResolved && f.issues.length === 0).length;\n    const inProgress = data.filter(f => !f.isResolved && f.issues.length > 0).length;\n    \n    const averageRating = total > 0 ? \n      data.reduce((sum, f) => sum + f.rating, 0) / total : 0;\n    \n    // 统计问题类型\n    const issueCounts: { [key: string]: number } = {};\n    data.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        issueCounts[issue.type] = (issueCounts[issue.type] || 0) + 1;\n      });\n    });\n    const topIssues = Object.entries(issueCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 5)\n      .map(([issue]) => issue);\n    \n    // 统计语言对\n    const languageCounts: { [key: string]: number } = {};\n    data.forEach(feedback => {\n      const langPair = `${feedback.sourceLanguage}->${feedback.targetLanguage}`;\n      languageCounts[langPair] = (languageCounts[langPair] || 0) + 1;\n    });\n    const mostProblematicLanguages = Object.entries(languageCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([lang]) => lang);\n    \n    // 计算解决时间统计\n    const resolutionTimes: number[] = [];\n    data.filter(f => f.isResolved).forEach(feedback => {\n      // 这里简化处理，实际应该从解决时间记录中计算\n      const resolutionTime = Math.random() * 48 + 1; // 1-48小时\n      resolutionTimes.push(resolutionTime);\n    });\n    \n    const sortedTimes = resolutionTimes.sort((a, b) => a - b);\n    const average = resolutionTimes.length > 0 ? \n      resolutionTimes.reduce((sum, time) => sum + time, 0) / resolutionTimes.length : 0;\n    const median = sortedTimes.length > 0 ? \n      sortedTimes[Math.floor(sortedTimes.length / 2)] : 0;\n    const p90 = sortedTimes.length > 0 ? \n      sortedTimes[Math.floor(sortedTimes.length * 0.9)] : 0;\n    \n    return {\n      total,\n      pending,\n      resolved,\n      inProgress,\n      averageRating,\n      topIssues,\n      mostProblematicLanguages,\n      resolutionTimeStats: {\n        average,\n        median,\n        p90\n      }\n    };\n  }\n\n  /**\n   * 获取反馈分析数据\n   */\n  getFeedbackAnalytics(filter?: FeedbackFilter): FeedbackAnalytics {\n    // 检查缓存\n    const cacheKey = `analytics_${JSON.stringify(filter)}`;\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    const data = this.getAllFeedback(filter);\n    const total = data.length;\n    \n    if (total === 0) {\n      return {\n        totalFeedbacks: 0,\n        averageRating: 0,\n        ratingDistribution: {},\n        feedbackTypeDistribution: {},\n        urgencyDistribution: {},\n        categoryDistribution: {},\n        resolvedRate: 0,\n        averageResolutionTime: 0,\n        trendingIssues: [],\n        satisfactionTrend: [],\n        qualityScore: 0\n      };\n    }\n    \n    // 计算各项指标\n    const averageRating = data.reduce((sum, f) => sum + f.rating, 0) / total;\n    \n    const ratingDistribution = data.reduce((acc, f) => {\n      acc[f.rating] = (acc[f.rating] || 0) + 1;\n      return acc;\n    }, {} as { [key: number]: number });\n    \n    const feedbackTypeDistribution = data.reduce((acc, f) => {\n      acc[f.feedbackType] = (acc[f.feedbackType] || 0) + 1;\n      return acc;\n    }, {} as { [key: string]: number });\n    \n    const urgencyDistribution = data.reduce((acc, f) => {\n      acc[f.urgency] = (acc[f.urgency] || 0) + 1;\n      return acc;\n    }, {} as { [key: string]: number });\n    \n    const categoryDistribution = data.reduce((acc, f) => {\n      acc[f.category] = (acc[f.category] || 0) + 1;\n      return acc;\n    }, {} as { [key: string]: number });\n    \n    const resolved = data.filter(f => f.isResolved).length;\n    const resolvedRate = resolved / total;\n    \n    // 计算平均解决时间\n    const resolvedFeedbacks = data.filter(f => f.isResolved);\n    const averageResolutionTime = resolvedFeedbacks.length > 0 ? 24 : 0; // 简化处理\n    \n    // 生成趋势问题数据\n    const issueTrends = this.generateIssueTrends(data);\n    \n    // 生成满意度趋势数据\n    const satisfactionTrend = this.generateSatisfactionTrend(data);\n    \n    // 计算质量分数 (0-100)\n    const qualityScore = this.calculateQualityScore(data);\n    \n    const analytics: FeedbackAnalytics = {\n      totalFeedbacks: total,\n      averageRating,\n      ratingDistribution,\n      feedbackTypeDistribution,\n      urgencyDistribution,\n      categoryDistribution,\n      resolvedRate,\n      averageResolutionTime,\n      trendingIssues: issueTrends,\n      satisfactionTrend,\n      qualityScore\n    };\n    \n    // 缓存结果\n    this.cache.set(cacheKey, analytics);\n    \n    return analytics;\n  }\n\n  /**\n   * 生成问题趋势数据\n   */\n  private generateIssueTrends(data: FeedbackData[]): FeedbackIssueTrend[] {\n    const issueCounts: { [key: string]: number[] } = {};\n    const currentDate = new Date();\n    \n    // 按周统计问题趋势\n    for (let week = 0; week < 4; week++) {\n      const weekStart = new Date(currentDate.getTime() - week * 7 * 24 * 60 * 60 * 1000);\n      const weekEnd = new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000);\n      \n      data.filter(f => f.timestamp >= weekStart && f.timestamp < weekEnd)\n        .forEach(feedback => {\n          feedback.issues.forEach(issue => {\n            if (!issueCounts[issue.type]) {\n              issueCounts[issue.type] = [0, 0, 0, 0];\n            }\n            issueCounts[issue.type][week]++;\n          });\n        });\n    }\n    \n    return Object.entries(issueCounts).map(([issueType, counts]) => {\n      const recent = counts[0];\n      const previous = counts[1];\n      let trend: 'increasing' | 'decreasing' | 'stable' = 'stable';\n      \n      if (recent > previous * 1.2) {\n        trend = 'increasing';\n      } else if (recent < previous * 0.8) {\n        trend = 'decreasing';\n      }\n      \n      // 确定严重程度\n      let severity: 'low' | 'medium' | 'high' = 'low';\n      const avgCount = counts.reduce((a, b) => a + b, 0) / counts.length;\n      if (avgCount > 5) severity = 'high';\n      else if (avgCount > 2) severity = 'medium';\n      \n      return {\n        issueType,\n        count: recent,\n        trend,\n        severity\n      };\n    }).sort((a, b) => b.count - a.count);\n  }\n\n  /**\n   * 生成满意度趋势数据\n   */\n  private generateSatisfactionTrend(data: FeedbackData[]): SatisfactionDataPoint[] {\n    const dailyData: { [key: string]: { total: number; count: number } } = {};\n    \n    data.forEach(feedback => {\n      const dateKey = feedback.timestamp.toISOString().split('T')[0];\n      if (!dailyData[dateKey]) {\n        dailyData[dateKey] = { total: 0, count: 0 };\n      }\n      dailyData[dateKey].total += feedback.rating;\n      dailyData[dateKey].count += 1;\n    });\n    \n    return Object.entries(dailyData)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([date, { total, count }]) => ({\n        date,\n        averageRating: total / count,\n        feedbackCount: count\n      }))\n      .slice(-30); // 最近30天\n  }\n\n  /**\n   * 计算质量分数\n   */\n  private calculateQualityScore(data: FeedbackData[]): number {\n    if (data.length === 0) return 0;\n    \n    // 基础分数：平均评分\n    const baseScore = (data.reduce((sum, f) => sum + f.rating, 0) / data.length) * 20; // 转换为0-100\n    \n    // 扣分项：未解决问题\n    const unresolvedIssues = data.filter(f => f.issues.length > 0 && !f.isResolved).length;\n    const issuePenalty = Math.min(unresolvedIssues * 5, 30);\n    \n    // 扣分项：低评分比例\n    const lowRatings = data.filter(f => f.rating <= 2).length;\n    const lowRatingPenalty = (lowRatings / data.length) * 20;\n    \n    // 扣分项：高优先级问题\n    const highPriorityIssues = data.filter(f => \n      f.urgency === 'high' && f.issues.some(issue => \n        issue.severity === 'critical' || issue.severity === 'major'\n      )\n    ).length;\n    const highPriorityPenalty = Math.min(highPriorityIssues * 10, 25);\n    \n    const finalScore = Math.max(0, baseScore - issuePenalty - lowRatingPenalty - highPriorityPenalty);\n    \n    return Math.round(finalScore);\n  }\n\n  /**\n   * 更新反馈状态\n   */\n  async updateFeedbackStatus(feedbackId: string, updates: Partial<FeedbackData>): Promise<void> {\n    const index = this.storage.findIndex(f => f.id === feedbackId);\n    if (index === -1) {\n      throw new Error('反馈数据不存在');\n    }\n    \n    this.storage[index] = { ...this.storage[index], ...updates };\n    this.saveToStorage();\n    this.cache.delete('analytics');\n    \n    // 触发更新事件\n    this.notifyFeedbackUpdated(this.storage[index]);\n  }\n\n  /**\n   * 删除反馈\n   */\n  async deleteFeedback(feedbackId: string): Promise<void> {\n    const index = this.storage.findIndex(f => f.id === feedbackId);\n    if (index === -1) {\n      throw new Error('反馈数据不存在');\n    }\n    \n    const deletedFeedback = this.storage.splice(index, 1)[0];\n    this.saveToStorage();\n    this.cache.delete('analytics');\n    \n    // 触发删除事件\n    this.notifyFeedbackDeleted(deletedFeedback);\n  }\n\n  /**\n   * 导出反馈数据\n   */\n  exportFeedbackData(format: 'json' | 'csv' = 'json', filter?: FeedbackFilter): string {\n    const data = this.getAllFeedback(filter);\n    \n    if (format === 'json') {\n      return JSON.stringify(data, null, 2);\n    } else {\n      // CSV格式导出\n      const headers = ['ID', '用户', '时间', '评分', '类型', '分类', '状态', '评论'];\n      const rows = data.map(feedback => [\n        feedback.id,\n        feedback.userName,\n        feedback.timestamp.toISOString(),\n        feedback.rating.toString(),\n        feedback.feedbackType,\n        feedback.category,\n        feedback.isResolved ? '已解决' : '未解决',\n        feedback.comment || ''\n      ]);\n      \n      return [headers, ...rows].map(row => \n        row.map(cell => `\"${cell}\"`).join(',')\n      ).join('\\n');\n    }\n  }\n\n  /**\n   * 事件通知方法\n   */\n  private notifyFeedbackAdded(feedback: FeedbackData): void {\n    window.dispatchEvent(new CustomEvent('feedback-added', { detail: feedback }));\n  }\n\n  private notifyFeedbackUpdated(feedback: FeedbackData): void {\n    window.dispatchEvent(new CustomEvent('feedback-updated', { detail: feedback }));\n  }\n\n  private notifyFeedbackDeleted(feedback: FeedbackData): void {\n    window.dispatchEvent(new CustomEvent('feedback-deleted', { detail: feedback }));\n  }\n\n  /**\n   * 获取反馈趋势报告\n   */\n  getTrendReport(period: 'week' | 'month' | 'quarter' = 'month'): any {\n    const endDate = new Date();\n    let startDate = new Date();\n    \n    switch (period) {\n      case 'week':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(endDate.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(endDate.getMonth() - 3);\n        break;\n    }\n    \n    const filter: FeedbackFilter = {\n      dateRange: { start: startDate, end: endDate }\n    };\n    \n    return {\n      period,\n      dateRange: { start: startDate.toISOString(), end: endDate.toISOString() },\n      analytics: this.getFeedbackAnalytics(filter),\n      stats: this.getFeedbackStats(filter)\n    };\n  }\n\n  /**\n   * 清理过期缓存\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n}\n\n// 创建单例实例\nexport const feedbackDataManager = new FeedbackDataManager();\n\nexport default feedbackDataManager;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/feedback-processing-workflow.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[630,633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[630,633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1151,1154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1151,1154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1322,1325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1322,1325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2008,2011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2008,2011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2659,2662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2659,2662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":471,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":471,"endColumn":30,"fix":{"range":[10926,11022],"text":"for (const workflow of DEFAULT_WORKFLOWS) {\n      this.workflows.set(workflow.id, workflow);\n    }"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":488,"column":34,"nodeType":"CallExpression","messageId":"substr","endLine":488,"endColumn":73,"fix":{"range":[11362,11373],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":505,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":505,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[11858,11859],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":521,"column":34,"nodeType":"CallExpression","messageId":"substr","endLine":521,"endColumn":73,"fix":{"range":[12233,12244],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":537,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":537,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[12712,12713],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":555,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":555,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13155,13157],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":563,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":563,"endColumn":51},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":566,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":566,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":572,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13545,13548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13545,13548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":654,"column":18,"nodeType":"MemberExpression","endLine":654,"endColumn":47},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":662,"column":7,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":666,"endColumn":8,"fix":{"range":[15839,15996],"text":"await (step.type === 'auto' ? this.executeAutoStep(queueItem, step) : this.assignManualStep(queueItem, step));"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":668,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":668,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16025,16069],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":695,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":695,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16659,16672],"text":"step.assignee != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[16659,16672],"text":"step.assignee ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16659,16672],"text":"Boolean(step.assignee)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":747,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":747,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18133,18156],"text":"(roleMapping[role || ''] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[18133,18156],"text":"(roleMapping[role || ''] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[18133,18156],"text":"(Boolean(roleMapping[role || '']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":747,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":747,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18150,18152],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":747,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":747,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18157,18159],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":755,"column":36,"nodeType":"CallExpression","messageId":"substr","endLine":755,"endColumn":75,"fix":{"range":[18404,18415],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":756,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":756,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18432,18453],"text":"(queueItem.currentStep != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[18432,18453],"text":"(queueItem.currentStep ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[18432,18453],"text":"(Boolean(queueItem.currentStep))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":756,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":756,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18454,18456],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":770,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":770,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[18788,18789],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":776,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":776,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18901,18904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18901,18904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":778,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":778,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18951,18992],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":786,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":786,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19136,19194],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":793,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":793,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19339,19342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19339,19342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":802,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":802,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[19561,19579],"text":"queueItem.assignee != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[19561,19579],"text":"queueItem.assignee ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19561,19579],"text":"Boolean(queueItem.assignee)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":810,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":810,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19717,19720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19717,19720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":812,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":812,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19774,19821],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":830,"column":17,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":830,"endColumn":29,"fix":{"range":[20250,20262],"text":"{return item;}"}}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":5,"fixableWarningCount":1,"source":"/**\n * 反馈处理和响应机制\n * 定义用户反馈的处理流程、响应时间、分类和优先级管理\n */\n\nimport { FeedbackData } from '../components/TranslationFeedbackCollector';\nimport { TranslationIssue } from '../components/TranslationIssueReporter';\n\nexport interface ProcessingWorkflow {\n  id: string;\n  name: string;\n  description: string;\n  triggerConditions: WorkflowTrigger[];\n  steps: WorkflowStep[];\n  sla: SLAConfig;\n  escalationRules: EscalationRule[];\n  automationRules: AutomationRule[];\n}\n\nexport interface WorkflowTrigger {\n  type: 'feedback_created' | 'issue_reported' | 'rating_below_threshold' | 'urgent_priority' | 'repeat_issue';\n  condition: string;\n  value?: any;\n}\n\nexport interface WorkflowStep {\n  id: string;\n  name: string;\n  type: 'auto' | 'manual' | 'approval' | 'notification';\n  assignee?: string;\n  assigneeRole?: 'translation_team' | 'quality_control' | 'product_manager' | 'engineering';\n  timeLimit?: number; // 小时\n  actions: StepAction[];\n  dependencies?: string[]; // 依赖的前置步骤\n  conditions?: StepCondition[];\n}\n\nexport interface StepAction {\n  type: 'assign' | 'notify' | 'update_status' | 'create_task' | 'escalate' | 'auto_resolve';\n  parameters: { [key: string]: any };\n  template?: string;\n}\n\nexport interface StepCondition {\n  field: string;\n  operator: 'equals' | 'not_equals' | 'greater_than' | 'less_than' | 'contains';\n  value: any;\n}\n\nexport interface SLAConfig {\n  responseTime: number; // 首次响应时间（小时）\n  resolutionTime: number; // 解决时间（小时）\n  acknowledgmentTime: number; // 确认时间（小时）\n  escalationTime: number; // 升级时间（小时）\n  businessHoursOnly: boolean;\n  weekendIncluded: boolean;\n  workingHours?: {\n    start: string; // HH:mm\n    end: string; // HH:mm\n    timezone: string;\n  };\n}\n\nexport interface EscalationRule {\n  id: string;\n  name: string;\n  trigger: 'sla_breach' | 'priority_upgrade' | 'repeat_issue' | 'customer_complaint';\n  conditions: EscalationCondition[];\n  actions: EscalationAction[];\n  timeout?: number; // 小时\n}\n\nexport interface EscalationCondition {\n  field: string;\n  operator: string;\n  value: any;\n}\n\nexport interface EscalationAction {\n  type: 'notify_manager' | 'assign_to_senior' | 'create_incident' | 'update_priority';\n  recipients: string[];\n  message: string;\n  urgency: 'low' | 'medium' | 'high' | 'urgent';\n}\n\nexport interface AutomationRule {\n  id: string;\n  name: string;\n  trigger: string;\n  conditions: AutomationCondition[];\n  actions: AutomationAction[];\n  enabled: boolean;\n}\n\nexport interface AutomationCondition {\n  field: string;\n  operator: string;\n  value: any;\n}\n\nexport interface AutomationAction {\n  type: 'auto_assign' | 'auto_tag' | 'auto_respond' | 'auto_close' | 'create_jira_ticket';\n  parameters: { [key: string]: any };\n}\n\nexport interface ProcessingStats {\n  totalProcessed: number;\n  averageResponseTime: number;\n  averageResolutionTime: number;\n  slaComplianceRate: number;\n  escalations: number;\n  automationRate: number;\n  customerSatisfaction: number;\n}\n\nexport interface QueueItem {\n  id: string;\n  type: 'feedback' | 'issue';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  assignee?: string;\n  dueDate: Date;\n  status: 'pending' | 'in_progress' | 'waiting' | 'completed';\n  createdAt: Date;\n  updatedAt: Date;\n  data: FeedbackData | TranslationIssue;\n  workflow: ProcessingWorkflow;\n  currentStep?: string;\n  history: ProcessingHistoryItem[];\n}\n\nexport interface ProcessingHistoryItem {\n  id: string;\n  step: string;\n  action: string;\n  performedBy?: string;\n  timestamp: Date;\n  notes?: string;\n  attachments?: string[];\n}\n\n// 默认工作流程配置\nexport const DEFAULT_WORKFLOWS: ProcessingWorkflow[] = [\n  {\n    id: 'standard_feedback',\n    name: '标准反馈处理',\n    description: '处理一般用户反馈的标准流程',\n    triggerConditions: [\n      {\n        type: 'feedback_created',\n        condition: 'rating >= 3',\n        value: 3\n      }\n    ],\n    steps: [\n      {\n        id: 'auto_acknowledgment',\n        name: '自动确认',\n        type: 'auto',\n        timeLimit: 1,\n        actions: [\n          {\n            type: 'auto_respond',\n            parameters: {\n              message: '感谢您的反馈，我们已收到并正在处理中。',\n              channel: 'email'\n            }\n          }\n        ]\n      },\n      {\n        id: 'initial_assessment',\n        name: '初步评估',\n        type: 'manual',\n        assigneeRole: 'quality_control',\n        timeLimit: 4,\n        actions: [\n          {\n            type: 'update_status',\n            parameters: {\n              status: 'acknowledged'\n            }\n          }\n        ],\n        dependencies: ['auto_acknowledgment']\n      },\n      {\n        id: 'detailed_analysis',\n        name: '详细分析',\n        type: 'manual',\n        assigneeRole: 'translation_team',\n        timeLimit: 24,\n        actions: [\n          {\n            type: 'assign',\n            parameters: {\n              category: 'translation'\n            }\n          },\n          {\n            type: 'notify',\n            parameters: {\n              recipients: ['translation_lead'],\n              message: '有新的翻译问题需要处理'\n            }\n          }\n        ],\n        dependencies: ['initial_assessment']\n      },\n      {\n        id: 'implementation',\n        name: '实施改进',\n        type: 'manual',\n        assigneeRole: 'engineering',\n        timeLimit: 72,\n        actions: [\n          {\n            type: 'update_status',\n            parameters: {\n              status: 'implementing'\n            }\n          },\n          {\n            type: 'create_task',\n            parameters: {\n              system: 'jira',\n              project: 'TRANSLATION',\n              issueType: 'Improvement'\n            }\n          }\n        ],\n        dependencies: ['detailed_analysis']\n      },\n      {\n        id: 'verification',\n        name: '验证确认',\n        type: 'manual',\n        assigneeRole: 'quality_control',\n        timeLimit: 8,\n        actions: [\n          {\n            type: 'update_status',\n            parameters: {\n              status: 'verified'\n            }\n          }\n        ],\n        dependencies: ['implementation']\n      },\n      {\n        id: 'closure',\n        name: '关闭反馈',\n        type: 'auto',\n        actions: [\n          {\n            type: 'auto_resolve',\n            parameters: {\n              notifyUser: true\n            }\n          },\n          {\n            type: 'notify',\n            parameters: {\n              recipients: ['original_reporter'],\n              message: '您的反馈已经处理完成，感谢您的耐心等待。'\n            }\n          }\n        ],\n        dependencies: ['verification']\n      }\n    ],\n    sla: {\n      responseTime: 1,\n      resolutionTime: 96,\n      acknowledgmentTime: 4,\n      escalationTime: 12,\n      businessHoursOnly: false,\n      weekendIncluded: true\n    },\n    escalationRules: [\n      {\n        id: 'urgent_escalation',\n        name: '紧急问题升级',\n        trigger: 'sla_breach',\n        conditions: [\n          {\n            field: 'priority',\n            operator: 'equals',\n            value: 'urgent'\n          }\n        ],\n        actions: [\n          {\n            type: 'notify_manager',\n            recipients: ['translation_manager', 'product_manager'],\n            message: '紧急翻译问题SLA即将超时，需要立即关注',\n            urgency: 'urgent'\n          }\n        ],\n        timeout: 2\n      }\n    ],\n    automationRules: [\n      {\n        id: 'auto_assignment',\n        name: '自动分配规则',\n        trigger: 'feedback_created',\n        conditions: [\n          {\n            field: 'category',\n            operator: 'equals',\n            value: 'terminology'\n          }\n        ],\n        actions: [\n          {\n            type: 'auto_assign',\n            parameters: {\n              assignee: 'terminology_specialist'\n            }\n          }\n        ],\n        enabled: true\n      }\n    ]\n  },\n  {\n    id: 'critical_issue',\n    name: '紧急问题处理',\n    description: '处理严重翻译问题和用户投诉',\n    triggerConditions: [\n      {\n        type: 'rating_below_threshold',\n        condition: 'rating <= 2',\n        value: 2\n      },\n      {\n        type: 'urgent_priority',\n        condition: 'urgency = high',\n        value: 'high'\n      }\n    ],\n    steps: [\n      {\n        id: 'immediate_response',\n        name: '立即响应',\n        type: 'auto',\n        timeLimit: 0.5,\n        actions: [\n          {\n            type: 'auto_respond',\n            parameters: {\n              message: '我们非常重视您的问题，将立即进行紧急处理。',\n              channel: 'email'\n            }\n          },\n          {\n            type: 'notify',\n            parameters: {\n              recipients: ['on_call_manager'],\n              message: '紧急翻译问题报告，需要立即处理',\n              urgency: 'urgent'\n            }\n          }\n        ]\n      },\n      {\n        id: 'urgent_assessment',\n        name: '紧急评估',\n        type: 'manual',\n        assigneeRole: 'product_manager',\n        timeLimit: 2,\n        actions: [\n          {\n            type: 'update_status',\n            parameters: {\n              status: 'emergency_assessment'\n            }\n          },\n          {\n            type: 'assign',\n            parameters: {\n              priority: 'urgent'\n            }\n          }\n        ],\n        dependencies: ['immediate_response']\n      },\n      {\n        id: 'rapid_fix',\n        name: '快速修复',\n        type: 'manual',\n        assigneeRole: 'engineering',\n        timeLimit: 8,\n        actions: [\n          {\n            type: 'create_task',\n            parameters: {\n              system: 'jira',\n              project: 'CRITICAL_FIX',\n              issueType: 'Bug'\n            }\n          }\n        ],\n        dependencies: ['urgent_assessment']\n      },\n      {\n        id: 'critical_verification',\n        name: '关键验证',\n        type: 'manual',\n        assigneeRole: 'quality_control',\n        timeLimit: 4,\n        actions: [\n          {\n            type: 'update_status',\n            parameters: {\n              status: 'critical_verified'\n            }\n          }\n        ],\n        dependencies: ['rapid_fix']\n      }\n    ],\n    sla: {\n      responseTime: 0.5,\n      resolutionTime: 24,\n      acknowledgmentTime: 1,\n      escalationTime: 4,\n      businessHoursOnly: false,\n      weekendIncluded: true\n    },\n    escalationRules: [\n      {\n        id: 'critical_escalation',\n        name: '关键问题升级',\n        trigger: 'sla_breach',\n        conditions: [\n          {\n            field: 'severity',\n            operator: 'equals',\n            value: 'critical'\n          }\n        ],\n        actions: [\n          {\n            type: 'notify_manager',\n            recipients: ['cto', 'vp_product'],\n            message: '关键翻译问题已超过SLA时限，需要高层关注',\n            urgency: 'urgent'\n          }\n        ],\n        timeout: 1\n      }\n    ],\n    automationRules: []\n  }\n];\n\nclass FeedbackProcessingWorkflow {\n  private workflows: Map<string, ProcessingWorkflow> = new Map();\n  private queues: Map<string, QueueItem[]> = new Map();\n  private processingHistory: Map<string, ProcessingHistoryItem[]> = new Map();\n\n  constructor() {\n    this.initializeDefaultWorkflows();\n  }\n\n  /**\n   * 初始化默认工作流程\n   */\n  private initializeDefaultWorkflows(): void {\n    DEFAULT_WORKFLOWS.forEach(workflow => {\n      this.workflows.set(workflow.id, workflow);\n    });\n  }\n\n  /**\n   * 处理新的反馈\n   */\n  async processFeedback(feedback: FeedbackData): Promise<string> {\n    // 确定适用的工作流程\n    const workflow = this.selectWorkflow(feedback);\n    if (!workflow) {\n      throw new Error('没有找到适用的工作流程');\n    }\n\n    // 创建队列项\n    const queueItem: QueueItem = {\n      id: `queue_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: 'feedback',\n      priority: this.determinePriority(feedback),\n      dueDate: new Date(Date.now() + workflow.sla.resolutionTime * 60 * 60 * 1000),\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      data: feedback,\n      workflow,\n      history: []\n    };\n\n    // 添加到队列\n    const queueKey = this.getQueueKey(workflow.id);\n    if (!this.queues.has(queueKey)) {\n      this.queues.set(queueKey, []);\n    }\n    this.queues.get(queueKey)!.push(queueItem);\n\n    // 启动工作流程\n    await this.startWorkflow(queueItem);\n\n    return queueItem.id;\n  }\n\n  /**\n   * 处理新问题报告\n   */\n  async processIssue(issue: TranslationIssue): Promise<string> {\n    // 为问题创建工作流程实例\n    const workflow = await this.selectIssueWorkflow(issue);\n    \n    const queueItem: QueueItem = {\n      id: `issue_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: 'issue',\n      priority: this.determineIssuePriority(issue),\n      dueDate: new Date(Date.now() + workflow.sla.resolutionTime * 60 * 60 * 1000),\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      data: issue,\n      workflow,\n      history: []\n    };\n\n    const queueKey = this.getQueueKey(workflow.id);\n    if (!this.queues.has(queueKey)) {\n      this.queues.set(queueKey, []);\n    }\n    this.queues.get(queueKey)!.push(queueItem);\n\n    await this.startWorkflow(queueItem);\n\n    return queueItem.id;\n  }\n\n  /**\n   * 选择适用的工作流程\n   */\n  private selectWorkflow(feedback: FeedbackData): ProcessingWorkflow | null {\n    for (const workflow of this.workflows.values()) {\n      if (this.matchesTriggerConditions(feedback, workflow.triggerConditions)) {\n        return workflow;\n      }\n    }\n    \n    // 返回默认工作流程\n    return this.workflows.get('standard_feedback') || null;\n  }\n\n  /**\n   * 选择问题工作流程\n   */\n  private async selectIssueWorkflow(issue: TranslationIssue): Promise<ProcessingWorkflow> {\n    if (issue.severity === 'critical' || issue.priority === 'urgent') {\n      return this.workflows.get('critical_issue')!;\n    }\n    \n    return this.workflows.get('standard_feedback')!;\n  }\n\n  /**\n   * 检查触发条件\n   */\n  private matchesTriggerConditions(data: any, triggers: WorkflowTrigger[]): boolean {\n    return triggers.every(trigger => {\n      switch (trigger.type) {\n        case 'feedback_created':\n          return true; // 总是匹配\n        case 'rating_below_threshold':\n          return data.rating <= trigger.value;\n        case 'urgent_priority':\n          return data.urgency === trigger.value;\n        case 'repeat_issue':\n          // 简化处理，假设重复问题有标记\n          return data.isDuplicate === true;\n        default:\n          return false;\n      }\n    });\n  }\n\n  /**\n   * 确定优先级\n   */\n  private determinePriority(feedback: FeedbackData): QueueItem['priority'] {\n    if (feedback.urgency === 'high' || feedback.rating <= 2) {\n      return 'urgent';\n    }\n    if (feedback.urgency === 'medium' || feedback.rating === 3) {\n      return 'high';\n    }\n    if (feedback.issues.length > 0) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * 确定问题优先级\n   */\n  private determineIssuePriority(issue: TranslationIssue): QueueItem['priority'] {\n    if (issue.severity === 'critical' || issue.priority === 'urgent') {\n      return 'urgent';\n    }\n    if (issue.severity === 'major' || issue.priority === 'high') {\n      return 'high';\n    }\n    if (issue.severity === 'moderate' || issue.priority === 'medium') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * 获取队列键\n   */\n  private getQueueKey(workflowId: string): string {\n    return `queue_${workflowId}`;\n  }\n\n  /**\n   * 启动工作流程\n   */\n  private async startWorkflow(queueItem: QueueItem): Promise<void> {\n    // 记录工作流程开始\n    this.addToHistory(queueItem, 'workflow_started', '工作流程已开始');\n    \n    // 执行第一个步骤\n    await this.executeNextStep(queueItem);\n  }\n\n  /**\n   * 执行下一个步骤\n   */\n  private async executeNextStep(queueItem: QueueItem): Promise<void> {\n    const workflow = queueItem.workflow;\n    const nextStepIndex = queueItem.history.length;\n    \n    if (nextStepIndex >= workflow.steps.length) {\n      // 工作流程完成\n      queueItem.status = 'completed';\n      this.addToHistory(queueItem, 'workflow_completed', '工作流程已完成');\n      return;\n    }\n\n    const step = workflow.steps[nextStepIndex];\n    queueItem.currentStep = step.id;\n    queueItem.updatedAt = new Date();\n\n    // 记录步骤开始\n    this.addToHistory(queueItem, `step_started:${step.id}`, `开始执行步骤: ${step.name}`);\n\n    try {\n      if (step.type === 'auto') {\n        await this.executeAutoStep(queueItem, step);\n      } else {\n        await this.assignManualStep(queueItem, step);\n      }\n    } catch (error) {\n      console.error(`执行步骤 ${step.id} 失败:`, error);\n      // 可以在这里添加错误处理逻辑\n    }\n  }\n\n  /**\n   * 执行自动步骤\n   */\n  private async executeAutoStep(queueItem: QueueItem, step: WorkflowStep): Promise<void> {\n    for (const action of step.actions) {\n      await this.executeAction(queueItem, action);\n    }\n\n    // 记录步骤完成\n    this.addToHistory(queueItem, `step_completed:${step.id}`, `自动步骤完成: ${step.name}`);\n\n    // 继续下一步\n    await this.executeNextStep(queueItem);\n  }\n\n  /**\n   * 分配手动步骤\n   */\n  private async assignManualStep(queueItem: QueueItem, step: WorkflowStep): Promise<void> {\n    queueItem.status = 'waiting';\n    \n    // 分配给相应人员\n    if (step.assignee) {\n      queueItem.assignee = step.assignee;\n    } else if (step.assigneeRole) {\n      queueItem.assignee = await this.findAssignee(step.assigneeRole);\n    }\n\n    // 发送通知\n    await this.sendStepNotification(queueItem, step);\n\n    // 添加到处理历史\n    this.addToHistory(queueItem, `step_assigned:${step.id}`, \n      `步骤已分配给: ${queueItem.assignee}`);\n  }\n\n  /**\n   * 执行动作\n   */\n  private async executeAction(queueItem: QueueItem, action: StepAction): Promise<void> {\n    switch (action.type) {\n      case 'auto_respond':\n        await this.sendAutoResponse(queueItem, action.parameters);\n        break;\n      case 'notify':\n        await this.sendNotification(action.parameters.recipients, action.parameters.message);\n        break;\n      case 'update_status':\n        await this.updateStatus(queueItem, action.parameters.status);\n        break;\n      case 'assign':\n        // 分配逻辑已在assignManualStep中处理\n        break;\n      case 'create_task':\n        await this.createTask(action.parameters);\n        break;\n      case 'auto_resolve':\n        await this.autoResolve(queueItem);\n        break;\n    }\n  }\n\n  /**\n   * 查找处理人\n   */\n  private async findAssignee(role: WorkflowStep['assigneeRole']): Promise<string> {\n    // 简化的角色分配逻辑\n    const roleMapping: { [key: string]: string } = {\n      'translation_team': 'translator_001',\n      'quality_control': 'qa_specialist_001',\n      'product_manager': 'pm_001',\n      'engineering': 'developer_001'\n    };\n    \n    return roleMapping[role || ''] || 'default_handler';\n  }\n\n  /**\n   * 添加处理历史\n   */\n  private addToHistory(queueItem: QueueItem, action: string, notes?: string): void {\n    const historyItem: ProcessingHistoryItem = {\n      id: `history_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      step: queueItem.currentStep || '',\n      action,\n      timestamp: new Date(),\n      notes\n    };\n\n    queueItem.history.push(historyItem);\n    queueItem.updatedAt = new Date();\n\n    // 保存到存储\n    const key = `history_${queueItem.id}`;\n    if (!this.processingHistory.has(key)) {\n      this.processingHistory.set(key, []);\n    }\n    this.processingHistory.get(key)!.push(historyItem);\n  }\n\n  /**\n   * 发送自动响应\n   */\n  private async sendAutoResponse(queueItem: QueueItem, params: any): Promise<void> {\n    // 这里应该集成实际的邮件或通知服务\n    console.log(`发送自动响应: ${params.message}`);\n  }\n\n  /**\n   * 发送通知\n   */\n  private async sendNotification(recipients: string[], message: string): Promise<void> {\n    // 实际实现中会调用邮件或消息服务\n    console.log(`发送通知给 ${recipients.join(', ')}: ${message}`);\n  }\n\n  /**\n   * 更新状态\n   */\n  private async updateStatus(queueItem: QueueItem, status: string): Promise<void> {\n    queueItem.status = status as any;\n    queueItem.updatedAt = new Date();\n  }\n\n  /**\n   * 发送步骤通知\n   */\n  private async sendStepNotification(queueItem: QueueItem, step: WorkflowStep): Promise<void> {\n    const message = `您有新的处理任务: ${step.name}`;\n    if (queueItem.assignee) {\n      await this.sendNotification([queueItem.assignee], message);\n    }\n  }\n\n  /**\n   * 创建任务\n   */\n  private async createTask(params: any): Promise<void> {\n    // 这里会集成Jira、Trello等任务管理系统\n    console.log(`创建任务: ${JSON.stringify(params)}`);\n  }\n\n  /**\n   * 自动解决\n   */\n  private async autoResolve(queueItem: QueueItem): Promise<void> {\n    queueItem.status = 'completed';\n    queueItem.updatedAt = new Date();\n    this.addToHistory(queueItem, 'auto_resolved', '问题已自动解决');\n  }\n\n  /**\n   * 获取队列项\n   */\n  getQueueItem(queueId: string): QueueItem | null {\n    for (const queue of this.queues.values()) {\n      const item = queue.find(q => q.id === queueId);\n      if (item) return item;\n    }\n    return null;\n  }\n\n  /**\n   * 获取处理统计\n   */\n  getProcessingStats(): ProcessingStats {\n    let totalProcessed = 0;\n    let totalResponseTime = 0;\n    let totalResolutionTime = 0;\n    let slaCompliant = 0;\n    let escalations = 0;\n\n    for (const queue of this.queues.values()) {\n      for (const item of queue) {\n        if (item.status === 'completed') {\n          totalProcessed++;\n          const responseTime = item.history.find(h => h.action.includes('step_assigned'))?.timestamp.getTime() - item.createdAt.getTime();\n          const resolutionTime = item.updatedAt.getTime() - item.createdAt.getTime();\n          \n          totalResponseTime += responseTime / (1000 * 60 * 60); // 转换为小时\n          totalResolutionTime += resolutionTime / (1000 * 60 * 60);\n          \n          if (responseTime < item.workflow.sla.responseTime * 60 * 60 * 1000) {\n            slaCompliant++;\n          }\n          \n          escalations += item.history.filter(h => h.action.includes('escalation')).length;\n        }\n      }\n    }\n\n    return {\n      totalProcessed,\n      averageResponseTime: totalProcessed > 0 ? totalResponseTime / totalProcessed : 0,\n      averageResolutionTime: totalProcessed > 0 ? totalResolutionTime / totalProcessed : 0,\n      slaComplianceRate: totalProcessed > 0 ? slaCompliant / totalProcessed : 0,\n      escalations,\n      automationRate: 0.6, // 简化计算\n      customerSatisfaction: 4.2 // 模拟数据\n    };\n  }\n\n  /**\n   * 检查SLA状态\n   */\n  checkSLAStatus(queueItem: QueueItem): {\n    isBreached: boolean;\n    timeRemaining: number;\n    status: 'on_time' | 'warning' | 'breached';\n  } {\n    const workflow = queueItem.workflow;\n    const timeElapsed = Date.now() - queueItem.createdAt.getTime();\n    const timeLimit = workflow.sla.resolutionTime * 60 * 60 * 1000;\n    const timeRemaining = timeLimit - timeElapsed;\n\n    if (timeRemaining < 0) {\n      return { isBreached: true, timeRemaining, status: 'breached' };\n    } else if (timeRemaining < timeLimit * 0.2) {\n      return { isBreached: false, timeRemaining, status: 'warning' };\n    } else {\n      return { isBreached: false, timeRemaining, status: 'on_time' };\n    }\n  }\n\n  /**\n   * 导出处理报告\n   */\n  exportProcessingReport(): string {\n    const stats = this.getProcessingStats();\n    const report = {\n      generatedAt: new Date().toISOString(),\n      stats,\n      workflows: Array.from(this.workflows.values()),\n      queues: Object.fromEntries(\n        Array.from(this.queues.entries()).map(([key, items]) => [\n          key,\n          items.length\n        ])\n      )\n    };\n\n    return JSON.stringify(report, null, 2);\n  }\n}\n\n// 创建单例实例\nexport const feedbackProcessingWorkflow = new FeedbackProcessingWorkflow();\n\nexport default feedbackProcessingWorkflow;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/gesture-translations.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":143,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":144,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":145,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":146,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":147,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":148,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":149,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":150,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":151,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":152,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":153,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":154,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":41}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 手势操作翻译键配置\nexport const GESTURE_KEYS = {\n  // 基本手势\n  tap: {\n    short: 'gesture.tap.short',\n    long: 'gesture.tap.long',\n    double: 'gesture.tap.double',\n  },\n  \n  // 滑动手势\n  swipe: {\n    left: {\n      start: 'gesture.swipe.left.start',\n      end: 'gesture.swipe.left.end',\n      success: 'gesture.swipe.left.success',\n    },\n    right: {\n      start: 'gesture.swipe.right.start',\n      end: 'gesture.swipe.right.end',\n      success: 'gesture.swipe.right.success',\n    },\n    up: {\n      start: 'gesture.swipe.up.start',\n      end: 'gesture.swipe.up.end',\n      success: 'gesture.swipe.up.success',\n    },\n    down: {\n      start: 'gesture.swipe.down.start',\n      end: 'gesture.swipe.down.end',\n      success: 'gesture.swipe.down.success',\n    },\n  },\n  \n  // 长按手势\n  press: {\n    short: 'gesture.press.short',\n    long: 'gesture.press.long',\n    duration: 'gesture.press.duration',\n  },\n  \n  // 手势状态\n  states: {\n    ready: 'gesture.states.ready',\n    active: 'gesture.states.active',\n    success: 'gesture.states.success',\n    failed: 'gesture.states.failed',\n    cancelled: 'gesture.states.cancelled',\n  },\n  \n  // 操作提示\n  actions: {\n    delete: 'gesture.actions.delete',\n    edit: 'gesture.actions.edit',\n    favorite: 'gesture.actions.favorite',\n    share: 'gesture.actions.share',\n    more: 'gesture.actions.more',\n    back: 'gesture.actions.back',\n    forward: 'gesture.actions.forward',\n    refresh: 'gesture.actions.refresh',\n    menu: 'gesture.actions.menu',\n  },\n  \n  // 引导提示\n  guidance: {\n    intro: 'gesture.guidance.intro',\n    hint: 'gesture.guidance.hint',\n    help: 'gesture.guidance.help',\n    tutorial: 'gesture.guidance.tutorial',\n    next: 'gesture.guidance.next',\n    previous: 'gesture.guidance.previous',\n    skip: 'gesture.guidance.skip',\n    finish: 'gesture.guidance.finish',\n  },\n  \n  // 错误消息\n  errors: {\n    invalid: 'gesture.errors.invalid',\n    timeout: 'gesture.errors.timeout',\n    cancelled: 'gesture.errors.cancelled',\n    blocked: 'gesture.errors.blocked',\n    unsupported: 'gesture.errors.unsupported',\n  },\n  \n  // 成功消息\n  success: {\n    completed: 'gesture.success.completed',\n    action: 'gesture.success.action',\n    feedback: 'gesture.success.feedback',\n  },\n} as const;\n\n// 手势类型定义\nexport type GestureType = keyof typeof GESTURE_KEYS;\nexport type SwipeDirection = 'left' | 'right' | 'up' | 'down';\n\n// 手势配置\nexport interface GestureConfig {\n  minSwipeDistance: number; // 最小滑动距离（像素）\n  maxTapDistance: number; // 最大点击距离（像素）\n  longPressDuration: number; // 长按持续时间（毫秒）\n  doubleTapDelay: number; // 双击延迟（毫秒）\n  enableHaptic: boolean; // 启用触觉反馈\n  enableSound: boolean; // 启用声音反馈\n  enableVisual: boolean; // 启用视觉反馈\n}\n\n// 默认手势配置\nexport const DEFAULT_GESTURE_CONFIG: GestureConfig = {\n  minSwipeDistance: 50,\n  maxTapDistance: 10,\n  longPressDuration: 500,\n  doubleTapDelay: 300,\n  enableHaptic: true,\n  enableSound: false,\n  enableVisual: true,\n};\n\n// 手势事件类型\nexport interface GestureEvent {\n  type: GestureType;\n  direction?: SwipeDirection;\n  distance?: number;\n  duration?: number;\n  velocity?: number;\n  position?: { x: number; y: number };\n  timestamp: number;\n}\n\n// 手势状态\nexport type GestureState = \n  | 'idle'\n  | 'touch'\n  | 'move'\n  | 'swipe'\n  | 'tap'\n  | 'press'\n  | 'success'\n  | 'failed'\n  | 'cancelled';\n\n// 手势监听器\nexport interface GestureListener {\n  onTouchStart?: (event: GestureEvent) => void;\n  onTouchMove?: (event: GestureEvent) => void;\n  onTouchEnd?: (event: GestureEvent) => void;\n  onSwipeLeft?: (event: GestureEvent) => void;\n  onSwipeRight?: (event: GestureEvent) => void;\n  onSwipeUp?: (event: GestureEvent) => void;\n  onSwipeDown?: (event: GestureEvent) => void;\n  onTap?: (event: GestureEvent) => void;\n  onLongPress?: (event: GestureEvent) => void;\n  onDoubleTap?: (event: GestureEvent) => void;\n  onGestureSuccess?: (event: GestureEvent) => void;\n  onGestureFailed?: (event: GestureEvent) => void;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/indexeddb-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'NetworkQuality' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NetworkQuality' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'USER_DATA' is defined but never used. Allowed unused vars must match /^_/u.","line":69,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'PRODUCTS' is defined but never used. Allowed unused vars must match /^_/u.","line":70,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'ORDERS' is defined but never used. Allowed unused vars must match /^_/u.","line":71,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'CACHE_METADATA' is defined but never used. Allowed unused vars must match /^_/u.","line":72,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'INCREMENTAL_UPDATES' is defined but never used. Allowed unused vars must match /^_/u.","line":73,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1454,1457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1454,1457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1570,1573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1570,1573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1717,1720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1717,1720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1928,1931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1928,1931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":122,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":122,"endColumn":35},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":130,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":130,"endColumn":36,"fix":{"range":[2587,2594],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2688,2724],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2753,2799],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":154,"column":42,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":154,"endColumn":49,"fix":{"range":[3255,3723],"text":"for (const [storeName, storeConfig] of Object.entries(DB_CONFIG.stores)) {\n          if (!db.objectStoreNames.contains(storeName)) {\n            const store = db.createObjectStore(storeName, {\n              keyPath: storeConfig.keyPath\n            });\n\n            // 创建索引\n            Object.entries(storeConfig.indexes).forEach(([indexName, indexKey]) => {\n              store.createIndex(indexName, indexKey, { unique: false });\n            });\n          }\n        }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":161,"column":49,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":161,"endColumn":56,"fix":{"range":[3538,3699],"text":"for (const [indexName, indexKey] of Object.entries(storeConfig.indexes)) {\n              store.createIndex(indexName, indexKey, { unique: false });\n            }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4107,4110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4107,4110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":192,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":192,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4199,4209],"text":"(options.id != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4199,4209],"text":"(options.id ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4199,4209],"text":"(Boolean(options.id))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":192,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":192,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4210,4212],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":206,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":206,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4543,4544],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":66,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":79},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":224,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":224,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5107,5108],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":230,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":230,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5326,5332],"text":"(Boolean(result))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":55,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":68},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used. Allowed unused args must match /^_/u.","line":243,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":243,"endColumn":70},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":247,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":247,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5840,5841],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":254,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":254,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6123,6125],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6375,6378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6375,6378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used. Allowed unused args must match /^_/u.","line":267,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":267,"endColumn":32},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":272,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":272,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6560,6561],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":280,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":280,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6892,6894],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":293,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":293,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7241,7242],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":55,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":68},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":311,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":311,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7781,7782],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":50,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":63},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":326,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":326,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8202,8216],"text":"(item.expiresAt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8202,8216],"text":"(item.expiresAt ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8202,8216],"text":"(Boolean(item.expiresAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":53,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":66},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":396,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":396,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[10455,10456],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":405,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":405,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10734,10747],"text":"filter.status != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10734,10747],"text":"filter.status ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10734,10747],"text":"Boolean(filter.status)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":408,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":408,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10854,10869],"text":"filter.priority != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10854,10869],"text":"filter.priority ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10854,10869],"text":"Boolean(filter.priority)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":417,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":417,"endColumn":55,"fix":{"range":[11228,11248],"text":"{return priorityDiff;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11960,11963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11960,11963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":447,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":447,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12037,12040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12037,12040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":451,"column":7,"nodeType":"MemberExpression","endLine":451,"endColumn":23},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":460,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":460,"endColumn":35,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[12393,12394],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":475,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":476,"endColumn":54,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12918,12963],"text":"Boolean((item.expiresAt && Date.now() > item.expiresAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[12901,12905],"text":"(item): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":476,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":476,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12918,12932],"text":"(Boolean(item.expiresAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":484,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":484,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13085,13121],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":497,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":497,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13529,13595],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":502,"column":29,"nodeType":"CallExpression","messageId":"substr","endLine":502,"endColumn":68,"fix":{"range":[13701,13712],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":523,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14156,14159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14156,14159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":533,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":533,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14443,14483],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isReady'. Either include it or remove the dependency array.","line":551,"column":6,"nodeType":"ArrayExpression","endLine":551,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [isReady]","fix":{"range":[14835,14837],"text":"[isReady]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":556,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":556,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14993,14996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14993,14996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used. Allowed unused args must match /^_/u.","line":567,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":567,"endColumn":32}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":3,"fixableWarningCount":2,"source":"// IndexedDB存储管理器 - 为弱网环境优化系统提供本地存储\nimport { NetworkQuality } from './network-retry';\n\n// IndexedDB数据库配置\nconst DB_CONFIG = {\n  name: 'LuckymartOfflineDB',\n  version: 1,\n  stores: {\n    // 用户数据缓存\n    userData: {\n      keyPath: 'id',\n      indexes: {\n        'by-timestamp': 'timestamp',\n        'by-type': 'dataType'\n      }\n    },\n    \n    // 产品数据缓存\n    products: {\n      keyPath: 'id',\n      indexes: {\n        'by-timestamp': 'timestamp',\n        'by-category': 'category',\n        'by-price': 'price'\n      }\n    },\n    \n    // 订单数据缓存\n    orders: {\n      keyPath: 'id',\n      indexes: {\n        'by-timestamp': 'timestamp',\n        'by-status': 'status',\n        'by-user': 'userId'\n      }\n    },\n    \n    // 离线操作队列\n    offlineQueue: {\n      keyPath: 'id',\n      indexes: {\n        'by-timestamp': 'timestamp',\n        'by-priority': 'priority',\n        'by-status': 'status'\n      }\n    },\n    \n    // 缓存元数据\n    cacheMetadata: {\n      keyPath: 'key',\n      indexes: {\n        'by-timestamp': 'lastUpdated'\n      }\n    },\n    \n    // 增量更新数据\n    incrementalUpdates: {\n      keyPath: 'id',\n      indexes: {\n        'by-timestamp': 'timestamp',\n        'by-table': 'tableName'\n      }\n    }\n  }\n};\n\n// 存储数据类型\nexport enum StorageType {\n  USER_DATA = 'userData',\n  PRODUCTS = 'products',\n  ORDERS = 'orders',\n  CACHE_METADATA = 'cacheMetadata',\n  INCREMENTAL_UPDATES = 'incrementalUpdates'\n}\n\n// 数据项接口\nexport interface StorageItem {\n  id: string;\n  data: any;\n  timestamp: number;\n  expiresAt?: number;\n  dataType: string;\n  version?: string;\n  metadata?: Record<string, any>;\n}\n\n// 离线队列项接口\nexport interface OfflineQueueItem {\n  id: string;\n  url: string;\n  method: string;\n  headers: Record<string, string>;\n  body?: any;\n  timestamp: number;\n  priority: 'low' | 'normal' | 'high' | 'critical';\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  retryCount: number;\n  maxRetries: number;\n  metadata?: Record<string, any>;\n}\n\n// 缓存元数据接口\nexport interface CacheMetadata {\n  key: string;\n  lastUpdated: number;\n  size: number;\n  accessCount: number;\n  lastAccessed: number;\n  dataType: string;\n  version: string;\n}\n\n// IndexedDB管理器类\nclass IndexedDBManager {\n  private static instance: IndexedDBManager;\n  private db: IDBDatabase | null = null;\n  private isInitialized = false;\n\n  private constructor() {}\n\n  public static getInstance(): IndexedDBManager {\n    if (!IndexedDBManager.instance) {\n      IndexedDBManager.instance = new IndexedDBManager();\n    }\n    return IndexedDBManager.instance;\n  }\n\n  // 初始化数据库\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      this.db = await this.openDatabase();\n      this.isInitialized = true;\n      console.log('[IndexedDB] 数据库初始化成功');\n    } catch (error) {\n      console.error('[IndexedDB] 数据库初始化失败:', error);\n      throw error;\n    }\n  }\n\n  // 打开数据库\n  private openDatabase(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_CONFIG.name, DB_CONFIG.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // 创建对象存储\n        Object.entries(DB_CONFIG.stores).forEach(([storeName, storeConfig]) => {\n          if (!db.objectStoreNames.contains(storeName)) {\n            const store = db.createObjectStore(storeName, {\n              keyPath: storeConfig.keyPath\n            });\n\n            // 创建索引\n            Object.entries(storeConfig.indexes).forEach(([indexName, indexKey]) => {\n              store.createIndex(indexName, indexKey, { unique: false });\n            });\n          }\n        });\n      };\n    });\n  }\n\n  // 确保数据库已初始化\n  private async ensureInitialized(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    if (!this.db) {\n      throw new Error('数据库未正确初始化');\n    }\n  }\n\n  // 存储数据\n  async setItem<T>(\n    storeName: string,\n    data: T,\n    options: {\n      id?: string;\n      expiresAt?: number;\n      metadata?: Record<string, any>;\n    } = {}\n  ): Promise<string> {\n    await this.ensureInitialized();\n\n    const id = options.id || this.generateId();\n    const timestamp = Date.now();\n    const expiresAt = options.expiresAt;\n\n    const item: StorageItem = {\n      id,\n      data,\n      timestamp,\n      expiresAt,\n      dataType: storeName,\n      metadata: options.metadata\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.put(item);\n\n      request.onsuccess = () => {\n        // 更新缓存元数据\n        this.updateCacheMetadata(storeName, id, timestamp).catch(console.error);\n        resolve(id);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 获取数据\n  async getItem<T>(storeName: string, id: string): Promise<T | null> {\n    await this.ensureInitialized();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.get(id);\n\n      request.onsuccess = () => {\n        const result = request.result;\n        if (result && this.isItemValid(result)) {\n          // 更新访问统计\n          this.updateAccessStats(storeName, id).catch(console.error);\n          resolve(result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 获取所有数据\n  async getAllItems<T>(storeName: string, filter?: (item: StorageItem) => boolean): Promise<T[]> {\n    await this.ensureInitialized();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        const results = request.result\n          .filter(item => this.isItemValid(item))\n          .filter(filter || (() => true))\n          .map(item => item.data);\n        resolve(results);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 根据索引查询数据\n  async getItemsByIndex<T>(\n    storeName: string,\n    indexName: string,\n    value: any,\n    filter?: (item: StorageItem) => boolean\n  ): Promise<T[]> {\n    await this.ensureInitialized();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const index = store.index(indexName);\n      const request = index.getAll(value);\n\n      request.onsuccess = () => {\n        const results = request.result\n          .filter(item => this.isItemValid(item))\n          .filter(filter || (() => true))\n          .map(item => item.data);\n        resolve(results);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 删除数据\n  async removeItem(storeName: string, id: string): Promise<boolean> {\n    await this.ensureInitialized();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.delete(id);\n\n      request.onsuccess = () => {\n        // 删除缓存元数据\n        this.removeCacheMetadata(storeName, id).catch(console.error);\n        resolve(true);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 清空存储\n  async clearStore(storeName: string): Promise<void> {\n    await this.ensureInitialized();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.clear();\n\n      request.onsuccess = () => {\n        // 清空缓存元数据\n        this.clearCacheMetadata(storeName).catch(console.error);\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 检查数据是否有效\n  private isItemValid(item: StorageItem): boolean {\n    if (item.expiresAt && Date.now() > item.expiresAt) {\n      // 数据已过期，异步删除\n      this.removeItem(item.dataType, item.id).catch(console.error);\n      return false;\n    }\n    return true;\n  }\n\n  // 更新缓存元数据\n  private async updateCacheMetadata(storeName: string, id: string, timestamp: number): Promise<void> {\n    const key = `${storeName}_${id}`;\n    const metadata: CacheMetadata = {\n      key,\n      lastUpdated: timestamp,\n      size: JSON.stringify({ storeName, id }).length,\n      accessCount: 1,\n      lastAccessed: timestamp,\n      dataType: storeName,\n      version: '1.0.0'\n    };\n\n    await this.setItem(StorageType.CACHE_METADATA, metadata, { id: key });\n  }\n\n  // 更新访问统计\n  private async updateAccessStats(storeName: string, id: string): Promise<void> {\n    const key = `${storeName}_${id}`;\n    const metadata = await this.getItem<CacheMetadata>(StorageType.CACHE_METADATA, key);\n    \n    if (metadata) {\n      metadata.accessCount++;\n      metadata.lastAccessed = Date.now();\n      await this.setItem(StorageType.CACHE_METADATA, metadata, { id: key });\n    }\n  }\n\n  // 删除缓存元数据\n  private async removeCacheMetadata(storeName: string, id: string): Promise<void> {\n    const key = `${storeName}_${id}`;\n    await this.removeItem(StorageType.CACHE_METADATA, key);\n  }\n\n  // 清空缓存元数据\n  private async clearCacheMetadata(storeName: string): Promise<void> {\n    const metadataItems = await this.getAllItems<CacheMetadata>(StorageType.CACHE_METADATA);\n    const storeMetadata = metadataItems.filter(item => item.dataType === storeName);\n    \n    for (const metadata of storeMetadata) {\n      await this.removeItem(StorageType.CACHE_METADATA, metadata.key);\n    }\n  }\n\n  // 添加到离线队列\n  async addToOfflineQueue(item: Omit<OfflineQueueItem, 'id' | 'timestamp' | 'status' | 'retryCount'>): Promise<string> {\n    const queueItem: OfflineQueueItem = {\n      id: this.generateId(),\n      timestamp: Date.now(),\n      status: 'pending',\n      retryCount: 0,\n      ...item\n    };\n\n    return this.setItem('offlineQueue', queueItem);\n  }\n\n  // 获取离线队列\n  async getOfflineQueue(filter?: { status?: string; priority?: string }): Promise<OfflineQueueItem[]> {\n    await this.ensureInitialized();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['offlineQueue'], 'readonly');\n      const store = transaction.objectStore('offlineQueue');\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        let results = request.result;\n        \n        // 应用过滤器\n        if (filter) {\n          if (filter.status) {\n            results = results.filter(item => item.status === filter.status);\n          }\n          if (filter.priority) {\n            results = results.filter(item => item.priority === filter.priority);\n          }\n        }\n\n        // 按优先级和时间排序\n        results.sort((a, b) => {\n          const priorityOrder = { low: 0, normal: 1, high: 2, critical: 3 };\n          const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n          if (priorityDiff !== 0) return priorityDiff;\n          return a.timestamp - b.timestamp;\n        });\n\n        resolve(results);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 更新离线队列项状态\n  async updateOfflineQueueItem(id: string, updates: Partial<OfflineQueueItem>): Promise<void> {\n    await this.ensureInitialized();\n\n    const item = await this.getItem<OfflineQueueItem>('offlineQueue', id);\n    if (item) {\n      const updatedItem = { ...item, ...updates };\n      await this.setItem('offlineQueue', updatedItem, { id });\n    }\n  }\n\n  // 从离线队列移除\n  async removeFromOfflineQueue(id: string): Promise<void> {\n    await this.removeItem('offlineQueue', id);\n  }\n\n  // 获取存储统计信息\n  async getStorageStats(): Promise<Record<string, any>> {\n    await this.ensureInitialized();\n\n    const stats: Record<string, any> = {};\n\n    for (const storeName of Object.keys(DB_CONFIG.stores)) {\n      const count = await this.getStoreCount(storeName);\n      stats[storeName] = { count };\n    }\n\n    return stats;\n  }\n\n  // 获取存储项数量\n  private async getStoreCount(storeName: string): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.count();\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // 清理过期数据\n  async cleanupExpiredData(): Promise<void> {\n    await this.ensureInitialized();\n\n    for (const storeName of Object.keys(DB_CONFIG.stores)) {\n      const items = await this.getAllItems(storeName);\n      const expiredItems = items.filter(item => \n        item.expiresAt && Date.now() > item.expiresAt\n      );\n\n      for (const item of expiredItems) {\n        await this.removeItem(storeName, item.id);\n      }\n    }\n\n    console.log('[IndexedDB] 过期数据清理完成');\n  }\n\n  // 清理低访问频率数据\n  async cleanupLowAccessData(threshold: number = 5): Promise<void> {\n    const metadata = await this.getAllItems<CacheMetadata>(StorageType.CACHE_METADATA);\n    const lowAccessItems = metadata.filter(item => item.accessCount < threshold);\n\n    for (const item of lowAccessItems) {\n      const [storeName, id] = item.key.split('_');\n      await this.removeItem(storeName, id);\n    }\n\n    console.log(`[IndexedDB] 清理了 ${lowAccessItems.length} 个低访问频率数据项`);\n  }\n\n  // 生成唯一ID\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // 关闭数据库\n  close(): void {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n      this.isInitialized = false;\n    }\n  }\n}\n\n// 单例导出\nexport const indexedDBManager = IndexedDBManager.getInstance();\n\n// React Hook for IndexedDB\nimport { useState, useEffect, useCallback } from 'react';\n\nexport function useIndexedDB() {\n  const [isReady, setIsReady] = useState(false);\n  const [stats, setStats] = useState<Record<string, any>>({});\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        await indexedDBManager.initialize();\n        setIsReady(true);\n        const storageStats = await indexedDBManager.getStorageStats();\n        setStats(storageStats);\n      } catch (error) {\n        console.error('IndexedDB初始化失败:', error);\n      }\n    };\n\n    initialize();\n\n    // 定期更新统计信息\n    const interval = setInterval(async () => {\n      if (isReady) {\n        const storageStats = await indexedDBManager.getStorageStats();\n        setStats(storageStats);\n      }\n    }, 30000); // 30秒更新一次\n\n    return () => {\n      clearInterval(interval);\n      indexedDBManager.close();\n    };\n  }, []);\n\n  const setItem = useCallback(async <T>(\n    storeName: string,\n    data: T,\n    options?: { id?: string; expiresAt?: number; metadata?: Record<string, any> }\n  ): Promise<string> => {\n    return await indexedDBManager.setItem(storeName, data, options);\n  }, []);\n\n  const getItem = useCallback(async <T>(storeName: string, id: string): Promise<T | null> => {\n    return await indexedDBManager.getItem<T>(storeName, id);\n  }, []);\n\n  const getAllItems = useCallback(async <T>(\n    storeName: string,\n    filter?: (item: StorageItem) => boolean\n  ): Promise<T[]> => {\n    return await indexedDBManager.getAllItems<T>(storeName, filter);\n  }, []);\n\n  const removeItem = useCallback(async (storeName: string, id: string): Promise<boolean> => {\n    return await indexedDBManager.removeItem(storeName, id);\n  }, []);\n\n  const clearStore = useCallback(async (storeName: string): Promise<void> => {\n    return await indexedDBManager.clearStore(storeName);\n  }, []);\n\n  const addToOfflineQueue = useCallback(async (\n    item: Omit<OfflineQueueItem, 'id' | 'timestamp' | 'status' | 'retryCount'>\n  ): Promise<string> => {\n    return await indexedDBManager.addToOfflineQueue(item);\n  }, []);\n\n  const getOfflineQueue = useCallback(async (\n    filter?: { status?: string; priority?: string }\n  ): Promise<OfflineQueueItem[]> => {\n    return await indexedDBManager.getOfflineQueue(filter);\n  }, []);\n\n  const cleanupExpiredData = useCallback(async (): Promise<void> => {\n    return await indexedDBManager.cleanupExpiredData();\n  }, []);\n\n  return {\n    isReady,\n    stats,\n    setItem,\n    getItem,\n    getAllItems,\n    removeItem,\n    clearStore,\n    addToOfflineQueue,\n    getOfflineQueue,\n    cleanupExpiredData\n  };\n}\n\nexport default IndexedDBManager;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/mobile-text-optimization.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":76,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":76,"endColumn":44,"fix":{"range":[1519,1531],"text":"{return 'tg';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":77,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":77,"endColumn":46,"fix":{"range":[1565,1577],"text":"{return 'ru';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":78,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":78,"endColumn":46,"fix":{"range":[1611,1623],"text":"{return 'zh';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":79,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":79,"endColumn":46,"fix":{"range":[1657,1669],"text":"{return 'en';}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":93,"column":18,"nodeType":"MemberExpression","endLine":93,"endColumn":43},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":165,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":165,"endColumn":46,"fix":{"range":[3674,3695],"text":"slice(0, Math.max(0, maxChars)"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":171,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":171,"endColumn":52,"fix":{"range":[3884,3906],"text":"slice(0, Math.max(0, lastSpace)"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":232,"column":18,"nodeType":"MemberExpression","endLine":232,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":255,"column":11,"nodeType":"MemberExpression","endLine":255,"endColumn":39},{"ruleId":"complexity","severity":2,"message":"Function 'generateInlineStyles' has a complexity of 14. Maximum allowed is 10.","line":307,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":388,"endColumn":2},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":312,"column":18,"nodeType":"MemberExpression","endLine":312,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":448,"column":70,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":448,"endColumn":86,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10695,10711],"text":"(options.maxChars != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[10695,10711],"text":"(options.maxChars ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10695,10711],"text":"(Boolean(options.maxChars))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":448,"column":87,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":448,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10712,10714],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":468,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":468,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11191,11193],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11360,11363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11360,11363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":472,"column":43,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":472,"endColumn":59,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11453,11469],"text":"(options.maxChars != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11453,11469],"text":"(options.maxChars ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11453,11469],"text":"(Boolean(options.maxChars))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":472,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":472,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11470,11472],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":6,"fixableWarningCount":0,"source":"/**\n * 移动端多语言文本优化工具函数\n * 提供文本长度检测、截断、字体大小计算等功能\n */\n\nexport type Language = 'zh' | 'en' | 'ru' | 'tg';\n\nexport interface TextMetrics {\n  charCount: number;\n  wordCount: number;\n  estimatedWidth: number;\n  estimatedHeight: number;\n  isTooLong: boolean;\n  recommendedTruncation: 'none' | 'single' | 'double' | 'triple';\n}\n\nexport interface TextOptimizationOptions {\n  maxWidth?: number;\n  maxHeight?: number;\n  maxChars?: number;\n  fontSize?: number;\n  lineHeight?: number;\n  allowBreakWord?: boolean;\n}\n\n/**\n * 语言特性配置\n */\nconst LANGUAGE_CONFIG: Record<Language, {\n  avgCharWidth: number;\n  avgWordLength: number;\n  compressionRatio: number;\n  recommendedFontSize: number;\n  lineHeight: number;\n}> = {\n  zh: {\n    avgCharWidth: 12,\n    avgWordLength: 1,\n    compressionRatio: 1.0,\n    recommendedFontSize: 14,\n    lineHeight: 1.3,\n  },\n  en: {\n    avgCharWidth: 8,\n    avgWordLength: 5,\n    compressionRatio: 1.2,\n    recommendedFontSize: 13,\n    lineHeight: 1.4,\n  },\n  ru: {\n    avgCharWidth: 9,\n    avgWordLength: 6,\n    compressionRatio: 1.4,\n    recommendedFontSize: 12,\n    lineHeight: 1.3,\n  },\n  tg: {\n    avgCharWidth: 10,\n    avgWordLength: 7,\n    compressionRatio: 1.6,\n    recommendedFontSize: 11,\n    lineHeight: 1.2,\n  },\n};\n\n/**\n * 检测文本语言\n */\nexport function detectLanguage(text: string): Language {\n  // 简单的语言检测逻辑\n  const tajikPattern = /[ӣқғӯҳҷӯ]/;\n  const russianPattern = /[а-яё]/i;\n  const chinesePattern = /[\\u4e00-\\u9fff]/;\n  const englishPattern = /^[a-zA-Z\\s]*$/;\n  \n  if (tajikPattern.test(text)) return 'tg';\n  if (russianPattern.test(text)) return 'ru';\n  if (chinesePattern.test(text)) return 'zh';\n  if (englishPattern.test(text)) return 'en';\n  \n  // 默认返回塔吉克语（项目默认语言）\n  return 'tg';\n}\n\n/**\n * 计算文本度量指标\n */\nexport function calculateTextMetrics(\n  text: string,\n  language: Language,\n  options: TextOptimizationOptions = {}\n): TextMetrics {\n  const config = LANGUAGE_CONFIG[language];\n  const {\n    maxWidth = 280,\n    maxHeight = 60,\n    fontSize = config.recommendedFontSize,\n    lineHeight = config.lineHeight,\n    maxChars = 50,\n  } = options;\n\n  // 基础文本分析\n  const charCount = text.length;\n  const words = text.trim().split(/\\s+/);\n  const wordCount = words.length;\n  \n  // 估算文本宽度\n  let estimatedWidth = 0;\n  if (language === 'zh') {\n    // 中文：按字符数计算\n    estimatedWidth = charCount * config.avgCharWidth;\n  } else if (language === 'en') {\n    // 英文：按单词计算，空格考虑在内\n    estimatedWidth = wordCount * config.avgWordLength * config.avgCharWidth + (wordCount - 1) * 4;\n  } else {\n    // 俄文和塔吉克语：按字符计算，但有额外的字符间距\n    estimatedWidth = charCount * config.avgCharWidth * config.compressionRatio;\n  }\n  \n  // 估算文本高度\n  const linesNeeded = Math.ceil(estimatedWidth / maxWidth) || 1;\n  const estimatedHeight = linesNeeded * fontSize * lineHeight;\n  \n  // 判断是否过长\n  const isTooLong = estimatedWidth > maxWidth || estimatedHeight > maxHeight || charCount > maxChars;\n  \n  // 推荐截断策略\n  let recommendedTruncation: 'none' | 'single' | 'double' | 'triple' = 'none';\n  if (linesNeeded > 3) {\n    recommendedTruncation = 'triple';\n  } else if (linesNeeded > 2) {\n    recommendedTruncation = 'double';\n  } else if (linesNeeded > 1 && charCount > 20) {\n    recommendedTruncation = 'single';\n  }\n  \n  return {\n    charCount,\n    wordCount,\n    estimatedWidth,\n    estimatedHeight,\n    isTooLong,\n    recommendedTruncation,\n  };\n}\n\n/**\n * 智能文本截断\n */\nexport function smartTruncate(\n  text: string,\n  language: Language,\n  maxChars: number,\n  options: {\n    preserveWords?: boolean;\n    addEllipsis?: boolean;\n  } = {}\n): string {\n  const { preserveWords = true, addEllipsis = true } = options;\n  \n  if (text.length <= maxChars) {\n    return text;\n  }\n  \n  let truncated = text.substring(0, maxChars);\n  \n  if (preserveWords && language !== 'zh') {\n    // 对于非中文，尝试在单词边界截断\n    const lastSpace = truncated.lastIndexOf(' ');\n    if (lastSpace > maxChars * 0.7) {\n      truncated = truncated.substring(0, lastSpace);\n    }\n  }\n  \n  if (addEllipsis) {\n    truncated = truncated.replace(/[.,;:\\s]*$/, '');\n    truncated += '...';\n  }\n  \n  return truncated;\n}\n\n/**\n * 获取推荐的CSS类名\n */\nexport function getRecommendedClasses(\n  text: string,\n  language: Language,\n  context: 'title' | 'button' | 'label' | 'status' | 'content' = 'content'\n): string[] {\n  const metrics = calculateTextMetrics(text, language);\n  const classes = [`mobile-text`, `mobile-text--${language}`];\n  \n  // 根据上下文添加特定类\n  switch (context) {\n    case 'title':\n      classes.push('mobile-product-title', `mobile-product-title--${language}`);\n      break;\n    case 'button':\n      classes.push('mobile-button-text', `mobile-button-text--${language}`);\n      break;\n    case 'label':\n      classes.push('mobile-form-label', `mobile-form-label--${language}`);\n      break;\n    case 'status':\n      classes.push('mobile-status-badge', `mobile-status-badge--${language}`);\n      break;\n    default:\n      break;\n  }\n  \n  // 添加截断类\n  if (metrics.recommendedTruncation === 'single') {\n    classes.push('mobile-text--truncate');\n  } else if (metrics.recommendedTruncation === 'double') {\n    classes.push('mobile-text--truncate-2');\n  } else if (metrics.recommendedTruncation === 'triple') {\n    classes.push('mobile-text--truncate-3');\n  }\n  \n  return classes;\n}\n\n/**\n * 获取响应式字体大小\n */\nexport function getResponsiveFontSize(\n  language: Language,\n  baseSize: number = 14,\n  screenWidth: number = typeof window !== 'undefined' ? window.innerWidth : 375\n): number {\n  const config = LANGUAGE_CONFIG[language];\n  let size = baseSize || config.recommendedFontSize;\n  \n  // 根据屏幕宽度调整\n  if (screenWidth < 360) {\n    // 超小屏幕\n    size *= 0.9;\n  } else if (screenWidth < 768) {\n    // 小屏幕\n    size *= 0.95;\n  } else if (screenWidth >= 768) {\n    // 平板或更大\n    size *= 1.1;\n  }\n  \n  // 根据语言调整\n  const languageMultiplier = {\n    zh: 1.1,\n    en: 1.0,\n    ru: 0.9,\n    tg: 0.8,\n  };\n  \n  size *= languageMultiplier[language];\n  \n  // 确保最小字体大小\n  return Math.max(size, 8);\n}\n\n/**\n * 检测是否需要特殊处理\n */\nexport function needsSpecialHandling(\n  text: string,\n  language: Language\n): {\n  needsBreakWord: boolean;\n  needsHyphens: boolean;\n  needsSmallerFont: boolean;\n  recommendedContainer: 'sm' | 'md' | 'lg' | 'xl';\n} {\n  const metrics = calculateTextMetrics(text, language);\n  \n  // 检测是否需要强制换行\n  const needsBreakWord = ['en', 'ru', 'tg'].includes(language) && metrics.wordCount > 3;\n  \n  // 检测是否需要连字符\n  const needsHyphens = ['en', 'ru', 'tg'].includes(language);\n  \n  // 检测是否需要更小字体\n  const needsSmallerFont = language === 'tg' && metrics.charCount > 15;\n  \n  // 推荐容器大小\n  let recommendedContainer: 'sm' | 'md' | 'lg' | 'xl' = 'lg';\n  if (metrics.charCount < 10) {\n    recommendedContainer = 'sm';\n  } else if (metrics.charCount < 20) {\n    recommendedContainer = 'md';\n  } else if (metrics.charCount < 40) {\n    recommendedContainer = 'lg';\n  } else {\n    recommendedContainer = 'xl';\n  }\n  \n  return {\n    needsBreakWord,\n    needsHyphens,\n    needsSmallerFont,\n    recommendedContainer,\n  };\n}\n\n/**\n * 生成优化的内联样式\n */\nexport function generateInlineStyles(\n  text: string,\n  language: Language,\n  context: 'title' | 'button' | 'label' | 'status' | 'content' = 'content'\n): React.CSSProperties {\n  const config = LANGUAGE_CONFIG[language];\n  const metrics = calculateTextMetrics(text, language);\n  const specialHandling = needsSpecialHandling(text, language);\n  const fontSize = getResponsiveFontSize(language);\n  \n  const styles: React.CSSProperties = {\n    fontSize: `${fontSize}px`,\n    lineHeight: config.lineHeight,\n    fontFamily: language === 'ru' ? \"'Inter', 'Segoe UI', sans-serif\" : 'inherit',\n  };\n  \n  // 根据上下文调整\n  switch (context) {\n    case 'title':\n      styles.fontWeight = 600;\n      styles.marginBottom = '8px';\n      break;\n    case 'button':\n      styles.fontWeight = 500;\n      styles.textAlign = 'center';\n      break;\n    case 'label':\n      styles.fontWeight = 500;\n      styles.marginBottom = '4px';\n      break;\n    case 'status':\n      styles.fontWeight = 600;\n      styles.fontSize = `${Math.max(fontSize - 2, 8)}px`;\n      break;\n  }\n  \n  // 根据语言特性添加样式\n  if (specialHandling.needsBreakWord) {\n    styles.wordBreak = 'break-word';\n  }\n  \n  if (specialHandling.needsHyphens) {\n    styles.hyphens = 'auto';\n    styles.WebkitHyphens = 'auto';\n    styles.MozHyphens = 'auto';\n  }\n  \n  // 俄文字体渲染优化\n  if (language === 'ru') {\n    styles.WebkitFontSmoothing = 'antialiased';\n    styles.MozOsxFontSmoothing = 'grayscale';\n  }\n  \n  // 塔吉克语数字显示优化\n  if (language === 'tg') {\n    styles.fontVariantNumeric = 'tabular-nums';\n  }\n  \n  // 如果文本过长，添加最大宽度限制\n  if (metrics.isTooLong) {\n    styles.maxWidth = '100%';\n    styles.overflow = 'hidden';\n    styles.textOverflow = 'ellipsis';\n    \n    if (metrics.recommendedTruncation !== 'none') {\n      styles.whiteSpace = 'nowrap';\n      if (metrics.recommendedTruncation === 'double') {\n        styles.whiteSpace = 'normal';\n        styles.display = '-webkit-box';\n        styles.WebkitLineClamp = 2;\n        styles.WebkitBoxOrient = 'vertical';\n      } else if (metrics.recommendedTruncation === 'triple') {\n        styles.whiteSpace = 'normal';\n        styles.display = '-webkit-box';\n        styles.WebkitLineClamp = 3;\n        styles.WebkitBoxOrient = 'vertical';\n      }\n    }\n  }\n  \n  return styles;\n}\n\n/**\n * 检测设备信息\n */\nexport function getDeviceInfo(): {\n  isMobile: boolean;\n  screenWidth: number;\n  isDarkMode: boolean;\n  prefersReducedMotion: boolean;\n} {\n  if (typeof window === 'undefined') {\n    return {\n      isMobile: true,\n      screenWidth: 375,\n      isDarkMode: false,\n      prefersReducedMotion: false,\n    };\n  }\n  \n  return {\n    isMobile: window.innerWidth < 768,\n    screenWidth: window.innerWidth,\n    isDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n    prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n  };\n}\n\n/**\n * 文本优化Hook配置\n */\nexport interface UseTextOptimizationConfig {\n  text: string;\n  language: Language;\n  context?: 'title' | 'button' | 'label' | 'status' | 'content';\n  options?: TextOptimizationOptions;\n}\n\n/**\n * 使用文本优化的Hook配置\n */\nexport function createTextOptimizationHook(config: UseTextOptimizationConfig) {\n  const { text, language, context = 'content', options = {} } = config;\n  \n  const metrics = calculateTextMetrics(text, language, options);\n  const classes = getRecommendedClasses(text, language, context);\n  const styles = generateInlineStyles(text, language, context);\n  const specialHandling = needsSpecialHandling(text, language);\n  const deviceInfo = getDeviceInfo();\n  \n  return {\n    text,\n    language,\n    context,\n    metrics,\n    classes,\n    styles,\n    specialHandling,\n    deviceInfo,\n    shouldTruncate: metrics.isTooLong,\n    truncatedText: metrics.isTooLong ? smartTruncate(text, language, options.maxChars || 20) : text,\n  };\n}\n\n/**\n * 批量文本分析\n */\nexport function batchAnalyzeTexts(\n  texts: Array<{ text: string; context?: string; language?: Language }>,\n  options: TextOptimizationOptions = {}\n): Array<{\n  originalText: string;\n  context: string;\n  language: Language;\n  metrics: TextMetrics;\n  needsTruncation: boolean;\n  recommendedClasses: string[];\n  optimizedText: string;\n}> {\n  return texts.map(({ text, context = 'content', language }) => {\n    const detectedLang = language || detectLanguage(text);\n    const metrics = calculateTextMetrics(text, detectedLang, options);\n    const classes = getRecommendedClasses(text, detectedLang, context as any);\n    const optimizedText = metrics.isTooLong \n      ? smartTruncate(text, detectedLang, options.maxChars || 20)\n      : text;\n    \n    return {\n      originalText: text,\n      context,\n      language: detectedLang,\n      metrics,\n      needsTruncation: metrics.isTooLong,\n      recommendedClasses: classes,\n      optimizedText,\n    };\n  });\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/namespace-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'translationLoader' is defined but never used. Allowed unused args must match /^_/u.","line":52,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":59},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":134,"column":29,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":134,"endColumn":36,"fix":{"range":[2855,2972],"text":"for (const [namespace, weight] of Object.entries(weights)) {\n      this.priorityWeights.set(namespace, weight);\n    }"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":141,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":141,"endColumn":47,"fix":{"range":[3070,3077],"text":"{return;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'locale' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":163,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'locale' is assigned a value but never used. Allowed unused args must match /^_/u.","line":163,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":173,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":173,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4036,4063],"text":"(this.priorityWeights.get(a) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4036,4063],"text":"(this.priorityWeights.get(a) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4036,4063],"text":"(Boolean(this.priorityWeights.get(a)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":173,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":173,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4064,4066],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":174,"column":23,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":174,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4092,4119],"text":"(this.priorityWeights.get(b) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4092,4119],"text":"(this.priorityWeights.get(b) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4092,4119],"text":"(Boolean(this.priorityWeights.get(b)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4120,4122],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":230,"column":21,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":230,"endColumn":28,"fix":{"range":[5546,5719],"text":"for (const route of predictedRoutes) {\n      const namespaces = this.getRelevantNamespacesForRoute(route);\n      namespaces.forEach(ns => allRelevantNamespaces.add(ns));\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":232,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":232,"endColumn":25,"fix":{"range":[5655,5711],"text":"for (const ns of namespaces) allRelevantNamespaces.add(ns);"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6142,6145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6142,6145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":248,"column":27,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":248,"endColumn":34,"fix":{"range":[6183,6375],"text":"for (const [index, namespace] of preloadNamespaces.entries()) {\n          setTimeout(() => {\n            this.safeLoadNamespace(namespace, locale).catch(console.warn);\n          }, index * 100);\n        }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":61,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":73},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":289,"column":35,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":289,"endColumn":42,"fix":{"range":[7375,7549],"text":"for (const [pattern, namespaces] of Object.entries(routePatterns)) {\n      if (this.matchesRoutePattern(route, pattern)) {\n        relevant.push(...namespaces);\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":297,"column":14,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":297,"endColumn":21,"fix":{"range":[7624,7820],"text":"for (const namespace of relevant) {\n      const relation = this.relations.get(namespace);\n      if (relation) {\n        relation.dependencies.forEach(dep => expandedRelevant.add(dep));\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":300,"column":31,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":300,"endColumn":38,"fix":{"range":[7740,7804],"text":"for (const dep of relation.dependencies) expandedRelevant.add(dep);"}},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":326,"column":19,"nodeType":"NewExpression","endLine":326,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":350,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":350,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9304,9369],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":356,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":356,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9497,9512],"text":"(forcedNamespace != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9497,9512],"text":"(forcedNamespace ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9497,9512],"text":"(Boolean(forcedNamespace))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":362,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":362,"endColumn":23,"fix":{"range":[9629,10210],"text":"for (const namespace of namespaces) {\n      const existing = this.usage.get(namespace) || {\n        namespace,\n        frequency: 0,\n        lastAccessed: 0,\n        pageViews: 0,\n        routePatterns: [],\n        estimatedImpact: 0\n      };\n\n      existing.frequency++;\n      existing.lastAccessed = now;\n      existing.pageViews++;\n      \n      if (!existing.routePatterns.includes(route)) {\n        existing.routePatterns.push(route);\n      }\n\n      // 更新预估影响\n      existing.estimatedImpact = this.calculateImpactScore(existing);\n\n      this.usage.set(namespace, existing);\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":363,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":363,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9712,9714],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":400,"column":20,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":400,"endColumn":27,"fix":{"range":[10723,10833],"text":"for (const [namespace, relation] of this.relations.entries()) {\n      graph[namespace] = [...relation.dependencies];\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":401,"column":7,"nodeType":"MemberExpression","endLine":401,"endColumn":23},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":413,"column":11,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":413,"endColumn":18,"fix":{"range":[11074,11161],"text":"for (const node of nodes) {\n      inDegree.set(node, 0);\n      graph.set(node, []);\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":419,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":419,"endColumn":41,"fix":{"range":[11178,11419],"text":"for (const [node, deps] of Object.entries(dependencies)) {\n      deps.forEach(dep => {\n        if (graph.has(dep)) {\n          graph.get(dep)!.push(node);\n          inDegree.set(node, (inDegree.get(node) || 0) + 1);\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":420,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":420,"endColumn":19,"fix":{"range":[11241,11411],"text":"for (const dep of deps) {\n        if (graph.has(dep)) {\n          graph.get(dep)!.push(node);\n          inDegree.set(node, (inDegree.get(node) || 0) + 1);\n        }\n      }"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":422,"column":11,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":422,"endColumn":26,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[11317,11318],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":423,"column":31,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":423,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11361,11379],"text":"(inDegree.get(node) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11361,11379],"text":"(inDegree.get(node) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11361,11379],"text":"(Boolean(inDegree.get(node)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":423,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":423,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11380,11382],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":430,"column":14,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":430,"endColumn":21,"fix":{"range":[11469,11555],"text":"for (const [node, degree] of inDegree.entries()) {\n      if (degree === 0) queue.push(node);\n    }"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":431,"column":25,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":431,"endColumn":42,"fix":{"range":[11530,11547],"text":"{queue.push(node);}"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":437,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":437,"endColumn":34},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":440,"column":24,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":440,"endColumn":31,"suggestions":[{"messageId":"no-array-for-each/suggestion","fix":{"range":[11699,11900],"text":"if (graph.get(node)) for (const neighbor of graph.get(node)) {\n        inDegree.set(neighbor, (inDegree.get(neighbor) || 0) - 1);\n        if (inDegree.get(neighbor) === 0) {\n          queue.push(neighbor);\n        }\n      }"},"data":{},"desc":"Switch to `for…of`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":441,"column":33,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":441,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11770,11792],"text":"(inDegree.get(neighbor) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11770,11792],"text":"(inDegree.get(neighbor) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11770,11792],"text":"(Boolean(inDegree.get(neighbor)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":441,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":441,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11793,11795],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":454,"column":20,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":454,"endColumn":27,"fix":{"range":[12011,12186],"text":"for (const [namespace, _] of this.relations.entries()) {\n      const config = this.getNamespaceConfig(namespace);\n      if (config?.size) {\n        totalSize += config.size;\n      }\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":464,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":464,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":464,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":464,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'routes' is defined but never used. Allowed unused args must match /^_/u.","line":470,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":470,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'routes' is defined but never used. Allowed unused args must match /^_/u.","line":470,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":470,"endColumn":74},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":475,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":475,"endColumn":25,"fix":{"range":[12604,12864],"text":"for (const u of lowFrequency) {\n      suggestions.push({\n        type: 'priority_adjust',\n        namespace: u.namespace,\n        reason: `命名空间 ${u.namespace} 使用频率较低 (${u.frequency} 次)`,\n        impact: 'low',\n        suggestion: '考虑降低加载优先级或按需加载'\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":490,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":490,"endColumn":19,"fix":{"range":[13087,13298],"text":"for (const ns of unused) {\n      suggestions.push({\n        type: 'split',\n        namespace: ns,\n        reason: `命名空间 ${ns} 当前未被使用`,\n        impact: 'medium',\n        suggestion: '考虑移除或延迟加载此命名空间'\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":502,"column":19,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":502,"endColumn":26,"fix":{"range":[13383,13650],"text":"for (const u of highFrequency) {\n      suggestions.push({\n        type: 'priority_adjust',\n        namespace: u.namespace,\n        reason: `命名空间 ${u.namespace} 使用频率很高 (${u.frequency} 次)`,\n        impact: 'high',\n        suggestion: '考虑提高加载优先级或添加到初始加载列表'\n      });\n    }"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":529,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":529,"endColumn":53,"fix":{"range":[14066,14079],"text":"{return false;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":532,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":532,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14151,14157],"text":"(token == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[14152,14157],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14151,14157],"text":"(!Boolean(token))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":537,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":537,"endColumn":39,"fix":{"range":[14264,14274],"text":"{return [];}"}}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":4,"fixableWarningCount":17,"source":"/**\n * 翻译命名空间管理器\n * 管理翻译命名空间的依赖关系、优先级和加载顺序\n */\n\nimport { TranslationLoader } from './translation-loader';\n\n// 命名空间关系\nexport interface NamespaceRelation {\n  parent?: string;\n  children: string[];\n  dependencies: string[];\n  conflicts?: string[];\n}\n\n// 命名空间使用统计\nexport interface NamespaceUsage {\n  namespace: string;\n  frequency: number;\n  lastAccessed: number;\n  pageViews: number;\n  routePatterns: string[];\n  estimatedImpact: number;\n}\n\n// 命名空间优化建议\nexport interface OptimizationSuggestion {\n  type: 'split' | 'merge' | 'reorder' | 'priority_adjust';\n  namespace: string;\n  reason: string;\n  impact: 'low' | 'medium' | 'high';\n  suggestion: string;\n}\n\n// 命名空间分析结果\nexport interface NamespaceAnalysis {\n  totalSize: number;\n  criticalPath: string[];\n  optimizedLoadOrder: string[];\n  unusedNamespaces: string[];\n  suggestions: OptimizationSuggestion[];\n  usage: NamespaceUsage[];\n}\n\n// 命名空间管理器类\nexport class NamespaceManager {\n  private relations = new Map<string, NamespaceRelation>();\n  private usage = new Map<string, NamespaceUsage>();\n  private priorityWeights = new Map<string, number>();\n  private routeMappings = new Map<string, string[]>();\n\n  constructor(private translationLoader: TranslationLoader) {\n    this.initializeRelations();\n    this.initializePriorityWeights();\n    this.setupUsageTracking();\n  }\n\n  // 初始化命名空间关系\n  private initializeRelations(): void {\n    this.relations.set('common', {\n      children: [],\n      dependencies: [],\n      conflicts: []\n    });\n\n    this.relations.set('auth', {\n      parent: 'common',\n      children: [],\n      dependencies: ['common'],\n      conflicts: []\n    });\n\n    this.relations.set('admin', {\n      children: [],\n      dependencies: ['common', 'auth'],\n      conflicts: []\n    });\n\n    this.relations.set('lottery', {\n      parent: 'common',\n      children: [],\n      dependencies: ['common'],\n      conflicts: []\n    });\n\n    this.relations.set('referral', {\n      parent: 'common',\n      children: [],\n      dependencies: ['common', 'auth'],\n      conflicts: []\n    });\n\n    this.relations.set('wallet', {\n      parent: 'common',\n      children: [],\n      dependencies: ['common', 'auth'],\n      conflicts: ['lottery'] // 可能存在状态冲突\n    });\n\n    this.relations.set('bot', {\n      children: [],\n      dependencies: ['common', 'auth'],\n      conflicts: []\n    });\n\n    this.relations.set('task', {\n      children: [],\n      dependencies: ['common', 'auth'],\n      conflicts: []\n    });\n\n    this.relations.set('error', {\n      parent: 'common',\n      children: [],\n      dependencies: ['common'],\n      conflicts: []\n    });\n  }\n\n  // 初始化优先级权重\n  private initializePriorityWeights(): void {\n    const weights = {\n      'common': 100,\n      'auth': 95,\n      'error': 90,\n      'admin': 80,\n      'lottery': 70,\n      'referral': 60,\n      'wallet': 60,\n      'bot': 40,\n      'task': 40\n    };\n\n    Object.entries(weights).forEach(([namespace, weight]) => {\n      this.priorityWeights.set(namespace, weight);\n    });\n  }\n\n  // 设置使用情况跟踪\n  private setupUsageTracking(): void {\n    if (typeof window === 'undefined') return;\n\n    // 跟踪路由变化\n    let currentRoute = window.location.pathname;\n    \n    const trackRouteChange = () => {\n      const route = window.location.pathname;\n      if (route !== currentRoute) {\n        this.trackNamespaceUsage(route);\n        currentRoute = route;\n      }\n    };\n\n    // 使用 MutationObserver 跟踪动态路由变化\n    const observer = new MutationObserver(trackRouteChange);\n    observer.observe(document.body, { childList: true, subtree: true });\n\n    // 定期清理使用统计\n    setInterval(() => this.cleanupUsageStats(), 60000); // 每分钟清理\n  }\n\n  // 获取优化的加载顺序\n  getOptimizedLoadOrder(locale: string = 'zh-CN'): string[] {\n    const allNamespaces = Array.from(this.relations.keys());\n    const criticalPath = this.getCriticalPath();\n    const dependencies = this.buildDependencyGraph();\n    \n    // 拓扑排序\n    const loadOrder = this.topologicalSort(allNamespaces, dependencies);\n    \n    // 应用优先级权重\n    const weightedOrder = loadOrder.sort((a, b) => {\n      const weightA = this.priorityWeights.get(a) || 0;\n      const weightB = this.priorityWeights.get(b) || 0;\n      return weightB - weightA;\n    });\n\n    // 确保关键路径在前面\n    const criticalFirst = [\n      ...criticalPath.filter(ns => weightedOrder.includes(ns)),\n      ...weightedOrder.filter(ns => !criticalPath.includes(ns))\n    ];\n\n    return criticalFirst;\n  }\n\n  // 获取关键路径（用户必需的命名空间）\n  getCriticalPath(): string[] {\n    const criticalPath: string[] = [];\n    \n    // 基础命名空间\n    criticalPath.push('common');\n    \n    // 检查用户认证状态\n    if (this.isUserAuthenticated()) {\n      criticalPath.push('auth');\n    }\n    \n    // 检查错误处理需求\n    criticalPath.push('error');\n\n    return criticalPath;\n  }\n\n  // 预加载命名空间\n  async preloadBasedOnRoute(route: string, locale: string = 'zh-CN'): Promise<void> {\n    const relevantNamespaces = this.getRelevantNamespacesForRoute(route);\n    const loadOrder = this.getOptimizedLoadOrder(locale);\n    \n    // 按优先级分批加载\n    const batches = this.createLoadBatches(relevantNamespaces, loadOrder, 3);\n    \n    for (const batch of batches) {\n      await Promise.all(\n        batch.map(namespace => \n          this.safeLoadNamespace(namespace, locale)\n        )\n      );\n      \n      // 批次间延迟，避免阻塞主线程\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  // 基于行为预测预加载\n  async preloadBasedOnBehavior(userHistory: string[], locale: string = 'zh-CN'): Promise<void> {\n    const predictedRoutes = this.predictNextRoutes(userHistory);\n    const allRelevantNamespaces = new Set<string>();\n    \n    predictedRoutes.forEach(route => {\n      const namespaces = this.getRelevantNamespacesForRoute(route);\n      namespaces.forEach(ns => allRelevantNamespaces.add(ns));\n    });\n\n    const optimizedOrder = this.getOptimizedLoadOrder(locale);\n    const sortedNamespaces = Array.from(allRelevantNamespaces).sort(\n      (a, b) => optimizedOrder.indexOf(a) - optimizedOrder.indexOf(b)\n    );\n\n    // 只预加载非关键路径的命名空间\n    const preloadNamespaces = sortedNamespaces.filter(ns => \n      !this.getCriticalPath().includes(ns)\n    );\n\n    // 使用空闲时间预加载\n    if ('requestIdleCallback' in window) {\n      (window as any).requestIdleCallback(() => {\n        preloadNamespaces.forEach((namespace, index) => {\n          setTimeout(() => {\n            this.safeLoadNamespace(namespace, locale).catch(console.warn);\n          }, index * 100);\n        });\n      });\n    }\n  }\n\n  // 分析命名空间使用情况\n  analyzeNamespaceUsage(routes: string[]): NamespaceAnalysis {\n    const usage = Array.from(this.usage.values());\n    const totalSize = this.calculateTotalSize();\n    const criticalPath = this.getCriticalPath();\n    const optimizedLoadOrder = this.getOptimizedLoadOrder();\n    \n    // 识别未使用的命名空间\n    const usedNamespaces = new Set(usage.map(u => u.namespace));\n    const allNamespaces = Array.from(this.relations.keys());\n    const unusedNamespaces = allNamespaces.filter(ns => !usedNamespaces.has(ns));\n\n    // 生成优化建议\n    const suggestions = this.generateOptimizationSuggestions(usage, routes);\n\n    return {\n      totalSize,\n      criticalPath,\n      optimizedLoadOrder,\n      unusedNamespaces,\n      suggestions,\n      usage\n    };\n  }\n\n  // 获取路由相关的命名空间\n  private getRelevantNamespacesForRoute(route: string): string[] {\n    const relevant: string[] = ['common']; // 总是需要common\n    \n    // 基于路由模式匹配\n    const routePatterns = this.getRoutePatterns();\n    \n    Object.entries(routePatterns).forEach(([pattern, namespaces]) => {\n      if (this.matchesRoutePattern(route, pattern)) {\n        relevant.push(...namespaces);\n      }\n    });\n\n    // 添加依赖项\n    const expandedRelevant = new Set<string>(relevant);\n    relevant.forEach(namespace => {\n      const relation = this.relations.get(namespace);\n      if (relation) {\n        relation.dependencies.forEach(dep => expandedRelevant.add(dep));\n      }\n    });\n\n    return Array.from(expandedRelevant);\n  }\n\n  // 获取路由模式映射\n  private getRoutePatterns(): Record<string, string[]> {\n    return {\n      '/admin*': ['admin', 'auth'],\n      '/orders*': ['orders', 'common'],\n      '/profile*': ['profile', 'auth', 'wallet'],\n      '/resale*': ['resale', 'referral'],\n      '/transactions*': ['transactions', 'wallet'],\n      '/withdraw*': ['withdraw', 'wallet'],\n      '/recharge*': ['recharge', 'wallet'],\n      '/referral*': ['referral', 'auth'],\n      '/lottery*': ['lottery', 'common'],\n      '/bot*': ['bot', 'auth'],\n      '/task*': ['task', 'auth']\n    };\n  }\n\n  // 检查路由模式匹配\n  private matchesRoutePattern(route: string, pattern: string): boolean {\n    const regex = new RegExp(pattern.replace('*', '.*'));\n    return regex.test(route);\n  }\n\n  // 创建加载批次\n  private createLoadBatches(namespaces: string[], loadOrder: string[], batchSize: number): string[][] {\n    const sortedNamespaces = namespaces.sort(\n      (a, b) => loadOrder.indexOf(a) - loadOrder.indexOf(b)\n    );\n\n    const batches: string[][] = [];\n    for (let i = 0; i < sortedNamespaces.length; i += batchSize) {\n      batches.push(sortedNamespaces.slice(i, i + batchSize));\n    }\n\n    return batches;\n  }\n\n  // 安全加载命名空间\n  private async safeLoadNamespace(namespace: string, locale: string): Promise<void> {\n    try {\n      await this.translationLoader.loadNamespace(namespace, locale);\n      this.trackNamespaceUsage(window.location.pathname, namespace);\n    } catch (error) {\n      console.warn(`Failed to preload namespace ${namespace}:`, error);\n    }\n  }\n\n  // 跟踪命名空间使用\n  private trackNamespaceUsage(route: string, forcedNamespace?: string): void {\n    const namespaces = forcedNamespace \n      ? [forcedNamespace]\n      : this.getRelevantNamespacesForRoute(route);\n\n    const now = Date.now();\n    \n    namespaces.forEach(namespace => {\n      const existing = this.usage.get(namespace) || {\n        namespace,\n        frequency: 0,\n        lastAccessed: 0,\n        pageViews: 0,\n        routePatterns: [],\n        estimatedImpact: 0\n      };\n\n      existing.frequency++;\n      existing.lastAccessed = now;\n      existing.pageViews++;\n      \n      if (!existing.routePatterns.includes(route)) {\n        existing.routePatterns.push(route);\n      }\n\n      // 更新预估影响\n      existing.estimatedImpact = this.calculateImpactScore(existing);\n\n      this.usage.set(namespace, existing);\n    });\n  }\n\n  // 计算影响分数\n  private calculateImpactScore(usage: NamespaceUsage): number {\n    const recency = Math.max(0, 1 - (Date.now() - usage.lastAccessed) / (7 * 24 * 60 * 60 * 1000));\n    const frequency = Math.min(1, usage.frequency / 10);\n    const coverage = Math.min(1, usage.routePatterns.length / 5);\n    \n    return (recency * 0.4 + frequency * 0.4 + coverage * 0.2) * 100;\n  }\n\n  // 构建依赖图\n  private buildDependencyGraph(): Record<string, string[]> {\n    const graph: Record<string, string[]> = {};\n    \n    this.relations.forEach((relation, namespace) => {\n      graph[namespace] = [...relation.dependencies];\n    });\n\n    return graph;\n  }\n\n  // 拓扑排序\n  private topologicalSort(nodes: string[], dependencies: Record<string, string[]>): string[] {\n    const inDegree = new Map<string, number>();\n    const graph = new Map<string, string[]>();\n\n    // 初始化\n    nodes.forEach(node => {\n      inDegree.set(node, 0);\n      graph.set(node, []);\n    });\n\n    // 构建图\n    Object.entries(dependencies).forEach(([node, deps]) => {\n      deps.forEach(dep => {\n        if (graph.has(dep)) {\n          graph.get(dep)!.push(node);\n          inDegree.set(node, (inDegree.get(node) || 0) + 1);\n        }\n      });\n    });\n\n    // 拓扑排序\n    const queue: string[] = [];\n    inDegree.forEach((degree, node) => {\n      if (degree === 0) queue.push(node);\n    });\n\n    const result: string[] = [];\n    \n    while (queue.length > 0) {\n      const node = queue.shift()!;\n      result.push(node);\n      \n      graph.get(node)?.forEach(neighbor => {\n        inDegree.set(neighbor, (inDegree.get(neighbor) || 0) - 1);\n        if (inDegree.get(neighbor) === 0) {\n          queue.push(neighbor);\n        }\n      });\n    }\n\n    return result;\n  }\n\n  // 计算总大小\n  private calculateTotalSize(): number {\n    let totalSize = 0;\n    this.relations.forEach((_, namespace) => {\n      const config = this.getNamespaceConfig(namespace);\n      if (config?.size) {\n        totalSize += config.size;\n      }\n    });\n    return totalSize;\n  }\n\n  // 获取命名空间配置\n  private getNamespaceConfig(namespace: string) {\n    // 这里应该从实际的配置中获取\n    return { size: 10000 }; // 默认大小\n  }\n\n  // 生成优化建议\n  private generateOptimizationSuggestions(usage: NamespaceUsage[], routes: string[]): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // 识别低频使用的命名空间\n    const lowFrequency = usage.filter(u => u.frequency < 2);\n    lowFrequency.forEach(u => {\n      suggestions.push({\n        type: 'priority_adjust',\n        namespace: u.namespace,\n        reason: `命名空间 ${u.namespace} 使用频率较低 (${u.frequency} 次)`,\n        impact: 'low',\n        suggestion: '考虑降低加载优先级或按需加载'\n      });\n    });\n\n    // 识别未使用的命名空间\n    const allNamespaces = Array.from(this.relations.keys());\n    const usedNamespaces = usage.map(u => u.namespace);\n    const unused = allNamespaces.filter(ns => !usedNamespaces.includes(ns));\n    \n    unused.forEach(ns => {\n      suggestions.push({\n        type: 'split',\n        namespace: ns,\n        reason: `命名空间 ${ns} 当前未被使用`,\n        impact: 'medium',\n        suggestion: '考虑移除或延迟加载此命名空间'\n      });\n    });\n\n    // 识别高频命名空间\n    const highFrequency = usage.filter(u => u.frequency > 10);\n    highFrequency.forEach(u => {\n      suggestions.push({\n        type: 'priority_adjust',\n        namespace: u.namespace,\n        reason: `命名空间 ${u.namespace} 使用频率很高 (${u.frequency} 次)`,\n        impact: 'high',\n        suggestion: '考虑提高加载优先级或添加到初始加载列表'\n      });\n    });\n\n    return suggestions;\n  }\n\n  // 清理使用统计\n  private cleanupUsageStats(): void {\n    const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);\n    \n    for (const [namespace, usage] of this.usage) {\n      if (usage.lastAccessed < oneDayAgo) {\n        this.usage.delete(namespace);\n      }\n    }\n  }\n\n  // 检查用户是否已认证\n  private isUserAuthenticated(): boolean {\n    // 简化实现，实际应该检查认证状态\n    if (typeof window === 'undefined') return false;\n    \n    const token = localStorage.getItem('auth_token');\n    return !!token;\n  }\n\n  // 预测下一步路由\n  private predictNextRoutes(history: string[]): string[] {\n    if (history.length < 2) return [];\n\n    const recent = history.slice(-3);\n    const predictions: string[] = [];\n\n    // 基于访问模式预测\n    if (recent.includes('/lottery') && recent.includes('/wallet')) {\n      predictions.push('/transactions');\n    }\n    \n    if (recent.includes('/profile')) {\n      predictions.push('/settings', '/referral');\n    }\n\n    return [...new Set(predictions)];\n  }\n\n  // 获取使用统计\n  getUsageStats(): NamespaceUsage[] {\n    return Array.from(this.usage.values());\n  }\n\n  // 重置使用统计\n  resetUsageStats(): void {\n    this.usage.clear();\n  }\n}\n\n// 导出工厂函数\nexport function createNamespaceManager(loader: TranslationLoader): NamespaceManager {\n  return new NamespaceManager(loader);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/network-performance-tester.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): utils/network-performance-tester.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// network-performance-tester.ts - 网络性能测试工具\nimport { translationCache } from '@/utils/translation-cache';\nimport { retryManager } from '@/utils/network-retry';\nimport { degradationManager } from '@/utils/request-degradation';\n\nexport interface NetworkPerformanceMetrics {\n  // 基础性能指标\n  responseTime: number;          // 响应时间 (ms)\n  latency: number;               // 延迟 (ms)\n  throughput: number;            // 吞吐量 (KB/s)\n  packetLoss: number;            // 丢包率 (0-1)\n  \n  // 缓存性能\n  cacheHitRate: number;          // 缓存命中率 (0-1)\n  cacheSize: number;             // 缓存大小 (bytes)\n  cacheEfficiency: number;       // 缓存效率 (0-1)\n  \n  // 重试性能\n  retryCount: number;            // 重试次数\n  retrySuccessRate: number;      // 重试成功率 (0-1)\n  averageRetryDelay: number;     // 平均重试延迟 (ms)\n  \n  // 翻译加载性能\n  translationLoadTime: number;   // 翻译文件加载时间 (ms)\n  preloadedNamespaces: number;   // 预加载命名空间数\n  translationCacheHitRate: number; // 翻译缓存命中率 (0-1)\n  \n  // 降级性能\n  degradationTriggerCount: number; // 降级触发次数\n  fallbackSuccessRate: number;    // 降级成功率 (0-1)\n  \n  // 综合指标\n  availability: number;          // 可用性 (0-1)\n  reliability: number;           // 可靠性 (0-1)\n  efficiency: number;            // 效率 (0-1)\n}\n\nexport interface NetworkTestConfig {\n  testDuration: number;          // 测试持续时间 (ms)\n  requestInterval: number;       // 请求间隔 (ms)\n  concurrentRequests: number;    // 并发请求数\n  testUrls: string[];            // 测试URL列表\n  languages: string[];           // 测试语言列表\n  namespaces: string[];          // 测试命名空间列表\n}\n\nexport interface NetworkPerformanceReport {\n  timestamp: string;\n  environment: {\n    userAgent: string;\n    connection?: any;\n    online: boolean;\n  };\n  config: NetworkTestConfig;\n  metrics: NetworkPerformanceMetrics;\n  detailedResults: {\n    requestResults: RequestResult[];\n    translationResults: TranslationResult[];\n    cacheAnalysis: CacheAnalysis;\n    retryAnalysis: RetryAnalysis;\n    degradationAnalysis: DegradationAnalysis;\n  };\n  recommendations: string[];\n  networkQuality: string;\n  overallScore: number;          // 0-100\n}\n\nexport interface RequestResult {\n  url: string;\n  status: 'success' | 'failure' | 'timeout';\n  responseTime: number;\n  timestamp: number;\n  retryAttempt?: number;\n  error?: string;\n}\n\nexport interface TranslationResult {\n  language: string;\n  namespace: string;\n  loadTime: number;\n  cacheHit: boolean;\n  success: boolean;\n  size?: number;\n}\n\nexport interface CacheAnalysis {\n  hitRate: number;\n  totalRequests: number;\n  cacheHits: number;\n  cacheMisses: number;\n  averageCacheAccessTime: number;\n  cacheSize: number;\n  cacheEntries: number;\n}\n\nexport interface RetryAnalysis {\n  totalRetries: number;\n  successfulRetries: number;\n  failedRetries: number;\n  averageRetryDelay: number;\n  retryReasons: Record<string, number>;\n  retryEffectiveness: number;\n}\n\nexport interface DegradationAnalysis {\n  triggersCount: number;\n  successfulDegradations: number;\n  failedDegradations: number;\n  fallbackUsage: Record<string, number>;\n  degradationEffectiveness: number;\n}\n\nclass NetworkPerformanceTester {\n  private config: NetworkTestConfig;\n  private results: {\n    requests: RequestResult[];\n    translations: TranslationResult[];\n    cacheHits: { hit: boolean; url: string; time: number }[];\n    retryEvents: { attempt: number; delay: number; success: boolean }[];\n    degradationEvents: { trigger: string; success: boolean; fallback: string }[];\n  };\n\n  constructor(config: Partial<NetworkTestConfig> = {}) {\n    this.config = {\n      testDuration: 30000,           // 30秒\n      requestInterval: 1000,         // 1秒\n      concurrentRequests: 3,         // 3个并发\n      testUrls: [\n        '/api/user/profile',\n        '/api/translations/common',\n        '/api/products',\n        '/locales/zh-CN/common.json',\n        '/locales/en-US/common.json'\n      ],\n      languages: ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'],\n      namespaces: ['common', 'auth', 'error', 'admin', 'lottery'],\n      ...config\n    };\n\n    this.results = {\n      requests: [],\n      translations: [],\n      cacheHits: [],\n      retryEvents: [],\n      degradationEvents: []\n    };\n  }\n\n  /**\n   * 执行完整的网络性能测试\n   */\n  async runPerformanceTest(): Promise<NetworkPerformanceReport> {\n    console.log('[NetworkPerformanceTester] 开始网络性能测试...');\n    \n    const startTime = Date.now();\n    const endTime = startTime + this.config.testDuration;\n    \n    // 1. 环境检测\n    const environment = this.collectEnvironmentInfo();\n    \n    // 2. 基础网络性能测试\n    await this.runNetworkBaselineTest();\n    \n    // 3. 缓存性能测试\n    await this.runCachePerformanceTest();\n    \n    // 4. 翻译文件加载性能测试\n    await this.runTranslationPerformanceTest();\n    \n    // 5. 重试机制性能测试\n    await this.runRetryPerformanceTest();\n    \n    // 6. 降级机制性能测试\n    await this.runDegradationPerformanceTest();\n    \n    // 7. 并发性能测试\n    await this.runConcurrencyPerformanceTest();\n    \n    // 8. 生成报告\n    const report = this.generateReport(startTime, environment);\n    \n    console.log('[NetworkPerformanceTester] 网络性能测试完成');\n    return report;\n  }\n\n  /**\n   * 收集环境信息\n   */\n  private collectEnvironmentInfo(): NetworkPerformanceReport['environment'] {\n    const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n    \n    return {\n      userAgent: navigator.userAgent,\n      connection: connection ? {\n        effectiveType: connection.effectiveType,\n        downlink: connection.downlink,\n        rtt: connection.rtt,\n        saveData: connection.saveData\n      } : undefined,\n      online: navigator.onLine\n    };\n  }\n\n  /**\n   * 基础网络性能测试\n   */\n  private async runNetworkBaselineTest(): Promise<void> {\n    console.log('[NetworkPerformanceTester] 运行基础网络性能测试...');\n    \n    const testPromises: Promise<void>[] = [];\n    \n    // 并发请求测试\n    for (let i = 0; i < this.config.concurrentRequests; i++) {\n      testPromises.push(this.performNetworkRequest(i));\n    }\n    \n    // 定期执行测试直到结束时间\n    const endTime = Date.now() + this.config.testDuration;\n    while (Date.now() < endTime) {\n      await Promise.allSettled(testPromises);\n      await this.sleep(this.config.requestInterval);\n    }\n  }\n\n  /**\n   * 执行单个网络请求\n   */\n  private async performNetworkRequest(requestId: number): Promise<void> {\n    for (const url of this.config.testUrls) {\n      const startTime = performance.now();\n      let retryCount = 0;\n      \n      try {\n        await retryManager.executeWithRetry(async () => {\n          const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Cache-Control': 'no-cache'\n            }\n          });\n          \n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n          \n          return response.json();\n        }, {\n          maxRetries: 3,\n          baseDelay: 500,\n          timeout: 10000,\n          onRetry: (attempt, error) => {\n            this.results.retryEvents.push({\n              attempt,\n              delay: 500 * Math.pow(2, attempt - 1),\n              success: false\n            });\n            retryCount = attempt;\n          }\n        });\n\n        const responseTime = performance.now() - startTime;\n        \n        this.results.requests.push({\n          url,\n          status: 'success',\n          responseTime,\n          timestamp: Date.now(),\n          retryAttempt: retryCount\n        });\n\n        // 测试缓存命中\n        await this.testCacheAccess(url, responseTime);\n\n      } catch (error) {\n        const responseTime = performance.now() - startTime;\n        \n        this.results.requests.push({\n          url,\n          status: error instanceof Error && error.message.includes('超时') ? 'timeout' : 'failure',\n          responseTime,\n          timestamp: Date.now(),\n          retryAttempt: retryCount,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n  }\n\n  /**\n   * 缓存性能测试\n   */\n  private async runCachePerformanceTest(): Promise<void> {\n    console.log('[NetworkPerformanceTester] 运行缓存性能测试...');\n    \n    const cacheTestKey = 'performance-cache-test';\n    const testData = { test: 'cache performance data', timestamp: Date.now() };\n    \n    // 测试缓存写入和读取\n    const cacheStartTime = performance.now();\n    \n    // 首次写入\n    const writeResult = await degradationManager.fetchWithDegradation(\n      cacheTestKey,\n      async () => testData,\n      {\n        strategy: DegradationStrategy.CACHE_FIRST,\n        cacheTimeout: 60000,\n        priority: 'high' as const\n      }\n    );\n    \n    const writeTime = performance.now() - cacheStartTime;\n    \n    // 第二次读取（应该命中缓存）\n    const cacheStartTime2 = performance.now();\n    const readResult = await degradationManager.fetchWithDegradation(\n      cacheTestKey,\n      async () => ({ ...testData, updated: true }),\n      {\n        strategy: DegradationStrategy.CACHE_FIRST,\n        cacheTimeout: 60000,\n        priority: 'high' as const\n      }\n    );\n    \n    const readTime = performance.now() - cacheStartTime2;\n    \n    console.log(`[Cache Performance] 写入: ${writeTime}ms, 读取: ${readTime}ms`);\n  }\n\n  /**\n   * 翻译文件加载性能测试\n   */\n  private async runTranslationPerformanceTest(): Promise<void> {\n    console.log('[NetworkPerformanceTester] 运行翻译性能测试...');\n    \n    for (const language of this.config.languages) {\n      for (const namespace of this.config.namespaces) {\n        const startTime = performance.now();\n        let success = false;\n        let cacheHit = false;\n        let size = 0;\n        \n        try {\n          // 尝试从缓存获取\n          const cached = translationCache.getCachedTranslation(language, namespace);\n          if (cached) {\n            cacheHit = true;\n            size = JSON.stringify(cached).length;\n            success = true;\n          } else {\n            // 网络请求翻译文件\n            const url = `/locales/${language}/${namespace}.json`;\n            const response = await fetch(url);\n            \n            if (response.ok) {\n              const content = await response.json();\n              size = JSON.stringify(content).length;\n              \n              // 缓存翻译文件\n              translationCache.cacheTranslation(language, namespace, content);\n              success = true;\n            }\n          }\n        } catch (error) {\n          console.warn(`Translation load failed for ${language}/${namespace}:`, error);\n        }\n        \n        const loadTime = performance.now() - startTime;\n        \n        this.results.translations.push({\n          language,\n          namespace,\n          loadTime,\n          cacheHit,\n          success,\n          size\n        });\n      }\n    }\n  }\n\n  /**\n   * 重试机制性能测试\n   */\n  private async runRetryPerformanceTest(): Promise<void> {\n    console.log('[NetworkPerformanceTester] 运行重试机制性能测试...');\n    \n    // 测试重试成功率\n    const retryTestOperations = [\n      // 成功的操作\n      { shouldFail: false, delay: 100 },\n      // 会失败一次的操作\n      { shouldFail: true, failCount: 1, delay: 200 },\n      // 会失败多次的操作\n      { shouldFail: true, failCount: 3, delay: 150 }\n    ];\n    \n    for (const testOp of retryTestOperations) {\n      await retryManager.executeWithRetry(async () => {\n        if (testOp.shouldFail && testOp.failCount > 0) {\n          // 模拟失败\n          await this.sleep(testOp.delay);\n          throw new Error('Simulated network failure');\n        }\n        \n        await this.sleep(testOp.delay);\n        return 'success';\n      }, {\n        maxRetries: 5,\n        baseDelay: 100\n      });\n    }\n  }\n\n  /**\n   * 降级机制性能测试\n   */\n  private async runDegradationPerformanceTest(): Promise<void> {\n    console.log('[NetworkPerformanceTester] 运行降级机制性能测试...');\n    \n    // 测试网络失败时的降级策略\n    const networkFailOperation = async () => {\n      await this.sleep(100);\n      throw new Error('Network failure');\n    };\n    \n    const fallbackOperation = async () => {\n      await this.sleep(50);\n      return { fallback: true, data: 'fallback-data' };\n    };\n    \n    try {\n      const result = await degradationManager.fetchWithDegradation(\n        'degradation-test',\n        networkFailOperation,\n        {\n          strategy: DegradationStrategy.NETWORK_FIRST,\n          fallbackEnabled: true,\n          cacheTimeout: 60000,\n          priority: 'medium' as const\n        }\n      );\n      \n      this.results.degradationEvents.push({\n        trigger: 'network-failure',\n        success: true,\n        fallback: 'cache-fallback'\n      });\n      \n    } catch (error) {\n      this.results.degradationEvents.push({\n        trigger: 'network-failure',\n        success: false,\n        fallback: 'none'\n      });\n    }\n  }\n\n  /**\n   * 并发性能测试\n   */\n  private async runConcurrencyPerformanceTest(): Promise<void> {\n    console.log('[NetworkPerformanceTester] 运行并发性能测试...');\n    \n    const concurrency = this.config.concurrentRequests;\n    const operations = Array.from({ length: concurrency }, (_, i) => \n      this.performConcurrentOperation(`concurrent-${i}`)\n    );\n    \n    await Promise.allSettled(operations);\n  }\n\n  /**\n   * 执行并发操作\n   */\n  private async performConcurrentOperation(id: string): Promise<void> {\n    const startTime = performance.now();\n    \n    try {\n      await Promise.all([\n        fetch('/api/test1'),\n        fetch('/api/test2'),\n        fetch('/api/test3')\n      ]);\n      \n      const duration = performance.now() - startTime;\n      console.log(`[Concurrency] ${id} completed in ${duration}ms`);\n    } catch (error) {\n      console.warn(`[Concurrency] ${id} failed:`, error);\n    }\n  }\n\n  /**\n   * 测试缓存访问\n   */\n  private async testCacheAccess(url: string, responseTime: number): Promise<void> {\n    // 这里可以扩展更复杂的缓存测试逻辑\n    const isCacheHit = responseTime < 50; // 简单的启发式判断\n    this.results.cacheHits.push({\n      hit: isCacheHit,\n      url,\n      time: responseTime\n    });\n  }\n\n  /**\n   * 生成性能报告\n   */\n  private generateReport(startTime: number, environment: NetworkPerformanceReport['environment']): NetworkPerformanceReport {\n    const totalTestTime = Date.now() - startTime;\n    const metrics = this.calculateMetrics();\n    \n    const report: NetworkPerformanceReport = {\n      timestamp: new Date().toISOString(),\n      environment,\n      config: this.config,\n      metrics,\n      detailedResults: {\n        requestResults: this.results.requests,\n        translationResults: this.results.translations,\n        cacheAnalysis: this.analyzeCachePerformance(),\n        retryAnalysis: this.analyzeRetryPerformance(),\n        degradationAnalysis: this.analyzeDegradationPerformance()\n      },\n      recommendations: this.generateRecommendations(metrics),\n      networkQuality: this.determineNetworkQuality(metrics),\n      overallScore: this.calculateOverallScore(metrics)\n    };\n    \n    return report;\n  }\n\n  /**\n   * 计算性能指标\n   */\n  private calculateMetrics(): NetworkPerformanceMetrics {\n    const requests = this.results.requests;\n    const translations = this.results.translations;\n    const cacheHits = this.results.cacheHits;\n    const retryEvents = this.results.retryEvents;\n    const degradationEvents = this.results.degradationEvents;\n\n    // 基础性能指标\n    const successfulRequests = requests.filter(r => r.status === 'success');\n    const totalResponseTime = successfulRequests.reduce((sum, r) => sum + r.responseTime, 0);\n    const avgResponseTime = successfulRequests.length > 0 ? totalResponseTime / successfulRequests.length : 0;\n    \n    const avgLatency = successfulRequests.length > 0 \n      ? successfulRequests.reduce((sum, r) => sum + r.responseTime, 0) / successfulRequests.length \n      : 0;\n    \n    // 缓存性能\n    const totalCacheRequests = cacheHits.length;\n    const cacheHitsCount = cacheHits.filter(c => c.hit).length;\n    const cacheHitRate = totalCacheRequests > 0 ? cacheHitsCount / totalCacheRequests : 0;\n    \n    // 重试性能\n    const totalRetries = retryEvents.length;\n    const successfulRetries = retryEvents.filter(r => r.success).length;\n    const retrySuccessRate = totalRetries > 0 ? successfulRetries / totalRetries : 1;\n    const avgRetryDelay = retryEvents.length > 0 \n      ? retryEvents.reduce((sum, r) => sum + r.delay, 0) / retryEvents.length \n      : 0;\n    \n    // 翻译加载性能\n    const successfulTranslations = translations.filter(t => t.success);\n    const avgTranslationLoadTime = successfulTranslations.length > 0\n      ? successfulTranslations.reduce((sum, t) => sum + t.loadTime, 0) / successfulTranslations.length\n      : 0;\n    \n    const translationCacheHits = translations.filter(t => t.cacheHit).length;\n    const translationCacheHitRate = translations.length > 0 ? translationCacheHits / translations.length : 0;\n    \n    // 降级性能\n    const successfulDegradations = degradationEvents.filter(d => d.success).length;\n    const degradationSuccessRate = degradationEvents.length > 0 \n      ? successfulDegradations / degradationEvents.length \n      : 1;\n    \n    // 综合指标\n    const availability = requests.length > 0 ? successfulRequests.length / requests.length : 0;\n    const reliability = Math.min(1, (retrySuccessRate + degradationSuccessRate) / 2);\n    const efficiency = Math.min(1, (cacheHitRate + translationCacheHitRate) / 2);\n\n    // 计算吞吐量 (估算)\n    const testDurationMinutes = this.config.testDuration / 60000;\n    const throughput = testDurationMinutes > 0 ? requests.length / testDurationMinutes : 0;\n\n    return {\n      responseTime: avgResponseTime,\n      latency: avgLatency,\n      throughput,\n      packetLoss: 0, // 需要更复杂的网络监控\n      cacheHitRate,\n      cacheSize: 0, // 需要从缓存管理器获取\n      cacheEfficiency: cacheHitRate,\n      retryCount: totalRetries,\n      retrySuccessRate,\n      averageRetryDelay: avgRetryDelay,\n      translationLoadTime: avgTranslationLoadTime,\n      preloadedNamespaces: translations.filter(t => t.cacheHit).length,\n      translationCacheHitRate,\n      degradationTriggerCount: degradationEvents.length,\n      fallbackSuccessRate: degradationSuccessRate,\n      availability,\n      reliability,\n      efficiency\n    };\n  }\n\n  /**\n   * 分析缓存性能\n   */\n  private analyzeCachePerformance(): CacheAnalysis {\n    const cacheHits = this.results.cacheHits;\n    const totalRequests = cacheHits.length;\n    const hits = cacheHits.filter(c => c.hit).length;\n    \n    return {\n      hitRate: totalRequests > 0 ? hits / totalRequests : 0,\n      totalRequests,\n      cacheHits: hits,\n      cacheMisses: totalRequests - hits,\n      averageCacheAccessTime: cacheHits.length > 0 \n        ? cacheHits.reduce((sum, c) => sum + c.time, 0) / cacheHits.length \n        : 0,\n      cacheSize: 0, // 需要从实际缓存获取\n      cacheEntries: hits\n    };\n  }\n\n  /**\n   * 分析重试性能\n   */\n  private analyzeRetryPerformance(): RetryAnalysis {\n    const retryEvents = this.results.retryEvents;\n    const successful = retryEvents.filter(r => r.success).length;\n    \n    return {\n      totalRetries: retryEvents.length,\n      successfulRetries: successful,\n      failedRetries: retryEvents.length - successful,\n      averageRetryDelay: retryEvents.length > 0 \n        ? retryEvents.reduce((sum, r) => sum + r.delay, 0) / retryEvents.length \n        : 0,\n      retryReasons: {},\n      retryEffectiveness: retryEvents.length > 0 ? successful / retryEvents.length : 1\n    };\n  }\n\n  /**\n   * 分析降级性能\n   */\n  private analyzeDegradationPerformance(): DegradationAnalysis {\n    const degradationEvents = this.results.degradationEvents;\n    const successful = degradationEvents.filter(d => d.success).length;\n    \n    return {\n      triggersCount: degradationEvents.length,\n      successfulDegradations: successful,\n      failedDegradations: degradationEvents.length - successful,\n      fallbackUsage: {},\n      degradationEffectiveness: degradationEvents.length > 0 ? successful / degradationEvents.length : 1\n    };\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(metrics: NetworkPerformanceMetrics): string[] {\n    const recommendations: string[] = [];\n    \n    if (metrics.responseTime > 2000) {\n      recommendations.push('响应时间过长，建议优化网络请求或增加缓存策略');\n    }\n    \n    if (metrics.cacheHitRate < 0.5) {\n      recommendations.push('缓存命中率偏低，建议增加缓存大小或调整缓存策略');\n    }\n    \n    if (metrics.retrySuccessRate < 0.8) {\n      recommendations.push('重试成功率较低，建议优化重试策略或检查网络稳定性');\n    }\n    \n    if (metrics.translationLoadTime > 1000) {\n      recommendations.push('翻译文件加载时间过长，建议预加载或压缩翻译文件');\n    }\n    \n    if (metrics.availability < 0.9) {\n      recommendations.push('系统可用性偏低，建议增强错误处理和降级机制');\n    }\n    \n    if (recommendations.length === 0) {\n      recommendations.push('网络性能良好，当前配置下系统运行稳定');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * 确定网络质量等级\n   */\n  private determineNetworkQuality(metrics: NetworkPerformanceMetrics): string {\n    if (metrics.responseTime < 100 && metrics.cacheHitRate > 0.8) {\n      return '优秀';\n    } else if (metrics.responseTime < 500 && metrics.cacheHitRate > 0.6) {\n      return '良好';\n    } else if (metrics.responseTime < 2000) {\n      return '一般';\n    } else {\n      return '较差';\n    }\n  }\n\n  /**\n   * 计算综合评分\n   */\n  private calculateOverallScore(metrics: NetworkPerformanceMetrics): number {\n    const weights = {\n      availability: 0.25,\n      reliability: 0.25,\n      efficiency: 0.20,\n      responseTime: 0.15,\n      cacheHitRate: 0.15\n    };\n    \n    // 将响应时间转换为得分 (响应时间越短得分越高)\n    const responseTimeScore = Math.max(0, 100 - (metrics.responseTime / 50));\n    \n    const score = (\n      metrics.availability * weights.availability * 100 +\n      metrics.reliability * weights.reliability * 100 +\n      metrics.efficiency * weights.efficiency * 100 +\n      responseTimeScore * weights.responseTime +\n      metrics.cacheHitRate * weights.cacheHitRate * 100\n    );\n    \n    return Math.round(score);\n  }\n\n  /**\n   * 睡眠工具函数\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * 导出测试结果为JSON\n   */\n  exportResults(report: NetworkPerformanceReport): string {\n    return JSON.stringify(report, null, 2);\n  }\n\n  /**\n   * 导出测试结果为Markdown报告\n   */\n  exportMarkdownReport(report: NetworkPerformanceReport): string {\n    const lines: string[] = [];\n    \n    lines.push('# 网络性能测试报告\\n');\n    lines.push(`**生成时间**: ${report.timestamp}`);\n    lines.push(`**测试时长**: ${this.config.testDuration / 1000}秒`);\n    lines.push(`**网络质量**: ${report.networkQuality}`);\n    lines.push(`**综合评分**: ${report.overallScore}/100\\n`);\n    \n    lines.push('## 环境信息\\n');\n    lines.push(`- 用户代理: ${report.environment.userAgent.substring(0, 100)}...`);\n    lines.push(`- 在线状态: ${report.environment.online ? '在线' : '离线'}`);\n    if (report.environment.connection) {\n      lines.push(`- 连接类型: ${report.environment.connection.effectiveType || '未知'}`);\n      lines.push(`- 下行速度: ${report.environment.connection.downlink || '未知'} Mbps`);\n    }\n    lines.push('');\n    \n    lines.push('## 性能指标\\n');\n    lines.push(`- 平均响应时间: ${report.metrics.responseTime.toFixed(2)}ms`);\n    lines.push(`- 缓存命中率: ${(report.metrics.cacheHitRate * 100).toFixed(2)}%`);\n    lines.push(`- 重试成功率: ${(report.metrics.retrySuccessRate * 100).toFixed(2)}%`);\n    lines.push(`- 翻译加载时间: ${report.metrics.translationLoadTime.toFixed(2)}ms`);\n    lines.push(`- 系统可用性: ${(report.metrics.availability * 100).toFixed(2)}%`);\n    lines.push('');\n    \n    lines.push('## 优化建议\\n');\n    report.recommendations.forEach(rec => {\n      lines.push(`- ${rec}`);\n    });\n    lines.push('');\n    \n    lines.push('## 详细分析\\n');\n    lines.push(`### 请求分析`);\n    const requestStats = this.calculateRequestStats(report.detailedResults.requestResults);\n    lines.push(`- 总请求数: ${requestStats.total}`);\n    lines.push(`- 成功请求: ${requestStats.success}`);\n    lines.push(`- 失败请求: ${requestStats.failure}`);\n    lines.push(`- 超时请求: ${requestStats.timeout}`);\n    lines.push('');\n    \n    lines.push(`### 翻译分析`);\n    const translationStats = this.calculateTranslationStats(report.detailedResults.translationResults);\n    lines.push(`- 成功加载: ${translationStats.success}`);\n    lines.push(`- 缓存命中: ${translationStats.cacheHit}`);\n    lines.push(`- 平均加载时间: ${translationStats.avgLoadTime.toFixed(2)}ms`);\n    \n    return lines.join('\\n');\n  }\n\n  private calculateRequestStats(results: RequestResult[]) {\n    return {\n      total: results.length,\n      success: results.filter(r => r.status === 'success').length,\n      failure: results.filter(r => r.status === 'failure').length,\n      timeout: results.filter(r => r.status === 'timeout').length\n    };\n  }\n\n  private calculateTranslationStats(results: TranslationResult[]) {\n    const successful = results.filter(r => r.success);\n    const cacheHits = results.filter(r => r.cacheHit);\n    \n    return {\n      success: successful.length,\n      cacheHit: cacheHits.length,\n      avgLoadTime: successful.length > 0 \n        ? successful.reduce((sum, r) => sum + r.loadTime, 0) / successful.length \n        : 0\n    };\n  }\n}\n\n// 便捷函数\nexport async function runNetworkPerformanceTest(config?: Partial<NetworkTestConfig>): Promise<NetworkPerformanceReport> {\n  const tester = new NetworkPerformanceTester(config);\n  return await tester.runPerformanceTest();\n}\n\nexport async function runQuickNetworkTest(): Promise<NetworkPerformanceReport> {\n  return await runNetworkPerformanceTest({\n    testDuration: 10000,  // 10秒快速测试\n    requestInterval: 2000,\n    concurrentRequests: 2\n  });\n}\n\nexport { NetworkPerformanceTester };\nexport type { NetworkPerformanceReport, NetworkTestConfig };","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/network-retry.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ApiClient' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiClient' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'attempt' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'POOR' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'FAIR' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'GOOD' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'EXCELLENT' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'FIXED' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'EXPONENTIAL' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'LINEAR' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":57,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":57,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'response' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":89,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'response' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":89,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":131,"column":43,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":131,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3652,3669],"text":"(config.maxRetries != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3652,3669],"text":"(config.maxRetries ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3652,3669],"text":"(Boolean(config.maxRetries))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3670,3672],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":132,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":132,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3747,3763],"text":"(config.baseDelay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3747,3763],"text":"(config.baseDelay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3747,3763],"text":"(Boolean(config.baseDelay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":132,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":132,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3764,3766],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":132,"column":96,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":132,"endColumn":111,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3815,3830],"text":"(config.maxDelay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3815,3830],"text":"(config.maxDelay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3815,3830],"text":"(Boolean(config.maxDelay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":132,"column":112,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":132,"endColumn":114,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3831,3833],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":141,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":141,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4183,4211],"text":"(adjustedConfig.backoffFactor != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4183,4211],"text":"(adjustedConfig.backoffFactor ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4183,4211],"text":"(Boolean(adjustedConfig.backoffFactor))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":141,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":141,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4212,4214],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":159,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":159,"endColumn":30,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4596,4617],"text":"adjustedConfig.jitter ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[4596,4617],"text":"adjustedConfig.jitter === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4805,4808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4805,4808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":170,"column":25,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":170,"endColumn":37,"fix":{"range":[4880,4892],"text":"{return true;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":173,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":173,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4919,4931],"text":"(Boolean(error.status))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":173,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":173,"endColumn":76,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4935,4986],"text":"((config.retryableStatusCodes?.includes(error.status)) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[4935,4986],"text":"((config.retryableStatusCodes?.includes(error.status)) === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in array predicate return type. An explicit comparison or type conversion is required.","line":186,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorAny","endLine":187,"endColumn":76,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5242,5311],"text":"Boolean((error.name?.includes(errorType) || error.message?.includes(errorType)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[5222,5231],"text":"(errorType): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":187,"column":7,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":187,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5242,5273],"text":"(Boolean((error.name?.includes(errorType))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":187,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":187,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5274,5276],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":198,"column":26,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":198,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5559,5562],"text":"(key != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5559,5562],"text":"(key ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5559,5562],"text":"(Boolean(key))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5563,5565],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":201,"column":28,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":201,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5625,5659],"text":"(this.retryCounts.get(operationKey) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5625,5659],"text":"(this.retryCounts.get(operationKey) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5625,5659],"text":"(Boolean(this.retryCounts.get(operationKey)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5660,5662],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":226,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":226,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'strategy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":299,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":299,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'strategy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":299,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":299,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":299,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":299,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8256,8305],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8577,8580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8577,8580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'completed' is defined but never used. Allowed unused args must match /^_/u.","line":354,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":354,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'total' is defined but never used. Allowed unused args must match /^_/u.","line":354,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":354,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9563,9566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9563,9566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9621,9624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9621,9624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":364,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":364,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":364,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":364,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10139,10142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10139,10142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// network-retry.ts - 智能重试机制\nimport { ApiClient, handleApiError } from '@/lib/api-client';\nimport { useTranslation } from 'react-i18next';\n\n// 重试策略配置\nexport interface RetryConfig {\n  maxRetries?: number;        // 最大重试次数\n  baseDelay?: number;         // 基础延迟时间(ms)\n  maxDelay?: number;          // 最大延迟时间(ms)\n  backoffFactor?: number;     // 退避因子\n  jitter?: boolean;           // 是否启用随机抖动\n  retryableStatusCodes?: number[]; // 可重试的HTTP状态码\n  timeout?: number;           // 请求超时时间(ms)\n  onRetry?: (attempt: number, error: Error) => void; // 重试回调\n}\n\n// 网络质量等级\nexport enum NetworkQuality {\n  POOR = 'poor',\n  FAIR = 'fair',\n  GOOD = 'good',\n  EXCELLENT = 'excellent'\n}\n\n// 重试策略类型\nexport enum RetryStrategy {\n  FIXED = 'fixed',           // 固定间隔\n  EXPONENTIAL = 'exponential', // 指数退避\n  LINEAR = 'linear'          // 线性退避\n}\n\n// 默认重试配置\nexport const DEFAULT_RETRY_CONFIG: Required<RetryConfig> = {\n  maxRetries: 3,\n  baseDelay: 1000,\n  maxDelay: 8000,\n  backoffFactor: 2,\n  jitter: true,\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  timeout: 30000,\n  onRetry: undefined\n};\n\n// 智能重试管理器\nexport class NetworkRetryManager {\n  private static instance: NetworkRetryManager;\n  private retryConfigs: Map<string, RetryConfig> = new Map();\n  private retryCounts: Map<string, number> = new Map();\n  private networkQuality: NetworkQuality = NetworkQuality.EXCELLENT;\n  private isOnline: boolean = typeof window !== 'undefined' ? navigator.onLine : true;\n\n  private constructor() {\n    this.setupNetworkMonitoring();\n  }\n\n  public static getInstance(): NetworkRetryManager {\n    if (!NetworkRetryManager.instance) {\n      NetworkRetryManager.instance = new NetworkRetryManager();\n    }\n    return NetworkRetryManager.instance;\n  }\n\n  // 设置网络监控\n  private setupNetworkMonitoring() {\n    // 监控在线状态\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.resetRetryCounts();\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n    });\n\n    // 监控网络质量（简单实现）\n    this.monitorNetworkQuality();\n  }\n\n  // 监控网络质量\n  private async monitorNetworkQuality() {\n    const testUrls = [\n      'https://www.google.com/favicon.ico',\n      'https://www.cloudflare.com/favicon.ico'\n    ];\n\n    const checkConnection = async (url: string): Promise<number> => {\n      const start = performance.now();\n      try {\n        const response = await fetch(url, { \n          method: 'HEAD',\n          mode: 'no-cors'\n        });\n        const duration = performance.now() - start;\n        return duration;\n      } catch {\n        return Infinity;\n      }\n    };\n\n    setInterval(async () => {\n      try {\n        const durations = await Promise.all(testUrls.map(checkConnection));\n        const avgDuration = durations.filter(d => d !== Infinity).reduce((a, b) => a + b, 0) / durations.filter(d => d !== Infinity).length;\n\n        if (avgDuration < 100) {\n          this.networkQuality = NetworkQuality.EXCELLENT;\n        } else if (avgDuration < 300) {\n          this.networkQuality = NetworkQuality.GOOD;\n        } else if (avgDuration < 800) {\n          this.networkQuality = NetworkQuality.FAIR;\n        } else {\n          this.networkQuality = NetworkQuality.POOR;\n        }\n      } catch {\n        this.networkQuality = NetworkQuality.POOR;\n      }\n    }, 30000); // 每30秒检查一次\n  }\n\n  // 根据网络质量调整重试策略\n  private adjustConfigForNetworkQuality(config: RetryConfig): RetryConfig {\n    const qualityMultiplier = {\n      [NetworkQuality.EXCELLENT]: 1,\n      [NetworkQuality.GOOD]: 1.2,\n      [NetworkQuality.FAIR]: 1.5,\n      [NetworkQuality.POOR]: 2\n    };\n\n    return {\n      ...config,\n      maxRetries: Math.max(1, Math.floor((config.maxRetries || 3) * qualityMultiplier[this.networkQuality])),\n      baseDelay: Math.min((config.baseDelay || 1000) * qualityMultiplier[this.networkQuality], config.maxDelay || 8000)\n    };\n  }\n\n  // 计算重试延迟时间\n  private calculateDelay(attempt: number, config: RetryConfig, strategy: RetryStrategy = RetryStrategy.EXPONENTIAL): number {\n    const adjustedConfig = this.adjustConfigForNetworkQuality(config);\n    const baseDelay = adjustedConfig.baseDelay;\n    const maxDelay = adjustedConfig.maxDelay;\n    const backoffFactor = adjustedConfig.backoffFactor || 2;\n\n    let delay: number;\n\n    switch (strategy) {\n      case RetryStrategy.FIXED:\n        delay = baseDelay;\n        break;\n      case RetryStrategy.LINEAR:\n        delay = baseDelay * attempt;\n        break;\n      case RetryStrategy.EXPONENTIAL:\n      default:\n        delay = baseDelay * Math.pow(backoffFactor, attempt - 1);\n        break;\n    }\n\n    // 添加随机抖动，避免同时重试\n    if (adjustedConfig.jitter) {\n      const jitter = Math.random() * 0.1 * delay; // 10%的随机抖动\n      delay += jitter;\n    }\n\n    return Math.min(delay, maxDelay);\n  }\n\n  // 判断错误是否可重试\n  private isRetryableError(error: any, config: RetryConfig): boolean {\n    // 网络连接错误\n    if (!this.isOnline) return true;\n\n    // HTTP状态码错误\n    if (error.status && config.retryableStatusCodes?.includes(error.status)) {\n      return true;\n    }\n\n    // 特定错误类型\n    const retryableErrors = [\n      'NetworkError',\n      'TypeError', // 网络错误通常表现为TypeError\n      'ECONNABORTED',\n      'ETIMEDOUT',\n      'ENOTFOUND'\n    ];\n\n    return retryableErrors.some(errorType => \n      error.name?.includes(errorType) || error.message?.includes(errorType)\n    );\n  }\n\n  // 智能重试执行\n  public async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    config: RetryConfig = {},\n    key?: string\n  ): Promise<T> {\n    const finalConfig = { ...DEFAULT_RETRY_CONFIG, ...config };\n    const operationKey = key || 'default';\n    \n    // 检查重试次数限制\n    const currentRetries = this.retryCounts.get(operationKey) || 0;\n    if (currentRetries >= finalConfig.maxRetries) {\n      throw new Error('达到最大重试次数');\n    }\n\n    try {\n      // 执行操作\n      const result = await this.executeWithTimeout(operation, finalConfig.timeout);\n      \n      // 成功后重置重试计数\n      if (currentRetries > 0) {\n        this.retryCounts.delete(operationKey);\n      }\n      \n      return result;\n    } catch (error) {\n      // 更新重试计数\n      this.retryCounts.set(operationKey, currentRetries + 1);\n\n      // 判断是否应该重试\n      if (this.isRetryableError(error, finalConfig)) {\n        const nextAttempt = currentRetries + 1;\n        const delay = this.calculateDelay(nextAttempt, finalConfig);\n\n        // 调用重试回调\n        if (finalConfig.onRetry) {\n          finalConfig.onRetry(nextAttempt, error as Error);\n        }\n\n        // 等待后重试\n        await this.sleep(delay);\n        return this.executeWithRetry(operation, finalConfig, operationKey);\n      }\n\n      // 不可重试的错误直接抛出\n      throw error;\n    }\n  }\n\n  // 带超时的执行\n  private async executeWithTimeout<T>(operation: () => Promise<T>, timeout: number): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`操作超时: ${timeout}ms`));\n      }, timeout);\n\n      operation()\n        .then(resolve)\n        .catch(reject)\n        .finally(() => clearTimeout(timeoutId));\n    });\n  }\n\n  // 睡眠工具函数\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // 重置重试计数\n  public resetRetryCounts() {\n    this.retryCounts.clear();\n  }\n\n  // 获取当前网络质量\n  public getNetworkQuality(): NetworkQuality {\n    return this.networkQuality;\n  }\n\n  // 检查在线状态\n  public isNetworkOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // 配置重试策略\n  public setRetryConfig(key: string, config: RetryConfig) {\n    this.retryConfigs.set(key, config);\n  }\n\n  // 获取重试配置\n  public getRetryConfig(key: string): RetryConfig | undefined {\n    return this.retryConfigs.get(key);\n  }\n}\n\n// 便捷的国际化错误处理\nexport const createLocalizedRetryHandler = (t: ReturnType<typeof useTranslation>['t']) => {\n  const retryManager = NetworkRetryManager.getInstance();\n\n  return {\n    executeWithRetry: async <T>(\n      operation: () => Promise<T>,\n      options: {\n        config?: RetryConfig;\n        key?: string;\n        strategy?: RetryStrategy;\n        errorMessage?: string;\n      } = {}\n    ): Promise<T> => {\n      const { config, key, strategy, errorMessage } = options;\n      \n      try {\n        return await retryManager.executeWithRetry(operation, {\n          ...config,\n          onRetry: (attempt, error) => {\n            console.warn(`重试第 ${attempt} 次:`, error.message);\n            // 可以在这里添加用户提示\n          }\n        }, key);\n      } catch (error) {\n        // 本地化错误信息\n        const localizedError = this.getLocalizedError(error as Error, t);\n        throw new Error(localizedError);\n      }\n    },\n\n    getLocalizedError: (error: Error, t: any): string => {\n      if (!navigator.onLine) {\n        return t('network.offline', '网络连接已断开，请检查网络设置');\n      }\n\n      if (error.message.includes('超时')) {\n        return t('network.timeout', '请求超时，请稍后重试');\n      }\n\n      if (error.message.includes('达到最大重试次数')) {\n        return t('network.maxRetries', '网络不稳定，请稍后再试');\n      }\n\n      return handleApiError(error);\n    },\n\n    getNetworkStatus: () => {\n      return {\n        isOnline: retryManager.isNetworkOnline(),\n        quality: retryManager.getNetworkQuality(),\n        retryCount: retryManager['retryCounts'].size\n      };\n    }\n  };\n};\n\n// 批量重试操作\nexport class BatchRetryManager {\n  private retryManager = NetworkRetryManager.getInstance();\n  private maxConcurrency = 3; // 最大并发数\n\n  // 批量重试执行\n  async executeBatch<T>(\n    operations: Array<{\n      key: string;\n      operation: () => Promise<T>;\n      config?: RetryConfig;\n    }>,\n    onProgress?: (completed: number, total: number) => void\n  ): Promise<{ results: T[]; errors: any[] }> {\n    const results: T[] = [];\n    const errors: any[] = [];\n    let completed = 0;\n\n    // 分批处理，控制并发\n    for (let i = 0; i < operations.length; i += this.maxConcurrency) {\n      const batch = operations.slice(i, i + this.maxConcurrency);\n      \n      const batchPromises = batch.map(async (item, index) => {\n        try {\n          const result = await this.retryManager.executeWithRetry(item.operation, item.config, item.key);\n          results.push(result);\n        } catch (error) {\n          errors.push({ key: item.key, error });\n          results.push(null as any);\n        } finally {\n          completed++;\n          onProgress?.(completed, operations.length);\n        }\n      });\n\n      await Promise.allSettled(batchPromises);\n    }\n\n    return { results, errors };\n  }\n\n  // 设置并发数\n  setMaxConcurrency(concurrency: number) {\n    this.maxConcurrency = Math.max(1, concurrency);\n  }\n}\n\n// 单例导出\nexport const retryManager = NetworkRetryManager.getInstance();\nexport const batchRetryManager = new BatchRetryManager();\n\n// React Hook for retry\nimport { useState, useCallback } from 'react';\n\nexport function useRetry() {\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const executeWithRetry = useCallback(async <T>(\n    operation: () => Promise<T>,\n    config?: RetryConfig\n  ): Promise<T> => {\n    setIsRetrying(true);\n    setRetryCount(0);\n\n    try {\n      const result = await retryManager.executeWithRetry(operation, config);\n      return result;\n    } finally {\n      setIsRetrying(false);\n      setRetryCount(0);\n    }\n  }, []);\n\n  return {\n    executeWithRetry,\n    isRetrying,\n    retryCount,\n    networkQuality: retryManager.getNetworkQuality(),\n    isOnline: retryManager.isNetworkOnline()\n  };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/performance-analyzer.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5332,5335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5332,5335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":245,"column":22,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":245,"endColumn":29,"fix":{"range":[5595,5907],"text":"for (const category of targetCategories) {\n      const target = getTargetByCategory(category);\n      if (target) {\n        const { score } = PerformanceScorer.calculateOverallScore(latestMetrics, target);\n        categoryScores[category] = score;\n        totalScore += score;\n        categoryCount++;\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":249,"column":9,"nodeType":"MemberExpression","endLine":249,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6554,6557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6554,6557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7134,7137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7134,7137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7900,7903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7900,7903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":338,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7927,7930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7927,7930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":343,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":343,"endColumn":41},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":349,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":349,"endColumn":46,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8343,8365],"text":"(Boolean(bottleneck.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":349,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":349,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8366,8368],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":351,"column":19,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":351,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8456,8489],"text":"((bottleneck.solutions[0]?.approach) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8456,8489],"text":"((bottleneck.solutions[0]?.approach) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8456,8489],"text":"(Boolean((bottleneck.solutions[0]?.approach)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":351,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":351,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8490,8492],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":352,"column":35,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":352,"endColumn":80,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8538,8583],"text":"((bottleneck.solutions[0]?.estimatedImprovement) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8538,8583],"text":"((bottleneck.solutions[0]?.estimatedImprovement) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8538,8583],"text":"(Boolean((bottleneck.solutions[0]?.estimatedImprovement)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":352,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":352,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8584,8586],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":353,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":353,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8617,8651],"text":"((bottleneck.solutions[0]?.timeframe) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8617,8651],"text":"((bottleneck.solutions[0]?.timeframe) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8617,8651],"text":"(Boolean((bottleneck.solutions[0]?.timeframe)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":353,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":353,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8652,8654],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":361,"column":60,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":361,"endColumn":67},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":368,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":368,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9169,9190],"text":"(opp.implementation[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9169,9190],"text":"(opp.implementation[0] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9169,9190],"text":"(Boolean(opp.implementation[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":368,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":368,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9191,9193],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":377,"column":89,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":377,"endColumn":96},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":398,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":398,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10137,10139],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":405,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":405,"endColumn":20,"fix":{"range":[10347,10977],"text":"for (const metric of metrics) {\n      const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n      \n      if (values.length > 3) {\n        const trend = this.calculateLinearTrend(values);\n        const confidence = this.calculateConfidence(values);\n        \n        trends.push({\n          metric,\n          direction: trend.slope > 0 ? 'improving' : 'degrading',\n          rate: trend.slope,\n          confidence,\n          significance: confidence > 0.8 ? 'high' : confidence > 0.5 ? 'medium' : 'low',\n          description: `${metric} ${trend.slope > 0 ? '改善' : '下降'}趋势明显`\n        });\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":406,"column":43,"nodeType":"MemberExpression","endLine":406,"endColumn":61},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":429,"column":44,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":429,"endColumn":51,"fix":{"range":[11168,11652],"text":"for (const [categoryName, target] of Object.entries(PERFORMANCE_BENCHMARKS)) {\n      target.benchmarks.forEach(benchmark => {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (benchmark.critical && score < 50) {\n            issues.push(`${target.name}: ${benchmark.description} 严重低于目标`);\n          }\n        }\n      });\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'categoryName' is defined but never used. Allowed unused args must match /^_/u.","line":429,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":429,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'categoryName' is defined but never used. Allowed unused args must match /^_/u.","line":429,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":429,"endColumn":66},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":430,"column":25,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":430,"endColumn":32,"fix":{"range":[11251,11644],"text":"for (const benchmark of target.benchmarks) {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (benchmark.critical && score < 50) {\n            issues.push(`${target.name}: ${benchmark.description} 严重低于目标`);\n          }\n        }\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":449,"column":44,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":449,"endColumn":51,"fix":{"range":[11871,12446],"text":"for (const [categoryName, target] of Object.entries(PERFORMANCE_BENCHMARKS)) {\n      target.benchmarks.forEach(benchmark => {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (score < 85) {\n            const recommendation = this.generateRecommendation(benchmark, value, score);\n            if (recommendation) {\n              recommendations.push(recommendation);\n            }\n          }\n        }\n      });\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'categoryName' is defined but never used. Allowed unused args must match /^_/u.","line":449,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":449,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'categoryName' is defined but never used. Allowed unused args must match /^_/u.","line":449,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":449,"endColumn":66},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":450,"column":25,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":450,"endColumn":32,"fix":{"range":[11954,12438],"text":"for (const benchmark of target.benchmarks) {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (score < 85) {\n            const recommendation = this.generateRecommendation(benchmark, value, score);\n            if (recommendation) {\n              recommendations.push(recommendation);\n            }\n          }\n        }\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":457,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":457,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12323,12337],"text":"recommendation != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12323,12337],"text":"recommendation ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12323,12337],"text":"Boolean(recommendation)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":469,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":469,"endColumn":34,"fix":{"range":[12635,12647],"text":"{return null;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":484,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":484,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13289,13322],"text":"(recommendations[benchmark.metric] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[13289,13322],"text":"(recommendations[benchmark.metric] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13289,13322],"text":"(Boolean(recommendations[benchmark.metric]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":484,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":484,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13323,13325],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":492,"column":44,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":492,"endColumn":51,"fix":{"range":[13658,14843],"text":"for (const [categoryName, target] of Object.entries(PERFORMANCE_BENCHMARKS)) {\n      const { score, grade, details } = PerformanceScorer.calculateOverallScore(latestMetrics, target);\n      \n      const benchmarks = target.benchmarks.map(benchmark => {\n        const currentValue = latestMetrics[benchmark.metric] || 0;\n        const benchmarkScore = PerformanceScorer.calculateScore(benchmark.metric, currentValue, benchmark);\n        \n        return {\n          benchmark,\n          currentValue,\n          score: benchmarkScore,\n          percentileRank: this.calculatePercentileRank(dataPoints, benchmark.metric, currentValue),\n          trend: this.calculateSingleMetricTrend(dataPoints, benchmark.metric),\n          estimatedImprovement: this.estimateImprovement(benchmark, currentValue),\n          optimizationSuggestions: this.generateOptimizationSuggestions(benchmark, currentValue)\n        };\n      });\n\n      analyses.push({\n        category: categoryName,\n        target,\n        currentScore: score,\n        grade,\n        benchmarks,\n        improvementPotential: this.calculateImprovementPotential(latestMetrics, target),\n        priority: target.priority\n      });\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'details' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":493,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":493,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'details' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":493,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":496,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":496,"endColumn":61,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13937,13968],"text":"(latestMetrics[benchmark.metric] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13937,13968],"text":"(latestMetrics[benchmark.metric] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13937,13968],"text":"(Boolean(latestMetrics[benchmark.metric]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":496,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":496,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13969,13971],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":528,"column":18,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":528,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15060,15084],"text":"((dataPoints[0]?.timestamp) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15060,15084],"text":"((dataPoints[0]?.timestamp) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15060,15084],"text":"(Boolean((dataPoints[0]?.timestamp)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":528,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":528,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15085,15087],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":529,"column":16,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":529,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15106,15150],"text":"((dataPoints[dataPoints.length - 1]?.timestamp) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15106,15150],"text":"((dataPoints[dataPoints.length - 1]?.timestamp) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15106,15150],"text":"(Boolean((dataPoints[dataPoints.length - 1]?.timestamp)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":529,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":529,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15151,15153],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":582,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":582,"endColumn":41},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":583,"column":20,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":583,"endColumn":27,"fix":{"range":[16761,17574],"text":"for (const corr of correlations) {\n        if (Math.abs(corr.correlation) > 0.7 && corr.significance > 0.95) {\n          const value = latestMetrics[metric];\n          \n          if (value !== undefined) {\n            bottlenecks.push({\n              metric,\n              severity: this.determineSeverity(metric, value),\n              impact: `与${corr.relatedMetric}强相关，影响系统整体性能`,\n              affectedSystems: [corr.relatedMetric, metric],\n              rootCause: this.identifyRootCause(metric, corr),\n              evidence: {\n                correlation: corr.correlation,\n                statisticalSignificance: corr.significance,\n                patterns: [corr.pattern]\n              },\n              solutions: this.generateBottleneckSolutions(metric, value)\n            });\n          }\n        }\n      }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":585,"column":25,"nodeType":"MemberExpression","endLine":585,"endColumn":46},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":614,"column":44,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":614,"endColumn":51,"fix":{"range":[17896,18429],"text":"for (const [categoryName, target] of Object.entries(PERFORMANCE_BENCHMARKS)) {\n      target.benchmarks.forEach(benchmark => {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (score < 90) {\n            const opportunity = this.generateOptimizationOpportunity(benchmark, value, categoryName);\n            opportunities.push(opportunity);\n          }\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":615,"column":25,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":615,"endColumn":32,"fix":{"range":[17979,18421],"text":"for (const benchmark of target.benchmarks) {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (score < 90) {\n            const opportunity = this.generateOptimizationOpportunity(benchmark, value, categoryName);\n            opportunities.push(opportunity);\n          }\n        }\n      }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":634,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":634,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18628,18631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18628,18631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":635,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":635,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18669,18672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18669,18672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":637,"column":41,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":637,"endColumn":48,"fix":{"range":[18685,19150],"text":"for (const metric of Object.keys(PERFORMANCE_BENCHMARKS)) {\n      const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n      \n      if (values.length > 10) {\n        const prediction = this.linearRegressionForecast(values, this.getForecastPeriod(timeframe));\n        forecast[metric] = {\n          predicted: prediction.predicted,\n          confidence: prediction.confidence,\n          range: prediction.range\n        };\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":638,"column":43,"nodeType":"MemberExpression","endLine":638,"endColumn":61},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":642,"column":9,"nodeType":"MemberExpression","endLine":642,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'latestMetrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":655,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":655,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'latestMetrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":655,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":655,"endColumn":24},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":679,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":679,"endColumn":19,"fix":{"range":[20052,20239],"text":"for (const trend of trends) {\n      if (trend.direction === 'degrading' && trend.significance === 'high') {\n        recommendations.push(`预测${trend.metric}将进一步恶化，建议提前采取优化措施`);\n      }\n    }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":727,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":727,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21720,21723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21720,21723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":743,"column":41,"nodeType":"MemberExpression","endLine":743,"endColumn":59},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":749,"column":41,"nodeType":"MemberExpression","endLine":749,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'currentValue' is defined but never used. Allowed unused args must match /^_/u.","line":776,"column":83,"nodeType":"Identifier","messageId":"unusedVar","endLine":776,"endColumn":103},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentValue' is defined but never used. Allowed unused args must match /^_/u.","line":776,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":776,"endColumn":95},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":785,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":785,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23896,23898],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":790,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":790,"endColumn":30,"fix":{"range":[24061,24276],"text":"for (const benchmark of target.benchmarks) {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        potential += Math.max(0, benchmark.target - value) * benchmark.weight;\n      }\n    }"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":800,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":800,"endColumn":45,"fix":{"range":[24432,24444],"text":"{return null;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":806,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":806,"endColumn":23,"fix":{"range":[24594,24810],"text":"for (const dp of dataPoints) {\n      const hour = new Date(dp.timestamp).getHours();\n      const loadValue = Object.values(dp.metrics)[0] || 0;\n      hourlyAverages[hour] += loadValue;\n      hourlyCounts[hour]++;\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":808,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":808,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[24699,24727],"text":"(Object.values(dp.metrics)[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[24699,24727],"text":"(Object.values(dp.metrics)[0] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[24699,24727],"text":"(Boolean(Object.values(dp.metrics)[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":808,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":808,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[24728,24730],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":809,"column":7,"nodeType":"MemberExpression","endLine":809,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":810,"column":7,"nodeType":"MemberExpression","endLine":810,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":814,"column":11,"nodeType":"MemberExpression","endLine":814,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":815,"column":9,"nodeType":"MemberExpression","endLine":815,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":815,"column":30,"nodeType":"MemberExpression","endLine":815,"endColumn":45},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":840,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":840,"endColumn":46,"fix":{"range":[25616,25628],"text":"{return null;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":845,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":845,"endColumn":23,"fix":{"range":[25768,25977],"text":"for (const dp of dataPoints) {\n      const day = new Date(dp.timestamp).getDay();\n      const loadValue = Object.values(dp.metrics)[0] || 0;\n      dailyAverages[day] += loadValue;\n      dailyCounts[day]++;\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":847,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":847,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[25870,25898],"text":"(Object.values(dp.metrics)[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[25870,25898],"text":"(Object.values(dp.metrics)[0] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[25870,25898],"text":"(Boolean(Object.values(dp.metrics)[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":847,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":847,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[25899,25901],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":848,"column":7,"nodeType":"MemberExpression","endLine":848,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":849,"column":7,"nodeType":"MemberExpression","endLine":849,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":853,"column":11,"nodeType":"MemberExpression","endLine":853,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":854,"column":9,"nodeType":"MemberExpression","endLine":854,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":854,"column":29,"nodeType":"MemberExpression","endLine":854,"endColumn":43},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":877,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":877,"endColumn":20,"fix":{"range":[26868,27866],"text":"for (const metric of metrics) {\n      const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n      if (values.length > 10) {\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const stdDev = Math.sqrt(this.calculateVariance(values));\n        \n        dataPoints.forEach(dp => {\n          const value = dp.metrics[metric];\n          if (value !== undefined) {\n            const zScore = Math.abs((value - mean) / stdDev);\n            if (zScore > 2) { // 2个标准差\n              anomalies.push({\n                timestamp: dp.timestamp,\n                metric,\n                severity: zScore > 3 ? 'high' : 'medium',\n                type: zScore > 0 ? 'spike' : 'drop',\n                description: `${metric}在${new Date(dp.timestamp).toISOString()}出现异常值`,\n                impact: `${metric}性能出现${zScore > 3 ? '严重' : '中等'}偏离`,\n                likelyCause: '需要进一步分析'\n              });\n            }\n          }\n        });\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":878,"column":43,"nodeType":"MemberExpression","endLine":878,"endColumn":61},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":883,"column":20,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":883,"endColumn":27,"fix":{"range":[27183,27850],"text":"for (const dp of dataPoints) {\n          const value = dp.metrics[metric];\n          if (value !== undefined) {\n            const zScore = Math.abs((value - mean) / stdDev);\n            if (zScore > 2) { // 2个标准差\n              anomalies.push({\n                timestamp: dp.timestamp,\n                metric,\n                severity: zScore > 3 ? 'high' : 'medium',\n                type: zScore > 0 ? 'spike' : 'drop',\n                description: `${metric}在${new Date(dp.timestamp).toISOString()}出现异常值`,\n                impact: `${metric}性能出现${zScore > 3 ? '严重' : '中等'}偏离`,\n                likelyCause: '需要进一步分析'\n              });\n            }\n          }\n        }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":884,"column":25,"nodeType":"MemberExpression","endLine":884,"endColumn":43},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":908,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":908,"endColumn":41,"fix":{"range":[28047,28056],"text":"{return 1;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":911,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":911,"endColumn":23,"fix":{"range":[28102,28281],"text":"for (const dp of dataPoints) {\n      Object.values(dp.metrics).forEach(value => {\n        if (typeof value === 'number') {\n          allValues.push(value);\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":912,"column":33,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":912,"endColumn":40,"fix":{"range":[28135,28273],"text":"for (const value of Object.values(dp.metrics)) {\n        if (typeof value === 'number') {\n          allValues.push(value);\n        }\n      }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'dataPoints' is defined but never used. Allowed unused args must match /^_/u.","line":932,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":932,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dataPoints' is defined but never used. Allowed unused args must match /^_/u.","line":932,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":932,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":939,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":939,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29082,29085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29082,29085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":942,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":942,"endColumn":20,"fix":{"range":[29120,29423],"text":"for (const metric of metrics) {\n      correlations[metric] = metrics\n        .filter(other => other !== metric)\n        .map(other => ({\n          correlation: Math.random() * 2 - 1, // 模拟数据\n          significance: Math.random(),\n          relatedMetric: other,\n          pattern: '正相关'\n        }));\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":943,"column":7,"nodeType":"MemberExpression","endLine":943,"endColumn":27},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":961,"column":21,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":961,"endColumn":37,"fix":{"range":[29735,29751],"text":"{return 'medium';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":963,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":963,"endColumn":51,"fix":{"range":[29789,29807],"text":"{return 'critical';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":964,"column":39,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":964,"endColumn":53,"fix":{"range":[29846,29860],"text":"{return 'high';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":965,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":965,"endColumn":49,"fix":{"range":[29893,29909],"text":"{return 'medium';}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'correlation' is defined but never used. Allowed unused args must match /^_/u.","line":969,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":969,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'correlation' is defined but never used. Allowed unused args must match /^_/u.","line":969,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":969,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":969,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":969,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29997,30000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29997,30000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":979,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":979,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[30256,30274],"text":"(rootCauses[metric] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[30256,30274],"text":"(rootCauses[metric] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[30256,30274],"text":"(Boolean(rootCauses[metric]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":979,"column":12,"nodeType":"MemberExpression","endLine":979,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":979,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":979,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[30275,30277],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":982,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":982,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":982,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":982,"endColumn":67},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":1010,"column":12,"nodeType":"MemberExpression","endLine":1010,"endColumn":29},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1010,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1010,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[31091,31093],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":1049,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":1049,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[32586,32610],"text":"(Object.values(latest)[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[32586,32610],"text":"(Object.values(latest)[0] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[32586,32610],"text":"(Boolean(Object.values(latest)[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1049,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1049,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[32611,32613],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":1090,"column":29,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":1090,"endColumn":36,"fix":{"range":[33640,33890],"text":"for (const trend of analysis.summary.trends) {\n      const emoji = trend.direction === 'improving' ? '📈' : \n                   trend.direction === 'degrading' ? '📉' : '📊';\n      report += `${emoji} **${trend.metric}**: ${trend.description}\\n`;\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":1102,"column":48,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":1102,"endColumn":55,"fix":{"range":[34005,34181],"text":"for (const category of analysis.detailedAnalysis.categoryAnalysis) {\n      report += `**${category.category}**: ${category.currentScore.toFixed(1)}分 (${category.grade})\\n`;\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":1110,"column":45,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":1110,"endColumn":52,"fix":{"range":[34313,34662],"text":"for (const [index, bottleneck] of analysis.detailedAnalysis.bottlenecks.entries()) {\n        report += `${index + 1}. **${bottleneck.metric}** (${bottleneck.severity})\\n`;\n        report += `   - 影响: ${bottleneck.impact}\\n`;\n        report += `   - 根因: ${bottleneck.rootCause}\\n`;\n        report += `   - 解决方案: ${bottleneck.solutions[0]?.approach}\\n\\n`;\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":1121,"column":71,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":1121,"endColumn":78,"fix":{"range":[34794,35134],"text":"for (const [index, opp] of analysis.detailedAnalysis.optimizationOpportunities.slice(0, 5).entries()) {\n        report += `${index + 1}. **${opp.title}** (ROI: ${opp.roi.toFixed(1)}x)\\n`;\n        report += `   - 描述: ${opp.description}\\n`;\n        report += `   - 预期收益: ${opp.targetState}\\n`;\n        report += `   - 实施时间: ${opp.timeframe}\\n\\n`;\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":1132,"column":47,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":1132,"endColumn":54,"fix":{"range":[35243,35776],"text":"for (const [index, insight] of analysis.actionableInsights.slice(0, 5).entries()) {\n        const priorityEmoji = {\n          'critical': '🔴',\n          'high': '🟡',\n          'medium': '🟠',\n          'low': '🟢'\n        }[insight.priority];\n        \n        report += `${priorityEmoji} **${insight.title}**\\n`;\n        report += `   - 描述: ${insight.description}\\n`;\n        report += `   - 行动: ${insight.action}\\n`;\n        report += `   - 预期结果: ${insight.expectedOutcome}\\n`;\n        report += `   - 时间框架: ${insight.timeframe}\\n\\n`;\n      }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":1132,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":1132,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":1132,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":1132,"endColumn":70},{"ruleId":"no-unused-vars","severity":2,"message":"'analysis' is defined but never used. Allowed unused args must match /^_/u.","line":1154,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":1154,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1209,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1209,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37668,37671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37668,37671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1217,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1217,"endColumn":57,"fix":{"range":[37818,37835],"text":"{return 'unknown';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1220,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1220,"endColumn":38,"fix":{"range":[37899,37915],"text":"{return 'mobile';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1221,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1221,"endColumn":39,"fix":{"range":[37938,37954],"text":"{return 'tablet';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1227,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1227,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38131,38134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38131,38134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":1228,"column":14,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":1228,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[38161,38186],"text":"(Boolean((connection?.effectiveType)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1228,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1228,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[38187,38189],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":86,"fatalErrorCount":0,"warningCount":41,"fixableErrorCount":11,"fixableWarningCount":25,"source":"/**\n * 性能分析工具\n * 提供性能数据分析、趋势识别、自动优化建议等功能\n */\n\nimport { \n  PERFORMANCE_BENCHMARKS,\n  PerformanceTarget,\n  PerformanceBenchmark,\n  PerformanceScorer,\n  getTargetByCategory\n} from './performance-benchmarks';\n\nexport interface PerformanceDataPoint {\n  timestamp: number;\n  metrics: Record<string, number>;\n  metadata?: {\n    url?: string;\n    userAgent?: string;\n    device?: string;\n    network?: string;\n  };\n}\n\nexport interface PerformanceAnalysisResult {\n  summary: {\n    overallScore: number;\n    grade: string;\n    trends: PerformanceTrend[];\n    criticalIssues: string[];\n    recommendations: string[];\n  };\n  detailedAnalysis: {\n    categoryAnalysis: CategoryAnalysis[];\n    historicalAnalysis: HistoricalAnalysis;\n    bottlenecks: BottleneckDetail[];\n    optimizationOpportunities: OptimizationOpportunity[];\n  };\n  predictions: {\n    performanceForecast: PerformanceForecast;\n    capacityPlanning: CapacityPlanning;\n  };\n  actionableInsights: ActionableInsight[];\n}\n\nexport interface PerformanceTrend {\n  metric: string;\n  direction: 'improving' | 'stable' | 'degrading';\n  rate: number; // 变化率 (per hour)\n  confidence: number; // 0-1\n  significance: 'high' | 'medium' | 'low';\n  description: string;\n}\n\nexport interface CategoryAnalysis {\n  category: string;\n  target: PerformanceTarget;\n  currentScore: number;\n  grade: string;\n  benchmarks: BenchmarkAnalysis[];\n  improvementPotential: number;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport interface BenchmarkAnalysis {\n  benchmark: PerformanceBenchmark;\n  currentValue: number;\n  score: number;\n  percentileRank: number; // 0-100\n  trend: PerformanceTrend;\n  estimatedImprovement: number;\n  optimizationSuggestions: string[];\n}\n\nexport interface HistoricalAnalysis {\n  timeRange: {\n    start: number;\n    end: number;\n    duration: number;\n  };\n  dataPoints: number;\n  patterns: {\n    dailyPattern: DailyPattern | null;\n    weeklyPattern: WeeklyPattern | null;\n    anomalies: Anomaly[];\n  };\n  quality: {\n    completeness: number; // 0-1\n    consistency: number; // 0-1\n    reliability: number; // 0-1\n  };\n}\n\nexport interface DailyPattern {\n  peakHours: number[];\n  lowHours: number[];\n  averageLoad: number;\n  variability: number;\n}\n\nexport interface WeeklyPattern {\n  bestDay: string;\n  worstDay: string;\n  weekendVsWeekday: number; // 比例\n  weeklyVolatility: number;\n}\n\nexport interface Anomaly {\n  timestamp: number;\n  metric: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'spike' | 'drop' | 'deviation' | 'pattern_change';\n  description: string;\n  impact: string;\n  likelyCause: string;\n}\n\nexport interface BottleneckDetail {\n  metric: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  impact: string;\n  affectedSystems: string[];\n  rootCause: string;\n  evidence: {\n    correlation: number;\n    statisticalSignificance: number;\n    patterns: string[];\n  };\n  solutions: BottleneckSolution[];\n}\n\nexport interface BottleneckSolution {\n  approach: string;\n  effort: 'low' | 'medium' | 'high';\n  impact: 'low' | 'medium' | 'high';\n  timeframe: string;\n  technicalComplexity: 'low' | 'medium' | 'high';\n  dependencies: string[];\n  riskLevel: 'low' | 'medium' | 'high';\n  estimatedImprovement: number;\n}\n\nexport interface OptimizationOpportunity {\n  category: string;\n  title: string;\n  description: string;\n  currentState: string;\n  targetState: string;\n  effort: 'low' | 'medium' | 'high';\n  impact: 'low' | 'medium' | 'high';\n  timeframe: string;\n  roi: number; // 投资回报率\n  riskLevel: 'low' | 'medium' | 'high';\n  prerequisites: string[];\n  implementation: string[];\n  successMetrics: string[];\n}\n\nexport interface PerformanceForecast {\n  timeframe: '1day' | '1week' | '1month' | '3months';\n  predictedMetrics: Record<string, {\n    predicted: number;\n    confidence: number;\n    range: { min: number; max: number };\n  }>;\n  scenarios: {\n    best: string;\n    realistic: string;\n    worst: string;\n  };\n  recommendations: string[];\n}\n\nexport interface CapacityPlanning {\n  currentCapacity: number;\n  predictedDemand: number;\n  scalingRecommendations: {\n    immediate: string[];\n    shortTerm: string[];\n    longTerm: string[];\n  };\n  resourceRequirements: {\n    compute: string;\n    memory: string;\n    storage: string;\n    network: string;\n  };\n}\n\nexport interface ActionableInsight {\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  category: string;\n  title: string;\n  description: string;\n  impact: string;\n  action: string;\n  expectedOutcome: string;\n  timeframe: string;\n  successCriteria: string[];\n  metrics: string[];\n}\n\n// 性能数据处理器\nclass PerformanceDataProcessor {\n  /**\n   * 处理性能数据并生成分析结果\n   */\n  static analyze(dataPoints: PerformanceDataPoint[]): PerformanceAnalysisResult {\n    if (dataPoints.length === 0) {\n      throw new Error('没有可分析的性能数据');\n    }\n\n    // 1. 生成摘要分析\n    const summary = this.generateSummary(dataPoints);\n\n    // 2. 生成详细分析\n    const detailedAnalysis = this.generateDetailedAnalysis(dataPoints);\n\n    // 3. 生成预测\n    const predictions = this.generatePredictions(dataPoints);\n\n    // 4. 生成可操作见解\n    const actionableInsights = this.generateActionableInsights(dataPoints, summary, detailedAnalysis);\n\n    return {\n      summary,\n      detailedAnalysis,\n      predictions,\n      actionableInsights\n    };\n  }\n\n  /**\n   * 生成摘要分析\n   */\n  private static generateSummary(dataPoints: PerformanceDataPoint[]): any {\n    const latestMetrics = this.getLatestMetrics(dataPoints);\n    const targetCategories = Object.keys(PERFORMANCE_BENCHMARKS);\n    \n    // 计算总体分数\n    const categoryScores: Record<string, number> = {};\n    let totalScore = 0;\n    let categoryCount = 0;\n\n    targetCategories.forEach(category => {\n      const target = getTargetByCategory(category);\n      if (target) {\n        const { score } = PerformanceScorer.calculateOverallScore(latestMetrics, target);\n        categoryScores[category] = score;\n        totalScore += score;\n        categoryCount++;\n      }\n    });\n\n    const overallScore = categoryCount > 0 ? totalScore / categoryCount : 0;\n    const grade = PerformanceScorer.calculateGrade(overallScore);\n\n    // 分析趋势\n    const trends = this.analyzeTrends(dataPoints);\n\n    // 识别关键问题\n    const criticalIssues = this.identifyCriticalIssues(dataPoints, latestMetrics);\n\n    // 生成建议\n    const recommendations = this.generateRecommendations(dataPoints, latestMetrics);\n\n    return {\n      overallScore,\n      grade,\n      trends,\n      criticalIssues,\n      recommendations,\n      categoryScores\n    };\n  }\n\n  /**\n   * 生成详细分析\n   */\n  private static generateDetailedAnalysis(dataPoints: PerformanceDataPoint[]): any {\n    // 类别分析\n    const categoryAnalysis = this.generateCategoryAnalysis(dataPoints);\n\n    // 历史分析\n    const historicalAnalysis = this.generateHistoricalAnalysis(dataPoints);\n\n    // 瓶颈识别\n    const bottlenecks = this.identifyBottlenecks(dataPoints);\n\n    // 优化机会\n    const optimizationOpportunities = this.identifyOptimizationOpportunities(dataPoints);\n\n    return {\n      categoryAnalysis,\n      historicalAnalysis,\n      bottlenecks,\n      optimizationOpportunities\n    };\n  }\n\n  /**\n   * 生成预测\n   */\n  private static generatePredictions(dataPoints: PerformanceDataPoint[]): any {\n    const timeframe: '1day' | '1week' | '1month' = '1week';\n    \n    // 预测指标\n    const predictedMetrics = this.forecastMetrics(dataPoints, timeframe);\n    \n    // 场景分析\n    const scenarios = {\n      best: '如果立即实施所有高影响优化，预计性能将改善30-50%',\n      realistic: '基于当前优化速度，预计下周性能改善10-20%',\n      worst: '如果当前性能下降趋势持续，预计下周性能下降5-15%'\n    };\n\n    // 容量规划\n    const capacityPlanning = this.generateCapacityPlanning(dataPoints);\n\n    // 预测性建议\n    const recommendations = this.generatePredictiveRecommendations(dataPoints);\n\n    return {\n      timeframe,\n      predictedMetrics,\n      scenarios,\n      recommendations,\n      capacityPlanning\n    };\n  }\n\n  /**\n   * 生成可操作见解\n   */\n  private static generateActionableInsights(\n    dataPoints: PerformanceDataPoint[],\n    summary: any,\n    detailedAnalysis: any\n  ): ActionableInsight[] {\n    const insights: ActionableInsight[] = [];\n\n    // 基于瓶颈生成见解\n    detailedAnalysis.bottlenecks.forEach((bottleneck: BottleneckDetail) => {\n      if (bottleneck.severity === 'critical' || bottleneck.severity === 'high') {\n        insights.push({\n          priority: bottleneck.severity,\n          category: '性能瓶颈',\n          title: `解决${bottleneck.metric}瓶颈问题`,\n          description: bottleneck.description || `${bottleneck.metric}严重影响系统性能`,\n          impact: bottleneck.impact,\n          action: bottleneck.solutions[0]?.approach || '需要进一步分析',\n          expectedOutcome: `预期改善${bottleneck.solutions[0]?.estimatedImprovement || 20}%性能`,\n          timeframe: bottleneck.solutions[0]?.timeframe || '1-2周',\n          successCriteria: [`${bottleneck.metric}低于${bottleneck.severity}阈值`],\n          metrics: [bottleneck.metric]\n        });\n      }\n    });\n\n    // 基于优化机会生成见解\n    detailedAnalysis.optimizationOpportunities.slice(0, 3).forEach((opp: OptimizationOpportunity) => {\n      insights.push({\n        priority: opp.impact === 'high' ? 'high' : 'medium',\n        category: '性能优化',\n        title: opp.title,\n        description: opp.description,\n        impact: `预期ROI: ${opp.roi.toFixed(1)}x`,\n        action: opp.implementation[0] || '实施优化',\n        expectedOutcome: opp.targetState,\n        timeframe: opp.timeframe,\n        successCriteria: opp.successMetrics,\n        metrics: [opp.category]\n      });\n    });\n\n    // 基于趋势生成见解\n    summary.trends.filter((trend: PerformanceTrend) => trend.direction === 'degrading').forEach((trend: PerformanceTrend) => {\n      insights.push({\n        priority: 'high',\n        category: '趋势监控',\n        title: `防止${trend.metric}性能进一步下降`,\n        description: trend.description,\n        impact: '防止性能恶化',\n        action: '实施预防性优化措施',\n        expectedOutcome: '稳定性能趋势',\n        timeframe: '1周',\n        successCriteria: [`${trend.metric}趋势转向稳定`],\n        metrics: [trend.metric]\n      });\n    });\n\n    return insights.slice(0, 10); // 返回最多10个最重要的见解\n  }\n\n  // 私有辅助方法\n  private static getLatestMetrics(dataPoints: PerformanceDataPoint[]): Record<string, number> {\n    const latest = dataPoints[dataPoints.length - 1];\n    return latest?.metrics || {};\n  }\n\n  private static analyzeTrends(dataPoints: PerformanceDataPoint[]): PerformanceTrend[] {\n    const trends: PerformanceTrend[] = [];\n    const metrics = Object.keys(PERFORMANCE_BENCHMARKS);\n    \n    metrics.forEach(metric => {\n      const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n      \n      if (values.length > 3) {\n        const trend = this.calculateLinearTrend(values);\n        const confidence = this.calculateConfidence(values);\n        \n        trends.push({\n          metric,\n          direction: trend.slope > 0 ? 'improving' : 'degrading',\n          rate: trend.slope,\n          confidence,\n          significance: confidence > 0.8 ? 'high' : confidence > 0.5 ? 'medium' : 'low',\n          description: `${metric} ${trend.slope > 0 ? '改善' : '下降'}趋势明显`\n        });\n      }\n    });\n\n    return trends;\n  }\n\n  private static identifyCriticalIssues(dataPoints: PerformanceDataPoint[], latestMetrics: Record<string, number>): string[] {\n    const issues: string[] = [];\n\n    Object.entries(PERFORMANCE_BENCHMARKS).forEach(([categoryName, target]) => {\n      target.benchmarks.forEach(benchmark => {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (benchmark.critical && score < 50) {\n            issues.push(`${target.name}: ${benchmark.description} 严重低于目标`);\n          }\n        }\n      });\n    });\n\n    return issues;\n  }\n\n  private static generateRecommendations(dataPoints: PerformanceDataPoint[], latestMetrics: Record<string, number>): string[] {\n    const recommendations: string[] = [];\n\n    // 基于性能基准生成建议\n    Object.entries(PERFORMANCE_BENCHMARKS).forEach(([categoryName, target]) => {\n      target.benchmarks.forEach(benchmark => {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (score < 85) {\n            const recommendation = this.generateRecommendation(benchmark, value, score);\n            if (recommendation) {\n              recommendations.push(recommendation);\n            }\n          }\n        }\n      });\n    });\n\n    return recommendations.slice(0, 10);\n  }\n\n  private static generateRecommendation(benchmark: PerformanceBenchmark, value: number, score: number): string | null {\n    if (score >= 85) return null;\n\n    const improvement = benchmark.target - value;\n    const percentage = ((value - benchmark.target) / benchmark.target * 100).toFixed(1);\n\n    const recommendations: Record<string, string> = {\n      'LCP': `优化关键内容加载，减少${Math.abs(improvement).toFixed(0)}ms加载时间。启用图片优化和资源预加载。`,\n      'FID': `减少首次输入延迟，优化JavaScript执行。考虑使用Web Workers和代码分割。`,\n      'CLS': `改善布局稳定性，为动态内容预留固定空间，避免加载后插入内容。`,\n      'mobileLoadTime': `优化移动端Bundle大小，减少初始加载资源。启用Service Worker缓存和渐进式加载。`,\n      'memoryUsage': `优化内存管理，清理未使用的事件监听器和定时器。检查内存泄漏。`,\n      'averageResponseTime': `优化API响应速度，添加缓存层和数据库查询优化。`,\n      'cacheHitRate': `提升缓存命中率，优化缓存策略和过期时间设置。`\n    };\n\n    return recommendations[benchmark.metric] || \n           `${benchmark.description}需要改善${Math.abs(improvement).toFixed(0)}${benchmark.unit}（当前超标${percentage}%）`;\n  }\n\n  private static generateCategoryAnalysis(dataPoints: PerformanceDataPoint[]): CategoryAnalysis[] {\n    const latestMetrics = this.getLatestMetrics(dataPoints);\n    const analyses: CategoryAnalysis[] = [];\n\n    Object.entries(PERFORMANCE_BENCHMARKS).forEach(([categoryName, target]) => {\n      const { score, grade, details } = PerformanceScorer.calculateOverallScore(latestMetrics, target);\n      \n      const benchmarks = target.benchmarks.map(benchmark => {\n        const currentValue = latestMetrics[benchmark.metric] || 0;\n        const benchmarkScore = PerformanceScorer.calculateScore(benchmark.metric, currentValue, benchmark);\n        \n        return {\n          benchmark,\n          currentValue,\n          score: benchmarkScore,\n          percentileRank: this.calculatePercentileRank(dataPoints, benchmark.metric, currentValue),\n          trend: this.calculateSingleMetricTrend(dataPoints, benchmark.metric),\n          estimatedImprovement: this.estimateImprovement(benchmark, currentValue),\n          optimizationSuggestions: this.generateOptimizationSuggestions(benchmark, currentValue)\n        };\n      });\n\n      analyses.push({\n        category: categoryName,\n        target,\n        currentScore: score,\n        grade,\n        benchmarks,\n        improvementPotential: this.calculateImprovementPotential(latestMetrics, target),\n        priority: target.priority\n      });\n    });\n\n    return analyses;\n  }\n\n  private static generateHistoricalAnalysis(dataPoints: PerformanceDataPoint[]): HistoricalAnalysis {\n    if (dataPoints.length < 24) {\n      return {\n        timeRange: {\n          start: dataPoints[0]?.timestamp || 0,\n          end: dataPoints[dataPoints.length - 1]?.timestamp || 0,\n          duration: dataPoints.length > 1 ? dataPoints[dataPoints.length - 1].timestamp - dataPoints[0].timestamp : 0\n        },\n        dataPoints: dataPoints.length,\n        patterns: {\n          dailyPattern: null,\n          weeklyPattern: null,\n          anomalies: []\n        },\n        quality: {\n          completeness: dataPoints.length / 24,\n          consistency: 0.8,\n          reliability: 0.9\n        }\n      };\n    }\n\n    // 分析日常模式\n    const dailyPattern = this.analyzeDailyPattern(dataPoints);\n\n    // 分析周模式\n    const weeklyPattern = this.analyzeWeeklyPattern(dataPoints);\n\n    // 识别异常\n    const anomalies = this.identifyAnomalies(dataPoints);\n\n    return {\n      timeRange: {\n        start: dataPoints[0].timestamp,\n        end: dataPoints[dataPoints.length - 1].timestamp,\n        duration: dataPoints[dataPoints.length - 1].timestamp - dataPoints[0].timestamp\n      },\n      dataPoints: dataPoints.length,\n      patterns: {\n        dailyPattern,\n        weeklyPattern,\n        anomalies\n      },\n      quality: {\n        completeness: Math.min(dataPoints.length / 168, 1), // 一周的数据\n        consistency: this.calculateConsistency(dataPoints),\n        reliability: this.calculateReliability(dataPoints)\n      }\n    };\n  }\n\n  private static identifyBottlenecks(dataPoints: PerformanceDataPoint[]): BottleneckDetail[] {\n    const bottlenecks: BottleneckDetail[] = [];\n    const latestMetrics = this.getLatestMetrics(dataPoints);\n\n    // 基于相关性分析识别瓶颈\n    const correlations = this.analyzeCorrelations(dataPoints);\n\n    Object.entries(correlations).forEach(([metric, correlations]) => {\n      correlations.forEach(corr => {\n        if (Math.abs(corr.correlation) > 0.7 && corr.significance > 0.95) {\n          const value = latestMetrics[metric];\n          \n          if (value !== undefined) {\n            bottlenecks.push({\n              metric,\n              severity: this.determineSeverity(metric, value),\n              impact: `与${corr.relatedMetric}强相关，影响系统整体性能`,\n              affectedSystems: [corr.relatedMetric, metric],\n              rootCause: this.identifyRootCause(metric, corr),\n              evidence: {\n                correlation: corr.correlation,\n                statisticalSignificance: corr.significance,\n                patterns: [corr.pattern]\n              },\n              solutions: this.generateBottleneckSolutions(metric, value)\n            });\n          }\n        }\n      });\n    });\n\n    return bottlenecks.slice(0, 5); // 返回最多5个瓶颈\n  }\n\n  private static identifyOptimizationOpportunities(dataPoints: PerformanceDataPoint[]): OptimizationOpportunity[] {\n    const opportunities: OptimizationOpportunity[] = [];\n    const latestMetrics = this.getLatestMetrics(dataPoints);\n\n    // 基于性能差距识别优化机会\n    Object.entries(PERFORMANCE_BENCHMARKS).forEach(([categoryName, target]) => {\n      target.benchmarks.forEach(benchmark => {\n        const value = latestMetrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (score < 90) {\n            const opportunity = this.generateOptimizationOpportunity(benchmark, value, categoryName);\n            opportunities.push(opportunity);\n          }\n        }\n      });\n    });\n\n    // 按ROI排序\n    opportunities.sort((a, b) => b.roi - a.roi);\n\n    return opportunities.slice(0, 10);\n  }\n\n  private static forecastMetrics(dataPoints: PerformanceDataPoint[], timeframe: string): any {\n    const forecast: Record<string, any> = {};\n\n    Object.keys(PERFORMANCE_BENCHMARKS).forEach(metric => {\n      const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n      \n      if (values.length > 10) {\n        const prediction = this.linearRegressionForecast(values, this.getForecastPeriod(timeframe));\n        forecast[metric] = {\n          predicted: prediction.predicted,\n          confidence: prediction.confidence,\n          range: prediction.range\n        };\n      }\n    });\n\n    return forecast;\n  }\n\n  private static generateCapacityPlanning(dataPoints: PerformanceDataPoint[]): CapacityPlanning {\n    // 基于历史趋势预测容量需求\n    const latestMetrics = this.getLatestMetrics(dataPoints);\n    const demandProjection = this.projectDemand(dataPoints);\n    \n    return {\n      currentCapacity: 100, // 模拟当前容量\n      predictedDemand: demandProjection.predicted,\n      scalingRecommendations: {\n        immediate: ['监控系统负载', '优化缓存策略'],\n        shortTerm: ['考虑水平扩展', '升级服务器规格'],\n        longTerm: ['重构架构', '引入CDN']\n      },\n      resourceRequirements: {\n        compute: '需要增加20% CPU资源',\n        memory: '建议增加50%内存容量',\n        storage: '当前存储充足',\n        network: '考虑升级网络带宽'\n      }\n    };\n  }\n\n  private static generatePredictiveRecommendations(dataPoints: PerformanceDataPoint[]): string[] {\n    const recommendations: string[] = [];\n    const trends = this.analyzeTrends(dataPoints);\n\n    trends.forEach(trend => {\n      if (trend.direction === 'degrading' && trend.significance === 'high') {\n        recommendations.push(`预测${trend.metric}将进一步恶化，建议提前采取优化措施`);\n      }\n    });\n\n    return recommendations;\n  }\n\n  // 更多私有方法的实现...\n  private static calculateLinearTrend(values: number[]): { slope: number; intercept: number } {\n    const n = values.length;\n    const xSum = (n * (n - 1)) / 2;\n    const ySum = values.reduce((sum, val) => sum + val, 0);\n    const xySum = values.reduce((sum, val, index) => sum + val * index, 0);\n    const x2Sum = (n * (n - 1) * (2 * n - 1)) / 6;\n\n    const slope = (n * xySum - xSum * ySum) / (n * x2Sum - xSum * xSum);\n    const intercept = (ySum - slope * xSum) / n;\n\n    return { slope, intercept };\n  }\n\n  private static calculateConfidence(values: number[]): number {\n    // 简化的置信度计算\n    const variance = this.calculateVariance(values);\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const relativeVariance = variance / (mean * mean);\n    \n    return Math.max(0, Math.min(1, 1 - relativeVariance));\n  }\n\n  private static calculateVariance(values: number[]): number {\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    return values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n  }\n\n  // 更多方法... (由于篇幅限制，这里只实现核心方法)\n  private static getForecastPeriod(timeframe: string): number {\n    const periods = {\n      '1day': 24,\n      '1week': 168,\n      '1month': 720,\n      '3months': 2160\n    };\n    return periods[timeframe as keyof typeof periods] || 168;\n  }\n\n  private static linearRegressionForecast(values: number[], period: number): any {\n    const trend = this.calculateLinearTrend(values);\n    const predicted = trend.slope * (values.length + period) + trend.intercept;\n    \n    return {\n      predicted: Math.max(0, predicted),\n      confidence: this.calculateConfidence(values),\n      range: {\n        min: predicted * 0.8,\n        max: predicted * 1.2\n      }\n    };\n  }\n\n  // 其他方法的存根实现\n  private static calculatePercentileRank(dataPoints: PerformanceDataPoint[], metric: string, value: number): number {\n    const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined).sort((a, b) => a - b);\n    const rank = values.findIndex(v => v >= value) + 1;\n    return (rank / values.length) * 100;\n  }\n\n  private static calculateSingleMetricTrend(dataPoints: PerformanceDataPoint[], metric: string): PerformanceTrend {\n    const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n    if (values.length < 2) {\n      return {\n        metric,\n        direction: 'stable',\n        rate: 0,\n        confidence: 0,\n        significance: 'low',\n        description: '数据不足，无法分析趋势'\n      };\n    }\n    \n    const trend = this.calculateLinearTrend(values);\n    return {\n      metric,\n      direction: trend.slope > 0 ? 'improving' : trend.slope < 0 ? 'degrading' : 'stable',\n      rate: trend.slope,\n      confidence: this.calculateConfidence(values),\n      significance: this.calculateConfidence(values) > 0.8 ? 'high' : 'medium',\n      description: `${metric}趋势${trend.slope > 0 ? '改善' : '下降'}`\n    };\n  }\n\n  private static estimateImprovement(benchmark: PerformanceBenchmark, currentValue: number): number {\n    return Math.max(0, benchmark.target - currentValue);\n  }\n\n  private static generateOptimizationSuggestions(benchmark: PerformanceBenchmark, currentValue: number): string[] {\n    const suggestions: Record<string, string[]> = {\n      'LCP': ['优化关键资源加载', '启用图片延迟加载', '使用CDN'],\n      'FID': ['减少JavaScript执行时间', '使用Web Workers', '代码分割'],\n      'CLS': ['预留固定空间', '避免动态插入内容', '优化字体加载'],\n      'mobileLoadTime': ['减少Bundle大小', '启用压缩', '使用Service Worker'],\n      'memoryUsage': ['清理事件监听器', '优化缓存策略', '检查内存泄漏']\n    };\n    \n    return suggestions[benchmark.metric] || ['需要进一步分析'];\n  }\n\n  private static calculateImprovementPotential(metrics: Record<string, number>, target: PerformanceTarget): number {\n    let potential = 0;\n    target.benchmarks.forEach(benchmark => {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        potential += Math.max(0, benchmark.target - value) * benchmark.weight;\n      }\n    });\n    return potential;\n  }\n\n  private static analyzeDailyPattern(dataPoints: PerformanceDataPoint[]): DailyPattern | null {\n    if (dataPoints.length < 24) return null;\n    \n    // 简化的日常模式分析\n    const hourlyAverages: number[] = new Array(24).fill(0);\n    const hourlyCounts: number[] = new Array(24).fill(0);\n    \n    dataPoints.forEach(dp => {\n      const hour = new Date(dp.timestamp).getHours();\n      const loadValue = Object.values(dp.metrics)[0] || 0;\n      hourlyAverages[hour] += loadValue;\n      hourlyCounts[hour]++;\n    });\n    \n    for (let i = 0; i < 24; i++) {\n      if (hourlyCounts[i] > 0) {\n        hourlyAverages[i] /= hourlyCounts[i];\n      }\n    }\n    \n    const peakHours = hourlyAverages\n      .map((avg, hour) => ({ hour, avg }))\n      .sort((a, b) => b.avg - a.avg)\n      .slice(0, 3)\n      .map(item => item.hour);\n      \n    const lowHours = hourlyAverages\n      .map((avg, hour) => ({ hour, avg }))\n      .sort((a, b) => a.avg - b.avg)\n      .slice(0, 3)\n      .map(item => item.hour);\n    \n    return {\n      peakHours,\n      lowHours,\n      averageLoad: hourlyAverages.reduce((sum, avg) => sum + avg, 0) / 24,\n      variability: this.calculateVariance(hourlyAverages)\n    };\n  }\n\n  private static analyzeWeeklyPattern(dataPoints: PerformanceDataPoint[]): WeeklyPattern | null {\n    if (dataPoints.length < 168) return null; // 需要一周的数据\n    \n    const dailyAverages: number[] = new Array(7).fill(0);\n    const dailyCounts: number[] = new Array(7).fill(0);\n    \n    dataPoints.forEach(dp => {\n      const day = new Date(dp.timestamp).getDay();\n      const loadValue = Object.values(dp.metrics)[0] || 0;\n      dailyAverages[day] += loadValue;\n      dailyCounts[day]++;\n    });\n    \n    for (let i = 0; i < 7; i++) {\n      if (dailyCounts[i] > 0) {\n        dailyAverages[i] /= dailyCounts[i];\n      }\n    }\n    \n    const days = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n    const bestDay = days[dailyAverages.indexOf(Math.max(...dailyAverages))];\n    const worstDay = days[dailyAverages.indexOf(Math.min(...dailyAverages))];\n    \n    const weekendAvg = (dailyAverages[0] + dailyAverages[6]) / 2;\n    const weekdayAvg = dailyAverages.slice(1, 6).reduce((sum, avg) => sum + avg, 0) / 5;\n    \n    return {\n      bestDay,\n      worstDay,\n      weekendVsWeekday: weekdayAvg > 0 ? weekendAvg / weekdayAvg : 1,\n      weeklyVolatility: this.calculateVariance(dailyAverages)\n    };\n  }\n\n  private static identifyAnomalies(dataPoints: PerformanceDataPoint[]): Anomaly[] {\n    const anomalies: Anomaly[] = [];\n    const metrics = Object.keys(PERFORMANCE_BENCHMARKS);\n    \n    metrics.forEach(metric => {\n      const values = dataPoints.map(dp => dp.metrics[metric]).filter(v => v !== undefined);\n      if (values.length > 10) {\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const stdDev = Math.sqrt(this.calculateVariance(values));\n        \n        dataPoints.forEach(dp => {\n          const value = dp.metrics[metric];\n          if (value !== undefined) {\n            const zScore = Math.abs((value - mean) / stdDev);\n            if (zScore > 2) { // 2个标准差\n              anomalies.push({\n                timestamp: dp.timestamp,\n                metric,\n                severity: zScore > 3 ? 'high' : 'medium',\n                type: zScore > 0 ? 'spike' : 'drop',\n                description: `${metric}在${new Date(dp.timestamp).toISOString()}出现异常值`,\n                impact: `${metric}性能出现${zScore > 3 ? '严重' : '中等'}偏离`,\n                likelyCause: '需要进一步分析'\n              });\n            }\n          }\n        });\n      }\n    });\n    \n    return anomalies.slice(0, 20);\n  }\n\n  private static calculateConsistency(dataPoints: PerformanceDataPoint[]): number {\n    // 基于数值变化的稳定性计算\n    if (dataPoints.length < 2) return 1;\n    \n    const allValues: number[] = [];\n    dataPoints.forEach(dp => {\n      Object.values(dp.metrics).forEach(value => {\n        if (typeof value === 'number') {\n          allValues.push(value);\n        }\n      });\n    });\n    \n    return 1 - (this.calculateVariance(allValues) / Math.max(...allValues));\n  }\n\n  private static calculateReliability(dataPoints: PerformanceDataPoint[]): number {\n    // 基于数据完整性和连续性的可靠性计算\n    const timeDiff = dataPoints.length > 1 ? \n      (dataPoints[dataPoints.length - 1].timestamp - dataPoints[0].timestamp) / dataPoints.length : 0;\n    \n    const expectedInterval = 60000; // 1分钟\n    return Math.max(0, 1 - Math.abs(timeDiff - expectedInterval) / expectedInterval);\n  }\n\n  // 更多方法的实现...\n  private static analyzeCorrelations(dataPoints: PerformanceDataPoint[]): Record<string, Array<{\n    correlation: number;\n    significance: number;\n    relatedMetric: string;\n    pattern: string;\n  }>> {\n    const metrics = Object.keys(PERFORMANCE_BENCHMARKS);\n    const correlations: Record<string, any[]> = {};\n    \n    // 简化的相关性分析\n    metrics.forEach(metric => {\n      correlations[metric] = metrics\n        .filter(other => other !== metric)\n        .map(other => ({\n          correlation: Math.random() * 2 - 1, // 模拟数据\n          significance: Math.random(),\n          relatedMetric: other,\n          pattern: '正相关'\n        }));\n    });\n    \n    return correlations;\n  }\n\n  private static determineSeverity(metric: string, value: number): 'low' | 'medium' | 'high' | 'critical' {\n    const benchmark = Object.values(PERFORMANCE_BENCHMARKS)\n      .flatMap(target => target.benchmarks)\n      .find(b => b.metric === metric);\n    \n    if (!benchmark) return 'medium';\n    \n    if (value > benchmark.poor) return 'critical';\n    if (value > benchmark.acceptable) return 'high';\n    if (value > benchmark.good) return 'medium';\n    return 'low';\n  }\n\n  private static identifyRootCause(metric: string, correlation: any): string {\n    // 基于指标名称和相关性识别根本原因\n    const rootCauses: Record<string, string> = {\n      'LCP': '资源加载优化不足',\n      'FID': 'JavaScript执行阻塞',\n      'CLS': '布局不稳定',\n      'memoryUsage': '内存管理不当',\n      'averageResponseTime': '服务器性能瓶颈'\n    };\n    \n    return rootCauses[metric] || '需要进一步分析';\n  }\n\n  private static generateBottleneckSolutions(metric: string, value: number): BottleneckSolution[] {\n    const solutions: Record<string, BottleneckSolution[]> = {\n      'LCP': [\n        {\n          approach: '优化关键资源加载顺序',\n          effort: 'medium',\n          impact: 'high',\n          timeframe: '1-2周',\n          technicalComplexity: 'medium',\n          dependencies: ['CDN配置'],\n          riskLevel: 'low',\n          estimatedImprovement: 30\n        }\n      ],\n      'FID': [\n        {\n          approach: '减少主线程阻塞',\n          effort: 'high',\n          impact: 'high',\n          timeframe: '2-3周',\n          technicalComplexity: 'high',\n          dependencies: ['代码重构'],\n          riskLevel: 'medium',\n          estimatedImprovement: 25\n        }\n      ]\n    };\n    \n    return solutions[metric] || [\n      {\n        approach: '需要进一步分析',\n        effort: 'medium',\n        impact: 'medium',\n        timeframe: '1周',\n        technicalComplexity: 'medium',\n        dependencies: [],\n        riskLevel: 'low',\n        estimatedImprovement: 15\n      }\n    ];\n  }\n\n  private static generateOptimizationOpportunity(benchmark: PerformanceBenchmark, value: number, category: string): OptimizationOpportunity {\n    const currentGap = Math.max(0, value - benchmark.target);\n    const improvementPotential = (currentGap / benchmark.target) * 100;\n    \n    return {\n      category,\n      title: `优化${benchmark.description}`,\n      description: `当前${benchmark.description}为${value}${benchmark.unit}，目标为${benchmark.target}${benchmark.unit}`,\n      currentState: `${value}${benchmark.unit}`,\n      targetState: `${benchmark.target}${benchmark.unit}`,\n      effort: benchmark.weight > 20 ? 'medium' : 'low',\n      impact: improvementPotential > 50 ? 'high' : improvementPotential > 20 ? 'medium' : 'low',\n      timeframe: '1-2周',\n      roi: improvementPotential / 10, // 简化的ROI计算\n      riskLevel: 'low',\n      prerequisites: ['技术评估'],\n      implementation: ['制定优化计划', '实施改进措施', '验证效果'],\n      successMetrics: [`${benchmark.metric}低于${benchmark.target}${benchmark.unit}`]\n    };\n  }\n\n  private static projectDemand(dataPoints: PerformanceDataPoint[]): { predicted: number } {\n    // 基于历史趋势预测需求\n    const growthRate = 0.1; // 10%增长\n    const latest = this.getLatestMetrics(dataPoints);\n    const currentLoad = Object.values(latest)[0] || 100;\n    \n    return {\n      predicted: currentLoad * (1 + growthRate)\n    };\n  }\n}\n\n// 主要的PerformanceAnalyzer类\nexport class PerformanceAnalyzer {\n  private dataProcessor: PerformanceDataProcessor;\n\n  constructor() {\n    this.dataProcessor = PerformanceDataProcessor;\n  }\n\n  /**\n   * 分析性能数据\n   */\n  analyze(dataPoints: PerformanceDataPoint[]): PerformanceAnalysisResult {\n    return this.dataProcessor.analyze(dataPoints);\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generateReport(dataPoints: PerformanceDataPoint[]): string {\n    const analysis = this.analyze(dataPoints);\n    const timestamp = new Date().toISOString();\n\n    let report = `# 性能分析报告\\n\\n`;\n    report += `生成时间: ${timestamp}\\n\\n`;\n\n    // 执行摘要\n    report += `## 执行摘要\\n\\n`;\n    report += `**总体评分**: ${analysis.summary.overallScore.toFixed(1)}/100 (${analysis.summary.grade})\\n\\n`;\n    report += `**关键问题**: ${analysis.summary.criticalIssues.length}个\\n\\n`;\n    report += `**建议**: ${analysis.summary.recommendations.length}条\\n\\n`;\n\n    // 性能趋势\n    report += `## 性能趋势\\n\\n`;\n    analysis.summary.trends.forEach(trend => {\n      const emoji = trend.direction === 'improving' ? '📈' : \n                   trend.direction === 'degrading' ? '📉' : '📊';\n      report += `${emoji} **${trend.metric}**: ${trend.description}\\n`;\n    });\n    report += `\\n`;\n\n    // 详细分析\n    report += `## 详细分析\\n\\n`;\n    \n    // 类别分析\n    report += `### 各类别得分\\n\\n`;\n    analysis.detailedAnalysis.categoryAnalysis.forEach(category => {\n      report += `**${category.category}**: ${category.currentScore.toFixed(1)}分 (${category.grade})\\n`;\n    });\n    report += `\\n`;\n\n    // 瓶颈分析\n    if (analysis.detailedAnalysis.bottlenecks.length > 0) {\n      report += `### 主要瓶颈\\n\\n`;\n      analysis.detailedAnalysis.bottlenecks.forEach((bottleneck, index) => {\n        report += `${index + 1}. **${bottleneck.metric}** (${bottleneck.severity})\\n`;\n        report += `   - 影响: ${bottleneck.impact}\\n`;\n        report += `   - 根因: ${bottleneck.rootCause}\\n`;\n        report += `   - 解决方案: ${bottleneck.solutions[0]?.approach}\\n\\n`;\n      });\n    }\n\n    // 优化机会\n    if (analysis.detailedAnalysis.optimizationOpportunities.length > 0) {\n      report += `### 优化机会\\n\\n`;\n      analysis.detailedAnalysis.optimizationOpportunities.slice(0, 5).forEach((opp, index) => {\n        report += `${index + 1}. **${opp.title}** (ROI: ${opp.roi.toFixed(1)}x)\\n`;\n        report += `   - 描述: ${opp.description}\\n`;\n        report += `   - 预期收益: ${opp.targetState}\\n`;\n        report += `   - 实施时间: ${opp.timeframe}\\n\\n`;\n      });\n    }\n\n    // 可操作见解\n    if (analysis.actionableInsights.length > 0) {\n      report += `## 可操作见解\\n\\n`;\n      analysis.actionableInsights.slice(0, 5).forEach((insight, index) => {\n        const priorityEmoji = {\n          'critical': '🔴',\n          'high': '🟡',\n          'medium': '🟠',\n          'low': '🟢'\n        }[insight.priority];\n        \n        report += `${priorityEmoji} **${insight.title}**\\n`;\n        report += `   - 描述: ${insight.description}\\n`;\n        report += `   - 行动: ${insight.action}\\n`;\n        report += `   - 预期结果: ${insight.expectedOutcome}\\n`;\n        report += `   - 时间框架: ${insight.timeframe}\\n\\n`;\n      });\n    }\n\n    return report;\n  }\n\n  /**\n   * 实时性能监控\n   */\n  startRealTimeMonitoring(callback: (analysis: PerformanceAnalysisResult) => void, interval: number = 60000): () => void {\n    const dataPoints: PerformanceDataPoint[] = [];\n    \n    const collector = setInterval(() => {\n      // 收集当前性能数据\n      const currentMetrics = this.collectCurrentMetrics();\n      const dataPoint: PerformanceDataPoint = {\n        timestamp: Date.now(),\n        metrics: currentMetrics,\n        metadata: {\n          url: window.location.href,\n          userAgent: navigator.userAgent,\n          device: this.detectDeviceType(),\n          network: this.getNetworkInfo()\n        }\n      };\n      \n      dataPoints.push(dataPoint);\n      \n      // 保持最近24小时的数据\n      const cutoff = Date.now() - 24 * 60 * 60 * 1000;\n      while (dataPoints.length > 0 && dataPoints[0].timestamp < cutoff) {\n        dataPoints.shift();\n      }\n      \n      // 生成分析\n      if (dataPoints.length >= 3) {\n        const analysis = this.analyze(dataPoints);\n        callback(analysis);\n      }\n    }, interval);\n    \n    return () => clearInterval(collector);\n  }\n\n  private collectCurrentMetrics(): Record<string, number> {\n    const metrics: Record<string, number> = {};\n    \n    // 收集Core Web Vitals\n    if (typeof window !== 'undefined') {\n      // LCP (模拟数据，实际需要使用Web Vitals库)\n      const navEntries = performance.getEntriesByType('navigation');\n      if (navEntries.length > 0) {\n        metrics.LCP = navEntries[0].loadEventEnd - navEntries[0].fetchStart;\n      }\n      \n      // FCP (模拟数据)\n      const paintEntries = performance.getEntriesByType('paint');\n      const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint');\n      if (fcpEntry) {\n        metrics.FCP = fcpEntry.startTime;\n      }\n      \n      // 内存使用 (如果有权限)\n      if ('memory' in performance) {\n        metrics.memoryUsage = (performance as any).memory.usedJSHeapSize;\n      }\n    }\n    \n    return metrics;\n  }\n\n  private detectDeviceType(): string {\n    if (typeof window === 'undefined') return 'unknown';\n    \n    const width = window.innerWidth;\n    if (width < 768) return 'mobile';\n    if (width < 1024) return 'tablet';\n    return 'desktop';\n  }\n\n  private getNetworkInfo(): string {\n    if (typeof navigator !== 'undefined' && 'connection' in navigator) {\n      const connection = (navigator as any).connection;\n      return connection?.effectiveType || 'unknown';\n    }\n    return 'unknown';\n  }\n}\n\n// 导出便捷函数\nexport const createPerformanceAnalyzer = () => new PerformanceAnalyzer();\nexport const analyzePerformanceData = (data: PerformanceDataPoint[]) => \n  PerformanceDataProcessor.analyze(data);\nexport const generatePerformanceReport = (data: PerformanceDataPoint[]) =>\n  new PerformanceAnalyzer().generateReport(data);\n\nexport default PerformanceAnalyzer;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/performance-benchmarks.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":543,"column":39,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":543,"endColumn":50,"fix":{"range":[11577,11588],"text":"{return 100;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":544,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":544,"endColumn":44,"fix":{"range":[11622,11632],"text":"{return 85;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":545,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":545,"endColumn":50,"fix":{"range":[11672,11682],"text":"{return 70;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":546,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":546,"endColumn":44,"fix":{"range":[11716,11726],"text":"{return 50;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":556,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":556,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11919,11922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11919,11922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":559,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11998,12001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11998,12001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":567,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":567,"endColumn":30,"fix":{"range":[12184,13026],"text":"for (const benchmark of target.benchmarks) {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        const score = this.calculateScore(benchmark.metric, value, benchmark);\n        weightedScore += score * benchmark.weight;\n        totalWeight += benchmark.weight;\n\n        details.perBenchmarkScores[benchmark.metric] = {\n          score,\n          value,\n          target: benchmark.target,\n          unit: benchmark.unit\n        };\n\n        // 按类别分组\n        if (!categoryGroups[benchmark.category]) {\n          categoryGroups[benchmark.category] = { score: 0, weight: 0, count: 0 };\n        }\n        categoryGroups[benchmark.category].score += score * benchmark.weight;\n        categoryGroups[benchmark.category].weight += benchmark.weight;\n        categoryGroups[benchmark.category].count += 1;\n      }\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":582,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":584,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[12672,12806],"text":"categoryGroups[benchmark.category] ??= { score: 0, weight: 0, count: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":592,"column":36,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":592,"endColumn":43,"fix":{"range":[13046,13239],"text":"for (const [category, group] of Object.entries(categoryGroups)) {\n      details.categoryScores[category] = {\n        score: group.score / group.weight,\n        count: group.count\n      };\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":593,"column":7,"nodeType":"MemberExpression","endLine":593,"endColumn":39},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":609,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":609,"endColumn":34,"fix":{"range":[13522,13534],"text":"{return 'A+';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":610,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":610,"endColumn":33,"fix":{"range":[13556,13567],"text":"{return 'A';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":611,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":611,"endColumn":34,"fix":{"range":[13589,13601],"text":"{return 'B+';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":612,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":612,"endColumn":33,"fix":{"range":[13623,13634],"text":"{return 'B';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":613,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":613,"endColumn":34,"fix":{"range":[13656,13668],"text":"{return 'C+';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":614,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":614,"endColumn":33,"fix":{"range":[13690,13701],"text":"{return 'C';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":615,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":615,"endColumn":33,"fix":{"range":[13723,13734],"text":"{return 'D';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":623,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":623,"endColumn":39,"fix":{"range":[13857,13874],"text":"{return '#4CAF50';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":624,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":624,"endColumn":39,"fix":{"range":[13902,13919],"text":"{return '#FF9800';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":625,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":625,"endColumn":39,"fix":{"range":[13947,13964],"text":"{return '#FF5722';}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":641,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":641,"endColumn":20,"fix":{"range":[14349,15155],"text":"for (const target of targets) {\n      const { score } = this.calculateOverallScore(metrics, target);\n      totalScore += score;\n      targetCount++;\n\n      // 检查关键指标\n      target.benchmarks.forEach(benchmark => {\n        const value = metrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = this.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (benchmark.critical && score < 70) {\n            criticalIssues.push(`${target.name} - ${benchmark.description} 低于目标值`);\n          }\n\n          // 生成建议\n          if (score < 85) {\n            const recommendation = this.generateRecommendation(benchmark, value, score);\n            if (recommendation) {\n              recommendations.push(recommendation);\n            }\n          }\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":647,"column":25,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":647,"endColumn":32,"fix":{"range":[14517,15147],"text":"for (const benchmark of target.benchmarks) {\n        const value = metrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = this.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (benchmark.critical && score < 70) {\n            criticalIssues.push(`${target.name} - ${benchmark.description} 低于目标值`);\n          }\n\n          // 生成建议\n          if (score < 85) {\n            const recommendation = this.generateRecommendation(benchmark, value, score);\n            if (recommendation) {\n              recommendations.push(recommendation);\n            }\n          }\n        }\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":659,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":659,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15032,15046],"text":"recommendation != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15032,15046],"text":"recommendation ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15032,15046],"text":"Boolean(recommendation)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":684,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":684,"endColumn":34,"fix":{"range":[15501,15513],"text":"{return null;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":701,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":701,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16277,16310],"text":"(recommendations[benchmark.metric] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[16277,16310],"text":"(recommendations[benchmark.metric] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16277,16310],"text":"(Boolean(recommendations[benchmark.metric]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":701,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":701,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16311,16313],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":708,"column":10,"nodeType":"MemberExpression","endLine":708,"endColumn":42},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":708,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":708,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16576,16578],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":718,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":718,"endColumn":37,"fix":{"range":[17011,17028],"text":"{return benchmark;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":729,"column":42,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":729,"endColumn":49,"fix":{"range":[17220,17665],"text":"for (const [targetName, target] of Object.entries(PERFORMANCE_BENCHMARKS)) {\n    target.benchmarks.forEach(benchmark => {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n        if (score < 50) { // 分数低于50分认为是严重违规\n          violations.push(`${targetName}: ${benchmark.description} 严重低于目标值`);\n        }\n      }\n    });\n  }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":730,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":730,"endColumn":30,"fix":{"range":[17299,17659],"text":"for (const benchmark of target.benchmarks) {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n        if (score < 50) { // 分数低于50分认为是严重违规\n          violations.push(`${targetName}: ${benchmark.description} 严重低于目标值`);\n        }\n      }\n    }"}}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":16,"fixableWarningCount":6,"source":"/**\n * 性能基准配置和目标定义\n * 定义各种性能指标的目标值、阈值和评估标准\n */\n\nexport interface PerformanceBenchmark {\n  category: string;\n  metric: string;\n  description: string;\n  unit: string;\n  // 目标值\n  target: number;\n  // 优秀阈值 (绿色)\n  excellent: number;\n  // 良好阈值 (黄色)\n  good: number;\n  // 可接受阈值 (橙色)\n  acceptable: number;\n  // 不可接受阈值 (红色)\n  poor: number;\n  // 是否为关键指标\n  critical: boolean;\n  // 权重 (用于综合评分)\n  weight: number;\n  // 监控频率\n  monitoringInterval: number;\n}\n\nexport interface PerformanceTarget {\n  name: string;\n  description: string;\n  category: 'frontend' | 'backend' | 'database' | 'mobile' | 'i18n';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  benchmarks: PerformanceBenchmark[];\n  overallTarget: number; // 0-100\n}\n\nexport interface DeviceProfile {\n  name: string;\n  type: 'mobile' | 'tablet' | 'desktop';\n  characteristics: {\n    cpuCores: number;\n    memory: number; // GB\n    network: 'slow-3g' | 'fast-3g' | '4g' | 'wifi';\n    viewport: {\n      width: number;\n      height: number;\n    };\n    pixelRatio: number;\n  };\n  performanceTargets: Partial<Record<string, number>>;\n}\n\n// 性能基准配置\nexport const PERFORMANCE_BENCHMARKS: Record<string, PerformanceTarget> = {\n  // 前端性能目标\n  frontendCoreWebVitals: {\n    name: '核心Web性能指标',\n    description: 'Google Core Web Vitals - 影响搜索排名的关键指标',\n    category: 'frontend',\n    priority: 'critical',\n    overallTarget: 85,\n    benchmarks: [\n      {\n        category: '加载性能',\n        metric: 'LCP',\n        description: '最大内容绘制时间',\n        unit: 'ms',\n        target: 2500,\n        excellent: 1200,\n        good: 2500,\n        acceptable: 4000,\n        poor: 10000,\n        critical: true,\n        weight: 30,\n        monitoringInterval: 5000\n      },\n      {\n        category: '交互性能',\n        metric: 'FID',\n        description: '首次输入延迟',\n        unit: 'ms',\n        target: 100,\n        excellent: 50,\n        good: 100,\n        acceptable: 300,\n        poor: 1000,\n        critical: true,\n        weight: 25,\n        monitoringInterval: 1000\n      },\n      {\n        category: '视觉稳定性',\n        metric: 'CLS',\n        description: '累计布局偏移',\n        unit: '',\n        target: 0.1,\n        excellent: 0.05,\n        good: 0.1,\n        acceptable: 0.25,\n        poor: 0.5,\n        critical: true,\n        weight: 20,\n        monitoringInterval: 2000\n      },\n      {\n        category: '加载性能',\n        metric: 'FCP',\n        description: '首次内容绘制',\n        unit: 'ms',\n        target: 1800,\n        excellent: 1000,\n        good: 1800,\n        acceptable: 3000,\n        poor: 5000,\n        critical: false,\n        weight: 15,\n        monitoringInterval: 5000\n      },\n      {\n        category: '交互性能',\n        metric: 'TTI',\n        description: '可交互时间',\n        unit: 'ms',\n        target: 3800,\n        excellent: 2000,\n        good: 3800,\n        acceptable: 7300,\n        poor: 10000,\n        critical: false,\n        weight: 10,\n        monitoringInterval: 10000\n      }\n    ]\n  },\n\n  // 移动端性能目标\n  mobilePerformance: {\n    name: '移动端性能',\n    description: '针对移动设备的性能优化指标',\n    category: 'mobile',\n    priority: 'high',\n    overallTarget: 80,\n    benchmarks: [\n      {\n        category: '加载性能',\n        metric: 'mobileLoadTime',\n        description: '移动端页面加载时间',\n        unit: 'ms',\n        target: 3000,\n        excellent: 1500,\n        good: 3000,\n        acceptable: 5000,\n        poor: 10000,\n        critical: true,\n        weight: 35,\n        monitoringInterval: 10000\n      },\n      {\n        category: '内存使用',\n        metric: 'memoryUsage',\n        description: '移动端内存使用',\n        unit: 'MB',\n        target: 80,\n        excellent: 40,\n        good: 80,\n        acceptable: 150,\n        poor: 300,\n        critical: true,\n        weight: 25,\n        monitoringInterval: 5000\n      },\n      {\n        category: '交互性能',\n        metric: 'touchResponse',\n        description: '触摸响应时间',\n        unit: 'ms',\n        target: 100,\n        excellent: 50,\n        good: 100,\n        acceptable: 200,\n        poor: 500,\n        critical: true,\n        weight: 20,\n        monitoringInterval: 1000\n      },\n      {\n        category: '电池优化',\n        metric: 'batteryDrain',\n        description: '电池消耗率',\n        unit: '%/hour',\n        target: 5,\n        excellent: 2,\n        good: 5,\n        acceptable: 10,\n        poor: 20,\n        critical: false,\n        weight: 10,\n        monitoringInterval: 60000\n      },\n      {\n        category: '网络优化',\n        metric: 'dataUsage',\n        description: '网络数据使用',\n        unit: 'MB',\n        target: 2,\n        excellent: 0.5,\n        good: 2,\n        acceptable: 5,\n        poor: 10,\n        critical: false,\n        weight: 10,\n        monitoringInterval: 30000\n      }\n    ]\n  },\n\n  // 国际化性能目标\n  i18nPerformance: {\n    name: '国际化性能',\n    description: '多语言和国际化功能性能指标',\n    category: 'i18n',\n    priority: 'high',\n    overallTarget: 85,\n    benchmarks: [\n      {\n        category: '翻译加载',\n        metric: 'translationLoadTime',\n        description: '翻译文件加载时间',\n        unit: 'ms',\n        target: 200,\n        excellent: 100,\n        good: 200,\n        acceptable: 500,\n        poor: 1000,\n        critical: true,\n        weight: 30,\n        monitoringInterval: 2000\n      },\n      {\n        category: '缓存效率',\n        metric: 'cacheHitRate',\n        description: '翻译缓存命中率',\n        unit: '%',\n        target: 85,\n        excellent: 95,\n        good: 85,\n        acceptable: 70,\n        poor: 50,\n        critical: true,\n        weight: 25,\n        monitoringInterval: 5000\n      },\n      {\n        category: '语言切换',\n        metric: 'languageSwitchTime',\n        description: '语言切换响应时间',\n        unit: 'ms',\n        target: 150,\n        excellent: 80,\n        good: 150,\n        acceptable: 300,\n        poor: 600,\n        critical: false,\n        weight: 20,\n        monitoringInterval: 1000\n      },\n      {\n        category: '搜索性能',\n        metric: 'multilingualSearchTime',\n        description: '多语言搜索响应时间',\n        unit: 'ms',\n        target: 100,\n        excellent: 50,\n        good: 100,\n        acceptable: 200,\n        poor: 500,\n        critical: false,\n        weight: 15,\n        monitoringInterval: 3000\n      },\n      {\n        category: '预加载效率',\n        metric: 'preloadAccuracy',\n        description: '预加载准确率',\n        unit: '%',\n        target: 80,\n        excellent: 95,\n        good: 80,\n        acceptable: 60,\n        poor: 40,\n        critical: false,\n        weight: 10,\n        monitoringInterval: 10000\n      }\n    ]\n  },\n\n  // 后端API性能目标\n  apiPerformance: {\n    name: 'API性能',\n    description: '后端API接口性能指标',\n    category: 'backend',\n    priority: 'high',\n    overallTarget: 90,\n    benchmarks: [\n      {\n        category: '响应时间',\n        metric: 'averageResponseTime',\n        description: 'API平均响应时间',\n        unit: 'ms',\n        target: 200,\n        excellent: 100,\n        good: 200,\n        acceptable: 500,\n        poor: 1000,\n        critical: true,\n        weight: 35,\n        monitoringInterval: 1000\n      },\n      {\n        category: '并发处理',\n        metric: 'maxConcurrentRequests',\n        description: '最大并发请求数',\n        unit: 'req/s',\n        target: 1000,\n        excellent: 2000,\n        good: 1000,\n        acceptable: 500,\n        poor: 100,\n        critical: true,\n        weight: 25,\n        monitoringInterval: 5000\n      },\n      {\n        category: '可用性',\n        metric: 'availability',\n        description: '服务可用性',\n        unit: '%',\n        target: 99.9,\n        excellent: 99.99,\n        good: 99.9,\n        acceptable: 99.0,\n        poor: 95.0,\n        critical: true,\n        weight: 20,\n        monitoringInterval: 60000\n      },\n      {\n        category: '错误率',\n        metric: 'errorRate',\n        description: 'API错误率',\n        unit: '%',\n        target: 1.0,\n        excellent: 0.1,\n        good: 1.0,\n        acceptable: 3.0,\n        poor: 10.0,\n        critical: true,\n        weight: 15,\n        monitoringInterval: 1000\n      },\n      {\n        category: '吞吐量',\n        metric: 'throughput',\n        description: '系统吞吐量',\n        unit: 'req/s',\n        target: 500,\n        excellent: 1000,\n        good: 500,\n        acceptable: 200,\n        poor: 50,\n        critical: false,\n        weight: 5,\n        monitoringInterval: 5000\n      }\n    ]\n  },\n\n  // 数据库性能目标\n  databasePerformance: {\n    name: '数据库性能',\n    description: '数据库查询和操作性能指标',\n    category: 'database',\n    priority: 'high',\n    overallTarget: 85,\n    benchmarks: [\n      {\n        category: '查询性能',\n        metric: 'averageQueryTime',\n        description: '平均查询时间',\n        unit: 'ms',\n        target: 100,\n        excellent: 50,\n        good: 100,\n        acceptable: 200,\n        poor: 500,\n        critical: true,\n        weight: 30,\n        monitoringInterval: 1000\n      },\n      {\n        category: '连接池',\n        metric: 'connectionPoolUtilization',\n        description: '连接池利用率',\n        unit: '%',\n        target: 70,\n        excellent: 50,\n        good: 70,\n        acceptable: 85,\n        poor: 95,\n        critical: true,\n        weight: 25,\n        monitoringInterval: 5000\n      },\n      {\n        category: '缓存效率',\n        metric: 'cacheEfficiency',\n        description: '数据库缓存效率',\n        unit: '%',\n        target: 80,\n        excellent: 95,\n        good: 80,\n        acceptable: 60,\n        poor: 40,\n        critical: false,\n        weight: 20,\n        monitoringInterval: 10000\n      },\n      {\n        category: '并发处理',\n        metric: 'concurrentQueries',\n        description: '并发查询处理',\n        unit: 'queries',\n        target: 50,\n        excellent: 100,\n        good: 50,\n        acceptable: 25,\n        poor: 10,\n        critical: false,\n        weight: 15,\n        monitoringInterval: 5000\n      },\n      {\n        category: '锁等待',\n        metric: 'lockWaitTime',\n        description: '锁等待时间',\n        unit: 'ms',\n        target: 10,\n        excellent: 5,\n        good: 10,\n        acceptable: 50,\n        poor: 200,\n        critical: false,\n        weight: 10,\n        monitoringInterval: 2000\n      }\n    ]\n  }\n};\n\n// 设备配置\nexport const DEVICE_PROFILES: Record<string, DeviceProfile> = {\n  // 高端移动设备\n  highEndMobile: {\n    name: '高端移动设备',\n    type: 'mobile',\n    characteristics: {\n      cpuCores: 8,\n      memory: 4,\n      network: '4g',\n      viewport: { width: 390, height: 844 },\n      pixelRatio: 3\n    },\n    performanceTargets: {\n      mobileLoadTime: 2000,\n      touchResponse: 80,\n      memoryUsage: 60\n    }\n  },\n\n  // 中端移动设备\n  midRangeMobile: {\n    name: '中端移动设备',\n    type: 'mobile',\n    characteristics: {\n      cpuCores: 4,\n      memory: 2,\n      network: 'fast-3g',\n      viewport: { width: 375, height: 667 },\n      pixelRatio: 2\n    },\n    performanceTargets: {\n      mobileLoadTime: 3000,\n      touchResponse: 100,\n      memoryUsage: 80\n    }\n  },\n\n  // 低端移动设备\n  lowEndMobile: {\n    name: '低端移动设备',\n    type: 'mobile',\n    characteristics: {\n      cpuCores: 2,\n      memory: 1,\n      network: 'slow-3g',\n      viewport: { width: 360, height: 640 },\n      pixelRatio: 2\n    },\n    performanceTargets: {\n      mobileLoadTime: 5000,\n      touchResponse: 150,\n      memoryUsage: 120\n    }\n  },\n\n  // 桌面设备\n  desktop: {\n    name: '桌面设备',\n    type: 'desktop',\n    characteristics: {\n      cpuCores: 8,\n      memory: 8,\n      network: 'wifi',\n      viewport: { width: 1920, height: 1080 },\n      pixelRatio: 1\n    },\n    performanceTargets: {\n      loadTime: 2000,\n      averageResponseTime: 150,\n      memoryUsage: 100\n    }\n  }\n};\n\n// 性能评分计算器\nexport class PerformanceScorer {\n  /**\n   * 计算性能分数\n   */\n  static calculateScore(metric: string, value: number, benchmark: PerformanceBenchmark): number {\n    if (value <= benchmark.excellent) return 100;\n    if (value <= benchmark.good) return 85;\n    if (value <= benchmark.acceptable) return 70;\n    if (value <= benchmark.poor) return 50;\n    return 25;\n  }\n\n  /**\n   * 计算综合性能分数\n   */\n  static calculateOverallScore(\n    metrics: Record<string, number>, \n    target: PerformanceTarget\n  ): { score: number; grade: string; details: any } {\n    let totalWeight = 0;\n    let weightedScore = 0;\n    const details: any = {\n      perBenchmarkScores: {},\n      categoryScores: {}\n    };\n\n    // 按类别分组\n    const categoryGroups: Record<string, { score: number; weight: number; count: number }> = {};\n\n    target.benchmarks.forEach(benchmark => {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        const score = this.calculateScore(benchmark.metric, value, benchmark);\n        weightedScore += score * benchmark.weight;\n        totalWeight += benchmark.weight;\n\n        details.perBenchmarkScores[benchmark.metric] = {\n          score,\n          value,\n          target: benchmark.target,\n          unit: benchmark.unit\n        };\n\n        // 按类别分组\n        if (!categoryGroups[benchmark.category]) {\n          categoryGroups[benchmark.category] = { score: 0, weight: 0, count: 0 };\n        }\n        categoryGroups[benchmark.category].score += score * benchmark.weight;\n        categoryGroups[benchmark.category].weight += benchmark.weight;\n        categoryGroups[benchmark.category].count += 1;\n      }\n    });\n\n    // 计算类别分数\n    Object.entries(categoryGroups).forEach(([category, group]) => {\n      details.categoryScores[category] = {\n        score: group.score / group.weight,\n        count: group.count\n      };\n    });\n\n    const overallScore = totalWeight > 0 ? weightedScore / totalWeight : 0;\n    const grade = this.calculateGrade(overallScore);\n\n    return { score: overallScore, grade, details };\n  }\n\n  /**\n   * 获取性能等级\n   */\n  static calculateGrade(score: number): string {\n    if (score >= 90) return 'A+';\n    if (score >= 85) return 'A';\n    if (score >= 80) return 'B+';\n    if (score >= 75) return 'B';\n    if (score >= 70) return 'C+';\n    if (score >= 65) return 'C';\n    if (score >= 60) return 'D';\n    return 'F';\n  }\n\n  /**\n   * 获取性能状态颜色\n   */\n  static getPerformanceColor(score: number): string {\n    if (score >= 85) return '#4CAF50'; // 绿色\n    if (score >= 70) return '#FF9800'; // 橙色\n    if (score >= 50) return '#FF5722'; // 深橙色\n    return '#F44336'; // 红色\n  }\n\n  /**\n   * 生成性能报告摘要\n   */\n  static generateSummary(\n    metrics: Record<string, number>,\n    targets: PerformanceTarget[]\n  ): { overallScore: number; criticalIssues: string[]; recommendations: string[] } {\n    let totalScore = 0;\n    let targetCount = 0;\n    const criticalIssues: string[] = [];\n    const recommendations: string[] = [];\n\n    targets.forEach(target => {\n      const { score } = this.calculateOverallScore(metrics, target);\n      totalScore += score;\n      targetCount++;\n\n      // 检查关键指标\n      target.benchmarks.forEach(benchmark => {\n        const value = metrics[benchmark.metric];\n        if (value !== undefined) {\n          const score = this.calculateScore(benchmark.metric, value, benchmark);\n          \n          if (benchmark.critical && score < 70) {\n            criticalIssues.push(`${target.name} - ${benchmark.description} 低于目标值`);\n          }\n\n          // 生成建议\n          if (score < 85) {\n            const recommendation = this.generateRecommendation(benchmark, value, score);\n            if (recommendation) {\n              recommendations.push(recommendation);\n            }\n          }\n        }\n      });\n    });\n\n    const overallScore = targetCount > 0 ? totalScore / targetCount : 0;\n\n    return {\n      overallScore,\n      criticalIssues,\n      recommendations\n    };\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private static generateRecommendation(\n    benchmark: PerformanceBenchmark,\n    value: number,\n    score: number\n  ): string | null {\n    if (score >= 85) return null;\n\n    const improvement = benchmark.target - value;\n    const percentage = ((value - benchmark.target) / benchmark.target * 100).toFixed(1);\n\n    const recommendations: Record<string, string> = {\n      'LCP': `优化关键资源加载，减少${Math.abs(improvement).toFixed(0)}ms加载时间。考虑启用代码分割、资源预加载和图片优化。`,\n      'FID': `减少主线程阻塞，优化JavaScript执行时间。建议使用Web Workers和代码分割。`,\n      'CLS': `改善布局稳定性，为动态内容预留空间，避免在页面加载后插入内容。`,\n      'mobileLoadTime': `优化移动端Bundle大小，减少初始加载内容。考虑使用Service Worker缓存和预取策略。`,\n      'memoryUsage': `优化内存使用，避免内存泄漏。检查未清理的事件监听器和定时器。`,\n      'touchResponse': `优化触摸事件处理，减少UI线程阻塞时间。`,\n      'translationLoadTime': `优化翻译文件加载策略，增加缓存时间和预加载机制。`,\n      'cacheHitRate': `提高缓存命中率，减少网络请求。优化缓存策略和TTL设置。`,\n      'averageResponseTime': `优化API响应时间，检查数据库查询和服务器处理逻辑。`\n    };\n\n    return recommendations[benchmark.metric] || \n           `${benchmark.description}需要改善${Math.abs(improvement).toFixed(0)}${benchmark.unit}，当前比目标值高${percentage}%`;\n  }\n}\n\n// 导出便捷函数\nexport const getTargetByCategory = (category: string): PerformanceTarget | null => {\n  return PERFORMANCE_BENCHMARKS[category] || null;\n};\n\nexport const getTargetsByPriority = (priority: string): PerformanceTarget[] => {\n  return Object.values(PERFORMANCE_BENCHMARKS).filter(target => target.priority === priority);\n};\n\nexport const getBenchmarkByMetric = (metric: string): PerformanceBenchmark | null => {\n  for (const target of Object.values(PERFORMANCE_BENCHMARKS)) {\n    const benchmark = target.benchmarks.find(b => b.metric === metric);\n    if (benchmark) return benchmark;\n  }\n  return null;\n};\n\nexport const validatePerformanceTargets = (metrics: Record<string, number>): {\n  valid: boolean;\n  violations: string[];\n} => {\n  const violations: string[] = [];\n  \n  Object.entries(PERFORMANCE_BENCHMARKS).forEach(([targetName, target]) => {\n    target.benchmarks.forEach(benchmark => {\n      const value = metrics[benchmark.metric];\n      if (value !== undefined) {\n        const score = PerformanceScorer.calculateScore(benchmark.metric, value, benchmark);\n        if (score < 50) { // 分数低于50分认为是严重违规\n          violations.push(`${targetName}: ${benchmark.description} 严重低于目标值`);\n        }\n      }\n    });\n  });\n\n  return {\n    valid: violations.length === 0,\n    violations\n  };\n};\n\nexport default PERFORMANCE_BENCHMARKS;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/performance-monitor.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'translationLoader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'translationLoader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'NamespaceManager' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NamespaceManager' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1711,1714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1711,1714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":217,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":217,"endColumn":50},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":227,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":227,"endColumn":35,"fix":{"range":[5460,5467],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":243,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":243,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5840,5865],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":256,"column":20,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":256,"endColumn":27,"fix":{"range":[6050,6108],"text":"for (const observer of this.observers) observer.disconnect();"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6139,6164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":266,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":266,"endColumn":47,"fix":{"range":[6280,6287],"text":"{return;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":271,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":271,"endColumn":22,"fix":{"range":[6410,6582],"text":"for (const entry of entries) {\n        if (entry.entryType === 'navigation') {\n          this.recordNavigationMetrics(entry as PerformanceNavigationTiming);\n        }\n      }"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":281,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6733,6783],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":288,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":288,"endColumn":22,"fix":{"range":[6914,6990],"text":"for (const entry of entries) {\n        this.recordPaintMetrics(entry);\n      }"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":296,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7136,7181],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":312,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":312,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":313,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":313,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7589,7632],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":321,"column":70,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":321,"endColumn":77,"fix":{"range":[7785,7792],"text":"{return;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7859,7862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7859,7862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":333,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":333,"endColumn":47,"fix":{"range":[8060,8067],"text":"{return;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":337,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":337,"endColumn":22,"fix":{"range":[8180,8345],"text":"for (const entry of entries) {\n        if (entry.entryType === 'resource') {\n          this.recordNetworkMetrics(entry as PerformanceResourceTiming);\n        }\n      }"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":347,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":347,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8498,8545],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":358,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":358,"endColumn":47,"fix":{"range":[8697,8704],"text":"{return;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":374,"column":17,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":374,"endColumn":24,"fix":{"range":[9076,9223],"text":"for (const entry of entries) {\n          if (entry.name.includes('/locales/')) {\n            this.recordTranslationLoad(entry);\n          }\n        }"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":384,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":384,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9390,9450],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9581,9783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":404,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":404,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9879,9937],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":411,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":411,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10032,10076],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":417,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":417,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10148,10151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10148,10151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":421,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":421,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10302,10364],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":421,"column":32,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":421,"endColumn":67,"fix":{"range":[10327,10362],"text":"`${memoryUsagePercent.toFixed(1)  }%`"}},{"ruleId":"no-unused-vars","severity":2,"message":"'size' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":430,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":430,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'size' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":430,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":430,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":433,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":433,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10626,10682],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":433,"column":46,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":433,"endColumn":61,"fix":{"range":[10665,10680],"text":"`${duration  }ms`"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":441,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":441,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10789,10859],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":441,"column":52,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":441,"endColumn":73,"fix":{"range":[10836,10857],"text":"`${entry.duration  }ms`"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11261,11314],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":458,"column":47,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":458,"endColumn":62,"fix":{"range":[11297,11312],"text":"`${duration  }ms`"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11391,11428],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":484,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":484,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11856,11902],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":484,"column":33,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":484,"endColumn":55,"fix":{"range":[11878,11900],"text":"`${fps.toFixed(1)  }fps`"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":503,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":503,"endColumn":22,"fix":{"range":[12274,12424],"text":"for (const entry of entries) {\n        if (entry.duration > 50) {\n          console.warn('检测到长任务:', entry.duration.toFixed(2) + 'ms');\n        }\n      }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":505,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":505,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12346,12404],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":505,"column":35,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":505,"endColumn":67,"fix":{"range":[12370,12402],"text":"`${entry.duration.toFixed(2)  }ms`"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":513,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":513,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12579,12628],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":526,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":526,"endColumn":22,"fix":{"range":[12842,12983],"text":"for (const entry of entries) {\n        if (!(entry as any).hadRecentInput) {\n          totalCLS += (entry as any).value || 0;\n        }\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":527,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":527,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12882,12911],"text":"(Boolean((entry as any).hadRecentInput))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":527,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":527,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12892,12895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12892,12895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":528,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":528,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12937,12957],"text":"(Boolean((entry as any).value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12947,12950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12947,12950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":528,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":528,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12958,12960],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":533,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":533,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[13028,13073],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":540,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":540,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[13230,13273],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":557,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":557,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13538,13541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13538,13541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":558,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13588,13591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13588,13591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":571,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":571,"endColumn":48,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[13917,13943],"text":"(Boolean((memoryInfo?.usedJSHeapSize)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":571,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":571,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13944,13946],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":579,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":579,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14147,14173],"text":"(Boolean((memoryInfo?.usedJSHeapSize)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":579,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":579,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14174,14176],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":580,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":580,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14205,14232],"text":"(Boolean((memoryInfo?.totalJSHeapSize)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":580,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":580,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14233,14235],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":581,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":581,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14264,14291],"text":"(Boolean((memoryInfo?.jsHeapSizeLimit)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":581,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":581,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14292,14294],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":594,"column":31,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":594,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14633,14643],"text":"(Boolean(connection))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":594,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":594,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[14646,14665],"text":"(Boolean(connection.downlink))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":594,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":594,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14666,14668],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":736,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":736,"endColumn":19,"fix":{"range":[18336,19618],"text":"for (const issue of issues) {\n      switch (issue.metric) {\n        case 'loadTime':\n          recommendations.push({\n            priority: 'high',\n            category: '性能优化',\n            title: '优化页面加载速度',\n            description: '启用代码分割、懒加载和预取关键资源',\n            estimatedImpact: '减少30-50%加载时间',\n            implementation: '使用dynamic import和next/link预取，启用Bundle分析',\n            estimatedImprovement: 40,\n            effort: 'medium'\n          });\n          break;\n          \n        case 'memoryUsage':\n          recommendations.push({\n            priority: 'medium',\n            category: '内存优化',\n            title: '优化内存使用',\n            description: '减少内存泄漏和优化垃圾回收',\n            estimatedImpact: '减少20-30%内存使用',\n            implementation: '及时清理事件监听器，使用WeakMap，优化缓存策略',\n            estimatedImprovement: 25,\n            effort: 'low'\n          });\n          break;\n          \n        case 'cacheHitRate':\n          recommendations.push({\n            priority: 'medium',\n            category: '缓存优化',\n            title: '提高翻译缓存命中率',\n            description: '优化缓存策略和预加载机制',\n            estimatedImpact: '提高25%缓存命中率',\n            implementation: '增加缓存时间，优化预加载算法，减少缓存清理',\n            estimatedImprovement: 25,\n            effort: 'low'\n          });\n          break;\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":801,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":801,"endColumn":19,"fix":{"range":[20155,20476],"text":"for (const issue of issues) {\n      switch (issue.severity) {\n        case 'critical':\n          score -= 25;\n          break;\n        case 'high':\n          score -= 15;\n          break;\n        case 'medium':\n          score -= 10;\n          break;\n        case 'low':\n          score -= 5;\n          break;\n      }\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'score' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":835,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":835,"endColumn":14},{"ruleId":"prefer-const","severity":2,"message":"'score' is never reassigned. Use 'const' instead.","line":835,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":835,"endColumn":14,"fix":{"range":[20995,21011],"text":"const score = 100;"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'score' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":835,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":835,"endColumn":14},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":882,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":882,"endColumn":33,"fix":{"range":[22074,22085],"text":"{return 'A';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":883,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":883,"endColumn":33,"fix":{"range":[22107,22118],"text":"{return 'B';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":884,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":884,"endColumn":33,"fix":{"range":[22140,22151],"text":"{return 'C';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":885,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":885,"endColumn":33,"fix":{"range":[22173,22184],"text":"{return 'D';}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":947,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":947,"endColumn":71,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[23681,23717],"text":"(this.config.alertThresholds.loadTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[23681,23717],"text":"(this.config.alertThresholds.loadTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[23681,23717],"text":"(Boolean(this.config.alertThresholds.loadTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":947,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":947,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23718,23720],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":952,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":952,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[23858,23894],"text":"(this.config.alertThresholds.loadTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[23858,23894],"text":"(this.config.alertThresholds.loadTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[23858,23894],"text":"(Boolean(this.config.alertThresholds.loadTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":952,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":952,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23895,23897],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":993,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":993,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24657,24682],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":16,"fixableWarningCount":9,"source":"/**\n * 综合性能监控和调试工具\n * 提供实时性能指标监控、内存使用情况监控、网络请求优化分析等功能\n */\n\nimport { translationLoader } from './translation-loader';\nimport { NamespaceManager } from './namespace-manager';\n\n// 基础性能指标接口\nexport interface CoreMetrics {\n  // 加载性能\n  loadTime: number;\n  domContentLoaded: number;\n  firstPaint: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  timeToInteractive: number;\n  \n  // 翻译特定指标\n  translationLoadTime: number;\n  cacheHitRate: number;\n  memoryUsage: number;\n  networkRequests: number;\n  compressionRatio: number;\n  preloadAccuracy: number;\n  errorRate: number;\n  userSatisfactionScore: number;\n}\n\n// 内存指标接口\nexport interface MemoryMetrics {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n  gcCollections: number;\n  gcTime: number;\n  translationCacheSize: number;\n  activeNamespaces: number;\n}\n\n// 网络指标接口\nexport interface NetworkMetrics {\n  totalRequests: number;\n  cachedRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  totalTransferSize: number;\n  compressionRatio: number;\n  bandwidthUtilization: number;\n}\n\n// 渲染性能指标接口\nexport interface RenderingMetrics {\n  frameRate: number;\n  droppedFrames: number;\n  renderTime: number;\n  paintTime: number;\n  compositeTime: number;\n  longTasks: number;\n}\n\n// 用户体验指标接口\nexport interface UXMetrics {\n  interactionLatency: number;\n  scrollJank: number;\n  inputDelay: number;\n  totalBlockingTime: number;\n  cumulativeLayoutShift: number;\n  bounceRate: number;\n}\n\n// 性能快照接口\nexport interface PerformanceSnapshot {\n  timestamp: number;\n  core: CoreMetrics;\n  memory: MemoryMetrics;\n  network: NetworkMetrics;\n  rendering: RenderingMetrics;\n  userExperience: UXMetrics;\n  translationMetrics?: any;\n}\n\n// 性能问题接口\nexport interface PerformanceIssue {\n  category: 'performance' | 'memory' | 'network' | 'rendering' | 'ux' | 'translation';\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  metric: string;\n  currentValue: number;\n  threshold: number;\n  description: string;\n  impact: string;\n}\n\n// 优化建议接口\nexport interface OptimizationRecommendation {\n  priority: 'high' | 'medium' | 'low';\n  category: string;\n  title: string;\n  description: string;\n  estimatedImpact: string;\n  implementation: string;\n  estimatedImprovement: number;\n  effort: 'low' | 'medium' | 'high';\n}\n\n// 综合性能报告接口\nexport interface ComprehensivePerformanceReport {\n  overallScore: number;\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\n  snapshot: PerformanceSnapshot;\n  issues: PerformanceIssue[];\n  recommendations: OptimizationRecommendation[];\n  trends: PerformanceTrend[];\n  alerts: PerformanceAlert[];\n  mobileOptimizationScore: number;\n  bundleSizeAnalysis: BundleAnalysis;\n}\n\n// 性能趋势接口\nexport interface PerformanceTrend {\n  metric: string;\n  direction: 'improving' | 'stable' | 'degrading';\n  changeRate: number;\n  confidence: number;\n}\n\n// 性能警报接口\nexport interface PerformanceAlert {\n  id: string;\n  level: 'warning' | 'critical';\n  metric: string;\n  threshold: number;\n  currentValue: number;\n  timestamp: number;\n  message: string;\n  recommendations: string[];\n}\n\n// Bundle分析接口\nexport interface BundleAnalysis {\n  totalSize: number;\n  compressedSize: number;\n  chunkCount: number;\n  lazyLoadableChunks: string[];\n  treeShakingOpportunities: string[];\n  codeSplittingSuggestions: string[];\n}\n\n// 监控配置接口\nexport interface MonitoringConfig {\n  enabled: boolean;\n  interval: number;\n  retentionDays: number;\n  alertThresholds: Partial<CoreMetrics>;\n  enableRealTimeMonitoring: boolean;\n  enableUserTracking: boolean;\n  enableBundleAnalysis: boolean;\n  enableMobileOptimization: boolean;\n}\n\n// 综合性能监控器类\nexport class ComprehensivePerformanceMonitor {\n  private static instance: ComprehensivePerformanceMonitor;\n  private snapshots: PerformanceSnapshot[] = [];\n  private isMonitoring = false;\n  private observers: PerformanceObserver[] = [];\n  private monitoringInterval?: NodeJS.Timeout;\n  private config: MonitoringConfig;\n  private baselines: CoreMetrics;\n  private startTime = Date.now();\n\n  // 默认基线性能指标\n  private defaultBaselines: CoreMetrics = {\n    loadTime: 3000, // 3秒\n    domContentLoaded: 2000, // 2秒\n    firstPaint: 1000, // 1秒\n    firstContentfulPaint: 1500, // 1.5秒\n    largestContentfulPaint: 2500, // 2.5秒\n    timeToInteractive: 3800, // 3.8秒\n    translationLoadTime: 200, // 200ms\n    cacheHitRate: 0.85, // 85%\n    memoryUsage: 50 * 1024 * 1024, // 50MB\n    networkRequests: 20,\n    compressionRatio: 0.7,\n    preloadAccuracy: 0.8,\n    errorRate: 0.02, // 2%\n    userSatisfactionScore: 85\n  };\n\n  constructor(config: Partial<MonitoringConfig> = {}) {\n    this.config = {\n      enabled: true,\n      interval: 5000,\n      retentionDays: 7,\n      alertThresholds: {\n        loadTime: 4000,\n        translationLoadTime: 300,\n        memoryUsage: 80 * 1024 * 1024,\n        errorRate: 0.05,\n        cacheHitRate: 0.7\n      },\n      enableRealTimeMonitoring: true,\n      enableUserTracking: true,\n      enableBundleAnalysis: true,\n      enableMobileOptimization: true,\n      ...config,\n    };\n    \n    this.baselines = { ...this.defaultBaselines };\n    \n    if (this.config.enabled) {\n      this.startMonitoring();\n    }\n  }\n\n  static getInstance(): ComprehensivePerformanceMonitor {\n    if (!ComprehensivePerformanceMonitor.instance) {\n      ComprehensivePerformanceMonitor.instance = new ComprehensivePerformanceMonitor();\n    }\n    return ComprehensivePerformanceMonitor.instance;\n  }\n\n  /**\n   * 开始性能监控\n   */\n  startMonitoring(): void {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n\n    // 初始化各类监控\n    this.initializeCoreMetrics();\n    this.initializeMemoryMonitoring();\n    this.initializeNetworkMonitoring();\n    this.initializeRenderingMonitoring();\n    this.initializeTranslationMetrics();\n\n    // 定期收集指标\n    this.monitoringInterval = setInterval(() => {\n      this.collectMetrics();\n    }, this.config.interval);\n\n    console.log('综合性能监控已启动');\n  }\n\n  /**\n   * 停止性能监控\n   */\n  stopMonitoring(): void {\n    this.isMonitoring = false;\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n\n    console.log('综合性能监控已停止');\n  }\n\n  /**\n   * 初始化核心性能指标监控\n   */\n  private initializeCoreMetrics(): void {\n    if (typeof window === 'undefined') return;\n\n    // 监控导航时间\n    const navObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach(entry => {\n        if (entry.entryType === 'navigation') {\n          this.recordNavigationMetrics(entry as PerformanceNavigationTiming);\n        }\n      });\n    });\n    \n    try {\n      navObserver.observe({ entryTypes: ['navigation'] });\n      this.observers.push(navObserver);\n    } catch (error) {\n      console.warn('Navigation observer not supported');\n    }\n\n    // 监控绘制时间\n    const paintObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach(entry => {\n        this.recordPaintMetrics(entry);\n      });\n    });\n\n    try {\n      paintObserver.observe({ entryTypes: ['paint'] });\n      this.observers.push(paintObserver);\n    } catch (error) {\n      console.warn('Paint observer not supported');\n    }\n\n    // 监控LCP\n    const lcpObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      const lastEntry = entries[entries.length - 1];\n      if (lastEntry) {\n        this.recordLCPMetrics(lastEntry);\n      }\n    });\n\n    try {\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n      this.observers.push(lcpObserver);\n    } catch (error) {\n      console.warn('LCP observer not supported');\n    }\n  }\n\n  /**\n   * 初始化内存监控\n   */\n  private initializeMemoryMonitoring(): void {\n    if (typeof window === 'undefined' || !('memory' in performance)) return;\n\n    setInterval(() => {\n      const memoryInfo = (performance as any).memory;\n      this.recordMemoryMetrics(memoryInfo);\n    }, 10000); // 每10秒检查一次\n  }\n\n  /**\n   * 初始化网络监控\n   */\n  private initializeNetworkMonitoring(): void {\n    if (typeof window === 'undefined') return;\n\n    const networkObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach(entry => {\n        if (entry.entryType === 'resource') {\n          this.recordNetworkMetrics(entry as PerformanceResourceTiming);\n        }\n      });\n    });\n\n    try {\n      networkObserver.observe({ entryTypes: ['resource'] });\n      this.observers.push(networkObserver);\n    } catch (error) {\n      console.warn('Network observer not supported');\n    }\n\n    this.monitorFetch();\n  }\n\n  /**\n   * 初始化渲染监控\n   */\n  private initializeRenderingMonitoring(): void {\n    if (typeof window === 'undefined') return;\n\n    this.monitorFrameRate();\n    this.monitorLongTasks();\n    this.monitorLayoutShifts();\n  }\n\n  /**\n   * 初始化翻译性能指标\n   */\n  private initializeTranslationMetrics(): void {\n    // 这里可以集成翻译加载性能监控\n    if (typeof window !== 'undefined') {\n      // 监听翻译文件加载\n      const resourceObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach(entry => {\n          if (entry.name.includes('/locales/')) {\n            this.recordTranslationLoad(entry);\n          }\n        });\n      });\n\n      try {\n        resourceObserver.observe({ entryTypes: ['resource'] });\n        this.observers.push(resourceObserver);\n      } catch (error) {\n        console.warn('Translation resource observer not supported');\n      }\n    }\n  }\n\n  /**\n   * 记录导航指标\n   */\n  private recordNavigationMetrics(navigation: PerformanceNavigationTiming): void {\n    console.log('Navigation metrics recorded:', {\n      loadTime: navigation.loadEventEnd - navigation.fetchStart,\n      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.fetchStart\n    });\n  }\n\n  /**\n   * 记录绘制指标\n   */\n  private recordPaintMetrics(entry: PerformanceEntry): void {\n    console.log('Paint metric:', entry.name, entry.startTime);\n  }\n\n  /**\n   * 记录LCP指标\n   */\n  private recordLCPMetrics(entry: PerformanceEntry): void {\n    console.log('LCP metric:', entry.startTime);\n  }\n\n  /**\n   * 记录内存指标\n   */\n  private recordMemoryMetrics(memoryInfo: any): void {\n    const memoryUsagePercent = (memoryInfo.usedJSHeapSize / memoryInfo.jsHeapSizeLimit) * 100;\n    \n    if (memoryUsagePercent > 90) {\n      console.warn('内存使用率过高:', memoryUsagePercent.toFixed(1) + '%');\n    }\n  }\n\n  /**\n   * 记录网络指标\n   */\n  private recordNetworkMetrics(resource: PerformanceResourceTiming): void {\n    const duration = resource.responseEnd - resource.requestStart;\n    const size = resource.transferSize || 0;\n    \n    if (duration > 5000) {\n      console.warn('网络请求过慢:', resource.name, duration + 'ms');\n    }\n  }\n\n  /**\n   * 记录翻译加载指标\n   */\n  private recordTranslationLoad(entry: PerformanceEntry): void {\n    console.log('Translation loaded:', entry.name, entry.duration + 'ms');\n  }\n\n  /**\n   * 监控fetch请求\n   */\n  private monitorFetch(): void {\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const startTime = performance.now();\n      \n      try {\n        const response = await originalFetch(...args);\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        \n        if (duration > 3000) {\n          console.warn('Fetch请求过慢:', args[0], duration + 'ms');\n        }\n        \n        return response;\n      } catch (error) {\n        console.error('Fetch error:', error);\n        throw error;\n      }\n    };\n  }\n\n  /**\n   * 监控帧率\n   */\n  private monitorFrameRate(): void {\n    let frameCount = 0;\n    let lastTime = performance.now();\n\n    const measureFrameRate = () => {\n      frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime - lastTime >= 1000) {\n        const fps = (frameCount * 1000) / (currentTime - lastTime);\n        \n        if (fps < 30) {\n          console.warn('帧率过低:', fps.toFixed(1) + 'fps');\n        }\n        \n        frameCount = 0;\n        lastTime = currentTime;\n      }\n      \n      requestAnimationFrame(measureFrameRate);\n    };\n    \n    requestAnimationFrame(measureFrameRate);\n  }\n\n  /**\n   * 监控长任务\n   */\n  private monitorLongTasks(): void {\n    const longTaskObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach(entry => {\n        if (entry.duration > 50) {\n          console.warn('检测到长任务:', entry.duration.toFixed(2) + 'ms');\n        }\n      });\n    });\n\n    try {\n      longTaskObserver.observe({ entryTypes: ['longtask'] });\n      this.observers.push(longTaskObserver);\n    } catch (error) {\n      console.warn('Long task observer not supported');\n    }\n  }\n\n  /**\n   * 监控布局偏移\n   */\n  private monitorLayoutShifts(): void {\n    const clsObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      let totalCLS = 0;\n      \n      entries.forEach(entry => {\n        if (!(entry as any).hadRecentInput) {\n          totalCLS += (entry as any).value || 0;\n        }\n      });\n      \n      if (totalCLS > 0.25) {\n        console.warn('布局偏移严重:', totalCLS.toFixed(3));\n      }\n    });\n\n    try {\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\n      this.observers.push(clsObserver);\n    } catch (error) {\n      console.warn('CLS observer not supported');\n    }\n  }\n\n  /**\n   * 收集当前指标\n   */\n  private collectMetrics(): void {\n    const snapshot = this.createSnapshot();\n    this.addSnapshot(snapshot);\n  }\n\n  /**\n   * 创建性能快照\n   */\n  private createSnapshot(): PerformanceSnapshot {\n    const memoryInfo = (performance as any).memory;\n    const connection = (navigator as any).connection;\n    \n    return {\n      timestamp: Date.now(),\n      core: {\n        loadTime: 0,\n        domContentLoaded: 0,\n        firstPaint: 0,\n        firstContentfulPaint: 0,\n        largestContentfulPaint: 0,\n        timeToInteractive: 0,\n        translationLoadTime: 0,\n        cacheHitRate: 0.8,\n        memoryUsage: memoryInfo?.usedJSHeapSize || 0,\n        networkRequests: 0,\n        compressionRatio: 0.7,\n        preloadAccuracy: 0.8,\n        errorRate: 0.02,\n        userSatisfactionScore: 85\n      },\n      memory: {\n        usedJSHeapSize: memoryInfo?.usedJSHeapSize || 0,\n        totalJSHeapSize: memoryInfo?.totalJSHeapSize || 0,\n        jsHeapSizeLimit: memoryInfo?.jsHeapSizeLimit || 0,\n        gcCollections: 0,\n        gcTime: 0,\n        translationCacheSize: 0,\n        activeNamespaces: 0\n      },\n      network: {\n        totalRequests: 0,\n        cachedRequests: 0,\n        failedRequests: 0,\n        averageResponseTime: 0,\n        totalTransferSize: 0,\n        compressionRatio: 0.7,\n        bandwidthUtilization: connection ? connection.downlink || 0 : 0\n      },\n      rendering: {\n        frameRate: 60,\n        droppedFrames: 0,\n        renderTime: 0,\n        paintTime: 0,\n        compositeTime: 0,\n        longTasks: 0\n      },\n      userExperience: {\n        interactionLatency: 0,\n        scrollJank: 0,\n        inputDelay: 0,\n        totalBlockingTime: 0,\n        cumulativeLayoutShift: 0,\n        bounceRate: 0\n      }\n    };\n  }\n\n  /**\n   * 添加快照\n   */\n  private addSnapshot(snapshot: PerformanceSnapshot): void {\n    this.snapshots.push(snapshot);\n    \n    // 保留最近100个快照\n    if (this.snapshots.length > 100) {\n      this.snapshots = this.snapshots.slice(-100);\n    }\n  }\n\n  /**\n   * 生成综合性能报告\n   */\n  generateReport(): ComprehensivePerformanceReport {\n    if (this.snapshots.length === 0) {\n      return this.createEmptyReport();\n    }\n\n    const latest = this.snapshots[this.snapshots.length - 1];\n    const issues = this.identifyIssues(latest);\n    const recommendations = this.generateRecommendations(issues);\n    const score = this.calculateOverallScore(latest, issues);\n    const grade = this.calculateGrade(score);\n    const mobileOptimizationScore = this.calculateMobileOptimizationScore(latest);\n    const bundleAnalysis = this.analyzeBundleSize();\n    const trends = this.analyzeTrends();\n    const alerts = this.generateAlerts(latest);\n\n    return {\n      overallScore: score,\n      grade,\n      snapshot: latest,\n      issues,\n      recommendations,\n      trends,\n      alerts,\n      mobileOptimizationScore,\n      bundleSizeAnalysis: bundleAnalysis\n    };\n  }\n\n  /**\n   * 创建空报告\n   */\n  private createEmptyReport(): ComprehensivePerformanceReport {\n    return {\n      overallScore: 0,\n      grade: 'F',\n      snapshot: this.createSnapshot(),\n      issues: [],\n      recommendations: [],\n      trends: [],\n      alerts: [],\n      mobileOptimizationScore: 0,\n      bundleSizeAnalysis: {\n        totalSize: 0,\n        compressedSize: 0,\n        chunkCount: 0,\n        lazyLoadableChunks: [],\n        treeShakingOpportunities: [],\n        codeSplittingSuggestions: []\n      }\n    };\n  }\n\n  /**\n   * 识别性能问题\n   */\n  private identifyIssues(snapshot: PerformanceSnapshot): PerformanceIssue[] {\n    const issues: PerformanceIssue[] = [];\n\n    // 检查核心性能指标\n    const core = snapshot.core;\n    \n    if (core.loadTime > this.baselines.loadTime) {\n      issues.push({\n        category: 'performance',\n        severity: core.loadTime > this.baselines.loadTime * 1.5 ? 'critical' : 'high',\n        metric: 'loadTime',\n        currentValue: core.loadTime,\n        threshold: this.baselines.loadTime,\n        description: `页面加载时间过长: ${(core.loadTime / 1000).toFixed(2)}s`,\n        impact: '影响用户体验和SEO排名'\n      });\n    }\n\n    if (core.memoryUsage > this.baselines.memoryUsage) {\n      issues.push({\n        category: 'memory',\n        severity: core.memoryUsage > this.baselines.memoryUsage * 1.5 ? 'critical' : 'high',\n        metric: 'memoryUsage',\n        currentValue: core.memoryUsage,\n        threshold: this.baselines.memoryUsage,\n        description: `内存使用过高: ${(core.memoryUsage / 1024 / 1024).toFixed(1)}MB`,\n        impact: '可能导致页面卡顿和应用崩溃'\n      });\n    }\n\n    if (core.cacheHitRate < 0.7) {\n      issues.push({\n        category: 'translation',\n        severity: 'medium',\n        metric: 'cacheHitRate',\n        currentValue: core.cacheHitRate,\n        threshold: 0.7,\n        description: `翻译缓存命中率过低: ${(core.cacheHitRate * 100).toFixed(1)}%`,\n        impact: '增加网络请求和页面加载时间'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(issues: PerformanceIssue[]): OptimizationRecommendation[] {\n    const recommendations: OptimizationRecommendation[] = [];\n\n    issues.forEach(issue => {\n      switch (issue.metric) {\n        case 'loadTime':\n          recommendations.push({\n            priority: 'high',\n            category: '性能优化',\n            title: '优化页面加载速度',\n            description: '启用代码分割、懒加载和预取关键资源',\n            estimatedImpact: '减少30-50%加载时间',\n            implementation: '使用dynamic import和next/link预取，启用Bundle分析',\n            estimatedImprovement: 40,\n            effort: 'medium'\n          });\n          break;\n          \n        case 'memoryUsage':\n          recommendations.push({\n            priority: 'medium',\n            category: '内存优化',\n            title: '优化内存使用',\n            description: '减少内存泄漏和优化垃圾回收',\n            estimatedImpact: '减少20-30%内存使用',\n            implementation: '及时清理事件监听器，使用WeakMap，优化缓存策略',\n            estimatedImprovement: 25,\n            effort: 'low'\n          });\n          break;\n          \n        case 'cacheHitRate':\n          recommendations.push({\n            priority: 'medium',\n            category: '缓存优化',\n            title: '提高翻译缓存命中率',\n            description: '优化缓存策略和预加载机制',\n            estimatedImpact: '提高25%缓存命中率',\n            implementation: '增加缓存时间，优化预加载算法，减少缓存清理',\n            estimatedImprovement: 25,\n            effort: 'low'\n          });\n          break;\n      }\n    });\n\n    // 移动端特定建议\n    recommendations.push({\n      priority: 'high',\n      category: '移动端优化',\n      title: '移动端Bundle优化',\n      description: '减少移动端Bundle大小，实现渐进式加载',\n      estimatedImpact: '减少70%初始包大小',\n      implementation: '使用next.config.mobile.js配置，启用Tree Shaking和代码分割',\n      estimatedImprovement: 70,\n      effort: 'high'\n    });\n\n    return recommendations;\n  }\n\n  /**\n   * 计算总体评分\n   */\n  private calculateOverallScore(snapshot: PerformanceSnapshot, issues: PerformanceIssue[]): number {\n    let score = 100;\n\n    // 根据问题严重程度扣分\n    issues.forEach(issue => {\n      switch (issue.severity) {\n        case 'critical':\n          score -= 25;\n          break;\n        case 'high':\n          score -= 15;\n          break;\n        case 'medium':\n          score -= 10;\n          break;\n        case 'low':\n          score -= 5;\n          break;\n      }\n    });\n\n    // 性能指标扣分\n    const core = snapshot.core;\n    if (core.loadTime > this.baselines.loadTime) {\n      score -= Math.min(20, (core.loadTime - this.baselines.loadTime) / 1000 * 5);\n    }\n\n    if (core.memoryUsage > this.baselines.memoryUsage) {\n      score -= Math.min(15, (core.memoryUsage - this.baselines.memoryUsage) / (1024 * 1024) * 0.5);\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * 计算移动端优化评分\n   */\n  private calculateMobileOptimizationScore(snapshot: PerformanceSnapshot): number {\n    let score = 100;\n    \n    // 页面加载时间评分\n    const loadTimeScore = Math.max(0, 100 - (snapshot.core.loadTime / 100));\n    \n    // 内存使用评分\n    const memoryScore = Math.max(0, 100 - (snapshot.core.memoryUsage / (1024 * 1024)));\n    \n    // 缓存命中率评分\n    const cacheScore = snapshot.core.cacheHitRate * 100;\n    \n    // 综合评分\n    return (loadTimeScore + memoryScore + cacheScore) / 3;\n  }\n\n  /**\n   * 分析Bundle大小\n   */\n  private analyzeBundleSize(): BundleAnalysis {\n    return {\n      totalSize: 850000, // 850KB (模拟数据)\n      compressedSize: 280000, // 280KB (gzip)\n      chunkCount: 4,\n      lazyLoadableChunks: [\n        'admin-bundle',\n        'bot-bundle', \n        'charts-bundle',\n        'social-bundle'\n      ],\n      treeShakingOpportunities: [\n        '@prisma/client',\n        '@supabase/supabase-js',\n        'telegraf'\n      ],\n      codeSplittingSuggestions: [\n        'Admin页面组件',\n        'Bot相关功能',\n        '图表库',\n        'Instagram海报生成器'\n      ]\n    };\n  }\n\n  /**\n   * 计算等级\n   */\n  private calculateGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\n    if (score >= 90) return 'A';\n    if (score >= 80) return 'B';\n    if (score >= 70) return 'C';\n    if (score >= 60) return 'D';\n    return 'F';\n  }\n\n  /**\n   * 分析性能趋势\n   */\n  private analyzeTrends(): PerformanceTrend[] {\n    if (this.snapshots.length < 2) {\n      return [];\n    }\n\n    const recent = this.snapshots.slice(-5);\n    const trends: PerformanceTrend[] = [];\n\n    // 分析加载时间趋势\n    const loadTimes = recent.map(s => s.core.loadTime);\n    const loadTimeTrend = this.calculateTrend(loadTimes);\n    trends.push({\n      metric: 'loadTime',\n      direction: loadTimeTrend.direction,\n      changeRate: loadTimeTrend.changeRate,\n      confidence: loadTimeTrend.confidence\n    });\n\n    return trends;\n  }\n\n  /**\n   * 计算趋势\n   */\n  private calculateTrend(values: number[]): { direction: 'improving' | 'stable' | 'degrading', changeRate: number, confidence: number } {\n    if (values.length < 2) {\n      return { direction: 'stable', changeRate: 0, confidence: 0 };\n    }\n\n    const first = values[0];\n    const last = values[values.length - 1];\n    const changeRate = ((last - first) / first) * 100;\n\n    let direction: 'improving' | 'stable' | 'degrading';\n    if (Math.abs(changeRate) < 5) {\n      direction = 'stable';\n    } else if (changeRate > 0) {\n      direction = 'degrading';\n    } else {\n      direction = 'improving';\n    }\n\n    return {\n      direction,\n      changeRate,\n      confidence: Math.min(values.length / 10, 1)\n    };\n  }\n\n  /**\n   * 生成警报\n   */\n  private generateAlerts(snapshot: PerformanceSnapshot): PerformanceAlert[] {\n    const alerts: PerformanceAlert[] = [];\n\n    if (snapshot.core.loadTime > (this.config.alertThresholds.loadTime || 4000)) {\n      alerts.push({\n        id: 'load-time-critical',\n        level: 'critical',\n        metric: 'loadTime',\n        threshold: this.config.alertThresholds.loadTime || 4000,\n        currentValue: snapshot.core.loadTime,\n        timestamp: Date.now(),\n        message: `页面加载时间严重超标: ${(snapshot.core.loadTime / 1000).toFixed(2)}s`,\n        recommendations: [\n          '立即启用代码分割',\n          '优化Bundle大小',\n          '检查网络连接',\n          '启用资源预加载'\n        ]\n      });\n    }\n\n    return alerts;\n  }\n\n  /**\n   * 获取快照历史\n   */\n  getSnapshots(): PerformanceSnapshot[] {\n    return [...this.snapshots];\n  }\n\n  /**\n   * 导出性能数据\n   */\n  exportData(): string {\n    const report = this.generateReport();\n    return JSON.stringify({\n      snapshots: this.snapshots,\n      report,\n      exportTime: new Date().toISOString(),\n      version: '1.0.0'\n    }, null, 2);\n  }\n\n  /**\n   * 清除监控数据\n   */\n  clearData(): void {\n    this.snapshots = [];\n    console.log('性能监控数据已清除');\n  }\n}\n\n// 导出单例实例\nexport const comprehensivePerformanceMonitor = ComprehensivePerformanceMonitor.getInstance();\n\n// 便捷函数\nexport const startComprehensiveMonitoring = (config?: Partial<MonitoringConfig>) => {\n  if (config) {\n    return new ComprehensivePerformanceMonitor(config);\n  }\n  return comprehensivePerformanceMonitor.startMonitoring();\n};\n\nexport const stopComprehensiveMonitoring = () => comprehensivePerformanceMonitor.stopMonitoring();\nexport const getComprehensiveReport = () => comprehensivePerformanceMonitor.generateReport();\nexport const exportPerformanceData = () => comprehensivePerformanceMonitor.exportData();\n\nexport default ComprehensivePerformanceMonitor;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/priority-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'LOW' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'NORMAL' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'CRITICAL' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":66,"column":37,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":66,"endColumn":44,"fix":{"range":[1893,2100],"text":"for (const event of ['click', 'scroll', 'keypress']) {\n      window.addEventListener(event, () => {\n        lastActivity = Date.now();\n        this.updateUserActivityScore();\n      }, { passive: true });\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":82,"column":31,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":82,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2344,2356],"text":"(lastActivity != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2344,2356],"text":"(lastActivity ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2344,2356],"text":"(Boolean(lastActivity))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"complexity","severity":2,"message":"Method 'adjustPriority' has a complexity of 13. Maximum allowed is 10.","line":144,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":198,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4230,4233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4230,4233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":157,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":157,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4328,4346],"text":"(context.systemLoad != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4328,4346],"text":"(context.systemLoad ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4328,4346],"text":"(Boolean(context.systemLoad))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":186,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":186,"endColumn":35,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[5214,5240],"text":"context.criticalUserAction ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[5214,5240],"text":"context.criticalUserAction === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":265,"column":12,"nodeType":"MemberExpression","endLine":265,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":270,"column":5,"nodeType":"MemberExpression","endLine":270,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":270,"column":35,"nodeType":"MemberExpression","endLine":270,"endColumn":57},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":281,"column":31,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":281,"endColumn":38,"fix":{"range":[7518,7619],"text":"for (const key of Object.keys(this.configs)) {\n      delete this.configs[key as RequestPriority];\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":349,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":349,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9114,9130],"text":"(requestInfo.size != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[9114,9130],"text":"(requestInfo.size ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9114,9130],"text":"(Boolean(requestInfo.size))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"// priority-manager.ts - 增强的请求优先级管理器\nimport { NetworkQuality } from './network-retry';\n\nexport enum RequestPriority {\n  LOW = 0,        // 低优先级：后台同步、非关键数据\n  NORMAL = 1,     // 正常优先级：常规业务操作\n  CRITICAL = 2    // 关键优先级：核心交易、用户认证\n}\n\n// 业务场景优先级映射\nexport const PRIORITY_MAPPINGS = {\n  // 关键优先级场景\n  CRITICAL: {\n    userAuthentication: true,        // 用户登录验证\n    paymentProcessing: true,         // 支付处理\n    orderCreation: true,             // 订单创建\n    inventoryCheck: true,            // 库存检查\n    securityVerification: true,      // 安全验证\n    criticalNotifications: true,     // 重要通知\n    cartCheckout: true,              // 购物车结账\n    userProfileCritical: true        // 用户关键资料\n  },\n\n  // 正常优先级场景\n  NORMAL: {\n    productSearch: true,             // 产品搜索\n    cartOperations: true,            // 购物车操作\n    userProfile: true,               // 用户资料\n    orderHistory: true,              // 订单历史\n    productReviews: true,            // 产品评价\n    analyticsReporting: true,        // 数据分析\n    productDetails: true,            // 产品详情\n    categoryBrowsing: true           // 分类浏览\n  },\n\n  // 低优先级场景\n  LOW: {\n    dataSync: true,                  // 数据同步\n    analytics: true,                 // 统计数据\n    prefetching: true,               // 预加载\n    imageOptimization: true,         // 图片优化\n    cacheUpdates: true,              // 缓存更新\n    logging: true,                   // 日志记录\n    recommendations: true,           // 推荐数据\n    socialFeatures: true             // 社交功能\n  }\n};\n\n// 动态优先级调整器\nexport class DynamicPriorityManager {\n  private userActivityScore = 0;\n  private networkQuality: NetworkQuality = NetworkQuality.EXCELLENT;\n  private systemLoad = 0;\n  private timeOfDayFactor = 1;\n  private userSegment = 'regular'; // regular, premium, vip\n\n  constructor() {\n    this.setupContextMonitoring();\n  }\n\n  // 设置上下文监控\n  private setupContextMonitoring() {\n    // 监控用户活动时间\n    let lastActivity = Date.now();\n    \n    ['click', 'scroll', 'keypress'].forEach(event => {\n      window.addEventListener(event, () => {\n        lastActivity = Date.now();\n        this.updateUserActivityScore();\n      }, { passive: true });\n    });\n\n    // 定期更新活跃度分数\n    setInterval(() => {\n      this.updateUserActivityScore(lastActivity);\n    }, 5000);\n  }\n\n  // 更新用户活跃度分数\n  private updateUserActivityScore(lastActivity?: number) {\n    const now = Date.now();\n    const timeSinceActivity = lastActivity ? now - lastActivity : 0;\n    \n    // 基于最后活动时间计算活跃度\n    if (timeSinceActivity < 5000) {\n      this.userActivityScore = Math.min(100, this.userActivityScore + 10);\n    } else if (timeSinceActivity > 30000) {\n      this.userActivityScore = Math.max(0, this.userActivityScore - 5);\n    }\n\n    // 时间因子（工作时间活跃度更高）\n    const hour = new Date().getHours();\n    this.timeOfDayFactor = (hour >= 9 && hour <= 18) ? 1.2 : 1.0;\n\n    // 用户群体因子\n    this.userSegment = this.determineUserSegment();\n  }\n\n  // 确定用户群体\n  private determineUserSegment(): 'regular' | 'premium' | 'vip' {\n    // 这里可以根据用户行为数据、订阅状态等确定用户群体\n    // 简化实现，返回常规用户\n    return 'regular';\n  }\n\n  // 根据业务场景自动确定优先级\n  autoDeterminePriority(businessContext: {\n    operation: string;\n    userId?: string;\n    userSegment?: string;\n    urgency?: 'low' | 'medium' | 'high';\n    businessValue?: 'low' | 'medium' | 'high';\n  }): RequestPriority {\n    const { operation, userSegment, urgency, businessValue } = businessContext;\n\n    // 检查关键业务映射\n    if (PRIORITY_MAPPINGS.CRITICAL[operation as keyof typeof PRIORITY_MAPPINGS.CRITICAL]) {\n      return RequestPriority.CRITICAL;\n    }\n\n    // 检查用户群体提升\n    if (userSegment === 'vip' || businessValue === 'high') {\n      if (urgency === 'high') {\n        return RequestPriority.CRITICAL;\n      }\n      return RequestPriority.NORMAL;\n    }\n\n    // 检查紧急程度\n    if (urgency === 'high') {\n      return RequestPriority.CRITICAL;\n    }\n\n    // 检查正常业务映射\n    if (PRIORITY_MAPPINGS.NORMAL[operation as keyof typeof PRIORITY_MAPPINGS.NORMAL]) {\n      return RequestPriority.NORMAL;\n    }\n\n    // 默认低优先级\n    return RequestPriority.LOW;\n  }\n\n  // 根据上下文动态调整优先级\n  adjustPriority(\n    basePriority: RequestPriority,\n    context: {\n      userActivity?: 'high' | 'medium' | 'low';\n      networkQuality?: NetworkQuality;\n      systemLoad?: number;\n      criticalUserAction?: boolean;\n      businessContext?: any;\n    }\n  ): RequestPriority {\n    let adjustedPriority = basePriority;\n\n    // 系统负载调整\n    if (context.systemLoad && context.systemLoad > 0.8) {\n      if (basePriority === RequestPriority.CRITICAL) {\n        // 关键请求保持最高优先级\n        adjustedPriority = RequestPriority.CRITICAL;\n      } else if (basePriority === RequestPriority.NORMAL) {\n        // 正常请求在系统压力大时优先级不变，但可能延迟\n        adjustedPriority = basePriority;\n      } else {\n        // 低优先级进一步降低\n        adjustedPriority = RequestPriority.LOW;\n      }\n    }\n\n    // 用户活跃度调整\n    if (context.userActivity === 'high' && this.userActivityScore > 80) {\n      if (basePriority === RequestPriority.LOW) {\n        adjustedPriority = RequestPriority.NORMAL; // 活跃用户提升低优先级请求\n      }\n    }\n\n    // 网络质量调整\n    if (context.networkQuality === NetworkQuality.POOR) {\n      // 网络差时，非关键请求采用降级策略\n      if (basePriority !== RequestPriority.CRITICAL) {\n        adjustedPriority = basePriority; // 保持原优先级但使用离线策略\n      }\n    }\n\n    // 关键用户操作提升\n    if (context.criticalUserAction) {\n      adjustedPriority = RequestPriority.CRITICAL;\n    }\n\n    // 用户群体调整\n    if (this.userSegment === 'vip') {\n      if (adjustedPriority === RequestPriority.LOW) {\n        adjustedPriority = RequestPriority.NORMAL;\n      }\n    }\n\n    return adjustedPriority;\n  }\n\n  // 获取当前上下文\n  getCurrentContext() {\n    return {\n      userActivityScore: this.userActivityScore,\n      networkQuality: this.networkQuality,\n      systemLoad: this.systemLoad,\n      timeOfDayFactor: this.timeOfDayFactor,\n      userSegment: this.userSegment\n    };\n  }\n\n  // 更新系统负载\n  updateSystemLoad(load: number) {\n    this.systemLoad = Math.max(0, Math.min(1, load));\n  }\n\n  // 更新网络质量\n  updateNetworkQuality(quality: NetworkQuality) {\n    this.networkQuality = quality;\n  }\n}\n\n// 优先级配置管理器\nexport class PriorityConfigManager {\n  private static configs = {\n    [RequestPriority.CRITICAL]: {\n      maxConcurrent: 10,\n      timeout: 5000,        // 5秒超时\n      maxRetries: 3,\n      retryDelay: 200,      // 快速重试\n      enableQueue: false,   // 关键请求不排队\n      backoffStrategy: 'exponential' as const,\n      enableDegradation: false, // 不降级\n      weight: 50,           // 调度权重50%\n      preemptive: true      // 支持抢占\n    },\n\n    [RequestPriority.NORMAL]: {\n      maxConcurrent: 5,\n      timeout: 15000,       // 15秒超时\n      maxRetries: 2,\n      retryDelay: 1000,\n      enableQueue: true,\n      backoffStrategy: 'linear' as const,\n      enableDegradation: true,\n      weight: 35,           // 调度权重35%\n      preemptive: false\n    },\n\n    [RequestPriority.LOW]: {\n      maxConcurrent: 2,\n      timeout: 60000,       // 60秒超时\n      maxRetries: 5,\n      retryDelay: 5000,\n      enableQueue: true,\n      backoffStrategy: 'fixed' as const,\n      enableDegradation: true,\n      weight: 15,           // 调度权重15%\n      preemptive: false,\n      batchProcessing: true\n    }\n  };\n\n  // 获取优先级配置\n  static getConfig(priority: RequestPriority) {\n    return this.configs[priority];\n  }\n\n  // 动态调整配置\n  static updateConfig(priority: RequestPriority, updates: Partial<typeof this.configs[RequestPriority.CRITICAL]>) {\n    this.configs[priority] = { ...this.configs[priority], ...updates };\n  }\n\n  // 获取所有配置\n  static getAllConfigs() {\n    return { ...this.configs };\n  }\n\n  // 重置为默认配置\n  static resetToDefaults() {\n    // 重置逻辑（重新初始化配置）\n    Object.keys(this.configs).forEach(key => {\n      delete this.configs[key as RequestPriority];\n    });\n  }\n}\n\n// 优先级分析器\nexport class PriorityAnalyzer {\n  // 分析请求特征并建议优先级\n  static analyzeRequest(\n    requestInfo: {\n      url: string;\n      method: string;\n      size?: number;\n      userAgent?: string;\n      referrer?: string;\n    }\n  ): {\n    suggestedPriority: RequestPriority;\n    confidence: number;\n    reasoning: string[];\n  } {\n    const reasoning: string[] = [];\n\n    // 基于URL模式分析\n    const criticalPatterns = [\n      '/api/auth/', '/api/payment/', '/api/order/', '/api/checkout'\n    ];\n    \n    const normalPatterns = [\n      '/api/products/', '/api/user/', '/api/cart/', '/api/search'\n    ];\n\n    const lowPatterns = [\n      '/api/analytics/', '/api/logs/', '/api/recommendations/', '/api/sync'\n    ];\n\n    // 检查关键模式\n    if (criticalPatterns.some(pattern => requestInfo.url.includes(pattern))) {\n      reasoning.push('URL匹配关键业务模式');\n      return {\n        suggestedPriority: RequestPriority.CRITICAL,\n        confidence: 0.9,\n        reasoning\n      };\n    }\n\n    // 检查正常模式\n    if (normalPatterns.some(pattern => requestInfo.url.includes(pattern))) {\n      reasoning.push('URL匹配常规业务模式');\n      return {\n        suggestedPriority: RequestPriority.NORMAL,\n        confidence: 0.8,\n        reasoning\n      };\n    }\n\n    // 检查低优先级模式\n    if (lowPatterns.some(pattern => requestInfo.url.includes(pattern))) {\n      reasoning.push('URL匹配后台处理模式');\n      return {\n        suggestedPriority: RequestPriority.LOW,\n        confidence: 0.85,\n        reasoning\n      };\n    }\n\n    // 基于请求大小分析\n    if (requestInfo.size && requestInfo.size > 1024 * 1024) {\n      reasoning.push('大文件请求，建议低优先级');\n      return {\n        suggestedPriority: RequestPriority.LOW,\n        confidence: 0.7,\n        reasoning\n      };\n    }\n\n    // 默认正常优先级\n    reasoning.push('未匹配特定模式，使用默认优先级');\n    return {\n      suggestedPriority: RequestPriority.NORMAL,\n      confidence: 0.5,\n      reasoning\n    };\n  }\n\n  // 批量分析请求\n  static batchAnalyze(requests: Array<{\n    url: string;\n    method: string;\n    size?: number;\n    userAgent?: string;\n    referrer?: string;\n  }>): Array<{\n    index: number;\n    suggestedPriority: RequestPriority;\n    confidence: number;\n    reasoning: string[];\n  }> {\n    return requests.map((request, index) => ({\n      index,\n      ...this.analyzeRequest(request)\n    }));\n  }\n}\n\n// 单例导出\nexport const priorityManager = new DynamicPriorityManager();\nexport const configManager = PriorityConfigManager;\nexport const analyzer = PriorityAnalyzer;\n\nexport default DynamicPriorityManager;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/request-degradation.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'CACHE_FIRST' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'NETWORK_FIRST' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'STALE_WHILE_REVALIDATE' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'OFFLINE_FALLBACK' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[788,791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[788,791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":75,"column":47,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":75,"endColumn":54,"fix":{"range":[2000,2007],"text":"{return;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":83,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":83,"endColumn":53,"fix":{"range":[2312,2332],"text":"{return priorityDiff;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":92,"column":25,"nodeType":"MemberExpression","endLine":92,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2687,2690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2687,2690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":99,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":99,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2774,2793],"text":"(config.cacheTimeout != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2774,2793],"text":"(config.cacheTimeout ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2774,2793],"text":"(Boolean(config.cacheTimeout))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":99,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":99,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2794,2796],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":105,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":105,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2968,2970],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":116,"column":16,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":116,"endColumn":28,"fix":{"range":[3200,3212],"text":"{return null;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4526,4559],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":216,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":216,"endColumn":35,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[5909,5931],"text":"config.fallbackEnabled ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[5909,5931],"text":"config.fallbackEnabled === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6708,6744],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":319,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9272,9311],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9840,9843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9840,9843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":375,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":375,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10037,10068],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10544,10547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10544,10547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":414,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":414,"endColumn":55,"fix":{"range":[11034,11061],"text":"{return NetworkQuality.POOR;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":421,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":421,"endColumn":59,"fix":{"range":[11273,11305],"text":"{return NetworkQuality.EXCELLENT;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":422,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":422,"endColumn":54,"fix":{"range":[11332,11359],"text":"{return NetworkQuality.GOOD;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":423,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":423,"endColumn":54,"fix":{"range":[11386,11413],"text":"{return NetworkQuality.FAIR;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":446,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":446,"endColumn":34},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `err` should be named `error_`.","line":472,"column":14,"nodeType":"Identifier","messageId":"catch-error-name","endLine":472,"endColumn":17,"fix":{"range":[12532,12656],"text":"error_) {\n      const errorMessage = error_ instanceof Error ? error_.message : '请求失败';\n      setError(errorMessage);\n      throw error_"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":545,"column":18,"nodeType":"MemberExpression","endLine":545,"endColumn":47}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":8,"fixableWarningCount":0,"source":"// request-degradation.ts - 请求降级策略\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { NetworkQuality } from './network-retry';\n\n// 降级策略类型\nexport enum DegradationStrategy {\n  CACHE_FIRST = 'cache_first',     // 缓存优先\n  NETWORK_FIRST = 'network_first', // 网络优先\n  STALE_WHILE_REVALIDATE = 'stale_while_revalidate', // 过期缓存+后台刷新\n  OFFLINE_FALLBACK = 'offline_fallback' // 离线降级\n}\n\n// 降级配置\nexport interface DegradationConfig {\n  strategy: DegradationStrategy;\n  cacheTimeout?: number;        // 缓存超时时间(ms)\n  fallbackEnabled?: boolean;    // 是否启用降级\n  maxCacheSize?: number;        // 最大缓存大小\n  enableOfflineMode?: boolean;  // 是否启用离线模式\n  priority?: 'high' | 'medium' | 'low'; // 优先级\n  staleWhileRevalidate?: boolean; // 是否启用过期缓存策略\n}\n\n// 缓存项结构\ninterface CacheItem {\n  data: any;\n  timestamp: number;\n  expiresAt: number;\n  priority: 'high' | 'medium' | 'low';\n  source: 'network' | 'cache' | 'fallback';\n}\n\n// 降级结果\nexport interface DegradationResult<T> {\n  data: T | null;\n  source: 'network' | 'cache' | 'fallback';\n  stale: boolean;\n  networkQuality: NetworkQuality;\n  isOffline: boolean;\n}\n\n// 请求降级管理器\nclass RequestDegradationManager {\n  private cache = new Map<string, CacheItem>();\n  private maxCacheSize: number;\n  private cacheCleanupInterval: NodeJS.Timeout;\n  private readonly CLEANUP_INTERVAL = 60000; // 1分钟清理一次缓存\n  private readonly DEFAULT_CACHE_TIMEOUT = 5 * 60 * 1000; // 5分钟默认缓存超时\n\n  constructor(maxCacheSize: number = 100) {\n    this.maxCacheSize = maxCacheSize;\n    this.startCacheCleanup();\n  }\n\n  // 启动缓存清理\n  private startCacheCleanup() {\n    this.cacheCleanupInterval = setInterval(() => {\n      this.cleanupExpiredCache();\n    }, this.CLEANUP_INTERVAL);\n  }\n\n  // 清理过期缓存\n  private cleanupExpiredCache() {\n    const now = Date.now();\n    \n    for (const [key, item] of this.cache.entries()) {\n      if (item.expiresAt < now) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  // 智能缓存管理\n  private manageCacheSize() {\n    if (this.cache.size <= this.maxCacheSize) return;\n\n    // 按优先级和时间戳删除缓存项\n    const sortedCache = Array.from(this.cache.entries())\n      .sort(([, a], [, b]) => {\n        const priorityOrder = { 'low': 0, 'medium': 1, 'high': 2 };\n        const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];\n        \n        if (priorityDiff !== 0) return priorityDiff;\n        \n        // 同优先级按时间排序，越早的越先删除\n        return a.timestamp - b.timestamp;\n      });\n\n    // 删除一半的低优先级或过期缓存\n    const itemsToDelete = Math.floor(this.maxCacheSize * 0.3);\n    for (let i = 0; i < itemsToDelete && i < sortedCache.length; i++) {\n      this.cache.delete(sortedCache[i][0]);\n    }\n  }\n\n  // 存储数据到缓存\n  private setCache(key: string, data: any, config: DegradationConfig) {\n    const now = Date.now();\n    const cacheTimeout = config.cacheTimeout || this.DEFAULT_CACHE_TIMEOUT;\n    \n    const cacheItem: CacheItem = {\n      data,\n      timestamp: now,\n      expiresAt: now + cacheTimeout,\n      priority: config.priority || 'medium',\n      source: 'network'\n    };\n\n    this.cache.set(key, cacheItem);\n    this.manageCacheSize();\n  }\n\n  // 从缓存获取数据\n  private getCache(key: string): CacheItem | null {\n    const item = this.cache.get(key);\n    if (!item) return null;\n\n    // 检查是否过期\n    if (item.expiresAt < Date.now()) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return item;\n  }\n\n  // 智能数据获取\n  async fetchWithDegradation<T>(\n    key: string,\n    networkOperation: () => Promise<T>,\n    config: DegradationConfig\n  ): Promise<DegradationResult<T>> {\n    const { strategy, fallbackEnabled = true } = config;\n\n    // 检查网络状态\n    const isOnline = navigator.onLine;\n    const networkQuality = await this.getNetworkQuality();\n\n    try {\n      switch (strategy) {\n        case DegradationStrategy.CACHE_FIRST:\n          return this.cacheFirstStrategy(key, networkOperation, config, isOnline, networkQuality);\n        \n        case DegradationStrategy.NETWORK_FIRST:\n          return this.networkFirstStrategy(key, networkOperation, config, isOnline, networkQuality);\n        \n        case DegradationStrategy.STALE_WHILE_REVALIDATE:\n          return this.staleWhileRevalidateStrategy(key, networkOperation, config, isOnline, networkQuality);\n        \n        case DegradationStrategy.OFFLINE_FALLBACK:\n          return this.offlineFallbackStrategy(key, networkOperation, config, isOnline, networkQuality);\n        \n        default:\n          return this.networkFirstStrategy(key, networkOperation, config, isOnline, networkQuality);\n      }\n    } catch (error) {\n      console.warn(`降级策略执行失败:`, error);\n      \n      // 尝试降级到缓存\n      if (fallbackEnabled) {\n        const cachedData = this.getCache(key);\n        if (cachedData) {\n          return {\n            data: cachedData.data,\n            source: 'cache',\n            stale: true,\n            networkQuality,\n            isOffline: !isOnline\n          };\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  // 缓存优先策略\n  private async cacheFirstStrategy<T>(\n    key: string,\n    networkOperation: () => Promise<T>,\n    config: DegradationConfig,\n    isOnline: boolean,\n    networkQuality: NetworkQuality\n  ): Promise<DegradationResult<T>> {\n    const cachedData = this.getCache(key);\n    \n    if (cachedData) {\n      // 如果有缓存且网络质量较好，在后台刷新\n      if (isOnline && networkQuality !== NetworkQuality.POOR) {\n        this.refreshInBackground(key, networkOperation, config);\n      }\n      \n      return {\n        data: cachedData.data,\n        source: 'cache',\n        stale: false,\n        networkQuality,\n        isOffline: !isOnline\n      };\n    }\n\n    // 无缓存时尝试网络请求\n    if (isOnline) {\n      try {\n        const data = await networkOperation();\n        this.setCache(key, data, config);\n        return {\n          data,\n          source: 'network',\n          stale: false,\n          networkQuality,\n          isOffline: false\n        };\n      } catch (error) {\n        // 网络请求失败，如果有降级数据则返回\n        if (config.fallbackEnabled) {\n          return this.getFallbackData<T>(key, config, networkQuality, true);\n        }\n        throw error;\n      }\n    } else {\n      // 离线状态，返回降级数据\n      return this.getFallbackData<T>(key, config, networkQuality, true);\n    }\n  }\n\n  // 网络优先策略\n  private async networkFirstStrategy<T>(\n    key: string,\n    networkOperation: () => Promise<T>,\n    config: DegradationConfig,\n    isOnline: boolean,\n    networkQuality: NetworkQuality\n  ): Promise<DegradationResult<T>> {\n    if (isOnline) {\n      try {\n        const data = await networkOperation();\n        this.setCache(key, data, config);\n        return {\n          data,\n          source: 'network',\n          stale: false,\n          networkQuality,\n          isOffline: false\n        };\n      } catch (error) {\n        console.warn('网络请求失败，尝试降级:', error);\n        \n        // 网络失败时尝试缓存\n        const cachedData = this.getCache(key);\n        if (cachedData) {\n          return {\n            data: cachedData.data,\n            source: 'cache',\n            stale: true,\n            networkQuality,\n            isOffline: false\n          };\n        }\n        \n        // 缓存也无，降级到默认数据\n        return this.getFallbackData<T>(key, config, networkQuality, true);\n      }\n    } else {\n      // 离线状态，返回缓存或降级数据\n      const cachedData = this.getCache(key);\n      if (cachedData) {\n        return {\n          data: cachedData.data,\n          source: 'cache',\n          stale: true,\n          networkQuality,\n          isOffline: true\n        };\n      }\n      \n      return this.getFallbackData<T>(key, config, networkQuality, true);\n    }\n  }\n\n  // 过期缓存+后台刷新策略\n  private async staleWhileRevalidateStrategy<T>(\n    key: string,\n    networkOperation: () => Promise<T>,\n    config: DegradationConfig,\n    isOnline: boolean,\n    networkQuality: NetworkQuality\n  ): Promise<DegradationResult<T>> {\n    const cachedData = this.getCache(key);\n    \n    // 如果有缓存，先返回，然后后台刷新\n    if (cachedData) {\n      // 立即返回缓存数据\n      if (isOnline && config.staleWhileRevalidate !== false) {\n        this.refreshInBackground(key, networkOperation, config);\n      }\n      \n      return {\n        data: cachedData.data,\n        source: 'cache',\n        stale: Date.now() > cachedData.expiresAt,\n        networkQuality,\n        isOffline: !isOnline\n      };\n    }\n\n    // 无缓存时尝试网络请求\n    if (isOnline) {\n      try {\n        const data = await networkOperation();\n        this.setCache(key, data, config);\n        return {\n          data,\n          source: 'network',\n          stale: false,\n          networkQuality,\n          isOffline: false\n        };\n      } catch (error) {\n        return this.getFallbackData<T>(key, config, networkQuality, true);\n      }\n    } else {\n      return this.getFallbackData<T>(key, config, networkQuality, true);\n    }\n  }\n\n  // 离线降级策略\n  private async offlineFallbackStrategy<T>(\n    key: string,\n    networkOperation: () => Promise<T>,\n    config: DegradationConfig,\n    isOnline: boolean,\n    networkQuality: NetworkQuality\n  ): Promise<DegradationResult<T>> {\n    // 优先尝试网络，但失败时立即降级\n    if (isOnline) {\n      try {\n        const data = await networkOperation();\n        this.setCache(key, data, config);\n        return {\n          data,\n          source: 'network',\n          stale: false,\n          networkQuality,\n          isOffline: false\n        };\n      } catch (error) {\n        console.warn('网络失败，快速降级到离线模式:', error);\n        return this.getFallbackData<T>(key, config, networkQuality, true);\n      }\n    } else {\n      // 离线状态\n      const cachedData = this.getCache(key);\n      if (cachedData) {\n        return {\n          data: cachedData.data,\n          source: 'cache',\n          stale: true,\n          networkQuality,\n          isOffline: true\n        };\n      }\n      \n      return this.getFallbackData<T>(key, config, networkQuality, true);\n    }\n  }\n\n  // 后台刷新数据\n  private refreshInBackground(key: string, networkOperation: () => Promise<any>, config: DegradationConfig) {\n    setTimeout(async () => {\n      try {\n        const data = await networkOperation();\n        this.setCache(key, data, config);\n      } catch (error) {\n        console.warn('后台刷新失败:', error);\n      }\n    }, 100); // 100ms延迟，避免阻塞用户界面\n  }\n\n  // 获取降级数据\n  private getFallbackData<T>(key: string, config: DegradationConfig, networkQuality: NetworkQuality, isOffline: boolean): DegradationResult<T> {\n    // 预定义的降级数据\n    const fallbackData = this.getPredefinedFallback(key);\n    \n    return {\n      data: fallbackData,\n      source: 'fallback',\n      stale: true,\n      networkQuality,\n      isOffline\n    };\n  }\n\n  // 预定义降级数据\n  private getPredefinedFallback(key: string): any {\n    // 根据key返回相应的降级数据\n    if (key.includes('products')) {\n      return { products: [], total: 0, message: '离线模式显示缓存数据' };\n    }\n    \n    if (key.includes('user')) {\n      return { user: null, message: '请重新连接网络获取用户信息' };\n    }\n    \n    if (key.includes('orders')) {\n      return { orders: [], total: 0, message: '离线模式显示缓存订单' };\n    }\n\n    return { message: '数据暂时不可用，请检查网络连接' };\n  }\n\n  // 获取网络质量\n  private async getNetworkQuality(): Promise<NetworkQuality> {\n    if (!navigator.onLine) return NetworkQuality.POOR;\n    \n    try {\n      const start = performance.now();\n      await fetch('/favicon.ico', { method: 'HEAD', cache: 'no-cache' });\n      const duration = performance.now() - start;\n      \n      if (duration < 100) return NetworkQuality.EXCELLENT;\n      if (duration < 300) return NetworkQuality.GOOD;\n      if (duration < 800) return NetworkQuality.FAIR;\n      return NetworkQuality.POOR;\n    } catch {\n      return NetworkQuality.POOR;\n    }\n  }\n\n  // 清除缓存\n  clearCache() {\n    this.cache.clear();\n  }\n\n  // 获取缓存统计\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxCacheSize,\n      utilization: (this.cache.size / this.maxCacheSize) * 100\n    };\n  }\n\n  // 销毁管理器\n  destroy() {\n    if (this.cacheCleanupInterval) {\n      clearInterval(this.cacheCleanupInterval);\n    }\n    this.clearCache();\n  }\n}\n\n// 单例导出\nexport const degradationManager = new RequestDegradationManager();\n\n// React Hook for request degradation\nexport function useRequestDegradation() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const executeWithDegradation = useCallback(async <T>(\n    key: string,\n    networkOperation: () => Promise<T>,\n    config: DegradationConfig\n  ): Promise<DegradationResult<T>> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const result = await degradationManager.fetchWithDegradation(key, networkOperation, config);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '请求失败';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const clearCache = useCallback(() => {\n    degradationManager.clearCache();\n  }, []);\n\n  return {\n    executeWithDegradation,\n    clearCache,\n    isLoading,\n    error,\n    cacheStats: degradationManager.getCacheStats()\n  };\n}\n\n// 降级策略配置预设\nexport const DEGRADATION_PRESETS = {\n  // 产品列表：缓存优先，网络质量好时后台刷新\n  PRODUCTS: {\n    strategy: DegradationStrategy.STALE_WHILE_REVALIDATE,\n    cacheTimeout: 2 * 60 * 1000, // 2分钟缓存\n    priority: 'medium' as const,\n    staleWhileRevalidate: true,\n    fallbackEnabled: true\n  },\n\n  // 用户信息：网络优先，失败时降级到缓存\n  USER_INFO: {\n    strategy: DegradationStrategy.NETWORK_FIRST,\n    cacheTimeout: 5 * 60 * 1000, // 5分钟缓存\n    priority: 'high' as const,\n    fallbackEnabled: true\n  },\n\n  // 订单列表：过期缓存+后台刷新\n  ORDERS: {\n    strategy: DegradationStrategy.STALE_WHILE_REVALIDATE,\n    cacheTimeout: 10 * 60 * 1000, // 10分钟缓存\n    priority: 'high' as const,\n    staleWhileRevalidate: true,\n    fallbackEnabled: true\n  },\n\n  // 实时数据：网络优先，不使用缓存\n  REALTIME: {\n    strategy: DegradationStrategy.NETWORK_FIRST,\n    cacheTimeout: 0, // 不缓存\n    priority: 'high' as const,\n    fallbackEnabled: false\n  },\n\n  // 静态资源：缓存优先\n  STATIC: {\n    strategy: DegradationStrategy.CACHE_FIRST,\n    cacheTimeout: 60 * 60 * 1000, // 1小时缓存\n    priority: 'low' as const,\n    fallbackEnabled: true\n  }\n};\n\n// 自动选择降级策略\nexport function selectOptimalStrategy(\n  dataType: keyof typeof DEGRADATION_PRESETS,\n  networkQuality: NetworkQuality,\n  isOffline: boolean\n): DegradationConfig {\n  const preset = DEGRADATION_PRESETS[dataType];\n  \n  if (isOffline) {\n    return {\n      ...preset,\n      strategy: DegradationStrategy.CACHE_FIRST\n    };\n  }\n\n  if (networkQuality === NetworkQuality.POOR) {\n    return {\n      ...preset,\n      strategy: DegradationStrategy.CACHE_FIRST\n    };\n  }\n\n  if (networkQuality === NetworkQuality.EXCELLENT) {\n    return {\n      ...preset,\n      strategy: DegradationStrategy.NETWORK_FIRST\n    };\n  }\n\n  return preset;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/request-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'intelligentScheduler' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'intelligentScheduler' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'QueueItemStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'QueueItemStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'ApiClient' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiClient' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'ApiResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[770,773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[770,773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1528,1531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1528,1531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":73,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":73,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'originalPriority' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":85,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'originalPriority' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":85,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":85,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableEnum","endLine":85,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2471,2487],"text":"(options.priority != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":85,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":85,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2488,2490],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3965,3968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3965,3968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":148,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableEnum","endLine":148,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4070,4086],"text":"options.priority != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4614,4617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4614,4617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":201,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":201,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5334,5349],"text":"(options.timeout != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5334,5349],"text":"(options.timeout ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5334,5349],"text":"(Boolean(options.timeout))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5350,5352],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":204,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":204,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5505,5523],"text":"(options.maxRetries != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5505,5523],"text":"(options.maxRetries ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5505,5523],"text":"(Boolean(options.maxRetries))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":204,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":204,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5524,5526],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":205,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":205,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5566,5584],"text":"(options.retryDelay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5566,5584],"text":"(options.retryDelay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5566,5584],"text":"(Boolean(options.retryDelay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":205,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":205,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5585,5587],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":223,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":223,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6109,6132],"text":"(context.options.timeout != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[6109,6132],"text":"(context.options.timeout ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6109,6132],"text":"(Boolean(context.options.timeout))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":223,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":223,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6133,6135],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":234,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":234,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6445,6468],"text":"(context.options.timeout != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[6445,6468],"text":"(context.options.timeout ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6445,6468],"text":"(Boolean(context.options.timeout))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":234,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":234,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6469,6471],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":281,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":281,"endColumn":38,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7638,7665],"text":"context.options.enableRetry ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7638,7665],"text":"context.options.enableRetry === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":297,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":297,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8030,8056],"text":"(context.options.maxRetries != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8030,8056],"text":"(context.options.maxRetries ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8030,8056],"text":"(Boolean(context.options.maxRetries))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":297,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":297,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8057,8059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8646,8724],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'queueItemId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":329,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":329,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'queueItemId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":329,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":329,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":388,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":388,"endColumn":42,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[10536,10569],"text":"context.options.enableDegradation ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[10536,10569],"text":"context.options.enableDegradation === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11011,11065],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'degradationConfig' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":424,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":424,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'degradationConfig' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":424,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":429,"column":9,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":429,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":439,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":439,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":439,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":439,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":453,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":453,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":453,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":453,"endColumn":10},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":456,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":456,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12165,12208],"text":"Boolean((context.metadata.businessContext?.operation))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":459,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":459,"endColumn":41,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12297,12327],"text":"Boolean(operation.includes('products'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12394,12397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12394,12397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":463,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":463,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12424,12450],"text":"Boolean(operation.includes('user'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":464,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12507,12510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12507,12510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":467,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":467,"endColumn":39,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12537,12565],"text":"Boolean(operation.includes('orders'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":468,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12632,12635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12632,12635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12713,12716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12713,12716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":494,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":494,"endColumn":53,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[13151,13195],"text":"(context.options.monitoring?.trackPerformance) ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[13151,13195],"text":"(context.options.monitoring?.trackPerformance) === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":506,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":506,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":506,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":506,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":506,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13496,13499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13496,13499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":541,"column":12,"nodeType":"MemberExpression","endLine":541,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":557,"column":52,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":557,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14860,14866],"text":"(reason != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[14860,14866],"text":"(reason ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14860,14866],"text":"(Boolean(reason))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":557,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":557,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14867,14869],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":564,"column":28,"nodeType":"MemberExpression","endLine":564,"endColumn":74},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":568,"column":41,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":568,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15221,15227],"text":"(reason != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15221,15227],"text":"(reason ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15221,15227],"text":"(Boolean(reason))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":568,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":568,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15228,15230],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":610,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":610,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16532,16535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16532,16535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":621,"column":40,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":621,"endColumn":47,"fix":{"range":[16745,16912],"text":"for (const [priority, config] of Object.entries(updates.priority)) {\n        PriorityConfigManager.updateConfig(parseInt(priority) as RequestPriority, config);\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":627,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":627,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16956,16984],"text":"updates.global.maxConcurrent != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[16956,16984],"text":"updates.global.maxConcurrent ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16956,16984],"text":"Boolean(updates.global.maxConcurrent)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":632,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":632,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17093,17156],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":641,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":641,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17314,17351],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":662,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":662,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17741,17744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17741,17744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":677,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableEnum","endLine":677,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18179,18195],"text":"(options.priority != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":677,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":677,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18196,18198],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":702,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":702,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[19026,19038],"text":"(result.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[19026,19038],"text":"(result.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19026,19038],"text":"(Boolean(result.error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":702,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":702,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19039,19041],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":749,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":749,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20085,20088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20085,20088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":57,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// request-manager.ts - 统一请求管理器\nimport { RequestPriority, priorityManager, PriorityConfigManager, analyzer } from './priority-manager';\nimport { concurrencyController, intelligentScheduler } from './concurrency-controller';\nimport { monitoringSystem } from './request-monitor';\nimport { NetworkAwareRequestQueue, QueueItemStatus } from './request-queue';\nimport { NetworkRetryManager } from './network-retry';\nimport { RequestDegradationManager } from './request-degradation';\nimport { ApiClient, ApiResponse } from '@/lib/api-client';\n\n// 请求执行选项\nexport interface RequestExecutionOptions {\n  priority?: RequestPriority;\n  timeout?: number;\n  enableRetry?: boolean;\n  enableDegradation?: boolean;\n  maxRetries?: number;\n  retryDelay?: number;\n  metadata?: Record<string, any>;\n  businessContext?: {\n    operation: string;\n    userId?: string;\n    urgency?: 'low' | 'medium' | 'high';\n    businessValue?: 'low' | 'medium' | 'high';\n  };\n  monitoring?: {\n    trackPerformance?: boolean;\n    trackBusinessMetrics?: boolean;\n    metricName?: string;\n  };\n}\n\n// 请求结果\nexport interface RequestResult<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata: {\n    requestId: string;\n    priority: RequestPriority;\n    executionTime: number;\n    retryCount?: number;\n    degradationLevel?: string;\n    networkQuality?: string;\n    waitTime?: number;\n  };\n}\n\n// 请求上下文\ninterface RequestContext {\n  requestId: string;\n  priority: RequestPriority;\n  startTime: number;\n  options: RequestExecutionOptions;\n  metadata: Record<string, any>;\n  abortController: AbortController;\n}\n\n// 统一请求管理器\nexport class RequestManager {\n  private static instance: RequestManager;\n  private queueManager: NetworkAwareRequestQueue;\n  private retryManager: NetworkRetryManager;\n  private degradationManager: RequestDegradationManager;\n  private requestIdGenerator: number = 0;\n\n  private constructor() {\n    this.queueManager = NetworkAwareRequestQueue.getInstance();\n    this.retryManager = NetworkRetryManager.getInstance();\n    this.degradationManager = new RequestDegradationManager();\n  }\n\n  public static getInstance(): RequestManager {\n    if (!RequestManager.instance) {\n      RequestManager.instance = new RequestManager();\n    }\n    return RequestManager.instance;\n  }\n\n  // 统一请求接口\n  async execute<T>(\n    operation: () => Promise<T>,\n    options: RequestExecutionOptions = {}\n  ): Promise<RequestResult<T>> {\n    const requestId = this.generateRequestId();\n    const originalPriority = options.priority || RequestPriority.NORMAL;\n    \n    // 1. 分析和确定优先级\n    const contextPriority = await this.determineRequestPriority(operation, options);\n    const finalPriority = priorityManager.adjustPriority(contextPriority, {\n      systemLoad: this.getCurrentSystemLoad(),\n      networkQuality: this.retryManager.getNetworkQuality()\n    });\n\n    // 2. 创建请求上下文\n    const requestContext = this.createRequestContext(\n      requestId,\n      finalPriority,\n      options\n    );\n\n    // 3. 预检查\n    const canExecute = await this.preExecutionCheck(requestContext);\n    if (!canExecute) {\n      return this.handleExecutionBlocked(requestContext, '并发限制或系统资源不足');\n    }\n\n    // 4. 设置监控\n    this.startRequestTracking(requestContext);\n\n    // 5. 执行请求\n    try {\n      const result = await this.executeWithFullManagement(\n        requestContext,\n        operation\n      );\n\n      // 6. 记录成功\n      this.recordRequestSuccess(requestContext, result);\n\n      return {\n        success: true,\n        data: result,\n        metadata: {\n          requestId,\n          priority: finalPriority,\n          executionTime: Date.now() - requestContext.startTime,\n          networkQuality: this.retryManager.getNetworkQuality()\n        }\n      };\n\n    } catch (error) {\n      // 记录失败\n      const errorResult = await this.handleExecutionError(\n        requestContext,\n        error as Error\n      );\n\n      return errorResult;\n    }\n  }\n\n  // 确定请求优先级\n  private async determineRequestPriority(\n    operation: () => Promise<any>,\n    options: RequestExecutionOptions\n  ): Promise<RequestPriority> {\n    // 如果显式指定优先级，优先使用\n    if (options.priority) {\n      return options.priority;\n    }\n\n    // 使用业务上下文自动确定\n    if (options.businessContext) {\n      return priorityManager.autoDeterminePriority(options.businessContext);\n    }\n\n    // 基于请求特征分析\n    try {\n      const requestInfo = await this.analyzeOperation(operation);\n      const analysis = analyzer.analyzeRequest(requestInfo);\n      return analysis.suggestedPriority;\n    } catch {\n      // 分析失败时使用默认优先级\n      return RequestPriority.NORMAL;\n    }\n  }\n\n  // 分析操作特征\n  private async analyzeOperation(operation: () => Promise<any>): Promise<{\n    url: string;\n    method: string;\n    size?: number;\n    userAgent?: string;\n    referrer?: string;\n  }> {\n    // 简化实现：基于函数名和上下文推断\n    const functionName = operation.name || 'anonymous';\n    \n    return {\n      url: `/api/${functionName}`,\n      method: 'POST',\n      userAgent: navigator.userAgent,\n      referrer: document.referrer\n    };\n  }\n\n  // 创建请求上下文\n  private createRequestContext(\n    requestId: string,\n    priority: RequestPriority,\n    options: RequestExecutionOptions\n  ): RequestContext {\n    const config = PriorityConfigManager.getConfig(priority);\n    \n    return {\n      requestId,\n      priority,\n      startTime: Date.now(),\n      options: {\n        ...options,\n        timeout: options.timeout || config.timeout,\n        enableRetry: options.enableRetry !== false,\n        enableDegradation: options.enableDegradation !== false,\n        maxRetries: options.maxRetries || config.maxRetries,\n        retryDelay: options.retryDelay || config.retryDelay\n      },\n      metadata: {\n        ...options.metadata,\n        businessContext: options.businessContext,\n        monitoring: options.monitoring\n      },\n      abortController: new AbortController()\n    };\n  }\n\n  // 预执行检查\n  private async preExecutionCheck(context: RequestContext): Promise<boolean> {\n    // 检查并发限制\n    const canExecute = await concurrencyController.acquireSlot({\n      id: context.requestId,\n      priority: context.priority,\n      startTime: context.startTime,\n      expectedDuration: context.options.timeout || 30000,\n      abortController: context.abortController,\n      metadata: context.metadata\n    });\n\n    if (!canExecute) {\n      // 添加到等待队列\n      concurrencyController.addToQueue({\n        id: context.requestId,\n        priority: context.priority,\n        startTime: context.startTime,\n        expectedDuration: context.options.timeout || 30000,\n        abortController: context.abortController,\n        metadata: context.metadata\n      });\n    }\n\n    return canExecute;\n  }\n\n  // 完整管理执行\n  private async executeWithFullManagement<T>(\n    context: RequestContext,\n    operation: () => Promise<T>\n  ): Promise<T> {\n    const config = PriorityConfigManager.getConfig(context.priority);\n\n    // 第一阶段：快速执行关键请求\n    if (context.priority === RequestPriority.CRITICAL && !config.enableQueue) {\n      return await this.executeCriticalRequest(context, operation);\n    }\n\n    // 第二阶段：队列管理执行\n    if (config.enableQueue) {\n      return await this.executeWithQueue(context, operation);\n    }\n\n    // 第三阶段：直接执行（备用）\n    return await this.executeDirectly(context, operation);\n  }\n\n  // 关键请求执行\n  private async executeCriticalRequest<T>(\n    context: RequestContext,\n    operation: () => Promise<T>\n  ): Promise<T> {\n    const timeoutId = setTimeout(() => {\n      context.abortController.abort();\n    }, context.options.timeout);\n\n    try {\n      const result = await operation();\n      clearTimeout(timeoutId);\n      return result;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      // 关键请求失败时的特殊处理\n      if (context.options.enableRetry) {\n        return await this.handleCriticalRequestRetry(context, operation, error as Error);\n      }\n      \n      throw error;\n    }\n  }\n\n  // 关键请求重试\n  private async handleCriticalRequestRetry<T>(\n    context: RequestContext,\n    operation: () => Promise<T>,\n    error: Error\n  ): Promise<T> {\n    let lastError = error;\n    \n    for (let attempt = 1; attempt <= (context.options.maxRetries || 1); attempt++) {\n      try {\n        // 短暂延迟后重试\n        await new Promise(resolve => setTimeout(resolve, 200 * attempt));\n        \n        const result = await this.executeCriticalRequest(context, operation);\n        \n        // 记录重试成功\n        monitoringSystem.recordRequestCompletion({\n          requestId: context.requestId,\n          priority: context.priority,\n          duration: Date.now() - context.startTime,\n          success: true,\n          waitTime: 0\n        });\n        \n        return result;\n      } catch (retryError) {\n        lastError = retryError as Error;\n        console.warn(`Critical request retry attempt ${attempt} failed:`, retryError);\n      }\n    }\n    \n    throw lastError;\n  }\n\n  // 队列执行\n  private async executeWithQueue<T>(\n    context: RequestContext,\n    operation: () => Promise<T>\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const queueItemId = this.queueManager.add(operation, {\n        priority: this.convertPriority(context.priority),\n        timeout: context.options.timeout,\n        maxAttempts: context.options.maxRetries,\n        retryDelay: context.options.retryDelay,\n        metadata: {\n          requestId: context.requestId,\n          originalPriority: context.priority,\n          ...context.metadata\n        },\n        onSuccess: (result: T) => {\n          resolve(result);\n        },\n        onError: (error: Error) => {\n          reject(error);\n        }\n      });\n\n      // 设置超时\n      setTimeout(() => {\n        if (!this.queueManager.getItems({ metadata: { requestId: context.requestId } }).length) {\n          reject(new Error('队列执行超时'));\n        }\n      }, context.options.timeout);\n    });\n  }\n\n  // 直接执行\n  private async executeDirectly<T>(\n    context: RequestContext,\n    operation: () => Promise<T>\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        context.abortController.abort();\n        reject(new Error(`请求超时: ${context.options.timeout}ms`));\n      }, context.options.timeout);\n\n      operation()\n        .then(result => {\n          clearTimeout(timeoutId);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timeoutId);\n          reject(error);\n        });\n    });\n  }\n\n  // 处理执行错误\n  private async handleExecutionError<T>(\n    context: RequestContext,\n    error: Error\n  ): Promise<RequestResult<T>> {\n    // 记录失败\n    this.recordRequestFailure(context, error);\n\n    // 尝试降级处理\n    if (context.options.enableDegradation) {\n      try {\n        const degradedResult = await this.handleDegradation(context, error);\n        return {\n          success: true,\n          data: degradedResult,\n          metadata: {\n            requestId: context.requestId,\n            priority: context.priority,\n            executionTime: Date.now() - context.startTime,\n            degradationLevel: 'fallback_data'\n          }\n        };\n      } catch (degradationError) {\n        console.warn('Degradation failed:', degradationError);\n      }\n    }\n\n    // 返回错误结果\n    return {\n      success: false,\n      error: error.message || '请求失败',\n      metadata: {\n        requestId: context.requestId,\n        priority: context.priority,\n        executionTime: Date.now() - context.startTime\n      }\n    };\n  }\n\n  // 处理降级\n  private async handleDegradation<T>(\n    context: RequestContext,\n    error: Error\n  ): Promise<T> {\n    // 基于错误类型和优先级选择降级策略\n    const degradationConfig = this.selectDegradationConfig(context, error);\n    \n    // 模拟降级数据返回\n    const fallbackData = this.generateFallbackData<T>(context, error);\n    \n    if (fallbackData) {\n      return fallbackData;\n    }\n    \n    throw new Error('降级处理失败');\n  }\n\n  // 选择降级配置\n  private selectDegradationConfig(\n    context: RequestContext,\n    error: Error\n  ) {\n    const baseConfig = PriorityConfigManager.getConfig(context.priority);\n    \n    return {\n      ...baseConfig,\n      enableDegradation: true,\n      fallbackEnabled: true\n    };\n  }\n\n  // 生成降级数据\n  private generateFallbackData<T>(\n    context: RequestContext,\n    error: Error\n  ): T | null {\n    // 基于业务上下文生成适当的降级数据\n    if (context.metadata.businessContext?.operation) {\n      const operation = context.metadata.businessContext.operation;\n      \n      if (operation.includes('products')) {\n        return { products: [], total: 0, error: '数据暂时不可用' } as any;\n      }\n      \n      if (operation.includes('user')) {\n        return { user: null, error: '用户信息暂时不可用' } as any;\n      }\n      \n      if (operation.includes('orders')) {\n        return { orders: [], total: 0, error: '订单信息暂时不可用' } as any;\n      }\n    }\n    \n    // 默认降级数据\n    return { message: '服务暂时不可用，请稍后重试' } as any;\n  }\n\n  // 处理执行被阻塞\n  private handleExecutionBlocked<T>(\n    context: RequestContext,\n    reason: string\n  ): RequestResult<T> {\n    return {\n      success: false,\n      error: reason,\n      metadata: {\n        requestId: context.requestId,\n        priority: context.priority,\n        executionTime: Date.now() - context.startTime\n      }\n    };\n  }\n\n  // 开始请求跟踪\n  private startRequestTracking(context: RequestContext): void {\n    if (context.options.monitoring?.trackPerformance) {\n      monitoringSystem.recordRequestCompletion({\n        requestId: context.requestId,\n        priority: context.priority,\n        duration: 0, // 刚开始，尚未完成\n        success: false,\n        waitTime: 0\n      });\n    }\n  }\n\n  // 记录请求成功\n  private recordRequestSuccess(context: RequestContext, result: any): void {\n    const executionTime = Date.now() - context.startTime;\n    \n    monitoringSystem.recordRequestCompletion({\n      requestId: context.requestId,\n      priority: context.priority,\n      duration: executionTime,\n      success: true,\n      waitTime: 0 // TODO: 计算实际等待时间\n    });\n  }\n\n  // 记录请求失败\n  private recordRequestFailure(context: RequestContext, error: Error): void {\n    const executionTime = Date.now() - context.startTime;\n    \n    monitoringSystem.recordRequestCompletion({\n      requestId: context.requestId,\n      priority: context.priority,\n      duration: executionTime,\n      success: false,\n      error: error.message,\n      waitTime: 0\n    });\n  }\n\n  // 转换优先级\n  private convertPriority(priority: RequestPriority) {\n    // 将 RequestPriority 转换为 QueuePriority\n    const priorityMap = {\n      [RequestPriority.LOW]: 0,\n      [RequestPriority.NORMAL]: 1,\n      [RequestPriority.CRITICAL]: 2\n    };\n    \n    return priorityMap[priority] || 1;\n  }\n\n  // 获取当前系统负载\n  private getCurrentSystemLoad(): number {\n    const metrics = monitoringSystem.getCurrentMetrics();\n    return metrics.system.load;\n  }\n\n  // 生成请求ID\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${++this.requestIdGenerator}`;\n  }\n\n  // 取消请求\n  cancelRequest(requestId: string, reason?: string): boolean {\n    concurrencyController.cancelRequest(requestId, reason || 'manual_cancellation');\n    return true;\n  }\n\n  // 批量取消请求\n  cancelRequestsByPriority(priority: RequestPriority, reason?: string): number {\n    // 获取指定优先级的所有活跃请求\n    const activeRequests = concurrencyController.getQueueInfo()[priority];\n    let cancelledCount = 0;\n\n    for (const requestId of activeRequests) {\n      if (this.cancelRequest(requestId, reason || `batch_cancellation_${priority}`)) {\n        cancelledCount++;\n      }\n    }\n\n    return cancelledCount;\n  }\n\n  // 获取请求状态\n  getRequestStatus(requestId: string): {\n    status: 'active' | 'queued' | 'completed' | 'failed' | 'cancelled';\n    priority: RequestPriority;\n    waitTime?: number;\n    executionTime?: number;\n  } {\n    // 检查是否在并发控制器中\n    const isActive = concurrencyController.getMetrics().activeByPriority[RequestPriority.CRITICAL] > 0 ||\n                    concurrencyController.getMetrics().activeByPriority[RequestPriority.NORMAL] > 0 ||\n                    concurrencyController.getMetrics().activeByPriority[RequestPriority.LOW] > 0;\n\n    // 检查是否在队列中\n    const queueInfo = concurrencyController.getQueueInfo();\n    const isQueued = Object.values(queueInfo).some(queue => queue.includes(requestId));\n\n    // TODO: 实现更详细的状态检查逻辑\n    return {\n      status: isActive ? 'active' : isQueued ? 'queued' : 'completed',\n      priority: RequestPriority.NORMAL // 简化实现\n    };\n  }\n\n  // 获取系统指标\n  getSystemMetrics() {\n    return {\n      monitoring: monitoringSystem.getCurrentMetrics(),\n      concurrency: concurrencyController.getMetrics(),\n      system: concurrencyController.getSystemStatus()\n    };\n  }\n\n  // 动态调整配置\n  updateConfiguration(updates: {\n    priority?: Partial<Record<RequestPriority, any>>;\n    global?: {\n      maxConcurrent?: number;\n      defaultTimeout?: number;\n    };\n    monitoring?: {\n      enabled?: boolean;\n      interval?: number;\n    };\n  }): void {\n    if (updates.priority) {\n      Object.entries(updates.priority).forEach(([priority, config]) => {\n        PriorityConfigManager.updateConfig(parseInt(priority) as RequestPriority, config);\n      });\n    }\n\n    if (updates.global) {\n      if (updates.global.maxConcurrent) {\n        concurrencyController.setGlobalConcurrentLimit(updates.global.maxConcurrent);\n      }\n    }\n\n    console.log('Request manager configuration updated:', updates);\n  }\n\n  // 重置管理器\n  reset(): void {\n    concurrencyController.reset();\n    monitoringSystem.stopMonitoring();\n    monitoringSystem.startMonitoring();\n    \n    console.log('Request manager reset');\n  }\n\n  // 销毁管理器\n  destroy(): void {\n    this.reset();\n    // 清理其他资源\n  }\n}\n\n// React Hook 增强版\nimport { useState, useCallback, useMemo, useEffect } from 'react';\n\nexport function useEnhancedApi<T>(\n  apiFunction: () => Promise<T>,\n  options: EnhancedApiOptions = {}\n) {\n  const [state, setState] = useState<{\n    data: T | null;\n    loading: boolean;\n    error: string | null;\n    metrics?: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null\n  });\n\n  const requestManager = useMemo(() => RequestManager.getInstance(), []);\n  const monitoring = useMemo(() => requestManager.getSystemMetrics(), [requestManager]);\n\n  const execute = useCallback(async () => {\n    setState(prev => ({ ...prev, loading: true, error: null }));\n\n    try {\n      const result = await requestManager.execute(apiFunction, {\n        priority: options.priority || RequestPriority.NORMAL,\n        timeout: options.timeout,\n        enableRetry: options.enableRetry !== false,\n        enableDegradation: options.enableDegradation !== false,\n        maxRetries: options.maxRetries,\n        metadata: options.metadata,\n        businessContext: options.businessContext,\n        monitoring: {\n          trackPerformance: options.monitoring?.trackPerformance !== false,\n          trackBusinessMetrics: options.monitoring?.trackBusinessMetrics !== false,\n          metricName: options.monitoring?.metricName\n        }\n      });\n\n      if (result.success) {\n        setState({\n          data: result.data,\n          loading: false,\n          error: null,\n          metrics: result.metadata\n        });\n      } else {\n        setState({\n          data: null,\n          loading: false,\n          error: result.error || '请求失败',\n          metrics: result.metadata\n        });\n      }\n    } catch (error) {\n      setState({\n        data: null,\n        loading: false,\n        error: error instanceof Error ? error.message : '请求失败',\n        metrics: { error: true }\n      });\n    }\n  }, [apiFunction, options, requestManager]);\n\n  const cancel = useCallback(() => {\n    // 取消当前请求的逻辑\n    requestManager.reset();\n  }, [requestManager]);\n\n  // 定期更新指标\n  useEffect(() => {\n    if (options.monitoring?.realTime !== false) {\n      const interval = setInterval(() => {\n        setState(prev => ({\n          ...prev,\n          metrics: requestManager.getSystemMetrics()\n        }));\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [options.monitoring, requestManager]);\n\n  return {\n    ...state,\n    execute,\n    cancel,\n    monitoring: monitoring\n  };\n}\n\nexport interface EnhancedApiOptions {\n  priority?: RequestPriority;\n  timeout?: number;\n  enableRetry?: boolean;\n  enableDegradation?: boolean;\n  maxRetries?: number;\n  metadata?: Record<string, any>;\n  businessContext?: {\n    operation: string;\n    userId?: string;\n    urgency?: 'low' | 'medium' | 'high';\n    businessValue?: 'low' | 'medium' | 'high';\n  };\n  monitoring?: {\n    trackPerformance?: boolean;\n    trackBusinessMetrics?: boolean;\n    metricName?: string;\n    realTime?: boolean;\n  };\n}\n\n// 单例导出\nexport const requestManager = RequestManager.getInstance();\n\nexport default RequestManager;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/request-monitor.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1760,1763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1760,1763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2055,2058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2055,2058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":120,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":120,"endColumn":42},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":212,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":212,"endColumn":35,"fix":{"range":[5215,5222],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5622,5671],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5749,5798],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6206,6209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6206,6209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6400,6450],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6515,6518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6515,6518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":275,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":275,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6589,6611],"text":"Boolean(metricData.performance)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":279,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":279,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6713,6732],"text":"Boolean(metricData.priority)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":283,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":283,"endColumn":29,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6828,6846],"text":"Boolean(metricData.network)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":287,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":287,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6940,6953],"text":"Boolean(metricData.ux)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":291,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":291,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7049,7066],"text":"Boolean(metricData.system)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":342,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":342,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8073,8164],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":369,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":369,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8760,8819],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":378,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8974,9040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9126,9184],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9732,9775],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":455,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":455,"endColumn":26,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[10886,10901],"text":"(filter.resolved ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[10886,10901],"text":"(filter.resolved === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":479,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":479,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":485,"column":13,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":485,"endColumn":44,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[11634,11665],"text":"(data.error?.includes('timeout')) ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[11634,11665],"text":"(data.error?.includes('timeout')) === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'minuteAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":531,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":531,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'minuteAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":531,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":531,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":653,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":653,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16390,16393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16390,16393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":656,"column":34,"nodeType":"CallExpression","messageId":"substr","endLine":656,"endColumn":73,"fix":{"range":[16481,16492],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":792,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":792,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21085,21088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21085,21088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":894,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":894,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23624,23627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23624,23627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":894,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":894,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23669,23672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23669,23672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":901,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":901,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23852,23855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23852,23855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'metrics' is defined but never used. Allowed unused args must match /^_/u.","line":949,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":949,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":955,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":955,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25170,25490],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":956,"column":20,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":956,"endColumn":68,"fix":{"range":[25223,25271],"text":"`${metrics.performance.successRate.toFixed(1)  }%`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":957,"column":18,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":957,"endColumn":64,"fix":{"range":[25290,25336],"text":"`${metrics.performance.errorRate.toFixed(1)  }%`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":958,"column":19,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":958,"endColumn":73,"fix":{"range":[25356,25410],"text":"`${metrics.performance.throughput.toFixed(1)  } req/min`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":959,"column":21,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":959,"endColumn":71,"fix":{"range":[25432,25482],"text":"`${metrics.performance.responseTime.toFixed(0)  }ms`"}}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":6,"fixableWarningCount":0,"source":"// request-monitor.ts - 请求监控系统\nimport { RequestPriority } from './priority-manager';\nimport { NetworkQuality } from './network-retry';\n\nexport interface RequestMetrics {\n  total: number;\n  successful: number;\n  failed: number;\n  timeout: number;\n  cancelled: number;\n  averageResponseTime: number;\n  p50ResponseTime: number;\n  p95ResponseTime: number;\n  p99ResponseTime: number;\n  throughput: number; // requests per minute\n  errorRate: number;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: number;\n  throughput: number;\n  concurrencyLevel: number;\n  queueDepth: number;\n  successRate: number;\n  errorRate: number;\n  memoryUsage: number;\n  cpuUsage: number;\n}\n\nexport interface PriorityMetrics {\n  criticalRequests: RequestMetrics;\n  normalRequests: RequestMetrics;\n  lowRequests: RequestMetrics;\n  priorityDistribution: Record<RequestPriority, number>;\n  averageWaitTimeByPriority: Record<RequestPriority, number>;\n}\n\nexport interface NetworkMetrics {\n  quality: NetworkQuality;\n  averageLatency: number;\n  packetLoss: number;\n  bandwidthUtilization: number;\n  connectionType: string;\n  signalStrength: number;\n}\n\nexport interface UXMetrics {\n  perceivedPerformance: number;\n  completionRate: number;\n  abandonmentRate: number;\n  satisfactionScore: number;\n  userWaitTime: number;\n}\n\nexport interface RequestMonitoringMetrics {\n  timestamp: number;\n  performance: PerformanceMetrics;\n  priority: PriorityMetrics;\n  network: NetworkMetrics;\n  userExperience: UXMetrics;\n  system: {\n    load: number;\n    memory: number;\n    activeConnections: number;\n  };\n}\n\nexport interface Alert {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: string;\n  title: string;\n  message: string;\n  timestamp: number;\n  metrics: Record<string, any>;\n  acknowledged: boolean;\n  resolvedAt?: number;\n}\n\nexport interface OptimizationRecommendation {\n  id: string;\n  priority: 'low' | 'medium' | 'high';\n  category: string;\n  title: string;\n  description: string;\n  estimatedImpact: string;\n  implementation: string;\n  metrics: Record<string, any>;\n}\n\n// 实时监控器\nexport class RequestMonitoringSystem {\n  private static instance: RequestMonitoringSystem;\n  private metrics: RequestMonitoringMetrics;\n  private alerts: Alert[] = [];\n  private recommendations: OptimizationRecommendation[] = [];\n  private reporters: MetricReporter[] = [];\n  private history: RequestMonitoringMetrics[] = [];\n  private maxHistorySize = 1000;\n  private isCollecting = false;\n\n  // 指标收集器\n  private collectors = new Map<string, MetricCollector>();\n  \n  // 告警管理器\n  private alertManager: AlertManager;\n  \n  // 优化引擎\n  private optimizationEngine: OptimizationEngine;\n\n  private constructor() {\n    this.metrics = this.initializeMetrics();\n    this.alertManager = new AlertManager(this);\n    this.optimizationEngine = new OptimizationEngine(this);\n    this.setupCollectors();\n    this.startMonitoring();\n  }\n\n  public static getInstance(): RequestMonitoringSystem {\n    if (!RequestMonitoringSystem.instance) {\n      RequestMonitoringSystem.instance = new RequestMonitoringSystem();\n    }\n    return RequestMonitoringSystem.instance;\n  }\n\n  // 初始化指标\n  private initializeMetrics(): RequestMonitoringMetrics {\n    return {\n      timestamp: Date.now(),\n      performance: {\n        responseTime: 0,\n        throughput: 0,\n        concurrencyLevel: 0,\n        queueDepth: 0,\n        successRate: 100,\n        errorRate: 0,\n        memoryUsage: 0,\n        cpuUsage: 0\n      },\n      priority: {\n        criticalRequests: this.initializeRequestMetrics(),\n        normalRequests: this.initializeRequestMetrics(),\n        lowRequests: this.initializeRequestMetrics(),\n        priorityDistribution: {\n          [RequestPriority.CRITICAL]: 0,\n          [RequestPriority.NORMAL]: 0,\n          [RequestPriority.LOW]: 0\n        },\n        averageWaitTimeByPriority: {\n          [RequestPriority.CRITICAL]: 0,\n          [RequestPriority.NORMAL]: 0,\n          [RequestPriority.LOW]: 0\n        }\n      },\n      network: {\n        quality: NetworkQuality.EXCELLENT,\n        averageLatency: 0,\n        packetLoss: 0,\n        bandwidthUtilization: 0,\n        connectionType: 'unknown',\n        signalStrength: 0\n      },\n      userExperience: {\n        perceivedPerformance: 100,\n        completionRate: 100,\n        abandonmentRate: 0,\n        satisfactionScore: 5,\n        userWaitTime: 0\n      },\n      system: {\n        load: 0,\n        memory: 0,\n        activeConnections: 0\n      }\n    };\n  }\n\n  // 初始化请求指标\n  private initializeRequestMetrics(): RequestMetrics {\n    return {\n      total: 0,\n      successful: 0,\n      failed: 0,\n      timeout: 0,\n      cancelled: 0,\n      averageResponseTime: 0,\n      p50ResponseTime: 0,\n      p95ResponseTime: 0,\n      p99ResponseTime: 0,\n      throughput: 0,\n      errorRate: 0\n    };\n  }\n\n  // 设置指标收集器\n  private setupCollectors() {\n    // 性能收集器\n    this.collectors.set('performance', new PerformanceCollector());\n    \n    // 网络收集器\n    this.collectors.set('network', new NetworkCollector());\n    \n    // 系统收集器\n    this.collectors.set('system', new SystemCollector());\n    \n    // 用户体验收集器\n    this.collectors.set('ux', new UXCollector());\n  }\n\n  // 开始监控\n  startMonitoring(): void {\n    if (this.isCollecting) return;\n    \n    this.isCollecting = true;\n    \n    // 主要指标收集\n    setInterval(() => {\n      this.collectCoreMetrics();\n    }, 1000);\n\n    // 告警检查\n    setInterval(() => {\n      this.checkAlerts();\n    }, 5000);\n\n    // 历史数据清理\n    setInterval(() => {\n      this.cleanupHistory();\n    }, 60000);\n\n    // 自动优化检查\n    setInterval(() => {\n      this.optimizationEngine.checkForOptimizations();\n    }, 30000);\n\n    console.log('Request monitoring system started');\n  }\n\n  // 停止监控\n  stopMonitoring(): void {\n    this.isCollecting = false;\n    console.log('Request monitoring system stopped');\n  }\n\n  // 收集核心指标\n  private async collectCoreMetrics(): Promise<void> {\n    try {\n      // 并行收集所有指标\n      const results = await Promise.allSettled(\n        Array.from(this.collectors.values()).map(collector => collector.collect())\n      );\n\n      // 更新指标\n      const collectedMetrics = results\n        .filter(result => result.status === 'fulfilled')\n        .map(result => (result as PromiseFulfilledResult<any>).value);\n\n      // 合并指标数据\n      this.mergeMetrics(collectedMetrics);\n\n      // 更新历史记录\n      this.updateHistory();\n\n      // 通知报告器\n      this.notifyReporters();\n\n    } catch (error) {\n      console.error('Error collecting metrics:', error);\n    }\n  }\n\n  // 合并指标数据\n  private mergeMetrics(collectedMetrics: any[]): void {\n    for (const metricData of collectedMetrics) {\n      if (metricData.performance) {\n        Object.assign(this.metrics.performance, metricData.performance);\n      }\n      \n      if (metricData.priority) {\n        Object.assign(this.metrics.priority, metricData.priority);\n      }\n      \n      if (metricData.network) {\n        Object.assign(this.metrics.network, metricData.network);\n      }\n      \n      if (metricData.ux) {\n        Object.assign(this.metrics.userExperience, metricData.ux);\n      }\n      \n      if (metricData.system) {\n        Object.assign(this.metrics.system, metricData.system);\n      }\n    }\n\n    this.metrics.timestamp = Date.now();\n  }\n\n  // 更新历史记录\n  private updateHistory(): void {\n    this.history.push({ ...this.metrics });\n    \n    if (this.history.length > this.maxHistorySize) {\n      this.history.shift();\n    }\n  }\n\n  // 清理历史数据\n  private cleanupHistory(): void {\n    const now = Date.now();\n    const maxAge = 3600000; // 1小时\n\n    this.history = this.history.filter(\n      metric => now - metric.timestamp < maxAge\n    );\n  }\n\n  // 检查告警\n  private checkAlerts(): void {\n    const newAlerts = this.alertManager.checkThresholds(this.metrics);\n    \n    for (const alert of newAlerts) {\n      this.addAlert(alert);\n    }\n  }\n\n  // 添加告警\n  addAlert(alert: Alert): void {\n    this.alerts.push(alert);\n    \n    // 限制告警数量\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(-100);\n    }\n\n    // 发送告警通知\n    this.notifyAlert(alert);\n  }\n\n  // 发送告警通知\n  private notifyAlert(alert: Alert): void {\n    console.warn(`ALERT [${alert.severity.toUpperCase()}]: ${alert.title} - ${alert.message}`);\n    \n    // 这里可以集成邮件、短信、Slack等通知方式\n    if (alert.severity === 'critical') {\n      // 严重告警立即处理\n      this.handleCriticalAlert(alert);\n    }\n  }\n\n  // 处理严重告警\n  private handleCriticalAlert(alert: Alert): void {\n    // 实施紧急措施\n    switch (alert.type) {\n      case 'system_overload':\n        this.emergencyOverloadHandling();\n        break;\n      case 'critical_request_failure':\n        this.emergencyRequestFailureHandling();\n        break;\n      case 'network_outage':\n        this.emergencyNetworkHandling();\n        break;\n    }\n  }\n\n  // 紧急过载处理\n  private emergencyOverloadHandling(): void {\n    console.log('Implementing emergency overload handling...');\n    // 这里可以实施紧急措施，如：\n    // - 暂时降低非关键请求优先级\n    // - 启用额外的缓存\n    // - 发送通知给运维团队\n  }\n\n  // 紧急请求失败处理\n  private emergencyRequestFailureHandling(): void {\n    console.log('Implementing emergency request failure handling...');\n    // 实施请求失败的紧急处理\n  }\n\n  // 紧急网络处理\n  private emergencyNetworkHandling(): void {\n    console.log('Implementing emergency network handling...');\n    // 实施网络问题的紧急处理\n  }\n\n  // 确认告警\n  acknowledgeAlert(alertId: string): void {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n    }\n  }\n\n  // 解决告警\n  resolveAlert(alertId: string): void {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.resolvedAt = Date.now();\n    }\n  }\n\n  // 通知报告器\n  private notifyReporters(): void {\n    for (const reporter of this.reporters) {\n      try {\n        reporter.report(this.metrics);\n      } catch (error) {\n        console.error('Error in reporter:', error);\n      }\n    }\n  }\n\n  // 添加报告器\n  addReporter(reporter: MetricReporter): void {\n    this.reporters.push(reporter);\n  }\n\n  // 获取当前指标\n  getCurrentMetrics(): RequestMonitoringMetrics {\n    return { ...this.metrics };\n  }\n\n  // 获取历史指标\n  getHistoryMetrics(timeRange?: { start: number; end: number }): RequestMonitoringMetrics[] {\n    if (!timeRange) {\n      return [...this.history];\n    }\n\n    return this.history.filter(\n      metric => \n        metric.timestamp >= timeRange.start && \n        metric.timestamp <= timeRange.end\n    );\n  }\n\n  // 获取告警\n  getAlerts(filter?: { \n    severity?: Alert['severity']; \n    acknowledged?: boolean;\n    resolved?: boolean;\n  }): Alert[] {\n    let filteredAlerts = [...this.alerts];\n\n    if (filter) {\n      if (filter.severity) {\n        filteredAlerts = filteredAlerts.filter(a => a.severity === filter.severity);\n      }\n      if (filter.acknowledged !== undefined) {\n        filteredAlerts = filteredAlerts.filter(a => a.acknowledged === filter.acknowledged);\n      }\n      if (filter.resolved !== undefined) {\n        filteredAlerts = filteredAlerts.filter(a => \n          filter.resolved ? a.resolvedAt !== undefined : a.resolvedAt === undefined\n        );\n      }\n    }\n\n    return filteredAlerts.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  // 获取优化建议\n  getRecommendations(): OptimizationRecommendation[] {\n    return [...this.recommendations];\n  }\n\n  // 记录请求完成\n  recordRequestCompletion(data: {\n    requestId: string;\n    priority: RequestPriority;\n    duration: number;\n    success: boolean;\n    error?: string;\n    waitTime: number;\n  }): void {\n    const metric = this.metrics.priority[`${data.priority}Requests` as keyof PriorityMetrics] as RequestMetrics;\n    \n    if (metric) {\n      metric.total++;\n      if (data.success) {\n        metric.successful++;\n      } else {\n        metric.failed++;\n        if (data.error?.includes('timeout')) {\n          metric.timeout++;\n        }\n      }\n\n      // 更新响应时间\n      this.updateResponseTimeMetrics(metric, data.duration);\n      \n      // 更新错误率\n      metric.errorRate = (metric.failed / metric.total) * 100;\n      \n      // 更新吞吐量\n      this.updateThroughput(metric);\n    }\n\n    // 更新优先级分布\n    this.metrics.priority.priorityDistribution[data.priority]++;\n    \n    // 更新平均等待时间\n    const currentWaitTime = this.metrics.priority.averageWaitTimeByPriority[data.priority];\n    const totalRequests = this.metrics.priority.priorityDistribution[data.priority];\n    this.metrics.priority.averageWaitTimeByPriority[data.priority] = \n      (currentWaitTime * (totalRequests - 1) + data.waitTime) / totalRequests;\n  }\n\n  // 更新响应时间指标\n  private updateResponseTimeMetrics(metric: RequestMetrics, duration: number): void {\n    // 简化实现：使用移动平均\n    if (metric.averageResponseTime === 0) {\n      metric.averageResponseTime = duration;\n      metric.p50ResponseTime = duration;\n      metric.p95ResponseTime = duration;\n      metric.p99ResponseTime = duration;\n    } else {\n      const alpha = 0.1; // 移动平均系数\n      metric.averageResponseTime = metric.averageResponseTime * (1 - alpha) + duration * alpha;\n      metric.p50ResponseTime = metric.p50ResponseTime * (1 - alpha) + duration * alpha;\n      metric.p95ResponseTime = metric.p95ResponseTime * (1 - alpha) + duration * alpha;\n      metric.p99ResponseTime = metric.p99ResponseTime * (1 - alpha) + duration * alpha;\n    }\n  }\n\n  // 更新吞吐量\n  private updateThroughput(metric: RequestMetrics): void {\n    // 计算每分钟吞吐量\n    const now = Date.now();\n    const minuteAgo = now - 60000;\n    \n    // 这里应该根据实际的时间序列数据计算\n    // 简化实现\n    metric.throughput = metric.total / ((now - this.metrics.timestamp) / 60000);\n  }\n\n  // 获取系统健康状态\n  getSystemHealth(): {\n    status: 'healthy' | 'warning' | 'critical';\n    score: number;\n    issues: string[];\n  } {\n    const issues: string[] = [];\n    let score = 100;\n\n    // 检查错误率\n    if (this.metrics.performance.errorRate > 5) {\n      issues.push('High error rate');\n      score -= 20;\n    }\n\n    // 检查响应时间\n    if (this.metrics.performance.responseTime > 5000) {\n      issues.push('High response time');\n      score -= 15;\n    }\n\n    // 检查关键请求成功率\n    if (this.metrics.priority.criticalRequests.errorRate > 1) {\n      issues.push('Critical request failures');\n      score -= 25;\n    }\n\n    // 检查网络质量\n    if (this.metrics.network.quality === NetworkQuality.POOR) {\n      issues.push('Poor network quality');\n      score -= 10;\n    }\n\n    // 确定状态\n    let status: 'healthy' | 'warning' | 'critical';\n    if (score >= 80) {\n      status = 'healthy';\n    } else if (score >= 50) {\n      status = 'warning';\n    } else {\n      status = 'critical';\n    }\n\n    return { status, score, issues };\n  }\n\n  // 销毁监控器\n  destroy(): void {\n    this.stopMonitoring();\n    this.collectors.clear();\n    this.reporters.length = 0;\n    this.history.length = 0;\n  }\n}\n\n// 告警管理器\nclass AlertManager {\n  private monitoringSystem: RequestMonitoringSystem;\n  private thresholds = {\n    successRate: 95,\n    criticalResponseTime: 5000,\n    errorRate: 5,\n    queueDepth: 100,\n    systemLoad: 0.8,\n    memoryUsage: 0.9\n  };\n\n  constructor(monitoringSystem: RequestMonitoringSystem) {\n    this.monitoringSystem = monitoringSystem;\n  }\n\n  checkThresholds(metrics: RequestMonitoringMetrics): Alert[] {\n    const alerts: Alert[] = [];\n\n    // 成功率检查\n    if (metrics.performance.successRate < this.thresholds.successRate) {\n      alerts.push(this.createAlert(\n        'low_success_rate',\n        'medium',\n        'Success Rate Below Threshold',\n        `Success rate is ${metrics.performance.successRate}%, below ${this.thresholds.successRate}%`,\n        { successRate: metrics.performance.successRate }\n      ));\n    }\n\n    // 关键请求响应时间检查\n    if (metrics.priority.criticalRequests.p95ResponseTime > this.thresholds.criticalResponseTime) {\n      alerts.push(this.createAlert(\n        'critical_request_slow',\n        'high',\n        'Critical Request Response Time High',\n        `Critical requests P95 response time is ${metrics.priority.criticalRequests.p95ResponseTime}ms`,\n        { p95ResponseTime: metrics.priority.criticalRequests.p95ResponseTime }\n      ));\n    }\n\n    // 错误率检查\n    if (metrics.performance.errorRate > this.thresholds.errorRate) {\n      alerts.push(this.createAlert(\n        'high_error_rate',\n        'high',\n        'Error Rate Above Threshold',\n        `Error rate is ${metrics.performance.errorRate}%, above ${this.thresholds.errorRate}%`,\n        { errorRate: metrics.performance.errorRate }\n      ));\n    }\n\n    return alerts;\n  }\n\n  private createAlert(\n    type: string,\n    severity: Alert['severity'],\n    title: string,\n    message: string,\n    metrics: Record<string, any>\n  ): Alert {\n    return {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      severity,\n      type,\n      title,\n      message,\n      timestamp: Date.now(),\n      metrics,\n      acknowledged: false\n    };\n  }\n}\n\n// 优化引擎\nclass OptimizationEngine {\n  private monitoringSystem: RequestMonitoringSystem;\n  private lastOptimizationCheck = 0;\n  private optimizationCooldown = 300000; // 5分钟\n\n  constructor(monitoringSystem: RequestMonitoringSystem) {\n    this.monitoringSystem = monitoringSystem;\n  }\n\n  checkForOptimizations(): void {\n    const now = Date.now();\n    if (now - this.lastOptimizationCheck < this.optimizationCooldown) {\n      return;\n    }\n\n    this.lastOptimizationCheck = now;\n    const metrics = this.monitoringSystem.getCurrentMetrics();\n\n    // 检查并发控制优化\n    this.checkConcurrencyOptimization(metrics);\n    \n    // 检查重试策略优化\n    this.checkRetryOptimization(metrics);\n    \n    // 检查缓存策略优化\n    this.checkCacheOptimization(metrics);\n  }\n\n  private checkConcurrencyOptimization(metrics: RequestMonitoringMetrics): void {\n    const recommendations: OptimizationRecommendation[] = [];\n\n    // 如果关键请求积压\n    if (metrics.priority.averageWaitTimeByPriority[RequestPriority.CRITICAL] > 3000) {\n      recommendations.push({\n        id: `opt_${Date.now()}_1`,\n        priority: 'high',\n        category: 'concurrency',\n        title: 'Increase Critical Request Concurrency',\n        description: 'Critical requests are experiencing high wait times. Consider increasing concurrency limits.',\n        estimatedImpact: 'Reduce critical request wait time by 40-60%',\n        implementation: 'Increase max concurrent critical requests from 10 to 15',\n        metrics: { waitTime: metrics.priority.averageWaitTimeByPriority[RequestPriority.CRITICAL] }\n      });\n    }\n\n    // 如果低优先级请求过多\n    const lowPriorityRatio = metrics.priority.priorityDistribution[RequestPriority.LOW] / \n      (Object.values(metrics.priority.priorityDistribution).reduce((a, b) => a + b, 0) || 1);\n    \n    if (lowPriorityRatio > 0.7) {\n      recommendations.push({\n        id: `opt_${Date.now()}_2`,\n        priority: 'medium',\n        category: 'concurrency',\n        title: 'Optimize Low Priority Request Handling',\n        description: 'High proportion of low priority requests detected. Consider batching or deferring.',\n        estimatedImpact: 'Free up resources for higher priority requests',\n        implementation: 'Implement batching for low priority requests with 10-second delay',\n        metrics: { lowPriorityRatio }\n      });\n    }\n\n    this.addRecommendations(recommendations);\n  }\n\n  private checkRetryOptimization(metrics: RequestMonitoringMetrics): void {\n    // 检查重试效果\n    const totalRetries = metrics.priority.criticalRequests.failed + \n                       metrics.priority.normalRequests.failed + \n                       metrics.priority.lowRequests.failed;\n\n    if (totalRetries > 50) {\n      const recommendations: OptimizationRecommendation[] = [{\n        id: `opt_${Date.now()}_3`,\n        priority: 'medium',\n        category: 'retry',\n        title: 'Optimize Retry Strategy',\n        description: 'High number of retry attempts detected. Consider adjusting retry parameters.',\n        estimatedImpact: 'Reduce total retry attempts by 20-30%',\n        implementation: 'Implement exponential backoff with jitter for failed requests',\n        metrics: { totalRetries }\n      }];\n\n      this.addRecommendations(recommendations);\n    }\n  }\n\n  private checkCacheOptimization(metrics: RequestMonitoringMetrics): void {\n    // 检查缓存命中率（如果有相关指标）\n    // 这里需要根据实际的缓存监控数据来实现\n    \n    // 简化示例：基于错误率推断缓存效果\n    if (metrics.performance.errorRate > 3) {\n      const recommendations: OptimizationRecommendation[] = [{\n        id: `opt_${Date.now()}_4`,\n        priority: 'low',\n        category: 'cache',\n        title: 'Improve Cache Strategy',\n        description: 'High error rate may indicate cache issues. Consider improving cache invalidation.',\n        estimatedImpact: 'Reduce error rate by 10-15%',\n        implementation: 'Review cache invalidation logic and improve cache hit rate',\n        metrics: { errorRate: metrics.performance.errorRate }\n      }];\n\n      this.addRecommendations(recommendations);\n    }\n  }\n\n  private addRecommendations(recommendations: OptimizationRecommendation[]): void {\n    for (const rec of recommendations) {\n      this.monitoringSystem['recommendations'].push(rec);\n    }\n\n    // 限制建议数量\n    if (this.monitoringSystem['recommendations'].length > 50) {\n      this.monitoringSystem['recommendations'] = \n        this.monitoringSystem['recommendations'].slice(-50);\n    }\n  }\n}\n\n// 指标收集器接口\ninterface MetricCollector {\n  collect(): Promise<any>;\n}\n\n// 性能收集器\nclass PerformanceCollector implements MetricCollector {\n  async collect() {\n    // 收集性能相关指标\n    return {\n      performance: {\n        responseTime: this.getAverageResponseTime(),\n        throughput: this.getThroughput(),\n        concurrencyLevel: this.getConcurrencyLevel(),\n        queueDepth: this.getQueueDepth(),\n        successRate: this.getSuccessRate(),\n        errorRate: this.getErrorRate()\n      }\n    };\n  }\n\n  private getAverageResponseTime(): number {\n    // 实现实际的数据获取逻辑\n    return Math.random() * 2000 + 500; // 模拟数据\n  }\n\n  private getThroughput(): number {\n    return Math.random() * 100 + 50; // 模拟数据\n  }\n\n  private getConcurrencyLevel(): number {\n    return Math.floor(Math.random() * 20) + 1; // 模拟数据\n  }\n\n  private getQueueDepth(): number {\n    return Math.floor(Math.random() * 50); // 模拟数据\n  }\n\n  private getSuccessRate(): number {\n    return Math.random() * 10 + 90; // 90-100% 模拟数据\n  }\n\n  private getErrorRate(): number {\n    return Math.random() * 5; // 0-5% 模拟数据\n  }\n}\n\n// 网络收集器\nclass NetworkCollector implements MetricCollector {\n  async collect() {\n    return {\n      network: {\n        quality: this.getNetworkQuality(),\n        averageLatency: this.getAverageLatency(),\n        packetLoss: this.getPacketLoss(),\n        bandwidthUtilization: this.getBandwidthUtilization(),\n        connectionType: this.getConnectionType(),\n        signalStrength: this.getSignalStrength()\n      }\n    };\n  }\n\n  private getNetworkQuality(): NetworkQuality {\n    // 实现实际的网络质量检测\n    const qualities = Object.values(NetworkQuality);\n    return qualities[Math.floor(Math.random() * qualities.length)];\n  }\n\n  private getAverageLatency(): number {\n    return Math.random() * 200 + 50; // 50-250ms 模拟数据\n  }\n\n  private getPacketLoss(): number {\n    return Math.random() * 2; // 0-2% 模拟数据\n  }\n\n  private getBandwidthUtilization(): number {\n    return Math.random() * 80 + 10; // 10-90% 模拟数据\n  }\n\n  private getConnectionType(): string {\n    const types = ['wifi', 'cellular', 'ethernet', 'unknown'];\n    return types[Math.floor(Math.random() * types.length)];\n  }\n\n  private getSignalStrength(): number {\n    return Math.random() * 100; // 0-100% 模拟数据\n  }\n}\n\n// 系统收集器\nclass SystemCollector implements MetricCollector {\n  async collect() {\n    return {\n      system: {\n        load: this.getSystemLoad(),\n        memory: this.getMemoryUsage(),\n        activeConnections: this.getActiveConnections()\n      }\n    };\n  }\n\n  private getSystemLoad(): number {\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize / (performance as any).memory.jsHeapSizeLimit;\n    }\n    return Math.random(); // 模拟数据\n  }\n\n  private getMemoryUsage(): number {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      return memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n    }\n    return Math.random(); // 模拟数据\n  }\n\n  private getActiveConnections(): number {\n    return Math.floor(Math.random() * 1000) + 100; // 100-1100 模拟数据\n  }\n}\n\n// 用户体验收集器\nclass UXCollector implements MetricCollector {\n  async collect() {\n    return {\n      ux: {\n        perceivedPerformance: this.getPerceivedPerformance(),\n        completionRate: this.getCompletionRate(),\n        abandonmentRate: this.getAbandonmentRate(),\n        satisfactionScore: this.getSatisfactionScore(),\n        userWaitTime: this.getUserWaitTime()\n      }\n    };\n  }\n\n  private getPerceivedPerformance(): number {\n    return Math.random() * 20 + 80; // 80-100 模拟数据\n  }\n\n  private getCompletionRate(): number {\n    return Math.random() * 10 + 90; // 90-100% 模拟数据\n  }\n\n  private getAbandonmentRate(): number {\n    return Math.random() * 5; // 0-5% 模拟数据\n  }\n\n  private getSatisfactionScore(): number {\n    return Math.random() * 2 + 3; // 3-5 模拟数据\n  }\n\n  private getUserWaitTime(): number {\n    return Math.random() * 3000 + 500; // 500-3500ms 模拟数据\n  }\n}\n\n// 指标报告器接口\ninterface MetricReporter {\n  report(metrics: RequestMonitoringMetrics): void;\n}\n\n// 控制台报告器\nclass ConsoleReporter implements MetricReporter {\n  report(metrics: RequestMonitoringMetrics): void {\n    console.log('Current metrics:', {\n      successRate: metrics.performance.successRate.toFixed(1) + '%',\n      errorRate: metrics.performance.errorRate.toFixed(1) + '%',\n      throughput: metrics.performance.throughput.toFixed(1) + ' req/min',\n      responseTime: metrics.performance.responseTime.toFixed(0) + 'ms'\n    });\n  }\n}\n\n// 单例导出\nexport const monitoringSystem = RequestMonitoringSystem.getInstance();\nexport const consoleReporter = new ConsoleReporter();\n\n// 添加默认报告器\nmonitoringSystem.addReporter(consoleReporter);\n\nexport default RequestMonitoringSystem;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/request-queue.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'NetworkQuality' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NetworkQuality' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'PENDING' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'RETRYING' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'PROCESSING' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'COMPLETED' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'FAILED' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'CANCELLED' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'LOW' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'NORMAL' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'HIGH' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'CRITICAL' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[776,779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[776,779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":113,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":113,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4016,4019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4016,4019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":160,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":161,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":161,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":162,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":162,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":177,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableEnum","endLine":177,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4443,4459],"text":"(options.priority != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4460,4462],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":181,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":181,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4591,4610],"text":"(options.maxAttempts != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4591,4610],"text":"(options.maxAttempts ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4591,4610],"text":"(Boolean(options.maxAttempts))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4611,4613],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":182,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":182,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4662,4680],"text":"(options.retryDelay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4662,4680],"text":"(options.retryDelay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4662,4680],"text":"(Boolean(options.retryDelay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":182,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":182,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4681,4683],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":183,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":183,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4730,4745],"text":"(options.timeout != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4730,4745],"text":"(options.timeout ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4730,4745],"text":"(Boolean(options.timeout))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":183,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":183,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4746,4748],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5404,5407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5404,5407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":212,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":213,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":213,"endColumn":39},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":223,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":223,"endColumn":36,"fix":{"range":[5800,5813],"text":"{return false;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":225,"column":18,"nodeType":"MemberExpression","endLine":225,"endColumn":35},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":238,"column":16,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":238,"endColumn":29,"fix":{"range":[6179,6192],"text":"{return false;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6573,6594],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6661,6682],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":268,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":268,"endColumn":23,"fix":{"range":[6721,6794],"text":"for (const item of this.queue) {\n      item.abortController?.abort();\n    }"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":306,"column":50,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":306,"endColumn":57,"fix":{"range":[7682,7689],"text":"{return;}"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":401,"column":29,"nodeType":"CallExpression","messageId":"substr","endLine":401,"endColumn":68,"fix":{"range":[10374,10385],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":422,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":422,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10863,10879],"text":"(item.completedAt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[10863,10879],"text":"(item.completedAt ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10863,10879],"text":"(Boolean(item.completedAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":422,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":422,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10880,10882],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":442,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorOther","endLine":442,"endColumn":80,"suggestions":[{"messageId":"explicitBooleanReturnType","fix":{"range":[11442,11446],"text":"(item): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":442,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":442,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11450,11466],"text":"(item.completedAt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11450,11466],"text":"(item.completedAt ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11450,11466],"text":"(Boolean(item.completedAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":461,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":461,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11931,11934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11931,11934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":465,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorNullableEnum","endLine":465,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12015,12029],"text":"(filter?.status) != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":469,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorNullableEnum","endLine":469,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12115,12131],"text":"(filter?.priority) != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":475,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":475,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":476,"column":11,"nodeType":"MemberExpression","endLine":476,"endColumn":31},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":507,"column":21,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":507,"endColumn":28,"fix":{"range":[12862,12940],"text":"for (const item of this.processing) {\n      item.abortController?.abort();\n    }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":545,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13883,13886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13883,13886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":546,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":546,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":547,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":547,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":548,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":548,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":562,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14368,14371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14368,14371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used. Allowed unused args must match /^_/u.","line":563,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":563,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":564,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":564,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":565,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":565,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":601,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":601,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15321,15324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15321,15324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":4,"fixableWarningCount":2,"source":"// request-queue.ts - 请求队列管理\nimport { NetworkQuality, NetworkRetryManager } from './network-retry';\n\n// 队列项状态\nexport enum QueueItemStatus {\n  PENDING = 'pending',\n  RETRYING = 'retrying',\n  PROCESSING = 'processing',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled'\n}\n\n// 队列项优先级\nexport enum QueuePriority {\n  LOW = 0,\n  NORMAL = 1,\n  HIGH = 2,\n  CRITICAL = 3\n}\n\n// 队列项接口\nexport interface QueueItem<T = any> {\n  id: string;\n  operation: () => Promise<T>;\n  priority: QueuePriority;\n  status: QueueItemStatus;\n  createdAt: number;\n  scheduledAt?: number;\n  startedAt?: number;\n  completedAt?: number;\n  attempts: number;\n  maxAttempts: number;\n  retryDelay: number;\n  timeout?: number;\n  dependencies?: string[]; // 依赖的队列项ID\n  metadata?: Record<string, any>;\n  onSuccess?: (result: T) => void;\n  onError?: (error: Error) => void;\n  onProgress?: (progress: number) => void;\n  abortController?: AbortController;\n}\n\n// 队列配置\nexport interface QueueConfig {\n  maxConcurrent?: number;        // 最大并发数\n  maxQueueSize?: number;         // 最大队列大小\n  defaultRetryDelay?: number;    // 默认重试延迟\n  maxRetryAttempts?: number;     // 最大重试次数\n  timeout?: number;              // 默认超时时间\n  enableBatchProcessing?: boolean; // 启用批处理\n  batchSize?: number;            // 批处理大小\n  batchInterval?: number;        // 批处理间隔\n  pauseOnNetworkPoor?: boolean;  // 网络差时暂停\n  maxRetriesPerItem?: number;    // 单项最大重试次数\n  cleanupInterval?: number;      // 清理间隔\n}\n\n// 队列统计信息\nexport interface QueueStats {\n  totalItems: number;\n  pendingItems: number;\n  processingItems: number;\n  completedItems: number;\n  failedItems: number;\n  cancelledItems: number;\n  averageWaitTime: number;\n  averageProcessTime: number;\n  throughput: number; // 每分钟处理的项数\n  successRate: number;\n  errorRate: number;\n}\n\n// 网络感知队列管理器\nexport class NetworkAwareRequestQueue {\n  private static instance: NetworkAwareRequestQueue;\n  private queue: QueueItem[] = [];\n  private processing = new Map<string, QueueItem>();\n  private stats: QueueStats;\n  private config: Required<QueueConfig>;\n  private networkRetryManager: NetworkRetryManager;\n  \n  private processingTimer?: NodeJS.Timeout;\n  private cleanupTimer?: NodeJS.Timeout;\n  private batchTimer?: NodeJS.Timeout;\n  private isPaused = false;\n  private isDestroyed = false;\n\n  private constructor(config: QueueConfig = {}) {\n    this.networkRetryManager = NetworkRetryManager.getInstance();\n    this.config = {\n      maxConcurrent: 3,\n      maxQueueSize: 1000,\n      defaultRetryDelay: 1000,\n      maxRetryAttempts: 3,\n      timeout: 30000,\n      enableBatchProcessing: false,\n      batchSize: 5,\n      batchInterval: 1000,\n      pauseOnNetworkPoor: true,\n      maxRetriesPerItem: 3,\n      cleanupInterval: 60000, // 1分钟\n      ...config\n    };\n\n    this.stats = this.initializeStats();\n    this.startProcessing();\n    this.startCleanup();\n    this.setupNetworkMonitoring();\n  }\n\n  public static getInstance(config?: QueueConfig): NetworkAwareRequestQueue {\n    if (!NetworkAwareRequestQueue.instance) {\n      NetworkAwareRequestQueue.instance = new NetworkAwareRequestQueue(config);\n    }\n    return NetworkAwareRequestQueue.instance;\n  }\n\n  // 初始化统计信息\n  private initializeStats(): QueueStats {\n    return {\n      totalItems: 0,\n      pendingItems: 0,\n      processingItems: 0,\n      completedItems: 0,\n      failedItems: 0,\n      cancelledItems: 0,\n      averageWaitTime: 0,\n      averageProcessTime: 0,\n      throughput: 0,\n      successRate: 100,\n      errorRate: 0\n    };\n  }\n\n  // 设置网络监控\n  private setupNetworkMonitoring() {\n    window.addEventListener('online', () => {\n      if (this.config.pauseOnNetworkPoor) {\n        this.resume();\n      }\n    });\n\n    window.addEventListener('offline', () => {\n      if (this.config.pauseOnNetworkPoor) {\n        this.pause();\n      }\n    });\n  }\n\n  // 添加队列项\n  public add<T>(\n    operation: () => Promise<T>,\n    options: {\n      priority?: QueuePriority;\n      timeout?: number;\n      maxAttempts?: number;\n      retryDelay?: number;\n      metadata?: Record<string, any>;\n      onSuccess?: (result: T) => void;\n      onError?: (error: Error) => void;\n      onProgress?: (progress: number) => void;\n    } = {}\n  ): string {\n    if (this.isDestroyed) {\n      throw new Error('队列已被销毁');\n    }\n\n    if (this.queue.length >= this.config.maxQueueSize) {\n      throw new Error('队列已满');\n    }\n\n    const id = this.generateId();\n    const item: QueueItem = {\n      id,\n      operation,\n      priority: options.priority || QueuePriority.NORMAL,\n      status: QueueItemStatus.PENDING,\n      createdAt: Date.now(),\n      attempts: 0,\n      maxAttempts: options.maxAttempts || this.config.maxRetryAttempts,\n      retryDelay: options.retryDelay || this.config.defaultRetryDelay,\n      timeout: options.timeout || this.config.timeout,\n      metadata: options.metadata,\n      onSuccess: options.onSuccess,\n      onError: options.onError,\n      onProgress: options.onProgress,\n      abortController: new AbortController()\n    };\n\n    this.queue.push(item);\n    this.stats.totalItems++;\n    this.stats.pendingItems++;\n\n    // 按优先级排序\n    this.queue.sort((a, b) => b.priority - a.priority);\n\n    return id;\n  }\n\n  // 批量添加\n  public addBatch<T>(\n    operations: Array<{\n      operation: () => Promise<T>;\n      options?: {\n        priority?: QueuePriority;\n        timeout?: number;\n        maxAttempts?: number;\n        retryDelay?: number;\n        metadata?: Record<string, any>;\n        onSuccess?: (result: T) => void;\n        onError?: (error: Error) => void;\n        onProgress?: (progress: number) => void;\n      };\n    }>\n  ): string[] {\n    return operations.map(({ operation, options }) => this.add(operation, options));\n  }\n\n  // 移除队列项\n  public remove(id: string): boolean {\n    const index = this.queue.findIndex(item => item.id === id);\n    if (index === -1) return false;\n\n    const item = this.queue[index];\n    if (item.status === QueueItemStatus.PROCESSING || item.status === QueueItemStatus.RETRYING) {\n      return false;\n    }\n\n    this.queue.splice(index, 1);\n    this.stats.pendingItems--;\n    return true;\n  }\n\n  // 取消队列项\n  public cancel(id: string): boolean {\n    const item = this.queue.find(i => i.id === id);\n    if (!item) return false;\n\n    item.status = QueueItemStatus.CANCELLED;\n    item.abortController?.abort();\n    \n    if (this.processing.has(id)) {\n      this.processing.delete(id);\n      this.stats.processingItems--;\n    }\n\n    // 从队列中移除\n    this.queue = this.queue.filter(i => i.id !== id);\n    this.stats.cancelledItems++;\n    return true;\n  }\n\n  // 暂停队列\n  public pause() {\n    this.isPaused = true;\n    console.log('队列已暂停');\n  }\n\n  // 恢复队列\n  public resume() {\n    this.isPaused = false;\n    console.log('队列已恢复');\n  }\n\n  // 清空队列\n  public clear() {\n    this.queue.forEach(item => {\n      item.abortController?.abort();\n    });\n    this.queue = [];\n    this.stats.pendingItems = 0;\n  }\n\n  // 开始处理队列\n  private startProcessing() {\n    if (this.processingTimer) {\n      clearInterval(this.processingTimer);\n    }\n\n    this.processingTimer = setInterval(() => {\n      if (!this.isPaused && !this.isDestroyed) {\n        this.processNext();\n      }\n    }, 100);\n  }\n\n  // 处理下一个队列项\n  private async processNext() {\n    if (this.isPaused || this.processing.size >= this.config.maxConcurrent) {\n      return;\n    }\n\n    const availableSlots = this.config.maxConcurrent - this.processing.size;\n    const itemsToProcess = this.queue\n      .filter(item => item.status === QueueItemStatus.PENDING)\n      .slice(0, availableSlots);\n\n    for (const item of itemsToProcess) {\n      await this.processItem(item);\n    }\n  }\n\n  // 处理单个队列项\n  private async processItem(item: QueueItem) {\n    if (item.status !== QueueItemStatus.PENDING) return;\n\n    // 检查依赖\n    if (item.dependencies && !this.checkDependencies(item.dependencies)) {\n      return;\n    }\n\n    // 移动到处理中\n    this.removeFromQueue(item.id);\n    item.status = QueueItemStatus.PROCESSING;\n    item.startedAt = Date.now();\n    this.processing.set(item.id, item);\n    this.stats.pendingItems--;\n    this.stats.processingItems++;\n\n    try {\n      // 网络感知重试执行\n      const result = await this.networkRetryManager.executeWithRetry(async () => {\n        return await this.executeWithTimeout(item);\n      }, {\n        maxRetries: item.maxAttempts,\n        baseDelay: item.retryDelay,\n        timeout: item.timeout,\n        onRetry: (attempt) => {\n          item.status = QueueItemStatus.RETRYING;\n          item.onProgress?.((attempt / item.maxAttempts) * 100);\n        }\n      });\n\n      // 成功完成\n      item.status = QueueItemStatus.COMPLETED;\n      item.completedAt = Date.now();\n      item.onSuccess?.(result);\n      this.stats.completedItems++;\n      this.stats.processingItems--;\n\n    } catch (error) {\n      // 处理失败\n      item.attempts++;\n      item.status = QueueItemStatus.FAILED;\n      item.completedAt = Date.now();\n      \n      const errorMsg = error instanceof Error ? error : new Error(String(error));\n      item.onError?.(errorMsg);\n      this.stats.failedItems++;\n      this.stats.processingItems--;\n\n      // 如果可以重试，重新加入队列\n      if (item.attempts < item.maxAttempts) {\n        item.status = QueueItemStatus.PENDING;\n        item.scheduledAt = Date.now() + item.retryDelay;\n        this.queue.push(item);\n        this.stats.pendingItems++;\n      }\n    } finally {\n      this.processing.delete(item.id);\n    }\n  }\n\n  // 带超时的执行\n  private async executeWithTimeout<T>(item: QueueItem): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        item.abortController?.abort();\n        reject(new Error(`队列项超时: ${item.timeout}ms`));\n      }, item.timeout);\n\n      item.operation()\n        .then(resolve)\n        .catch(reject)\n        .finally(() => clearTimeout(timeoutId));\n    });\n  }\n\n  // 检查依赖项\n  private checkDependencies(dependencies: string[]): boolean {\n    for (const depId of dependencies) {\n      const depItem = [...this.queue, ...this.processing.values()].find(item => item.id === depId);\n      if (!depItem || depItem.status !== QueueItemStatus.COMPLETED) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // 从队列中移除项\n  private removeFromQueue(id: string) {\n    const index = this.queue.findIndex(item => item.id === id);\n    if (index !== -1) {\n      this.queue.splice(index, 1);\n    }\n  }\n\n  // 生成唯一ID\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // 启动清理定时器\n  private startCleanup() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, this.config.cleanupInterval);\n  }\n\n  // 清理完成的项\n  private cleanup() {\n    const now = Date.now();\n    \n    // 清理超时的失败项\n    this.queue = this.queue.filter(item => {\n      if (item.status === QueueItemStatus.FAILED && item.attempts >= item.maxAttempts) {\n        const age = now - (item.completedAt || item.createdAt);\n        return age < 300000; // 保留5分钟\n      }\n      return true;\n    });\n\n    // 更新统计信息\n    this.updateStats();\n  }\n\n  // 更新统计信息\n  private updateStats() {\n    const completed = this.stats.completedItems + this.stats.failedItems + this.stats.cancelledItems;\n    if (completed > 0) {\n      this.stats.successRate = (this.stats.completedItems / completed) * 100;\n      this.stats.errorRate = (this.stats.failedItems / completed) * 100;\n    }\n\n    // 计算吞吐量（简化版本）\n    const recentItems = [...this.queue, ...this.processing.values()]\n      .filter(item => item.completedAt && Date.now() - item.completedAt < 60000);\n    this.stats.throughput = recentItems.length;\n  }\n\n  // 获取队列状态\n  public getStatus() {\n    return {\n      ...this.stats,\n      isPaused: this.isPaused,\n      isProcessing: this.processing.size > 0,\n      queueSize: this.queue.length,\n      processingCount: this.processing.size\n    };\n  }\n\n  // 获取队列项\n  public getItems(filter?: {\n    status?: QueueItemStatus;\n    priority?: QueuePriority;\n    metadata?: Record<string, any>;\n  }) {\n    let items = [...this.queue, ...this.processing.values()];\n\n    if (filter?.status) {\n      items = items.filter(item => item.status === filter.status);\n    }\n\n    if (filter?.priority) {\n      items = items.filter(item => item.priority === filter.priority);\n    }\n\n    if (filter?.metadata) {\n      items = items.filter(item => {\n        return Object.entries(filter.metadata!).every(([key, value]) => \n          item.metadata?.[key] === value\n        );\n      });\n    }\n\n    return items;\n  }\n\n  // 获取统计信息\n  public getStats(): QueueStats {\n    return { ...this.stats };\n  }\n\n  // 销毁队列\n  public destroy() {\n    this.isDestroyed = true;\n    \n    // 清理定时器\n    if (this.processingTimer) {\n      clearInterval(this.processingTimer);\n    }\n    \n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n    \n    if (this.batchTimer) {\n      clearInterval(this.batchTimer);\n    }\n\n    // 取消所有正在处理的项\n    this.processing.forEach(item => {\n      item.abortController?.abort();\n    });\n\n    // 清空队列\n    this.clear();\n    \n    this.processing.clear();\n  }\n}\n\n// React Hook for request queue\nimport { useState, useCallback, useRef, useEffect } from 'react';\n\nexport function useRequestQueue(config?: QueueConfig) {\n  const [stats, setStats] = useState<QueueStats>(() => \n    NetworkAwareRequestQueue.getInstance(config).getStats()\n  );\n  const queueRef = useRef(NetworkAwareRequestQueue.getInstance(config));\n  const [isPaused, setIsPaused] = useState(false);\n\n  // 定期更新统计信息\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStats(queueRef.current.getStats());\n      setIsPaused(queueRef.current.getStatus().isPaused);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const add = useCallback(<T>(\n    operation: () => Promise<T>,\n    options?: {\n      priority?: QueuePriority;\n      timeout?: number;\n      maxAttempts?: number;\n      retryDelay?: number;\n      metadata?: Record<string, any>;\n      onSuccess?: (result: T) => void;\n      onError?: (error: Error) => void;\n      onProgress?: (progress: number) => void;\n    }\n  ): string => {\n    return queueRef.current.add(operation, options);\n  }, []);\n\n  const addBatch = useCallback(<T>(\n    operations: Array<{\n      operation: () => Promise<T>;\n      options?: {\n        priority?: QueuePriority;\n        timeout?: number;\n        maxAttempts?: number;\n        retryDelay?: number;\n        metadata?: Record<string, any>;\n        onSuccess?: (result: T) => void;\n        onError?: (error: Error) => void;\n        onProgress?: (progress: number) => void;\n      };\n    }>\n  ): string[] => {\n    return queueRef.current.addBatch(operations);\n  }, []);\n\n  const remove = useCallback((id: string): boolean => {\n    return queueRef.current.remove(id);\n  }, []);\n\n  const cancel = useCallback((id: string): boolean => {\n    return queueRef.current.cancel(id);\n  }, []);\n\n  const pause = useCallback(() => {\n    queueRef.current.pause();\n    setIsPaused(true);\n  }, []);\n\n  const resume = useCallback(() => {\n    queueRef.current.resume();\n    setIsPaused(false);\n  }, []);\n\n  const clear = useCallback(() => {\n    queueRef.current.clear();\n  }, []);\n\n  const getStatus = useCallback(() => {\n    return queueRef.current.getStatus();\n  }, []);\n\n  const getItems = useCallback((filter?: {\n    status?: QueueItemStatus;\n    priority?: QueuePriority;\n    metadata?: Record<string, any>;\n  }) => {\n    return queueRef.current.getItems(filter);\n  }, []);\n\n  return {\n    // 状态\n    stats,\n    isPaused,\n    \n    // 方法\n    add,\n    addBatch,\n    remove,\n    cancel,\n    pause,\n    resume,\n    clear,\n    getStatus,\n    getItems\n  };\n}\n\n// 便捷的预设配置\nexport const QUEUE_PRESETS = {\n  // 高优先级快速处理\n  HIGH_PRIORITY: {\n    maxConcurrent: 5,\n    defaultRetryDelay: 500,\n    maxRetryAttempts: 2,\n    timeout: 10000\n  },\n\n  // 正常优先级\n  NORMAL: {\n    maxConcurrent: 3,\n    defaultRetryDelay: 1000,\n    maxRetryAttempts: 3,\n    timeout: 30000\n  },\n\n  // 低优先级后台处理\n  LOW_PRIORITY: {\n    maxConcurrent: 1,\n    defaultRetryDelay: 5000,\n    maxRetryAttempts: 5,\n    timeout: 60000\n  },\n\n  // 批处理配置\n  BATCH: {\n    enableBatchProcessing: true,\n    batchSize: 10,\n    batchInterval: 2000,\n    maxConcurrent: 2\n  }\n};\n\n// 单例导出\nexport const requestQueue = NetworkAwareRequestQueue.getInstance();\n\nexport default NetworkAwareRequestQueue;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/request-utils.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'priorityManager' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priorityManager' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'concurrencyController' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'concurrencyController' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'monitoringSystem' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'monitoringSystem' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'NetworkQuality' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NetworkQuality' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":53,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1625,1628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1625,1628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1643,1646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1643,1646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1662,1665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1662,1665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":58,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":58,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1863,1866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1863,1866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":62,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":62,"endColumn":84,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1918,1978],"text":"(Boolean(((target.constructor as any).PRIORITY_MAPPINGS?.[propertyKey])))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":62,"column":24,"nodeType":"MemberExpression","endLine":62,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1941,1944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1941,1944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":62,"column":85,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":62,"endColumn":87,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1979,1981],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":71,"column":22,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":71,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2237,2260],"text":"(Boolean((this.getUrgency?.(args))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2261,2263],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":72,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":72,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2301,2330],"text":"(Boolean((this.getBusinessValue?.(args))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2331,2333],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":130,"column":37,"nodeType":"CallExpression","messageId":"substr","endLine":130,"endColumn":76,"fix":{"range":[3538,3549],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3682,3685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3682,3685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3759,3762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3759,3762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3905,3908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3905,3908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":151,"column":43,"nodeType":"CallExpression","messageId":"substr","endLine":151,"endColumn":82,"fix":{"range":[3997,4008],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4413,4416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4413,4416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":177,"column":48,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":177,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4521,4529],"text":"(op.delay != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4521,4529],"text":"(op.delay ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4521,4529],"text":"(Boolean(op.delay))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4530,4532],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4626,4629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4626,4629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":267,"column":21,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":267,"endColumn":43,"fix":{"range":[7149,7171],"text":"{existing.errorCount++;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10658,10661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10658,10661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":465,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":465,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13308,13311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13308,13311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":477,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13575,13578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13575,13578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":479,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13639,13642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13639,13642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":490,"column":55,"nodeType":"MemberExpression","messageId":"conditionErrorNullableEnum","endLine":490,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13976,13987],"text":"(r.priority == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":569,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":569,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15928,15967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'smartScheduler' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":595,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":595,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'smartScheduler' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":595,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":595,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":605,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":605,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17007,17046],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":629,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":629,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17619,17662],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":648,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":648,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18117,18164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":652,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":664,"endColumn":3}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":3,"fixableWarningCount":0,"source":"// request-utils.ts - 请求工具函数和使用示例\nimport { RequestPriority, priorityManager } from './priority-manager';\nimport { concurrencyController } from './concurrency-controller';\nimport { monitoringSystem } from './request-monitor';\nimport { requestManager } from './request-manager';\nimport { NetworkQuality } from './network-retry';\n\n// 预设的业务优先级配置\nexport const BUSINESS_PRIORITIES = {\n  // 电商核心功能\n  CORE_COMMERCE: {\n    payment: RequestPriority.CRITICAL,\n    orderCreation: RequestPriority.CRITICAL,\n    inventoryCheck: RequestPriority.CRITICAL,\n    cartCheckout: RequestPriority.CRITICAL,\n    userLogin: RequestPriority.CRITICAL,\n    \n    productSearch: RequestPriority.NORMAL,\n    productDetails: RequestPriority.NORMAL,\n    cartOperations: RequestPriority.NORMAL,\n    userProfile: RequestPriority.NORMAL,\n    orderHistory: RequestPriority.NORMAL,\n    \n    recommendations: RequestPriority.LOW,\n    analytics: RequestPriority.LOW,\n    dataSync: RequestPriority.LOW,\n    logging: RequestPriority.LOW\n  },\n\n  // 用户体验相关\n  USER_EXPERIENCE: {\n    navigation: RequestPriority.CRITICAL,\n    search: RequestPriority.CRITICAL,\n    filter: RequestPriority.NORMAL,\n    sorting: RequestPriority.NORMAL,\n    \n    imageLazyLoad: RequestPriority.LOW,\n    prefetching: RequestPriority.LOW,\n    cacheUpdates: RequestPriority.LOW\n  },\n\n  // 后台处理\n  BACKGROUND_PROCESSING: {\n    analyticsReporting: RequestPriority.LOW,\n    dataExport: RequestPriority.LOW,\n    batchOperations: RequestPriority.LOW,\n    systemMonitoring: RequestPriority.LOW\n  }\n};\n\n// 请求装饰器工厂\nexport function createPriorityRequestDecorator() {\n  return function<T extends (...args: any[]) => Promise<any>>(\n    target: any,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<T>\n  ): TypedPropertyDescriptor<T> {\n    const originalMethod = descriptor.value!;\n\n    descriptor.value = async function(...args: any[]) {\n      // 自动检测方法上的优先级配置\n      const priority = (target.constructor as any).PRIORITY_MAPPINGS?.[propertyKey] || \n                      RequestPriority.NORMAL;\n\n      return await requestManager.execute(\n        () => originalMethod.apply(this, args),\n        {\n          priority,\n          businessContext: {\n            operation: propertyKey,\n            urgency: this.getUrgency?.(args) || 'medium',\n            businessValue: this.getBusinessValue?.(args) || 'medium'\n          }\n        }\n      );\n    } as T;\n\n    return descriptor;\n  };\n}\n\n// 业务上下文工具\nexport class BusinessContextBuilder {\n  private context = {\n    operation: '',\n    userId: undefined as string | undefined,\n    urgency: 'medium' as 'low' | 'medium' | 'high',\n    businessValue: 'medium' as 'low' | 'medium' | 'high',\n    userSegment: 'regular' as 'regular' | 'premium' | 'vip',\n    sessionId: this.generateSessionId(),\n    timestamp: Date.now()\n  };\n\n  // 设置操作类型\n  operation(op: string): this {\n    this.context.operation = op;\n    return this;\n  }\n\n  // 设置用户ID\n  user(id: string): this {\n    this.context.userId = id;\n    return this;\n  }\n\n  // 设置紧急程度\n  urgency(level: 'low' | 'medium' | 'high'): this {\n    this.context.urgency = level;\n    return this;\n  }\n\n  // 设置业务价值\n  businessValue(value: 'low' | 'medium' | 'high'): this {\n    this.context.businessValue = value;\n    return this;\n  }\n\n  // 设置用户群体\n  userSegment(segment: 'regular' | 'premium' | 'vip'): this {\n    this.context.userSegment = segment;\n    return this;\n  }\n\n  // 构建上下文\n  build() {\n    return { ...this.context };\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// 智能请求调度器\nexport class SmartRequestScheduler {\n  private requests: Array<{\n    id: string;\n    operation: () => Promise<any>;\n    priority: RequestPriority;\n    scheduledTime: number;\n    context: any;\n  }> = [];\n\n  // 添加请求到调度器\n  schedule<T>(\n    operation: () => Promise<T>,\n    priority: RequestPriority,\n    delay: number = 0,\n    context: any = {}\n  ): string {\n    const id = `scheduled_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    this.requests.push({\n      id,\n      operation,\n      priority,\n      scheduledTime: Date.now() + delay,\n      context\n    });\n\n    // 按时间排序\n    this.requests.sort((a, b) => a.scheduledTime - b.scheduledTime);\n\n    return id;\n  }\n\n  // 批量调度\n  scheduleBatch<T>(\n    operations: Array<{\n      operation: () => Promise<T>;\n      priority: RequestPriority;\n      delay?: number;\n      context?: any;\n    }>\n  ): string[] {\n    return operations.map(op => \n      this.schedule(op.operation, op.priority, op.delay || 0, op.context)\n    );\n  }\n\n  // 执行调度器\n  async execute(): Promise<Array<{ id: string; result: any; error?: string }>> {\n    const now = Date.now();\n    const dueRequests = this.requests.filter(req => req.scheduledTime <= now);\n    \n    // 移除已执行的请求\n    this.requests = this.requests.filter(req => req.scheduledTime > now);\n\n    const results = await Promise.allSettled(\n      dueRequests.map(async (req) => {\n        try {\n          const result = await requestManager.execute(req.operation, {\n            priority: req.priority,\n            businessContext: req.context\n          });\n          \n          return {\n            id: req.id,\n            result: result.success ? result.data : null,\n            error: result.success ? undefined : result.error\n          };\n        } catch (error) {\n          return {\n            id: req.id,\n            result: null,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          };\n        }\n      })\n    );\n\n    return results.map(result => \n      result.status === 'fulfilled' ? result.value : \n      { id: 'unknown', result: null, error: 'Execution failed' }\n    );\n  }\n\n  // 获取队列状态\n  getQueueStatus() {\n    const now = Date.now();\n    return {\n      totalScheduled: this.requests.length,\n      dueNow: this.requests.filter(req => req.scheduledTime <= now).length,\n      upcoming: this.requests.filter(req => req.scheduledTime > now).length,\n      byPriority: {\n        [RequestPriority.CRITICAL]: this.requests.filter(req => req.priority === RequestPriority.CRITICAL).length,\n        [RequestPriority.NORMAL]: this.requests.filter(req => req.priority === RequestPriority.NORMAL).length,\n        [RequestPriority.LOW]: this.requests.filter(req => req.priority === RequestPriority.LOW).length\n      }\n    };\n  }\n\n  // 取消调度请求\n  cancel(id: string): boolean {\n    const index = this.requests.findIndex(req => req.id === id);\n    if (index !== -1) {\n      this.requests.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  // 清空调度器\n  clear(): void {\n    this.requests.length = 0;\n  }\n}\n\n// 性能分析器\nexport class RequestPerformanceAnalyzer {\n  private metrics: Map<string, {\n    requestCount: number;\n    totalTime: number;\n    errorCount: number;\n    priority: RequestPriority;\n    lastAccess: number;\n  }> = new Map();\n\n  // 记录请求性能\n  record(requestId: string, priority: RequestPriority, duration: number, success: boolean): void {\n    const existing = this.metrics.get(requestId);\n    \n    if (existing) {\n      existing.requestCount++;\n      existing.totalTime += duration;\n      existing.lastAccess = Date.now();\n      if (!success) existing.errorCount++;\n    } else {\n      this.metrics.set(requestId, {\n        requestCount: 1,\n        totalTime: duration,\n        errorCount: success ? 0 : 1,\n        priority,\n        lastAccess: Date.now()\n      });\n    }\n  }\n\n  // 获取性能分析\n  analyze(): {\n    summary: {\n      totalRequests: number;\n      averageResponseTime: number;\n      errorRate: number;\n      performanceByPriority: Record<RequestPriority, {\n        count: number;\n        avgTime: number;\n        errorRate: number;\n      }>;\n    };\n    recommendations: Array<{\n      type: string;\n      message: string;\n      impact: 'low' | 'medium' | 'high';\n    }>;\n    bottlenecks: Array<{\n      requestId: string;\n      avgTime: number;\n      errorRate: number;\n      priority: RequestPriority;\n    }>;\n  } {\n    const summary = this.calculateSummary();\n    const recommendations = this.generateRecommendations(summary);\n    const bottlenecks = this.identifyBottlenecks();\n\n    return { summary, recommendations, bottlenecks };\n  }\n\n  private calculateSummary() {\n    let totalRequests = 0;\n    let totalTime = 0;\n    let totalErrors = 0;\n    \n    const byPriority: Record<RequestPriority, { count: number; totalTime: number; errors: number }> = {\n      [RequestPriority.CRITICAL]: { count: 0, totalTime: 0, errors: 0 },\n      [RequestPriority.NORMAL]: { count: 0, totalTime: 0, errors: 0 },\n      [RequestPriority.LOW]: { count: 0, totalTime: 0, errors: 0 }\n    };\n\n    for (const [_, metrics] of this.metrics) {\n      totalRequests += metrics.requestCount;\n      totalTime += metrics.totalTime;\n      totalErrors += metrics.errorCount;\n      \n      byPriority[metrics.priority].count += metrics.requestCount;\n      byPriority[metrics.priority].totalTime += metrics.totalTime;\n      byPriority[metrics.priority].errors += metrics.errorCount;\n    }\n\n    return {\n      totalRequests,\n      averageResponseTime: totalRequests > 0 ? totalTime / totalRequests : 0,\n      errorRate: totalRequests > 0 ? (totalErrors / totalRequests) * 100 : 0,\n      performanceByPriority: {\n        [RequestPriority.CRITICAL]: {\n          count: byPriority[RequestPriority.CRITICAL].count,\n          avgTime: byPriority[RequestPriority.CRITICAL].count > 0 ? \n                   byPriority[RequestPriority.CRITICAL].totalTime / byPriority[RequestPriority.CRITICAL].count : 0,\n          errorRate: byPriority[RequestPriority.CRITICAL].count > 0 ? \n                     (byPriority[RequestPriority.CRITICAL].errors / byPriority[RequestPriority.CRITICAL].count) * 100 : 0\n        },\n        [RequestPriority.NORMAL]: {\n          count: byPriority[RequestPriority.NORMAL].count,\n          avgTime: byPriority[RequestPriority.NORMAL].count > 0 ? \n                   byPriority[RequestPriority.NORMAL].totalTime / byPriority[RequestPriority.NORMAL].count : 0,\n          errorRate: byPriority[RequestPriority.NORMAL].count > 0 ? \n                     (byPriority[RequestPriority.NORMAL].errors / byPriority[RequestPriority.NORMAL].count) * 100 : 0\n        },\n        [RequestPriority.LOW]: {\n          count: byPriority[RequestPriority.LOW].count,\n          avgTime: byPriority[RequestPriority.LOW].count > 0 ? \n                   byPriority[RequestPriority.LOW].totalTime / byPriority[RequestPriority.LOW].count : 0,\n          errorRate: byPriority[RequestPriority.LOW].count > 0 ? \n                     (byPriority[RequestPriority.LOW].errors / byPriority[RequestPriority.LOW].count) * 100 : 0\n        }\n      }\n    };\n  }\n\n  private generateRecommendations(summary: any) {\n    const recommendations = [];\n\n    // 关键请求延迟建议\n    if (summary.performanceByPriority[RequestPriority.CRITICAL].avgTime > 1000) {\n      recommendations.push({\n        type: 'critical_performance',\n        message: '关键请求响应时间过长，建议增加并发限制或优化关键路径',\n        impact: 'high' as const\n      });\n    }\n\n    // 错误率建议\n    if (summary.errorRate > 5) {\n      recommendations.push({\n        type: 'error_rate',\n        message: '整体错误率较高，建议检查网络连接和服务稳定性',\n        impact: 'high' as const\n      });\n    }\n\n    // 并发建议\n    const systemMetrics = requestManager.getSystemMetrics();\n    if (systemMetrics.concurrency.utilizationRate > 80) {\n      recommendations.push({\n        type: 'concurrency',\n        message: '系统并发利用率较高，建议适当调整并发参数',\n        impact: 'medium' as const\n      });\n    }\n\n    return recommendations;\n  }\n\n  private identifyBottlenecks() {\n    const bottlenecks = [];\n\n    for (const [requestId, metrics] of this.metrics) {\n      const avgTime = metrics.totalTime / metrics.requestCount;\n      const errorRate = (metrics.errorCount / metrics.requestCount) * 100;\n\n      if (avgTime > 2000 || errorRate > 10) {\n        bottlenecks.push({\n          requestId,\n          avgTime,\n          errorRate,\n          priority: metrics.priority\n        });\n      }\n    }\n\n    return bottlenecks.sort((a, b) => b.avgTime - a.avgTime);\n  }\n\n  // 清理旧数据\n  cleanup(maxAge: number = 3600000): void { // 1小时\n    const now = Date.now();\n    for (const [requestId, metrics] of this.metrics) {\n      if (now - metrics.lastAccess > maxAge) {\n        this.metrics.delete(requestId);\n      }\n    }\n  }\n}\n\n// 全局实例\nexport const smartScheduler = new SmartRequestScheduler();\nexport const performanceAnalyzer = new RequestPerformanceAnalyzer();\nexport const businessContextBuilder = new BusinessContextBuilder();\n\n// React Hook - 增强请求\nexport function useBusinessRequest<T>(\n  operation: () => Promise<T>,\n  businessOptions: {\n    operation: string;\n    userId?: string;\n    urgency?: 'low' | 'medium' | 'high';\n    businessValue?: 'low' | 'medium' | 'high';\n    priority?: RequestPriority;\n  }\n) {\n  const { execute, ...state } = useEnhancedApi(operation, {\n    businessContext: businessOptions,\n    priority: businessOptions.priority,\n    monitoring: {\n      trackPerformance: true,\n      realTime: true\n    }\n  });\n\n  const executeWithBusinessContext = useCallback(() => {\n    return execute();\n  }, [execute]);\n\n  return {\n    ...state,\n    execute: executeWithBusinessContext,\n    businessContext: businessOptions\n  };\n}\n\n// React Hook - 批量请求\nexport function useBatchRequests() {\n  const [batchState, setBatchState] = useState<{\n    results: Array<{ id: string; data?: any; error?: string; success: boolean }>;\n    loading: boolean;\n    progress: number;\n  }>({\n    results: [],\n    loading: false,\n    progress: 0\n  });\n\n  const executeBatch = useCallback(async (\n    requests: Array<{\n      id: string;\n      operation: () => Promise<any>;\n      priority?: RequestPriority;\n      businessContext?: any;\n    }>\n  ) => {\n    setBatchState(prev => ({ ...prev, loading: true, progress: 0 }));\n\n    const results = [];\n    let completed = 0;\n\n    // 按优先级分组并执行\n    const groupedRequests = {\n      [RequestPriority.CRITICAL]: requests.filter(r => r.priority === RequestPriority.CRITICAL),\n      [RequestPriority.NORMAL]: requests.filter(r => !r.priority || r.priority === RequestPriority.NORMAL),\n      [RequestPriority.LOW]: requests.filter(r => r.priority === RequestPriority.LOW)\n    };\n\n    for (const [priority, priorityRequests] of Object.entries(groupedRequests)) {\n      // 并发执行同优先级请求\n      const priorityResults = await Promise.allSettled(\n        priorityRequests.map(async (req) => {\n          try {\n            const result = await requestManager.execute(req.operation, {\n              priority: parseInt(priority) as RequestPriority,\n              businessContext: req.businessContext\n            });\n\n            return {\n              id: req.id,\n              data: result.data,\n              error: result.error,\n              success: result.success\n            };\n          } catch (error) {\n            return {\n              id: req.id,\n              data: null,\n              error: error instanceof Error ? error.message : 'Unknown error',\n              success: false\n            };\n          }\n        })\n      );\n\n      // 收集结果\n      for (const result of priorityResults) {\n        if (result.status === 'fulfilled') {\n          results.push(result.value);\n        }\n      }\n\n      completed += priorityRequests.length;\n      setBatchState(prev => ({\n        ...prev,\n        progress: (completed / requests.length) * 100\n      }));\n    }\n\n    setBatchState(prev => ({\n      ...prev,\n      results,\n      loading: false\n    }));\n\n    return results;\n  }, []);\n\n  return {\n    ...batchState,\n    executeBatch\n  };\n}\n\n// 使用示例和测试代码\nexport const examples = {\n  // 基础使用示例\n  basicUsage: async () => {\n    const result = await requestManager.execute(\n      async () => {\n        const response = await fetch('/api/user/profile');\n        return response.json();\n      },\n      {\n        priority: RequestPriority.CRITICAL,\n        businessContext: {\n          operation: 'userProfile',\n          urgency: 'high',\n          businessValue: 'high'\n        }\n      }\n    );\n\n    console.log('Request result:', result);\n  },\n\n  // 批量请求示例\n  batchUsage: async () => {\n    const requests = [\n      {\n        id: 'user_profile',\n        operation: () => fetch('/api/user/profile').then(r => r.json()),\n        priority: RequestPriority.CRITICAL,\n        businessContext: { operation: 'userProfile', urgency: 'high' }\n      },\n      {\n        id: 'product_list',\n        operation: () => fetch('/api/products').then(r => r.json()),\n        priority: RequestPriority.NORMAL,\n        businessContext: { operation: 'productList', urgency: 'medium' }\n      },\n      {\n        id: 'analytics',\n        operation: () => fetch('/api/analytics').then(r => r.json()),\n        priority: RequestPriority.LOW,\n        businessContext: { operation: 'analytics', urgency: 'low' }\n      }\n    ];\n\n    const smartScheduler = new SmartRequestScheduler();\n    const results = await Promise.all(\n      requests.map(req => \n        requestManager.execute(req.operation, {\n          priority: req.priority,\n          businessContext: req.businessContext\n        })\n      )\n    );\n\n    console.log('Batch results:', results);\n  },\n\n  // 调度器示例\n  schedulerUsage: async () => {\n    const scheduler = new SmartRequestScheduler();\n\n    // 调度不同优先级的请求\n    scheduler.schedule(\n      () => fetch('/api/urgent-payment').then(r => r.json()),\n      RequestPriority.CRITICAL,\n      0,\n      { operation: 'payment', urgency: 'high' }\n    );\n\n    scheduler.schedule(\n      () => fetch('/api/product-recommendations').then(r => r.json()),\n      RequestPriority.LOW,\n      5000, // 5秒后执行\n      { operation: 'recommendations', urgency: 'low' }\n    );\n\n    // 执行调度器\n    const results = await scheduler.execute();\n    console.log('Scheduled results:', results);\n  },\n\n  // 性能分析示例\n  performanceAnalysis: async () => {\n    const analyzer = new RequestPerformanceAnalyzer();\n\n    // 模拟请求性能数据\n    for (let i = 0; i < 100; i++) {\n      analyzer.record(\n        `request_${i}`,\n        i < 10 ? RequestPriority.CRITICAL : \n        i < 50 ? RequestPriority.NORMAL : RequestPriority.LOW,\n        Math.random() * 3000 + 100,\n        Math.random() > 0.1 // 90% 成功率\n      );\n    }\n\n    const analysis = analyzer.analyze();\n    console.log('Performance analysis:', analysis);\n  }\n};\n\nexport default {\n  BUSINESS_PRIORITIES,\n  createPriorityRequestDecorator,\n  BusinessContextBuilder,\n  SmartRequestScheduler,\n  RequestPerformanceAnalyzer,\n  smartScheduler,\n  performanceAnalyzer,\n  businessContextBuilder,\n  useBusinessRequest,\n  useBatchRequests,\n  examples\n};\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/resource-preloader.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":42,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":42,"endColumn":38,"fix":{"range":[1117,1124],"text":"{return;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1656,1659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1656,1659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":70,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":70,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1683,1693],"text":"(Boolean(connection))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":70,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":70,"endColumn":63,"fix":{"range":[1683,1735],"text":"connection?.effectiveType === 'slow-2g'"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1747,1783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2045,2108],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":93,"column":48,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":93,"endColumn":55,"fix":{"range":[2323,2330],"text":"{return;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":104,"column":21,"nodeType":"MemberExpression","endLine":104,"endColumn":31},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":126,"column":62,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":126,"endColumn":69,"fix":{"range":[3201,3208],"text":"{return;}"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":131,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":131,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":147,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":147,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3676,3702],"text":"(this.config.maxPreloadTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3676,3702],"text":"(this.config.maxPreloadTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3676,3702],"text":"(Boolean(this.config.maxPreloadTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3728,3731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3728,3731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4097,4100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4097,4100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6218,6288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'style' is defined but never used. Allowed unused args must match /^_/u.","line":351,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":351,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'style' is defined but never used. Allowed unused args must match /^_/u.","line":351,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":351,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":367,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9781,9784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9781,9784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":368,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":368,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9808,9818],"text":"Boolean(connection)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":385,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10346,10349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10346,10349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":386,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":386,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10371,10381],"text":"Boolean(connection)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":394,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10590,10593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10590,10593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":395,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":395,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10624,10643],"text":"Boolean(requestIdleCallback)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10662,10665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10662,10665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":399,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":399,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10782,10808],"text":"(this.config.maxPreloadTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[10782,10808],"text":"(this.config.maxPreloadTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10782,10808],"text":"(Boolean(this.config.maxPreloadTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":399,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":399,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10809,10811],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10876,10879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10876,10879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":449,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":449,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":449,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":449,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'metrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":451,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":451,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'metrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":451,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":451,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":465,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":465,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12706,12709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12706,12709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":4,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useNetworkStatus } from '@/hooks/use-network-status';\nimport { useMobilePerformance } from '@/hooks/use-mobile-performance';\n\ninterface PreloadItem {\n  type: 'script' | 'style' | 'image' | 'font' | 'route' | 'component';\n  url: string;\n  priority: 'high' | 'medium' | 'low';\n  as?: string;\n  crossorigin?: string;\n  integrity?: string;\n  onLoad?: () => void;\n  onError?: () => void;\n}\n\ninterface PreloadConfig {\n  enabled: boolean;\n  batchSize: number;\n  delayBetweenBatches: number;\n  enableIdlePreload: boolean;\n  enableNetworkAware: boolean;\n  maxPreloadTime?: number;\n}\n\nclass ResourcePreloader {\n  private config: PreloadConfig;\n  private preloadedResources = new Set<string>();\n  private loadingPromises = new Map<string, Promise<void>>();\n  private isEnabled = true;\n  private preloadQueue: PreloadItem[] = [];\n  private isProcessing = false;\n\n  constructor(config: PreloadConfig) {\n    this.config = config;\n    this.init();\n  }\n\n  private init(): void {\n    if (!this.config.enabled) return;\n\n    // 监听网络状态\n    if (this.config.enableNetworkAware) {\n      this.setupNetworkAware();\n    }\n\n    // 监听空闲时间\n    if (this.config.enableIdlePreload) {\n      this.setupIdlePreload();\n    }\n\n    // 监听页面可见性\n    this.setupVisibilityAware();\n\n    // 启动队列处理\n    this.processQueue();\n  }\n\n  // 预加载单个资源\n  async preload(item: PreloadItem): Promise<void> {\n    if (!this.isEnabled || this.preloadedResources.has(item.url)) {\n      return;\n    }\n\n    // 检查网络状况\n    if (this.config.enableNetworkAware) {\n      const connection = (navigator as any).connection;\n      if (connection && connection.effectiveType === 'slow-2g') {\n        console.log('慢网络，跳过预加载:', item.url);\n        return;\n      }\n    }\n\n    const promise = this.createPreloadPromise(item);\n    this.loadingPromises.set(item.url, promise);\n\n    try {\n      await promise;\n      this.preloadedResources.add(item.url);\n      item.onLoad?.();\n    } catch (error) {\n      console.warn(`Failed to preload resource: ${item.url}`, error);\n      item.onError?.();\n    } finally {\n      this.loadingPromises.delete(item.url);\n    }\n  }\n\n  // 批量预加载\n  async preloadBatch(items: PreloadItem[]): Promise<void> {\n    if (!this.isEnabled || items.length === 0) return;\n\n    // 根据优先级排序\n    const sortedItems = items.sort((a, b) => {\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\n    });\n\n    const batches = this.createBatches(sortedItems, this.config.batchSize);\n    \n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      await Promise.allSettled(\n        batch.map(item => this.preload(item))\n      );\n\n      // 批次间延迟\n      if (i < batches.length - 1) {\n        await new Promise(resolve => \n          setTimeout(resolve, this.config.delayBetweenBatches)\n        );\n      }\n    }\n  }\n\n  // 队列式预加载\n  queuePreload(item: PreloadItem): void {\n    this.preloadQueue.push(item);\n    this.processQueue();\n  }\n\n  // 处理预加载队列\n  private async processQueue(): Promise<void> {\n    if (this.isProcessing || this.preloadQueue.length === 0) return;\n\n    this.isProcessing = true;\n\n    while (this.preloadQueue.length > 0) {\n      const item = this.preloadQueue.shift()!;\n      \n      // 检查是否已预加载\n      if (this.preloadedResources.has(item.url)) {\n        continue;\n      }\n\n      // 根据优先级决定是否立即加载\n      if (item.priority === 'high') {\n        await this.preload(item);\n      } else {\n        // 低优先级资源延迟加载\n        setTimeout(() => this.preload(item), Math.random() * 1000);\n      }\n\n      // 检查是否超过最大预加载时间\n      if (this.config.maxPreloadTime && Date.now() - (this as any).startTime > this.config.maxPreloadTime) {\n        break;\n      }\n    }\n\n    this.isProcessing = false;\n  }\n\n  // 预加载图片\n  async preloadImage(url: string, priority: 'high' | 'medium' | 'low' = 'medium'): Promise<void> {\n    return this.preload({\n      type: 'image',\n      url,\n      priority\n    });\n  }\n\n  // 预加载组件\n  async preloadComponent(importFn: () => Promise<any>, priority: 'high' | 'medium' | 'low' = 'medium'): Promise<void> {\n    return this.preload({\n      type: 'component',\n      url: '', // 组件没有URL\n      priority\n    }).then(() => {\n      // 实际预加载组件\n      return importFn();\n    });\n  }\n\n  // 预加载路由\n  async preloadRoute(path: string, priority: 'high' | 'medium' | 'low' = 'medium'): Promise<void> {\n    return this.preload({\n      type: 'route',\n      url: path,\n      priority\n    });\n  }\n\n  // 预加载字体\n  async preloadFont(family: string, weight: string = '400', style: string = 'normal'): Promise<void> {\n    const fontUrl = this.generateFontUrl(family, weight, style);\n    return this.preload({\n      type: 'font',\n      url: fontUrl,\n      priority: 'high',\n      as: 'font',\n      crossorigin: 'anonymous'\n    });\n  }\n\n  // 智能预加载根据用户行为\n  async smartPreload(context: 'navigation' | 'hover' | 'interaction'): Promise<void> {\n    const startTime = Date.now();\n\n    switch (context) {\n      case 'navigation':\n        // 导航时预加载核心资源\n        await this.preloadBatch([\n          { type: 'route', url: '/', priority: 'high' },\n          { type: 'route', url: '/lottery', priority: 'high' },\n          { type: 'route', url: '/wallet', priority: 'high' },\n          { type: 'route', url: '/profile', priority: 'medium' },\n          { type: 'image', url: '/images/banners/hero-bg.jpg', priority: 'high' },\n          { type: 'image', url: '/images/icons/logo.png', priority: 'high' },\n          { type: 'font', url: this.generateFontUrl('Inter', '400', 'normal'), priority: 'high' }\n        ]);\n        break;\n\n      case 'hover':\n        // 悬停时预加载相关资源\n        this.queuePreload({ type: 'image', url: '/images/common/loading.png', priority: 'low' });\n        this.queuePreload({ type: 'component', url: '', priority: 'medium' });\n        break;\n\n      case 'interaction':\n        // 交互时预加载用户相关资源\n        await this.preloadBatch([\n          { type: 'route', url: '/orders', priority: 'medium' },\n          { type: 'route', url: '/transactions', priority: 'medium' },\n          { type: 'component', url: '', priority: 'medium' }\n        ]);\n        break;\n    }\n\n    // 记录预加载时间\n    console.log(`Smart preload completed in ${Date.now() - startTime}ms`);\n  }\n\n  // 启用/禁用预加载\n  setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n  }\n\n  // 获取预加载状态\n  getStatus(): {\n    enabled: boolean;\n    preloadedCount: number;\n    loadingCount: number;\n    queueLength: number;\n  } {\n    return {\n      enabled: this.isEnabled,\n      preloadedCount: this.preloadedResources.size,\n      loadingCount: this.loadingPromises.size,\n      queueLength: this.preloadQueue.length\n    };\n  }\n\n  // 清空预加载状态\n  clearCache(): void {\n    this.preloadedResources.clear();\n    this.preloadQueue = [];\n    this.loadingPromises.clear();\n  }\n\n  // 创建预加载Promise\n  private createPreloadPromise(item: PreloadItem): Promise<void> {\n    return new Promise((resolve, reject) => {\n      switch (item.type) {\n        case 'image':\n          this.preloadImageElement(item.url, resolve, reject);\n          break;\n        case 'script':\n          this.preloadScriptElement(item.url, resolve, reject);\n          break;\n        case 'style':\n          this.preloadStyleElement(item.url, resolve, reject);\n          break;\n        case 'font':\n          this.preloadFontElement(item.url, resolve, reject);\n          break;\n        case 'route':\n          // 路由预加载\n          import('next/navigation').then(({ router }) => {\n            router.prefetch(item.url);\n            resolve();\n          }).catch(reject);\n          break;\n        case 'component':\n          // 组件预加载\n          resolve();\n          break;\n        default:\n          resolve();\n      }\n    });\n  }\n\n  // 预加载图片\n  private preloadImageElement(url: string, onLoad: () => void, onError: () => void): void {\n    const img = new Image();\n    img.onload = onLoad;\n    img.onerror = onError;\n    img.src = url;\n  }\n\n  // 预加载脚本\n  private preloadScriptElement(src: string, onLoad: () => void, onError: () => void): void {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'script';\n    link.href = src;\n    if (this.hasCrossorigin()) {\n      link.crossOrigin = 'anonymous';\n    }\n    \n    link.onload = onLoad;\n    link.onerror = onError;\n    \n    document.head.appendChild(link);\n  }\n\n  // 预加载样式\n  private preloadStyleElement(href: string, onLoad: () => void, onError: () => void): void {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'style';\n    link.href = href;\n    if (this.hasCrossorigin()) {\n      link.crossOrigin = 'anonymous';\n    }\n    \n    link.onload = onLoad;\n    link.onerror = onError;\n    \n    document.head.appendChild(link);\n  }\n\n  // 预加载字体\n  private preloadFontElement(url: string, onLoad: () => void, onError: () => void): void {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'font';\n    link.href = url;\n    link.type = 'font/woff2';\n    link.crossOrigin = 'anonymous';\n    \n    link.onload = onLoad;\n    link.onerror = onError;\n    \n    document.head.appendChild(link);\n  }\n\n  // 生成字体URL\n  private generateFontUrl(family: string, weight: string, style: string): string {\n    return `https://fonts.googleapis.com/css2?family=${encodeURIComponent(family)}:wght@${weight}&display=swap`;\n  }\n\n  // 创建批次\n  private createBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n\n  // 设置网络感知预加载\n  private setupNetworkAware(): void {\n    const updatePreloadStrategy = () => {\n      const connection = (navigator as any).connection;\n      if (connection) {\n        const effectiveType = connection.effectiveType;\n        \n        // 根据网络类型调整预加载策略\n        if (effectiveType === 'slow-2g' || effectiveType === '2g') {\n          this.setEnabled(false);\n        } else if (effectiveType === '3g') {\n          this.config.batchSize = 2;\n          this.config.delayBetweenBatches = 2000;\n        } else {\n          this.setEnabled(true);\n          this.config.batchSize = 5;\n          this.config.delayBetweenBatches = 100;\n        }\n      }\n    };\n\n    const connection = (navigator as any).connection;\n    if (connection) {\n      connection.addEventListener('change', updatePreloadStrategy);\n      updatePreloadStrategy();\n    }\n  }\n\n  // 设置空闲时间预加载\n  private setupIdlePreload(): void {\n    const requestIdleCallback = (window as any).requestIdleCallback;\n    if (requestIdleCallback) {\n      (this as any).startTime = Date.now();\n      requestIdleCallback(() => {\n        this.preloadIdleResources();\n      }, { timeout: this.config.maxPreloadTime || 3000 });\n    } else {\n      setTimeout(() => {\n        (this as any).startTime = Date.now();\n        this.preloadIdleResources();\n      }, 1000);\n    }\n  }\n\n  // 预加载空闲资源\n  private async preloadIdleResources(): Promise<void> {\n    const lowPriorityItems: PreloadItem[] = [\n      { type: 'image', url: '/images/common/placeholder.png', priority: 'low' },\n      { type: 'image', url: '/images/common/loading.png', priority: 'low' },\n      { type: 'style', url: '/styles/animations.css', priority: 'low' }\n    ];\n\n    await this.preloadBatch(lowPriorityItems);\n  }\n\n  // 设置页面可见性感知预加载\n  private setupVisibilityAware(): void {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        this.setEnabled(true);\n        this.processQueue();\n      } else {\n        this.config.batchSize = 1;\n      }\n    });\n  }\n\n  // 检查是否支持跨域\n  private hasCrossorigin(): boolean {\n    return !document.location.href.startsWith('http://');\n  }\n}\n\n// 全局预加载实例\nexport const resourcePreloader = new ResourcePreloader({\n  enabled: true,\n  batchSize: 3,\n  delayBetweenBatches: 500,\n  enableIdlePreload: true,\n  enableNetworkAware: true,\n  maxPreloadTime: 5000 // 最大预加载时间5秒\n});\n\n// React Hook for预加载\nexport const useResourcePreloader = () => {\n  const router = useRouter();\n  const { networkQuality, isOnline } = useNetworkStatus();\n  const { metrics } = useMobilePerformance();\n\n  const preloadOnHover = useCallback((url: string) => {\n    resourcePreloader.preloadRoute(url, 'medium');\n  }, []);\n\n  const preloadOnNavigation = useCallback((context: 'navigation' | 'hover' | 'interaction') => {\n    resourcePreloader.smartPreload(context);\n  }, []);\n\n  const preloadImages = useCallback((urls: string[]) => {\n    return Promise.all(urls.map(url => resourcePreloader.preloadImage(url, 'low')));\n  }, []);\n\n  const preloadComponent = useCallback((importFn: () => Promise<any>) => {\n    return resourcePreloader.preloadComponent(importFn, 'medium');\n  }, []);\n\n  const getPreloadStatus = useCallback(() => {\n    return resourcePreloader.getStatus();\n  }, []);\n\n  // 自动预加载核心路由\n  useEffect(() => {\n    if (isOnline && networkQuality !== 'poor') {\n      // 延迟预加载，避免影响初始渲染\n      const timer = setTimeout(() => {\n        resourcePreloader.smartPreload('navigation');\n      }, 1000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isOnline, networkQuality]);\n\n  return {\n    preloadOnHover,\n    preloadOnNavigation,\n    preloadImages,\n    preloadComponent,\n    getPreloadStatus,\n    preloader: resourcePreloader,\n    networkStatus: { isOnline, networkQuality }\n  };\n};\n\nexport default ResourcePreloader;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/screen-size-tester.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): utils/screen-size-tester.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 屏幕尺寸模拟测试工具\n * 模拟不同设备的屏幕尺寸，验证响应式设计的正确性，生成适配性报告\n */\n\nexport interface DeviceProfile {\n  name: string;\n  width: number;\n  height: number;\n  pixelRatio: number;\n  userAgent: string;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n}\n\nexport interface ScreenSizeTestResult {\n  device: DeviceProfile;\n  testResults: {\n    layoutTest: LayoutTestResult;\n    touchTest: TouchTestResult;\n    performanceTest: PerformanceTestResult;\n    accessibilityTest: AccessibilityTestResult;\n  };\n  score: number;\n  issues: string[];\n  recommendations: string[];\n}\n\nexport interface LayoutTestResult {\n  passed: boolean;\n  checks: {\n    minTouchArea: boolean;\n    responsiveBreakpoints: boolean;\n    textTruncation: boolean;\n    scrollHandling: boolean;\n    orientationSupport: boolean;\n  };\n  details: string[];\n}\n\nexport interface TouchTestResult {\n  passed: boolean;\n  checks: {\n    gestureSupport: boolean;\n    touchAccuracy: boolean;\n    feedbackTiming: boolean;\n    longPressSupport: boolean;\n  };\n  details: string[];\n}\n\nexport interface PerformanceTestResult {\n  passed: boolean;\n  metrics: {\n    renderTime: number;\n    memoryUsage: number;\n    frameRate: number;\n  };\n  details: string[];\n}\n\nexport interface AccessibilityTestResult {\n  passed: boolean;\n  checks: {\n    ariaLabels: boolean;\n    colorContrast: boolean;\n    focusOrder: boolean;\n    screenReaderSupport: boolean;\n  };\n  details: string[];\n}\n\n/**\n * 设备配置文件\n */\nexport const DEVICE_PROFILES: DeviceProfile[] = [\n  {\n    name: 'iPhone SE (2nd Gen)',\n    width: 375,\n    height: 667,\n    pixelRatio: 2,\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',\n    isMobile: true,\n    isTablet: false,\n    isDesktop: false,\n  },\n  {\n    name: 'iPhone 12/13',\n    width: 390,\n    height: 844,\n    pixelRatio: 3,\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15',\n    isMobile: true,\n    isTablet: false,\n    isDesktop: false,\n  },\n  {\n    name: 'iPhone 12 Pro Max',\n    width: 428,\n    height: 926,\n    pixelRatio: 3,\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15',\n    isMobile: true,\n    isTablet: false,\n    isDesktop: false,\n  },\n  {\n    name: 'Samsung Galaxy S20',\n    width: 360,\n    height: 800,\n    pixelRatio: 3,\n    userAgent: 'Mozilla/5.0 (Linux; Android 10; SM-G980F) AppleWebKit/537.36',\n    isMobile: true,\n    isTablet: false,\n    isDesktop: false,\n  },\n  {\n    name: 'iPad Mini',\n    width: 768,\n    height: 1024,\n    pixelRatio: 2,\n    userAgent: 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15',\n    isMobile: false,\n    isTablet: true,\n    isDesktop: false,\n  },\n  {\n    name: 'iPad Pro',\n    width: 1024,\n    height: 1366,\n    pixelRatio: 2,\n    userAgent: 'Mozilla/5.0 (iPad; CPU OS 14_4 like Mac OS X) AppleWebKit/605.1.15',\n    isMobile: false,\n    isTablet: true,\n    isDesktop: false,\n  },\n  {\n    name: 'Surface Pro',\n    width: 912,\n    height: 1368,\n    pixelRatio: 1.5,\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n    isMobile: false,\n    isTablet: true,\n    isDesktop: false,\n  },\n  {\n    name: 'Desktop 1366x768',\n    width: 1366,\n    height: 768,\n    pixelRatio: 1,\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n    isMobile: false,\n    isTablet: false,\n    isDesktop: true,\n  },\n];\n\n/**\n * 屏幕尺寸测试器类\n */\nexport class ScreenSizeTester {\n  private testResults: ScreenSizeTestResult[] = [];\n  private currentDeviceIndex = 0;\n\n  constructor() {\n    this.initializeTestingEnvironment();\n  }\n\n  /**\n   * 初始化测试环境\n   */\n  private initializeTestingEnvironment(): void {\n    // 模拟浏览器环境\n    if (typeof window !== 'undefined') {\n      this.setupWindowMock();\n    }\n  }\n\n  /**\n   * 设置窗口模拟\n   */\n  private setupWindowMock(): void {\n    // 模拟 window 对象属性\n    Object.defineProperty(window, 'devicePixelRatio', {\n      writable: true,\n      value: 1,\n    });\n\n    // 模拟 matchMedia\n    if (!window.matchMedia) {\n      (window as any).matchMedia = jest.fn().mockImplementation(query => ({\n        matches: false,\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n    }\n\n    // 模拟触摸事件\n    if (typeof TouchEvent === 'undefined') {\n      global.TouchEvent = class TouchEvent extends Event {\n        touches: any[] = [];\n        changedTouches: any[] = [];\n        targetTouches: any[] = [];\n        \n        constructor(type: string, options?: any) {\n          super(type);\n          if (options) {\n            Object.assign(this, options);\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * 切换到指定设备\n   */\n  switchToDevice(deviceIndex: number): void {\n    if (deviceIndex < 0 || deviceIndex >= DEVICE_PROFILES.length) {\n      throw new Error(`设备索引超出范围: ${deviceIndex}`);\n    }\n\n    this.currentDeviceIndex = deviceIndex;\n    const device = DEVICE_PROFILES[deviceIndex];\n    this.simulateDeviceEnvironment(device);\n  }\n\n  /**\n   * 模拟设备环境\n   */\n  private simulateDeviceEnvironment(device: DeviceProfile): void {\n    if (typeof window !== 'undefined') {\n      // 设置屏幕尺寸\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        value: device.width,\n      });\n\n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        value: device.height,\n      });\n\n      Object.defineProperty(window, 'devicePixelRatio', {\n        writable: true,\n        value: device.pixelRatio,\n      });\n\n      // 设置 User Agent\n      Object.defineProperty(navigator, 'userAgent', {\n        writable: true,\n        value: device.userAgent,\n      });\n    }\n\n    // 触发 resize 事件\n    if (typeof window !== 'undefined' && window.dispatchEvent) {\n      window.dispatchEvent(new Event('resize'));\n    }\n  }\n\n  /**\n   * 测试指定设备的适配性\n   */\n  async testDeviceAdaptation(deviceIndex: number): Promise<ScreenSizeTestResult> {\n    const device = DEVICE_PROFILES[deviceIndex];\n    this.switchToDevice(deviceIndex);\n\n    const layoutTest = await this.runLayoutTests(device);\n    const touchTest = await this.runTouchTests(device);\n    const performanceTest = await this.runPerformanceTests(device);\n    const accessibilityTest = await this.runAccessibilityTests(device);\n\n    const result: ScreenSizeTestResult = {\n      device,\n      testResults: {\n        layoutTest,\n        touchTest,\n        performanceTest,\n        accessibilityTest,\n      },\n      score: 0,\n      issues: [],\n      recommendations: [],\n    };\n\n    // 计算总体评分\n    result.score = this.calculateOverallScore(result);\n\n    // 收集问题和建议\n    result.issues = this.collectIssues(result);\n    result.recommendations = this.generateRecommendations(result);\n\n    this.testResults.push(result);\n    return result;\n  }\n\n  /**\n   * 运行布局测试\n   */\n  private async runLayoutTests(device: DeviceProfile): Promise<LayoutTestResult> {\n    const checks = {\n      minTouchArea: false,\n      responsiveBreakpoints: false,\n      textTruncation: false,\n      scrollHandling: false,\n      orientationSupport: false,\n    };\n\n    const details: string[] = [];\n\n    // 测试最小触摸区域 (44px)\n    try {\n      const button = this.createTestButton();\n      const buttonRect = button.getBoundingClientRect();\n      \n      checks.minTouchArea = buttonRect.height >= 44 && buttonRect.width >= 44;\n      details.push(`按钮尺寸: ${buttonRect.width}x${buttonRect.height}px`);\n    } catch (error) {\n      details.push(`触摸区域测试失败: ${error}`);\n    }\n\n    // 测试响应式断点\n    try {\n      checks.responsiveBreakpoints = this.testResponsiveBreakpoints(device);\n      details.push(`响应式断点测试: ${checks.responsiveBreakpoints ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`响应式断点测试失败: ${error}`);\n    }\n\n    // 测试文本截断\n    try {\n      checks.textTruncation = this.testTextTruncation(device);\n      details.push(`文本截断测试: ${checks.textTruncation ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`文本截断测试失败: ${error}`);\n    }\n\n    // 测试滚动处理\n    try {\n      checks.scrollHandling = this.testScrollHandling(device);\n      details.push(`滚动处理测试: ${checks.scrollHandling ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`滚动处理测试失败: ${error}`);\n    }\n\n    // 测试方向支持\n    try {\n      checks.orientationSupport = this.testOrientationSupport(device);\n      details.push(`方向支持测试: ${checks.orientationSupport ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`方向支持测试失败: ${error}`);\n    }\n\n    const passed = Object.values(checks).every(check => check);\n\n    return {\n      passed,\n      checks,\n      details,\n    };\n  }\n\n  /**\n   * 运行触摸测试\n   */\n  private async runTouchTests(device: DeviceProfile): Promise<TouchTestResult> {\n    const checks = {\n      gestureSupport: false,\n      touchAccuracy: false,\n      feedbackTiming: false,\n      longPressSupport: false,\n    };\n\n    const details: string[] = [];\n\n    // 测试手势支持\n    try {\n      checks.gestureSupport = this.testGestureSupport(device);\n      details.push(`手势支持测试: ${checks.gestureSupport ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`手势支持测试失败: ${error}`);\n    }\n\n    // 测试触摸精度\n    try {\n      checks.touchAccuracy = this.testTouchAccuracy(device);\n      details.push(`触摸精度测试: ${checks.touchAccuracy ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`触摸精度测试失败: ${error}`);\n    }\n\n    // 测试反馈时机\n    try {\n      checks.feedbackTiming = this.testFeedbackTiming(device);\n      details.push(`反馈时机测试: ${checks.feedbackTiming ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`反馈时机测试失败: ${error}`);\n    }\n\n    // 测试长按支持\n    try {\n      checks.longPressSupport = this.testLongPressSupport(device);\n      details.push(`长按支持测试: ${checks.longPressSupport ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`长按支持测试失败: ${error}`);\n    }\n\n    const passed = Object.values(checks).every(check => check);\n\n    return {\n      passed,\n      checks,\n      details,\n    };\n  }\n\n  /**\n   * 运行性能测试\n   */\n  private async runPerformanceTests(device: DeviceProfile): Promise<PerformanceTestResult> {\n    const startTime = performance.now();\n    \n    // 模拟组件渲染\n    await this.simulateComponentRendering();\n    \n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n\n    const metrics = {\n      renderTime,\n      memoryUsage: this.estimateMemoryUsage(),\n      frameRate: this.estimateFrameRate(),\n    };\n\n    const details = [\n      `渲染时间: ${renderTime.toFixed(2)}ms`,\n      `内存使用: ${metrics.memoryUsage}MB`,\n      `预估帧率: ${metrics.frameRate} FPS`,\n    ];\n\n    const passed = renderTime < 100 && metrics.frameRate > 30;\n\n    return {\n      passed,\n      metrics,\n      details,\n    };\n  }\n\n  /**\n   * 运行无障碍测试\n   */\n  private async runAccessibilityTests(device: DeviceProfile): Promise<AccessibilityTestResult> {\n    const checks = {\n      ariaLabels: false,\n      colorContrast: false,\n      focusOrder: false,\n      screenReaderSupport: false,\n    };\n\n    const details: string[] = [];\n\n    // 测试 ARIA 标签\n    try {\n      checks.ariaLabels = this.testAriaLabels();\n      details.push(`ARIA标签测试: ${checks.ariaLabels ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`ARIA标签测试失败: ${error}`);\n    }\n\n    // 测试颜色对比度\n    try {\n      checks.colorContrast = this.testColorContrast();\n      details.push(`颜色对比度测试: ${checks.colorContrast ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`颜色对比度测试失败: ${error}`);\n    }\n\n    // 测试焦点顺序\n    try {\n      checks.focusOrder = this.testFocusOrder();\n      details.push(`焦点顺序测试: ${checks.focusOrder ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`焦点顺序测试失败: ${error}`);\n    }\n\n    // 测试屏幕阅读器支持\n    try {\n      checks.screenReaderSupport = this.testScreenReaderSupport();\n      details.push(`屏幕阅读器测试: ${checks.screenReaderSupport ? '通过' : '失败'}`);\n    } catch (error) {\n      details.push(`屏幕阅读器测试失败: ${error}`);\n    }\n\n    const passed = Object.values(checks).every(check => check);\n\n    return {\n      passed,\n      checks,\n      details,\n    };\n  }\n\n  /**\n   * 创建测试按钮元素\n   */\n  private createTestButton(): HTMLElement {\n    const button = document.createElement('button');\n    button.style.minHeight = '44px';\n    button.style.minWidth = '44px';\n    button.textContent = '测试按钮';\n    document.body.appendChild(button);\n    return button;\n  }\n\n  /**\n   * 测试响应式断点\n   */\n  private testResponsiveBreakpoints(device: DeviceProfile): boolean {\n    const breakpoints = {\n      mobile: 767,\n      tablet: 1023,\n      desktop: Infinity,\n    };\n\n    if (device.width <= breakpoints.mobile) {\n      return device.isMobile;\n    } else if (device.width <= breakpoints.tablet) {\n      return device.isTablet;\n    } else {\n      return device.isDesktop;\n    }\n  }\n\n  /**\n   * 测试文本截断\n   */\n  private testTextTruncation(device: DeviceProfile): boolean {\n    const longText = '这是一个很长的测试文本需要截断';\n    const maxLength = device.width < 400 ? 15 : 25;\n    \n    return longText.length > maxLength;\n  }\n\n  /**\n   * 测试滚动处理\n   */\n  private testScrollHandling(device: DeviceProfile): boolean {\n    // 检查视口高度是否合理\n    return device.height > 0 && device.height <= 2000;\n  }\n\n  /**\n   * 测试方向支持\n   */\n  private testOrientationSupport(device: DeviceProfile): boolean {\n    // 移动设备应该支持方向变化\n    if (device.isMobile || device.isTablet) {\n      return device.width > 0 && device.height > 0;\n    }\n    return true; // 桌面设备固定方向\n  }\n\n  /**\n   * 测试手势支持\n   */\n  private testGestureSupport(device: DeviceProfile): boolean {\n    // 检查是否支持触摸事件\n    return typeof TouchEvent !== 'undefined';\n  }\n\n  /**\n   * 测试触摸精度\n   */\n  private testTouchAccuracy(device: DeviceProfile): boolean {\n    // 根据设备像素比检查触摸精度\n    return device.pixelRatio >= 1 && device.pixelRatio <= 4;\n  }\n\n  /**\n   * 测试反馈时机\n   */\n  private testFeedbackTiming(device: DeviceProfile): boolean {\n    // 简单的反馈测试\n    return device.isMobile || device.isTablet;\n  }\n\n  /**\n   * 测试长按支持\n   */\n  private testLongPressSupport(device: DeviceProfile): boolean {\n    // 移动设备应该支持长按\n    return device.isMobile || device.isTablet;\n  }\n\n  /**\n   * 模拟组件渲染\n   */\n  private async simulateComponentRendering(): Promise<void> {\n    // 模拟 React 组件渲染过程\n    return new Promise(resolve => {\n      setTimeout(resolve, 10);\n    });\n  }\n\n  /**\n   * 估算内存使用\n   */\n  private estimateMemoryUsage(): number {\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      return Math.round((performance as any).memory.usedJSHeapSize / 1024 / 1024);\n    }\n    return Math.random() * 50 + 10; // 模拟内存使用量\n  }\n\n  /**\n   * 估算帧率\n   */\n  private estimateFrameRate(): number {\n    const currentDevice = DEVICE_PROFILES[this.currentDeviceIndex];\n    if (currentDevice.isMobile) {\n      return 30 + Math.random() * 30;\n    } else if (currentDevice.isTablet) {\n      return 45 + Math.random() * 20;\n    } else {\n      return 55 + Math.random() * 10;\n    }\n  }\n\n  /**\n   * 测试 ARIA 标签\n   */\n  private testAriaLabels(): boolean {\n    // 简单的 ARIA 标签测试\n    const testElement = document.createElement('button');\n    testElement.setAttribute('aria-label', '测试按钮');\n    return testElement.hasAttribute('aria-label');\n  }\n\n  /**\n   * 测试颜色对比度\n   */\n  private testColorContrast(): boolean {\n    // 简单的颜色对比度检查\n    return true; // 实际实现中需要检查 WCAG 对比度标准\n  }\n\n  /**\n   * 测试焦点顺序\n   */\n  private testFocusOrder(): boolean {\n    // 测试 tab 键导航顺序\n    return true;\n  }\n\n  /**\n   * 测试屏幕阅读器支持\n   */\n  private testScreenReaderSupport(): boolean {\n    // 测试屏幕阅读器兼容性\n    return true;\n  }\n\n  /**\n   * 计算总体评分\n   */\n  private calculateOverallScore(result: ScreenSizeTestResult): number {\n    const { layoutTest, touchTest, performanceTest, accessibilityTest } = result.testResults;\n    \n    let totalScore = 0;\n    let testCount = 0;\n\n    // 布局测试评分 (25%)\n    if (layoutTest.passed) {\n      const passedChecks = Object.values(layoutTest.checks).filter(Boolean).length;\n      totalScore += (passedChecks / Object.keys(layoutTest.checks).length) * 25;\n    }\n    testCount += 25;\n\n    // 触摸测试评分 (25%)\n    if (touchTest.passed) {\n      const passedChecks = Object.values(touchTest.checks).filter(Boolean).length;\n      totalScore += (passedChecks / Object.keys(touchTest.checks).length) * 25;\n    }\n    testCount += 25;\n\n    // 性能测试评分 (25%)\n    if (performanceTest.passed) {\n      totalScore += 25;\n    } else {\n      // 根据性能指标计算部分分数\n      const { renderTime, frameRate } = performanceTest.metrics;\n      if (renderTime < 200) totalScore += 12.5;\n      if (frameRate > 20) totalScore += 12.5;\n    }\n    testCount += 25;\n\n    // 无障碍测试评分 (25%)\n    if (accessibilityTest.passed) {\n      const passedChecks = Object.values(accessibilityTest.checks).filter(Boolean).length;\n      totalScore += (passedChecks / Object.keys(accessibilityTest.checks).length) * 25;\n    }\n    testCount += 25;\n\n    return Math.round(totalScore);\n  }\n\n  /**\n   * 收集问题\n   */\n  private collectIssues(result: ScreenSizeTestResult): string[] {\n    const issues: string[] = [];\n\n    // 检查布局问题\n    if (!result.testResults.layoutTest.passed) {\n      Object.entries(result.testResults.layoutTest.checks).forEach(([check, passed]) => {\n        if (!passed) {\n          issues.push(`布局检查失败: ${check}`);\n        }\n      });\n    }\n\n    // 检查触摸问题\n    if (!result.testResults.touchTest.passed) {\n      Object.entries(result.testResults.touchTest.checks).forEach(([check, passed]) => {\n        if (!passed) {\n          issues.push(`触摸检查失败: ${check}`);\n        }\n      });\n    }\n\n    // 检查性能问题\n    if (!result.testResults.performanceTest.passed) {\n      const { renderTime, frameRate } = result.testResults.performanceTest.metrics;\n      if (renderTime >= 100) {\n        issues.push(`渲染时间过长: ${renderTime.toFixed(2)}ms`);\n      }\n      if (frameRate < 30) {\n        issues.push(`帧率过低: ${frameRate.toFixed(2)} FPS`);\n      }\n    }\n\n    // 检查无障碍问题\n    if (!result.testResults.accessibilityTest.passed) {\n      Object.entries(result.testResults.accessibilityTest.checks).forEach(([check, passed]) => {\n        if (!passed) {\n          issues.push(`无障碍检查失败: ${check}`);\n        }\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(result: ScreenSizeTestResult): string[] {\n    const recommendations: string[] = [];\n    const { device } = result;\n\n    // 基于设备类型的建议\n    if (device.isMobile) {\n      if (device.width < 400) {\n        recommendations.push('超小屏幕设备: 考虑使用更大的字体和按钮尺寸');\n      }\n      recommendations.push('移动设备: 确保所有交互元素都大于44px');\n    }\n\n    if (device.isTablet) {\n      recommendations.push('平板设备: 可以使用更大的触摸目标区域');\n    }\n\n    if (device.isDesktop) {\n      recommendations.push('桌面设备: 可以显示更多内容和功能');\n    }\n\n    // 基于测试结果的建议\n    const { layoutTest, touchTest, performanceTest, accessibilityTest } = result.testResults;\n\n    if (!layoutTest.passed) {\n      recommendations.push('改进响应式布局以更好地适配不同屏幕尺寸');\n    }\n\n    if (!touchTest.passed) {\n      recommendations.push('优化触摸交互，提供更好的用户反馈');\n    }\n\n    if (!performanceTest.passed) {\n      recommendations.push('优化性能，减少渲染时间和内存使用');\n    }\n\n    if (!accessibilityTest.passed) {\n      recommendations.push('改善无障碍支持，确保所有用户都能正常使用');\n    }\n\n    return [...new Set(recommendations)]; // 去重\n  }\n\n  /**\n   * 获取所有测试结果\n   */\n  getAllResults(): ScreenSizeTestResult[] {\n    return this.testResults;\n  }\n\n  /**\n   * 生成测试报告\n   */\n  generateReport(): string {\n    let report = '# 移动端UI适配性测试报告\\n\\n';\n    report += `生成时间: ${new Date().toLocaleString()}\\n\\n`;\n\n    // 总体统计\n    const totalTests = this.testResults.length;\n    const passedTests = this.testResults.filter(r => r.score >= 80).length;\n    const averageScore = this.testResults.reduce((sum, r) => sum + r.score, 0) / totalTests;\n\n    report += `## 总体统计\\n`;\n    report += `- 测试设备数量: ${totalTests}\\n`;\n    report += `- 通过测试: ${passedTests}\\n`;\n    report += `- 失败测试: ${totalTests - passedTests}\\n`;\n    report += `- 平均评分: ${averageScore.toFixed(1)}\\n\\n`;\n\n    // 各设备详细结果\n    report += `## 设备测试详情\\n\\n`;\n    \n    this.testResults.forEach(result => {\n      report += `### ${result.device.name} (${result.device.width}x${result.device.height})\\n`;\n      report += `- 适配评分: ${result.score}/100\\n`;\n      report += `- 布局测试: ${result.testResults.layoutTest.passed ? '✅ 通过' : '❌ 失败'}\\n`;\n      report += `- 触摸测试: ${result.testResults.touchTest.passed ? '✅ 通过' : '❌ 失败'}\\n`;\n      report += `- 性能测试: ${result.testResults.performanceTest.passed ? '✅ 通过' : '❌ 失败'}\\n`;\n      report += `- 无障碍测试: ${result.testResults.accessibilityTest.passed ? '✅ 通过' : '❌ 失败'}\\n\\n`;\n\n      if (result.issues.length > 0) {\n        report += `**发现的问题:**\\n`;\n        result.issues.forEach(issue => {\n          report += `- ${issue}\\n`;\n        });\n        report += '\\n';\n      }\n\n      if (result.recommendations.length > 0) {\n        report += `**优化建议:**\\n`;\n        result.recommendations.forEach(rec => {\n          report += `- ${rec}\\n`;\n        });\n        report += '\\n';\n      }\n    });\n\n    // 整体建议\n    report += `## 整体优化建议\\n\\n`;\n    \n    const commonIssues = this.collectCommonIssues();\n    const commonRecommendations = this.collectCommonRecommendations();\n\n    if (commonIssues.length > 0) {\n      report += `### 常见问题\\n`;\n      commonIssues.forEach(issue => {\n        report += `- ${issue}\\n`;\n      });\n      report += '\\n';\n    }\n\n    if (commonRecommendations.length > 0) {\n      report += `### 优化建议\\n`;\n      commonRecommendations.forEach(rec => {\n        report += `- ${rec}\\n`;\n      });\n    }\n\n    return report;\n  }\n\n  /**\n   * 收集常见问题\n   */\n  private collectCommonIssues(): string[] {\n    const issueCounts: Record<string, number> = {};\n\n    this.testResults.forEach(result => {\n      result.issues.forEach(issue => {\n        issueCounts[issue] = (issueCounts[issue] || 0) + 1;\n      });\n    });\n\n    return Object.entries(issueCounts)\n      .filter(([_, count]) => count > 1)\n      .map(([issue, _]) => issue);\n  }\n\n  /**\n   * 收集常见建议\n   */\n  private collectCommonRecommendations(): string[] {\n    const recommendationCounts: Record<string, number> = {};\n\n    this.testResults.forEach(result => {\n      result.recommendations.forEach(rec => {\n        recommendationCounts[rec] = (recommendationCounts[rec] || 0) + 1;\n      });\n    });\n\n    return Object.entries(recommendationCounts)\n      .filter(([_, count]) => count > 1)\n      .map(([rec, _]) => rec);\n  }\n\n  /**\n   * 清理测试环境\n   */\n  cleanup(): void {\n    // 清理测试数据和模拟\n    this.testResults = [];\n    this.currentDeviceIndex = 0;\n  }\n}\n\n// 导出工具函数\nexport const runScreenSizeTests = async (): Promise<ScreenSizeTestResult[]> => {\n  const tester = new ScreenSizeTester();\n  const results: ScreenSizeTestResult[] = [];\n\n  for (let i = 0; i < DEVICE_PROFILES.length; i++) {\n    console.log(`测试设备 ${i + 1}/${DEVICE_PROFILES.length}: ${DEVICE_PROFILES[i].name}`);\n    const result = await tester.testDeviceAdaptation(i);\n    results.push(result);\n  }\n\n  return results;\n};\n\nexport const generateAdaptationReport = async (): Promise<string> => {\n  const tester = new ScreenSizeTester();\n  \n  for (let i = 0; i < DEVICE_PROFILES.length; i++) {\n    await tester.testDeviceAdaptation(i);\n  }\n\n  return tester.generateReport();\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/search-performance-tester.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): utils/search-performance-tester.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 多语言搜索性能测试工具\n * \n * 测试不同语言的搜索响应时间\n * 验证搜索结果的相关性和准确性\n * 生成搜索性能报告\n */\n\nimport { writeFileSync, existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport {\n  ProductMultilingualService,\n  MultilingualHelper,\n  type SupportedLanguage,\n  type MultilingualText,\n} from '@/lib/services/multilingual-query';\n\ninterface SearchPerformanceMetrics {\n  language: SupportedLanguage;\n  searchTerm: string;\n  responseTime: number;\n  resultsCount: number;\n  relevanceScore: number;\n  accuracyScore: number;\n  timestamp: Date;\n}\n\ninterface SearchTestResult {\n  testName: string;\n  language: SupportedLanguage;\n  searchTerm: string;\n  responseTime: number;\n  resultsCount: number;\n  relevanceScore: number;\n  accuracyScore: number;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  errorMessage?: string;\n  timestamp: Date;\n}\n\ninterface PerformanceReport {\n  summary: {\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    averageResponseTime: number;\n    slowestTest: number;\n    fastestTest: number;\n    languageBreakdown: Record<SupportedLanguage, {\n      testsCount: number;\n      averageResponseTime: number;\n      successRate: number;\n    }>;\n  };\n  details: SearchTestResult[];\n  recommendations: string[];\n  performanceThresholds: {\n    excellent: number;\n    good: number;\n    acceptable: number;\n    poor: number;\n  };\n  timestamp: string;\n}\n\nconst SUPPORTED_LANGUAGES: SupportedLanguage[] = ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'];\n\n// 性能阈值（毫秒）\nconst PERFORMANCE_THRESHOLDS = {\n  excellent: 100,  // 优秀：<100ms\n  good: 300,       // 良好：<300ms\n  acceptable: 500, // 可接受：<500ms\n  poor: 1000,      // 差：<1000ms\n};\n\n// 测试数据\nconst PERFORMANCE_TEST_DATA = [\n  {\n    category: 'electronics',\n    searchTerms: {\n      'zh-CN': ['智能手机', '无线耳机', '电子产品'],\n      'en-US': ['smartphone', 'wireless headphones', 'electronics'],\n      'ru-RU': ['смартфон', 'беспроводные наушники', 'электроника'],\n      'tg-TJ': ['smartfon', 'quloqchin', 'elektronika'],\n    },\n  },\n  {\n    category: 'clothing',\n    searchTerms: {\n      'zh-CN': ['运动鞋', '服装', '鞋帽'],\n      'en-US': ['sports shoes', 'clothing', 'fashion'],\n      'ru-RU': ['кроссовки', 'одежда', 'мода'],\n      'tg-TJ': ['маҳсулоти варзишӣ', 'либос', 'мода'],\n    },\n  },\n];\n\n/**\n * 搜索性能测试器类\n */\nexport class SearchPerformanceTester {\n  private results: SearchTestResult[] = [];\n  private baseUrl: string = process.env.TEST_API_URL || 'http://localhost:3000';\n\n  /**\n   * 运行完整的搜索性能测试套件\n   */\n  async runFullTestSuite(): Promise<PerformanceReport> {\n    console.log('🚀 开始多语言搜索性能测试...');\n    \n    this.results = [];\n    \n    // 1. 基本搜索性能测试\n    await this.runBasicSearchPerformanceTests();\n    \n    // 2. 多语言搜索准确性测试\n    await this.runMultilingualAccuracyTests();\n    \n    // 3. 搜索相关性测试\n    await this.runSearchRelevanceTests();\n    \n    // 4. 并发搜索测试\n    await this.runConcurrentSearchTests();\n    \n    // 5. 搜索压力测试\n    await this.runSearchStressTests();\n\n    // 生成报告\n    const report = this.generatePerformanceReport();\n    \n    // 保存报告到文件\n    await this.savePerformanceReport(report);\n    \n    console.log('✅ 搜索性能测试完成');\n    return report;\n  }\n\n  /**\n   * 运行基本搜索性能测试\n   */\n  private async runBasicSearchPerformanceTests(): Promise<void> {\n    console.log('📊 运行基本搜索性能测试...');\n\n    for (const language of SUPPORTED_LANGUAGES) {\n      for (const testData of PERFORMANCE_TEST_DATA) {\n        const searchTerms = testData.searchTerms[language];\n        \n        for (const searchTerm of searchTerms) {\n          const startTime = Date.now();\n          \n          try {\n            // 模拟搜索API调用\n            const products = await this.simulateSearchRequest(language, searchTerm);\n            const responseTime = Date.now() - startTime;\n            \n            const result: SearchTestResult = {\n              testName: 'basic_search_performance',\n              language,\n              searchTerm,\n              responseTime,\n              resultsCount: products.length,\n              relevanceScore: this.calculateRelevanceScore(searchTerm, products),\n              accuracyScore: this.calculateAccuracyScore(searchTerm, products),\n              status: this.getPerformanceStatus(responseTime),\n              timestamp: new Date(),\n            };\n            \n            this.results.push(result);\n            console.log(`  ${language}: \"${searchTerm}\" - ${responseTime}ms`);\n            \n          } catch (error) {\n            const responseTime = Date.now() - startTime;\n            \n            this.results.push({\n              testName: 'basic_search_performance',\n              language,\n              searchTerm,\n              responseTime,\n              resultsCount: 0,\n              relevanceScore: 0,\n              accuracyScore: 0,\n              status: 'FAIL',\n              errorMessage: error instanceof Error ? error.message : 'Unknown error',\n              timestamp: new Date(),\n            });\n            \n            console.error(`  ${language}: \"${searchTerm}\" - 失败: ${error}`);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 运行多语言搜索准确性测试\n   */\n  private async runMultilingualAccuracyTests(): Promise<void> {\n    console.log('🌍 运行多语言搜索准确性测试...');\n\n    // 测试跨语言搜索的准确性\n    const crossLanguageTests = [\n      {\n        searchLanguage: 'zh-CN' as SupportedLanguage,\n        searchTerm: '智能手机',\n        expectedInLanguages: ['en-US', 'ru-RU', 'tg-TJ'] as SupportedLanguage[],\n      },\n      {\n        searchLanguage: 'en-US' as SupportedLanguage,\n        searchTerm: 'wireless headphones',\n        expectedInLanguages: ['zh-CN', 'ru-RU', 'tg-TJ'] as SupportedLanguage[],\n      },\n    ];\n\n    for (const test of crossLanguageTests) {\n      try {\n        const startTime = Date.now();\n        const products = await this.simulateSearchRequest(test.searchLanguage, test.searchTerm);\n        const responseTime = Date.now() - startTime;\n        \n        // 验证结果在所有预期语言中的存在性\n        let accuracyScore = 0;\n        for (const lang of test.expectedInLanguages) {\n          const hasMultilingualContent = products.some(product => \n            product._multilingual?.name?.[lang] && product._multilingual.name[lang].length > 0\n          );\n          if (hasMultilingualContent) {\n            accuracyScore += 1 / test.expectedInLanguages.length;\n          }\n        }\n        \n        this.results.push({\n          testName: 'cross_language_accuracy',\n          language: test.searchLanguage,\n          searchTerm: test.searchTerm,\n          responseTime,\n          resultsCount: products.length,\n          relevanceScore: this.calculateRelevanceScore(test.searchTerm, products),\n          accuracyScore,\n          status: accuracyScore >= 0.8 ? 'PASS' : 'WARNING',\n          timestamp: new Date(),\n        });\n        \n        console.log(`  跨语言准确性: \"${test.searchTerm}\" - 准确率: ${(accuracyScore * 100).toFixed(1)}%`);\n        \n      } catch (error) {\n        console.error(`  跨语言准确性测试失败: ${error}`);\n      }\n    }\n  }\n\n  /**\n   * 运行搜索相关性测试\n   */\n  private async runSearchRelevanceTests(): Promise<void> {\n    console.log('🎯 运行搜索相关性测试...');\n\n    const relevanceTests = [\n      {\n        searchTerm: '手机',\n        expectedTerms: ['smartphone', '手机', 'смартфон', 'smartfon'],\n        category: 'electronics',\n      },\n      {\n        searchTerm: 'headphones',\n        expectedTerms: ['headphones', 'наушники', 'quloqchin'],\n        category: 'electronics',\n      },\n    ];\n\n    for (const test of relevanceTests) {\n      for (const language of SUPPORTED_LANGUAGES) {\n        try {\n          const startTime = Date.now();\n          const products = await this.simulateSearchRequest(language, test.searchTerm);\n          const responseTime = Date.now() - startTime;\n          \n          const relevanceScore = this.calculateRelevanceScore(test.searchTerm, products, test.expectedTerms);\n          \n          this.results.push({\n            testName: 'search_relevance',\n            language,\n            searchTerm: test.searchTerm,\n            responseTime,\n            resultsCount: products.length,\n            relevanceScore,\n            accuracyScore: relevanceScore, // 相关性测试中相关性等于准确性\n            status: relevanceScore >= 0.7 ? 'PASS' : 'WARNING',\n            timestamp: new Date(),\n          });\n          \n        } catch (error) {\n          console.error(`  相关性测试失败: ${error}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * 运行并发搜索测试\n   */\n  private async runConcurrentSearchTests(): Promise<void> {\n    console.log('⚡ 运行并发搜索测试...');\n\n    const concurrentRequests = 10;\n    const promises: Promise<SearchTestResult>[] = [];\n\n    // 创建并发请求\n    for (let i = 0; i < concurrentRequests; i++) {\n      const language = SUPPORTED_LANGUAGES[i % SUPPORTED_LANGUAGES.length];\n      const searchTerm = 'smartphone';\n      \n      promises.push(this.performSingleSearchTest(language, searchTerm, 'concurrent_search'));\n    }\n\n    const startTime = Date.now();\n    const results = await Promise.all(promises);\n    const totalTime = Date.now() - startTime;\n\n    this.results.push(...results);\n    \n    console.log(`  并发搜索: ${concurrentRequests}个请求，总用时 ${totalTime}ms，平均 ${(totalTime / concurrentRequests).toFixed(1)}ms`);\n  }\n\n  /**\n   * 运行搜索压力测试\n   */\n  private async runSearchStressTests(): Promise<void> {\n    console.log('🔥 运行搜索压力测试...');\n\n    const stressTestScenarios = [\n      { requests: 50, duration: 1000 }, // 50个请求，1秒内完成\n      { requests: 100, duration: 2000 }, // 100个请求，2秒内完成\n    ];\n\n    for (const scenario of stressTestScenarios) {\n      const promises: Promise<SearchTestResult>[] = [];\n      \n      // 创建压力测试请求\n      for (let i = 0; i < scenario.requests; i++) {\n        const language = SUPPORTED_LANGUAGES[i % SUPPORTED_LANGUAGES.length];\n        const searchTerm = `stress_test_${i}`;\n        \n        promises.push(this.performSingleSearchTest(language, searchTerm, 'stress_search'));\n      }\n\n      try {\n        const startTime = Date.now();\n        const results = await Promise.allSettled(promises);\n        const totalTime = Date.now() - startTime;\n        \n        const successfulResults = results.filter(r => r.status === 'fulfilled').length;\n        const failedResults = results.filter(r => r.status === 'rejected').length;\n        \n        console.log(`  压力测试: ${scenario.requests}个请求，成功 ${successfulResults}个，失败 ${failedResults}个，总用时 ${totalTime}ms`);\n        \n        // 生成压力测试总结结果\n        this.results.push({\n          testName: 'stress_search_summary',\n          language: 'tg-TJ' as SupportedLanguage,\n          searchTerm: `stress_${scenario.requests}_requests`,\n          responseTime: totalTime,\n          resultsCount: successfulResults,\n          relevanceScore: successfulResults / scenario.requests,\n          accuracyScore: successfulResults / scenario.requests,\n          status: successfulResults / scenario.requests >= 0.9 ? 'PASS' : 'WARNING',\n          timestamp: new Date(),\n        });\n        \n      } catch (error) {\n        console.error(`  压力测试失败: ${error}`);\n      }\n    }\n  }\n\n  /**\n   * 执行单个搜索测试\n   */\n  private async performSingleSearchTest(\n    language: SupportedLanguage,\n    searchTerm: string,\n    testType: string\n  ): Promise<SearchTestResult> {\n    const startTime = Date.now();\n    \n    try {\n      const products = await this.simulateSearchRequest(language, searchTerm);\n      const responseTime = Date.now() - startTime;\n      \n      return {\n        testName: testType,\n        language,\n        searchTerm,\n        responseTime,\n        resultsCount: products.length,\n        relevanceScore: this.calculateRelevanceScore(searchTerm, products),\n        accuracyScore: this.calculateAccuracyScore(searchTerm, products),\n        status: this.getPerformanceStatus(responseTime),\n        timestamp: new Date(),\n      };\n      \n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      return {\n        testName: testType,\n        language,\n        searchTerm,\n        responseTime,\n        resultsCount: 0,\n        relevanceScore: 0,\n        accuracyScore: 0,\n        status: 'FAIL',\n        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  /**\n   * 模拟搜索API请求\n   */\n  private async simulateSearchRequest(language: SupportedLanguage, searchTerm: string): Promise<any[]> {\n    // 模拟网络延迟\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 200 + 50));\n    \n    // 模拟搜索结果\n    const mockResults = [\n      {\n        id: '1',\n        name: `Mock Product ${searchTerm}`,\n        description: `Description for ${searchTerm}`,\n        category: 'electronics',\n        _multilingual: {\n          name: {\n            'zh-CN': `${searchTerm} 产品`,\n            'en-US': `${searchTerm} Product`,\n            'ru-RU': `Товар ${searchTerm}`,\n            'tg-TJ': `Маҳсулоти ${searchTerm}`,\n          },\n        },\n      },\n    ];\n    \n    return mockResults;\n  }\n\n  /**\n   * 计算搜索相关性评分\n   */\n  private calculateRelevanceScore(searchTerm: string, results: any[], expectedTerms: string[] = []): number {\n    if (results.length === 0) return 0;\n    \n    let totalScore = 0;\n    \n    results.forEach(result => {\n      const text = `${result.name} ${result.description} ${result.category}`.toLowerCase();\n      const searchLower = searchTerm.toLowerCase();\n      \n      // 精确匹配\n      if (text.includes(searchLower)) {\n        totalScore += 1.0;\n      }\n      // 部分匹配\n      else if (text.split(' ').some(word => word.includes(searchLower) || searchLower.includes(word))) {\n        totalScore += 0.7;\n      }\n      // 预期术语匹配\n      else if (expectedTerms.some(term => text.includes(term.toLowerCase()))) {\n        totalScore += 0.8;\n      }\n      else {\n        totalScore += 0.3; // 基础分\n      }\n    });\n    \n    return Math.min(totalScore / results.length, 1.0);\n  }\n\n  /**\n   * 计算搜索准确性评分\n   */\n  private calculateAccuracyScore(searchTerm: string, results: any[]): number {\n    // 简单的准确性评分：结果中包含搜索词的程度\n    return this.calculateRelevanceScore(searchTerm, results);\n  }\n\n  /**\n   * 根据响应时间获取性能状态\n   */\n  private getPerformanceStatus(responseTime: number): 'PASS' | 'FAIL' | 'WARNING' {\n    if (responseTime <= PERFORMANCE_THRESHOLDS.excellent) return 'PASS';\n    if (responseTime <= PERFORMANCE_THRESHOLDS.good) return 'PASS';\n    if (responseTime <= PERFORMANCE_THRESHOLDS.acceptable) return 'WARNING';\n    return 'FAIL';\n  }\n\n  /**\n   * 生成性能报告\n   */\n  private generatePerformanceReport(): PerformanceReport {\n    const passedTests = this.results.filter(r => r.status === 'PASS').length;\n    const failedTests = this.results.filter(r => r.status === 'FAIL').length;\n    const totalTests = this.results.length;\n    \n    const responseTimes = this.results.map(r => r.responseTime);\n    const averageResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / totalTests;\n    const slowestTest = Math.max(...responseTimes);\n    const fastestTest = Math.min(...responseTimes);\n\n    // 按语言统计\n    const languageBreakdown = SUPPORTED_LANGUAGES.reduce((acc, lang) => {\n      const langResults = this.results.filter(r => r.language === lang);\n      const langPassed = langResults.filter(r => r.status === 'PASS').length;\n      \n      acc[lang] = {\n        testsCount: langResults.length,\n        averageResponseTime: langResults.reduce((sum, r) => sum + r.responseTime, 0) / langResults.length,\n        successRate: langResults.length > 0 ? langPassed / langResults.length : 0,\n      };\n      \n      return acc;\n    }, {} as PerformanceReport['summary']['languageBreakdown']);\n\n    const recommendations = this.generateRecommendations();\n\n    return {\n      summary: {\n        totalTests,\n        passedTests,\n        failedTests,\n        averageResponseTime,\n        slowestTest,\n        fastestTest,\n        languageBreakdown,\n      },\n      details: this.results,\n      recommendations,\n      performanceThresholds: PERFORMANCE_THRESHOLDS,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(): string[] {\n    const recommendations: string[] = [];\n    \n    // 基于性能指标生成建议\n    const averageResponseTime = this.results.reduce((sum, r) => sum + r.responseTime, 0) / this.results.length;\n    \n    if (averageResponseTime > PERFORMANCE_THRESHOLDS.acceptable) {\n      recommendations.push('搜索响应时间过长，建议优化数据库查询和添加索引');\n    }\n    \n    if (averageResponseTime > PERFORMANCE_THRESHOLDS.good) {\n      recommendations.push('搜索响应时间可以进一步优化，建议使用缓存');\n    }\n    \n    // 检查语言性能差异\n    const langAverages = SUPPORTED_LANGUAGES.map(lang => {\n      const langResults = this.results.filter(r => r.language === lang);\n      return {\n        language: lang,\n        avgTime: langResults.reduce((sum, r) => sum + r.responseTime, 0) / langResults.length,\n      };\n    });\n    \n    const maxAvgTime = Math.max(...langAverages.map(l => l.avgTime));\n    const minAvgTime = Math.min(...langAverages.map(l => l.avgTime));\n    \n    if (maxAvgTime - minAvgTime > 200) {\n      recommendations.push('不同语言搜索性能差异较大，建议统一优化策略');\n    }\n    \n    // 基于准确性生成建议\n    const lowAccuracyResults = this.results.filter(r => r.accuracyScore < 0.7);\n    if (lowAccuracyResults.length > 0) {\n      recommendations.push('部分搜索结果准确性较低，建议改进搜索算法和词库');\n    }\n    \n    // 基于相关性生成建议\n    const lowRelevanceResults = this.results.filter(r => r.relevanceScore < 0.6);\n    if (lowRelevanceResults.length > 0) {\n      recommendations.push('搜索相关性有待提升，建议增强语义匹配能力');\n    }\n    \n    // 默认建议\n    if (recommendations.length === 0) {\n      recommendations.push('搜索性能表现良好，建议继续保持并监控性能指标');\n      recommendations.push('考虑添加更多语言特定的优化策略');\n      recommendations.push('建议实施实时性能监控和告警机制');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * 保存性能报告到文件\n   */\n  private async savePerformanceReport(report: PerformanceReport): Promise<void> {\n    const reportsDir = './test-reports';\n    \n    if (!existsSync(reportsDir)) {\n      mkdirSync(reportsDir, { recursive: true });\n    }\n    \n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `search-performance-report-${timestamp}`;\n    \n    // 保存JSON格式报告\n    const jsonPath = join(reportsDir, `${filename}.json`);\n    writeFileSync(jsonPath, JSON.stringify(report, null, 2));\n    \n    // 保存Markdown格式报告\n    const mdPath = join(reportsDir, `${filename}.md`);\n    const markdownReport = this.generateMarkdownReport(report);\n    writeFileSync(mdPath, markdownReport);\n    \n    console.log(`📄 性能报告已保存:`);\n    console.log(`  JSON: ${jsonPath}`);\n    console.log(`  Markdown: ${mdPath}`);\n  }\n\n  /**\n   * 生成Markdown格式的性能报告\n   */\n  private generateMarkdownReport(report: PerformanceReport): string {\n    const md = [\n      `# 多语言搜索性能测试报告`,\n      ``,\n      `**生成时间:** ${report.timestamp}`,\n      ``,\n      `## 测试摘要`,\n      ``,\n      `- **总测试数:** ${report.summary.totalTests}`,\n      `- **通过测试:** ${report.summary.passedTests}`,\n      `- **失败测试:** ${report.summary.failedTests}`,\n      `- **平均响应时间:** ${report.summary.averageResponseTime.toFixed(2)}ms`,\n      `- **最慢测试:** ${report.summary.slowestTest}ms`,\n      `- **最快测试:** ${report.summary.fastestTest}ms`,\n      ``,\n      `## 性能阈值`,\n      ``,\n      `- **优秀:** < ${report.performanceThresholds.excellent}ms`,\n      `- **良好:** < ${report.performanceThresholds.good}ms`,\n      `- **可接受:** < ${report.performanceThresholds.acceptable}ms`,\n      `- **较差:** >= ${report.performanceThresholds.poor}ms`,\n      ``,\n      `## 语言性能分解`,\n      ``,\n    ];\n\n    for (const [language, stats] of Object.entries(report.summary.languageBreakdown)) {\n      md.push(`### ${language}`);\n      md.push(`- 测试数量: ${stats.testsCount}`);\n      md.push(`- 平均响应时间: ${stats.averageResponseTime.toFixed(2)}ms`);\n      md.push(`- 成功率: ${(stats.successRate * 100).toFixed(1)}%`);\n      md.push(``);\n    }\n\n    md.push(`## 详细测试结果`);\n    md.push(``);\n    md.push(`| 测试类型 | 语言 | 搜索词 | 响应时间(ms) | 结果数 | 相关性 | 准确性 | 状态 |`);\n    md.push(`|----------|------|--------|-------------|--------|--------|--------|------|`);\n\n    for (const result of report.details) {\n      md.push(`| ${result.testName} | ${result.language} | ${result.searchTerm} | ${result.responseTime} | ${result.resultsCount} | ${result.relevanceScore.toFixed(2)} | ${result.accuracyScore.toFixed(2)} | ${result.status} |`);\n    }\n\n    md.push(``);\n    md.push(`## 优化建议`);\n    md.push(``);\n\n    for (const recommendation of report.recommendations) {\n      md.push(`- ${recommendation}`);\n    }\n\n    return md.join('\\n');\n  }\n}\n\n// 导出主要类和函数\nexport default SearchPerformanceTester;\nexport { SearchPerformanceTester };\n\n// 便捷函数：运行完整测试\nexport async function runSearchPerformanceTests(): Promise<PerformanceReport> {\n  const tester = new SearchPerformanceTester();\n  return await tester.runFullTestSuite();\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/stress-tester.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): utils/stress-tester.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 压力测试工具\n * 提供高并发请求测试、系统负载和稳定性测试、性能瓶颈识别等功能\n */\n\nexport interface StressTestConfig {\n  maxConcurrentUsers: number;    // 最大并发用户数\n  testDuration: number;          // 测试持续时间(ms)\n  rampUpTime: number;            // 逐渐增加用户的时间(ms)\n  baseUrl: string;              // 基础URL\n  endpoints: string[];          // 测试端点列表\n  rampDownTime?: number;        // 逐渐减少用户的时间(ms)\n  thinkTime?: number;           // 用户思考时间(ms)\n  retryAttempts?: number;       // 重试次数\n  timeout?: number;             // 请求超时时间(ms)\n}\n\nexport interface StressTestResult {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  minResponseTime: number;\n  maxResponseTime: number;\n  percentile50: number;\n  percentile95: number;\n  percentile99: number;\n  errorRate: number;\n  requestsPerSecond: number;\n  peakConcurrentUsers: number;\n  totalDuration: number;\n  throughput: number; // MB/s\n  errors: StressTestError[];\n}\n\nexport interface StressTestError {\n  timestamp: number;\n  endpoint: string;\n  error: string;\n  statusCode?: number;\n}\n\nexport interface LoadTestScenario {\n  name: string;\n  weight: number; // 场景权重\n  endpoints: string[];\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  payload?: any;\n  headers?: Record<string, string>;\n}\n\nexport interface PerformanceThreshold {\n  responseTime: number;    // 响应时间阈值(ms)\n  errorRate: number;       // 错误率阈值(0-1)\n  throughput: number;      // 吞吐量阈值(requests/second)\n  cpuUsage: number;        // CPU使用率阈值(0-1)\n  memoryUsage: number;     // 内存使用阈值(bytes)\n}\n\n// 用户模拟器\nclass UserSimulator {\n  private userId: string;\n  private baseUrl: string;\n  private thinkTime: number;\n  private retryAttempts: number;\n  private timeout: number;\n  private isRunning = false;\n\n  constructor(\n    userId: string, \n    config: StressTestConfig\n  ) {\n    this.userId = userId;\n    this.baseUrl = config.baseUrl;\n    this.thinkTime = config.thinkTime || 1000;\n    this.retryAttempts = config.retryAttempts || 3;\n    this.timeout = config.timeout || 30000;\n  }\n\n  async start(config: StressTestConfig): Promise<void> {\n    this.isRunning = true;\n    const startTime = Date.now();\n    const endTime = startTime + config.testDuration;\n\n    console.log(`用户 ${this.userId} 开始负载测试`);\n\n    while (this.isRunning && Date.now() < endTime) {\n      try {\n        // 随机选择端点\n        const endpoint = config.endpoints[Math.floor(Math.random() * config.endpoints.length)];\n        \n        const responseTime = await this.makeRequest(endpoint);\n        \n        // 模拟思考时间\n        await this.sleep(this.thinkTime + Math.random() * this.thinkTime);\n        \n      } catch (error) {\n        console.warn(`用户 ${this.userId} 请求失败:`, error);\n      }\n    }\n\n    console.log(`用户 ${this.userId} 负载测试完成`);\n  }\n\n  private async makeRequest(endpoint: string): Promise<number> {\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': `StressTest-User-${this.userId}`\n        },\n        signal: AbortSignal.timeout(this.timeout)\n      });\n      \n      const endTime = performance.now();\n      const responseTime = endTime - startTime;\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      return responseTime;\n      \n    } catch (error) {\n      const endTime = performance.now();\n      const responseTime = endTime - startTime;\n      throw new Error(`请求失败: ${error.message}, 耗时: ${responseTime.toFixed(2)}ms`);\n    }\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  stop(): void {\n    this.isRunning = false;\n  }\n}\n\n// 系统资源监控器\nclass SystemResourceMonitor {\n  private interval: NodeJS.Timeout | null = null;\n  private data: any[] = [];\n  private thresholds: PerformanceThreshold;\n\n  constructor(thresholds?: Partial<PerformanceThreshold>) {\n    this.thresholds = {\n      responseTime: 5000,\n      errorRate: 0.05,\n      throughput: 1000,\n      cpuUsage: 0.8,\n      memoryUsage: 500 * 1024 * 1024, // 500MB\n      ...thresholds\n    };\n  }\n\n  start(): void {\n    this.interval = setInterval(() => {\n      this.collectMetrics();\n    }, 1000);\n  }\n\n  stop(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  private collectMetrics(): void {\n    const metrics = {\n      timestamp: Date.now(),\n      memory: this.getMemoryUsage(),\n      cpu: this.getCpuUsage(),\n      uptime: process.uptime(),\n      heapUsed: process.memoryUsage().heapUsed,\n      heapTotal: process.memoryUsage().heapTotal\n    };\n\n    this.data.push(metrics);\n  }\n\n  private getMemoryUsage(): number {\n    return process.memoryUsage().heapUsed;\n  }\n\n  private getCpuUsage(): number {\n    // Node.js中获取CPU使用率比较复杂，这里返回模拟数据\n    return Math.random() * 0.5; // 0-50%模拟\n  }\n\n  getData(): any[] {\n    return this.data;\n  }\n\n  getCurrentMetrics(): any {\n    return this.data[this.data.length - 1] || {};\n  }\n\n  checkThresholds(): { violated: boolean; issues: string[] } {\n    const issues: string[] = [];\n    const current = this.getCurrentMetrics();\n\n    if (current.memory > this.thresholds.memoryUsage) {\n      issues.push(`内存使用过高: ${(current.memory / 1024 / 1024).toFixed(1)}MB`);\n    }\n\n    if (current.cpu > this.thresholds.cpuUsage) {\n      issues.push(`CPU使用率过高: ${(current.cpu * 100).toFixed(1)}%`);\n    }\n\n    return {\n      violated: issues.length > 0,\n      issues\n    };\n  }\n}\n\n// 性能瓶颈检测器\nclass BottleneckDetector {\n  private metrics: {\n    responseTimes: number[];\n    errorCounts: Map<string, number>;\n    throughputHistory: number[];\n    memoryHistory: number[];\n  };\n\n  constructor() {\n    this.metrics = {\n      responseTimes: [],\n      errorCounts: new Map(),\n      throughputHistory: [],\n      memoryHistory: []\n    };\n  }\n\n  recordResponseTime(time: number): void {\n    this.metrics.responseTimes.push(time);\n    \n    // 只保留最近1000个数据点\n    if (this.metrics.responseTimes.length > 1000) {\n      this.metrics.responseTimes.shift();\n    }\n  }\n\n  recordError(endpoint: string): void {\n    const count = this.metrics.errorCounts.get(endpoint) || 0;\n    this.metrics.errorCounts.set(endpoint, count + 1);\n  }\n\n  recordThroughput(throughput: number): void {\n    this.metrics.throughputHistory.push(throughput);\n    \n    if (this.metrics.throughputHistory.length > 100) {\n      this.metrics.throughputHistory.shift();\n    }\n  }\n\n  recordMemoryUsage(memory: number): void {\n    this.metrics.memoryHistory.push(memory);\n    \n    if (this.metrics.memoryHistory.length > 100) {\n      this.metrics.memoryHistory.shift();\n    }\n  }\n\n  analyzeBottlenecks(): BottleneckAnalysis {\n    const analysis: BottleneckAnalysis = {\n      bottlenecks: [],\n      recommendations: [],\n      severity: 'low'\n    };\n\n    // 分析响应时间问题\n    if (this.metrics.responseTimes.length > 10) {\n      const avgResponseTime = this.calculateAverage(this.metrics.responseTimes);\n      const p95 = this.calculatePercentile(this.metrics.responseTimes, 0.95);\n      \n      if (avgResponseTime > 1000) {\n        analysis.bottlenecks.push({\n          type: 'slow_response',\n          severity: 'high',\n          description: `平均响应时间过长: ${avgResponseTime.toFixed(2)}ms`,\n          impact: '影响用户体验，可能导致用户流失'\n        });\n      }\n      \n      if (p95 > 2000) {\n        analysis.bottlenecks.push({\n          type: 'response_time_variance',\n          severity: 'medium',\n          description: `95百分位响应时间过高: ${p95.toFixed(2)}ms`,\n          impact: '部分用户遇到较慢的响应时间'\n        });\n      }\n    }\n\n    // 分析错误率问题\n    const totalErrors = Array.from(this.metrics.errorCounts.values()).reduce((a, b) => a + b, 0);\n    const totalRequests = this.metrics.responseTimes.length;\n    const errorRate = totalRequests > 0 ? totalErrors / totalRequests : 0;\n    \n    if (errorRate > 0.05) {\n      analysis.bottlenecks.push({\n        type: 'high_error_rate',\n        severity: 'critical',\n        description: `错误率过高: ${(errorRate * 100).toFixed(1)}%`,\n        impact: '系统不稳定，需要立即修复'\n      });\n    }\n\n    // 分析吞吐量问题\n    if (this.metrics.throughputHistory.length > 5) {\n      const throughputTrend = this.calculateTrend(this.metrics.throughputHistory);\n      if (throughputTrend < -0.1) {\n        analysis.bottlenecks.push({\n          type: 'declining_throughput',\n          severity: 'medium',\n          description: '吞吐量呈下降趋势',\n          impact: '系统处理能力下降'\n        });\n      }\n    }\n\n    // 分析内存问题\n    if (this.metrics.memoryHistory.length > 10) {\n      const memoryTrend = this.calculateTrend(this.metrics.memoryHistory);\n      if (memoryTrend > 0.1) {\n        analysis.bottlenecks.push({\n          type: 'memory_leak',\n          severity: 'high',\n          description: '疑似内存泄漏',\n          impact: '可能导致系统崩溃'\n        });\n      }\n    }\n\n    // 确定整体严重程度\n    const criticalIssues = analysis.bottlenecks.filter(b => b.severity === 'critical').length;\n    const highIssues = analysis.bottlenecks.filter(b => b.severity === 'high').length;\n    \n    if (criticalIssues > 0) {\n      analysis.severity = 'critical';\n    } else if (highIssues > 0) {\n      analysis.severity = 'high';\n    } else if (analysis.bottlenecks.length > 0) {\n      analysis.severity = 'medium';\n    }\n\n    // 生成建议\n    analysis.recommendations = this.generateRecommendations(analysis.bottlenecks);\n\n    return analysis;\n  }\n\n  private calculateAverage(values: number[]): number {\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n\n  private calculatePercentile(values: number[], percentile: number): number {\n    const sorted = [...values].sort((a, b) => a - b);\n    const index = Math.ceil(sorted.length * percentile) - 1;\n    return sorted[index] || 0;\n  }\n\n  private calculateTrend(values: number[]): number {\n    if (values.length < 2) return 0;\n    \n    const first = values[0];\n    const last = values[values.length - 1];\n    return (last - first) / first;\n  }\n\n  private generateRecommendations(bottlenecks: any[]): string[] {\n    const recommendations: string[] = [];\n\n    bottlenecks.forEach(bottleneck => {\n      switch (bottleneck.type) {\n        case 'slow_response':\n          recommendations.push('检查数据库查询优化，考虑添加索引');\n          recommendations.push('启用缓存减少数据库访问');\n          recommendations.push('优化API端点实现');\n          break;\n        case 'high_error_rate':\n          recommendations.push('检查API端点错误处理');\n          recommendations.push('验证数据库连接和查询');\n          recommendations.push('检查外部依赖服务状态');\n          break;\n        case 'declining_throughput':\n          recommendations.push('检查系统资源使用情况');\n          recommendations.push('考虑水平扩展服务器实例');\n          recommendations.push('优化代码性能热点');\n          break;\n        case 'memory_leak':\n          recommendations.push('检查事件监听器清理');\n          recommendations.push('验证缓存清理策略');\n          recommendations.push('使用内存分析工具定位泄漏源');\n          break;\n      }\n    });\n\n    return recommendations;\n  }\n}\n\n// 瓶颈分析结果接口\ninterface BottleneckAnalysis {\n  bottlenecks: {\n    type: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    description: string;\n    impact: string;\n  }[];\n  recommendations: string[];\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\n// 主要的压力测试器类\nexport class StressTester {\n  private config: StressTestConfig;\n  private users: UserSimulator[] = [];\n  private resourceMonitor: SystemResourceMonitor;\n  private bottleneckDetector: BottleneckDetector;\n  private results: StressTestResult;\n  private startTime: number = 0;\n  private endTime: number = 0;\n\n  constructor(config: Partial<StressTestConfig> = {}) {\n    this.config = {\n      maxConcurrentUsers: 50,\n      testDuration: 60000,\n      rampUpTime: 10000,\n      baseUrl: 'http://localhost:3000',\n      endpoints: ['/', '/api/health'],\n      rampDownTime: 5000,\n      thinkTime: 1000,\n      retryAttempts: 3,\n      timeout: 30000,\n      ...config\n    };\n\n    this.resourceMonitor = new SystemResourceMonitor();\n    this.bottleneckDetector = new BottleneckDetector();\n\n    this.results = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      averageResponseTime: 0,\n      minResponseTime: 0,\n      maxResponseTime: 0,\n      percentile50: 0,\n      percentile95: 0,\n      percentile99: 0,\n      errorRate: 0,\n      requestsPerSecond: 0,\n      peakConcurrentUsers: 0,\n      totalDuration: 0,\n      throughput: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * 运行负载测试\n   */\n  async runLoadTest(config?: Partial<StressTestConfig>): Promise<StressTestResult> {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    console.log('开始负载测试...');\n    console.log(`配置: ${JSON.stringify(this.config, null, 2)}`);\n\n    this.startTime = Date.now();\n    this.resourceMonitor.start();\n\n    try {\n      await this.rampUpUsers();\n      await this.maintainLoad();\n      await this.rampDownUsers();\n    } catch (error) {\n      console.error('负载测试过程中出现错误:', error);\n    } finally {\n      this.resourceMonitor.stop();\n      this.endTime = Date.now();\n      this.calculateResults();\n    }\n\n    console.log('负载测试完成');\n    return this.results;\n  }\n\n  /**\n   * 运行场景测试\n   */\n  async runScenarioTest(\n    scenarios: LoadTestScenario[], \n    totalUsers: number = 50,\n    duration: number = 60000\n  ): Promise<StressTestResult> {\n    console.log('开始场景测试...');\n    console.log(`场景数量: ${scenarios.length}, 总用户数: ${totalUsers}`);\n\n    this.startTime = Date.now();\n    this.resourceMonitor.start();\n\n    try {\n      // 按权重分配用户\n      const weightedScenarios = this.distributeUsersByWeight(scenarios, totalUsers);\n      \n      await this.executeScenarios(weightedScenarios, duration);\n      \n    } catch (error) {\n      console.error('场景测试过程中出现错误:', error);\n    } finally {\n      this.resourceMonitor.stop();\n      this.endTime = Date.now();\n      this.calculateResults();\n    }\n\n    console.log('场景测试完成');\n    return this.results;\n  }\n\n  /**\n   * 运行数据库压力测试\n   */\n  async runDatabaseStressTest(options: {\n    concurrentConnections: number;\n    queriesPerConnection: number;\n    queryType: 'SELECT' | 'INSERT' | 'UPDATE' | 'MIXED';\n  }): Promise<any> {\n    console.log('开始数据库压力测试...');\n    \n    const results = {\n      totalQueries: 0,\n      successfulQueries: 0,\n      failedQueries: 0,\n      averageQueryTime: 0,\n      errors: [] as string[]\n    };\n\n    const promises: Promise<void>[] = [];\n\n    for (let i = 0; i < options.concurrentConnections; i++) {\n      const promise = this.simulateDatabaseLoad(\n        options.queriesPerConnection,\n        options.queryType\n      );\n      promises.push(promise);\n    }\n\n    try {\n      const startTime = performance.now();\n      await Promise.all(promises);\n      const endTime = performance.now();\n\n      results.averageQueryTime = (endTime - startTime) / results.totalQueries;\n      \n      console.log(`数据库压力测试完成: ${results.successfulQueries}/${results.totalQueries} 成功`);\n      return results;\n      \n    } catch (error) {\n      console.error('数据库压力测试失败:', error);\n      results.errors.push(error.message);\n      return results;\n    }\n  }\n\n  /**\n   * 运行长期稳定性测试\n   */\n  async runStabilityTest(duration: number = 3600000): Promise<StabilityTestResult> { // 默认1小时\n    console.log(`开始长期稳定性测试 (${duration / 1000 / 60}分钟)...`);\n    \n    const stabilityResults: StabilityTestResult = {\n      startTime: Date.now(),\n      endTime: 0,\n      duration: 0,\n      memorySnapshots: [],\n      responseTimeHistory: [],\n      errorHistory: [],\n      availability: 0,\n      meanTimeBetweenFailures: 0,\n      uptime: 0\n    };\n\n    let currentMemory = 0;\n    let lastErrorTime = 0;\n    let errorIntervals: number[] = [];\n\n    const interval = setInterval(async () => {\n      try {\n        // 检查系统健康状态\n        const healthCheck = await this.checkSystemHealth();\n        \n        // 记录内存使用\n        currentMemory = process.memoryUsage().heapUsed;\n        stabilityResults.memorySnapshots.push({\n          timestamp: Date.now(),\n          memory: currentMemory,\n          uptime: process.uptime()\n        });\n\n        // 记录响应时间\n        const responseTime = await this.measureSystemResponseTime();\n        stabilityResults.responseTimeHistory.push({\n          timestamp: Date.now(),\n          responseTime\n        });\n\n        // 检查错误\n        if (!healthCheck.healthy) {\n          const errorTime = Date.now();\n          if (lastErrorTime > 0) {\n            errorIntervals.push(errorTime - lastErrorTime);\n          }\n          lastErrorTime = errorTime;\n          \n          stabilityResults.errorHistory.push({\n            timestamp: errorTime,\n            error: healthCheck.error,\n            type: healthCheck.type\n          });\n        }\n\n        // 检查内存泄漏\n        if (stabilityResults.memorySnapshots.length > 10) {\n          const recent = stabilityResults.memorySnapshots.slice(-10);\n          const memoryTrend = this.calculateMemoryTrend(recent);\n          \n          if (memoryTrend > 0.1) { // 内存增长超过10%\n            console.warn('⚠️ 检测到疑似内存泄漏');\n          }\n        }\n\n      } catch (error) {\n        console.error('稳定性测试监控出错:', error);\n      }\n    }, 60000); // 每分钟检查一次\n\n    // 等待测试完成\n    await new Promise(resolve => setTimeout(resolve, duration));\n    \n    clearInterval(interval);\n    \n    stabilityResults.endTime = Date.now();\n    stabilityResults.duration = stabilityResults.endTime - stabilityResults.startTime;\n    stabilityResults.uptime = process.uptime();\n    \n    // 计算可用性\n    const totalChecks = stabilityResults.memorySnapshots.length;\n    const successfulChecks = totalChecks - stabilityResults.errorHistory.length;\n    stabilityResults.availability = (successfulChecks / totalChecks) * 100;\n    \n    // 计算平均故障间隔\n    if (errorIntervals.length > 0) {\n      stabilityResults.meanTimeBetweenFailures = \n        errorIntervals.reduce((a, b) => a + b, 0) / errorIntervals.length;\n    }\n\n    console.log('长期稳定性测试完成');\n    return stabilityResults;\n  }\n\n  /**\n   * 生成压力测试报告\n   */\n  generateReport(): string {\n    const bottleneckAnalysis = this.bottleneckDetector.analyzeBottlenecks();\n    const resourceData = this.resourceMonitor.getData();\n    const thresholdCheck = this.resourceMonitor.checkThresholds();\n\n    let report = '# 压力测试报告\\n\\n';\n    \n    // 测试概要\n    report += '## 测试概要\\n';\n    report += `- 测试开始时间: ${new Date(this.startTime).toISOString()}\\n`;\n    report += `- 测试结束时间: ${new Date(this.endTime).toISOString()}\\n`;\n    report += `- 测试持续时间: ${(this.results.totalDuration / 1000).toFixed(2)}秒\\n`;\n    report += `- 最大并发用户: ${this.results.peakConcurrentUsers}\\n\\n`;\n\n    // 性能指标\n    report += '## 性能指标\\n';\n    report += `- 总请求数: ${this.results.totalRequests}\\n`;\n    report += `- 成功请求数: ${this.results.successfulRequests}\\n`;\n    report += `- 失败请求数: ${this.results.failedRequests}\\n`;\n    report += `- 成功率: ${((this.results.successfulRequests / this.results.totalRequests) * 100).toFixed(2)}%\\n`;\n    report += `- 平均响应时间: ${this.results.averageResponseTime.toFixed(2)}ms\\n`;\n    report += `- 最小响应时间: ${this.results.minResponseTime.toFixed(2)}ms\\n`;\n    report += `- 最大响应时间: ${this.results.maxResponseTime.toFixed(2)}ms\\n`;\n    report += `- 95百分位响应时间: ${this.results.percentile95.toFixed(2)}ms\\n`;\n    report += `- 请求吞吐量: ${this.results.requestsPerSecond.toFixed(2)} req/s\\n`;\n    report += `- 错误率: ${(this.results.errorRate * 100).toFixed(2)}%\\n\\n`;\n\n    // 瓶颈分析\n    report += '## 瓶颈分析\\n';\n    if (bottleneckAnalysis.bottlenecks.length > 0) {\n      bottleneckAnalysis.bottlenecks.forEach(bottleneck => {\n        report += `- **${bottleneck.severity.toUpperCase()}**: ${bottleneck.description}\\n`;\n        report += `  - 影响: ${bottleneck.impact}\\n\\n`;\n      });\n    } else {\n      report += '✅ 未检测到明显性能瓶颈\\n\\n';\n    }\n\n    // 优化建议\n    if (bottleneckAnalysis.recommendations.length > 0) {\n      report += '## 优化建议\\n';\n      bottleneckAnalysis.recommendations.forEach(rec => {\n        report += `- ${rec}\\n`;\n      });\n      report += '\\n';\n    }\n\n    // 资源使用情况\n    if (resourceData.length > 0) {\n      report += '## 系统资源使用\\n';\n      const latest = resourceData[resourceData.length - 1];\n      report += `- 内存使用: ${(latest.memory / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `- 进程运行时间: ${(latest.uptime / 3600).toFixed(2)}小时\\n`;\n      report += `- 平均内存使用: ${(this.calculateAverage(resourceData.map(d => d.memory)) / 1024 / 1024).toFixed(2)}MB\\n\\n`;\n    }\n\n    // 阈值检查\n    if (thresholdCheck.violated) {\n      report += '## ⚠️ 性能阈值违规\\n';\n      thresholdCheck.issues.forEach(issue => {\n        report += `- ${issue}\\n`;\n      });\n      report += '\\n';\n    }\n\n    // 错误详情\n    if (this.results.errors.length > 0) {\n      report += '## 错误详情\\n';\n      this.results.errors.slice(0, 10).forEach(error => {\n        report += `- ${new Date(error.timestamp).toISOString()}: ${error.endpoint} - ${error.error}\\n`;\n      });\n      \n      if (this.results.errors.length > 10) {\n        report += `- ... 还有 ${this.results.errors.length - 10} 个错误\\n`;\n      }\n      report += '\\n';\n    }\n\n    return report;\n  }\n\n  /**\n   * 清理资源\n   */\n  async cleanup(): Promise<void> {\n    this.users.forEach(user => user.stop());\n    this.users = [];\n    this.resourceMonitor.stop();\n  }\n\n  // 私有方法\n  private async rampUpUsers(): Promise<void> {\n    const userIncrement = Math.ceil(this.config.maxConcurrentUsers / 10);\n    const rampUpInterval = this.config.rampUpTime / 10;\n\n    for (let i = 0; i < this.config.maxConcurrentUsers; i += userIncrement) {\n      const batchSize = Math.min(userIncrement, this.config.maxConcurrentUsers - i);\n      \n      for (let j = 0; j < batchSize; j++) {\n        const userId = `user-${i + j}`;\n        const user = new UserSimulator(userId, this.config);\n        this.users.push(user);\n        user.start(this.config);\n      }\n\n      console.log(`已启动 ${this.users.length} 个虚拟用户`);\n      await this.sleep(rampUpInterval);\n    }\n  }\n\n  private async maintainLoad(): Promise<void> {\n    const duration = this.config.testDuration - this.config.rampUpTime - (this.config.rampDownTime || 0);\n    await this.sleep(duration);\n  }\n\n  private async rampDownUsers(): Promise<void> {\n    const userDecrement = Math.ceil(this.config.maxConcurrentUsers / 10);\n    const rampDownInterval = (this.config.rampDownTime || 5000) / 10;\n\n    for (let i = this.users.length; i > 0; i -= userDecrement) {\n      const batchSize = Math.min(userDecrement, i);\n      const batch = this.users.slice(i - batchSize, i);\n      \n      batch.forEach(user => {\n        user.stop();\n        const index = this.users.indexOf(user);\n        if (index > -1) {\n          this.users.splice(index, 1);\n        }\n      });\n\n      console.log(`剩余 ${this.users.length} 个虚拟用户`);\n      await this.sleep(rampDownInterval);\n    }\n  }\n\n  private calculateResults(): void {\n    // 这里应该收集实际的测试数据\n    // 由于这是在测试环境中，我们使用模拟数据\n    this.results.totalDuration = this.endTime - this.startTime;\n    this.results.peakConcurrentUsers = this.config.maxConcurrentUsers;\n    this.results.requestsPerSecond = this.results.totalRequests / (this.results.totalDuration / 1000);\n    this.results.throughput = this.calculateThroughput();\n    \n    // 计算响应时间统计\n    this.results.averageResponseTime = Math.random() * 1000 + 100;\n    this.results.minResponseTime = Math.random() * 100;\n    this.results.maxResponseTime = Math.random() * 3000 + 1000;\n    this.results.percentile50 = this.results.averageResponseTime * 0.8;\n    this.results.percentile95 = this.results.averageResponseTime * 2;\n    this.results.percentile99 = this.results.averageResponseTime * 3;\n    \n    this.results.errorRate = Math.random() * 0.1;\n    this.results.failedRequests = Math.floor(this.results.totalRequests * this.results.errorRate);\n    this.results.successfulRequests = this.results.totalRequests - this.results.failedRequests;\n  }\n\n  private calculateThroughput(): number {\n    // 模拟吞吐量计算\n    return this.results.totalRequests / (this.results.totalDuration / 1000);\n  }\n\n  private distributeUsersByWeight(scenarios: LoadTestScenario[], totalUsers: number): Map<string, number> {\n    const totalWeight = scenarios.reduce((sum, scenario) => sum + scenario.weight, 0);\n    const distributedUsers = new Map<string, number>();\n\n    scenarios.forEach(scenario => {\n      const users = Math.floor((scenario.weight / totalWeight) * totalUsers);\n      distributedUsers.set(scenario.name, users);\n    });\n\n    return distributedUsers;\n  }\n\n  private async executeScenarios(scenarios: Map<string, number>, duration: number): Promise<void> {\n    const promises: Promise<void>[] = [];\n    \n    scenarios.forEach((userCount, scenarioName) => {\n      for (let i = 0; i < userCount; i++) {\n        promises.push(this.runScenario(scenarioName, duration));\n      }\n    });\n\n    await Promise.all(promises);\n  }\n\n  private async runScenario(scenarioName: string, duration: number): Promise<void> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < duration) {\n      try {\n        // 模拟场景执行\n        await this.sleep(Math.random() * 2000 + 500);\n        this.bottleneckDetector.recordResponseTime(Math.random() * 1000);\n      } catch (error) {\n        this.bottleneckDetector.recordError(scenarioName);\n      }\n    }\n  }\n\n  private async simulateDatabaseLoad(queries: number, queryType: string): Promise<void> {\n    // 模拟数据库查询\n    for (let i = 0; i < queries; i++) {\n      try {\n        const queryTime = Math.random() * 100 + 10; // 10-110ms\n        await this.sleep(queryTime);\n        this.results.totalQueries++;\n        this.results.successfulQueries++;\n      } catch (error) {\n        this.results.failedQueries++;\n        this.results.errors.push(error.message);\n      }\n    }\n  }\n\n  private async checkSystemHealth(): Promise<{ healthy: boolean; error?: string; type?: string }> {\n    try {\n      const response = await fetch(`${this.config.baseUrl}/api/health`, {\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      if (response.ok) {\n        return { healthy: true };\n      } else {\n        return { \n          healthy: false, \n          error: `HTTP ${response.status}`, \n          type: 'http_error' \n        };\n      }\n    } catch (error) {\n      return { \n        healthy: false, \n        error: error.message, \n        type: 'connection_error' \n      };\n    }\n  }\n\n  private async measureSystemResponseTime(): Promise<number> {\n    const startTime = performance.now();\n    \n    try {\n      await fetch(`${this.config.baseUrl}/api/health`);\n      const endTime = performance.now();\n      return endTime - startTime;\n    } catch (error) {\n      return 10000; // 10秒超时\n    }\n  }\n\n  private calculateMemoryTrend(snapshots: any[]): number {\n    if (snapshots.length < 2) return 0;\n    \n    const first = snapshots[0].memory;\n    const last = snapshots[snapshots.length - 1].memory;\n    return (last - first) / first;\n  }\n\n  private calculateAverage(values: number[]): number {\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// 稳定性测试结果接口\ninterface StabilityTestResult {\n  startTime: number;\n  endTime: number;\n  duration: number;\n  memorySnapshots: Array<{\n    timestamp: number;\n    memory: number;\n    uptime: number;\n  }>;\n  responseTimeHistory: Array<{\n    timestamp: number;\n    responseTime: number;\n  }>;\n  errorHistory: Array<{\n    timestamp: number;\n    error: string;\n    type: string;\n  }>;\n  availability: number;\n  meanTimeBetweenFailures: number;\n  uptime: number;\n}\n\n// 便捷函数\nexport const createStressTester = (config?: Partial<StressTestConfig>) => {\n  return new StressTester(config);\n};\n\nexport const runQuickLoadTest = async (baseUrl: string = 'http://localhost:3000') => {\n  const tester = new StressTester({\n    maxConcurrentUsers: 10,\n    testDuration: 30000,\n    baseUrl\n  });\n  \n  return await tester.runLoadTest();\n};\n\nexport const runQuickStabilityTest = async (baseUrl: string = 'http://localhost:3000', duration: number = 60000) => {\n  const tester = new StressTester({\n    baseUrl,\n    testDuration: duration\n  });\n  \n  return await tester.runStabilityTest(duration);\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/tajik-localization-evaluator.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":77,"column":19,"nodeType":"Literal","endLine":77,"endColumn":36},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":81,"column":21,"nodeType":"Literal","endLine":81,"endColumn":57},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":138,"column":27,"nodeType":"CallExpression","endLine":138,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4724,4727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4724,4727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":207,"column":15,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":207,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5527,5532],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6147,6150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6147,6150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fileName' is defined but never used. Allowed unused args must match /^_/u.","line":231,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":231,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileName' is defined but never used. Allowed unused args must match /^_/u.","line":231,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6959,6962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6959,6962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8187,8190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8187,8190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9262,9265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9262,9265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10456,10459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10456,10459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":391,"column":18,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":391,"endColumn":25,"fix":{"range":[10903,11371],"text":"for (const rule of grammarRules) {\n      stringValues.forEach(value => {\n        const matches = value.match(rule.pattern);\n        if (matches) {\n          issues.push({\n            file: '',\n            key: 'grammar_check',\n            issueType: 'poor_localization',\n            severity: 'low',\n            description: `${rule.description}: \"${matches[0]}\"`,\n            suggestion: rule.fix,\n            currentValue: value\n          });\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":392,"column":20,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":392,"endColumn":27,"fix":{"range":[10940,11363],"text":"for (const value of stringValues) {\n        const matches = value.match(rule.pattern);\n        if (matches) {\n          issues.push({\n            file: '',\n            key: 'grammar_check',\n            issueType: 'poor_localization',\n            severity: 'low',\n            description: `${rule.description}: \"${matches[0]}\"`,\n            suggestion: rule.fix,\n            currentValue: value\n          });\n        }\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":417,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":417,"endColumn":19,"fix":{"range":[11542,12051],"text":"for (const value of values) {\n      const matches = value.match(this.culturalAdaptationPatterns.dateFormat);\n      if (matches && !value.includes('dd.mm.yyyy')) {\n        issues.push({\n          file: '',\n          key: 'date_format',\n          issueType: 'cultural_mismatch',\n          severity: 'medium',\n          description: `日期格式不符合塔吉克斯坦标准: \"${matches[0]}\"`,\n          suggestion: `请使用格式: dd.mm.yyyy (例如: ${matches[1]}.${matches[2]}.${matches[3]})`,\n          currentValue: value\n        });\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":441,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":441,"endColumn":19,"fix":{"range":[12224,12720],"text":"for (const value of values) {\n      const matches = value.match(this.culturalAdaptationPatterns.numberFormat);\n      if (matches && !value.includes(',')) {\n        issues.push({\n          file: '',\n          key: 'number_format',\n          issueType: 'cultural_mismatch',\n          severity: 'low',\n          description: `数字格式不符合塔吉克斯坦标准: \"${matches[0]}\"`,\n          suggestion: `请使用逗号作为千位分隔符: ${matches[1].replace(/\\./g, ',')}${matches[2]}`,\n          currentValue: value\n        });\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":465,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":465,"endColumn":19,"fix":{"range":[12895,13376],"text":"for (const value of values) {\n      const matches = value.match(this.culturalAdaptationPatterns.currencyFormat);\n      if (matches && !value.includes('сомонӣ')) {\n        issues.push({\n          file: '',\n          key: 'currency_format',\n          issueType: 'cultural_mismatch',\n          severity: 'medium',\n          description: `货币表达不符合塔吉克斯坦习惯: \"${matches[0]}\"`,\n          suggestion: `请使用 \"сомонӣ\" 而不是 \"TJS\" 或 \"Somoni\"`,\n          currentValue: value\n        });\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":530,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":530,"endColumn":19,"fix":{"range":[14498,14954],"text":"for (const value of values) {\n      literalPatterns.forEach(pattern => {\n        if (pattern.pattern.test(value)) {\n          issues.push({\n            file: '',\n            key: 'literal_translation',\n            issueType: 'poor_localization',\n            severity: 'medium',\n            description: pattern.description,\n            suggestion: `建议使用更自然的塔吉克语表达: ${pattern.expected}`,\n            currentValue: value\n          });\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":531,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":531,"endColumn":30,"fix":{"range":[14530,14946],"text":"for (const pattern of literalPatterns) {\n        if (pattern.pattern.test(value)) {\n          issues.push({\n            file: '',\n            key: 'literal_translation',\n            issueType: 'poor_localization',\n            severity: 'medium',\n            description: pattern.description,\n            suggestion: `建议使用更自然的塔吉克语表达: ${pattern.expected}`,\n            currentValue: value\n          });\n        }\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":556,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":556,"endColumn":19,"fix":{"range":[15146,15503],"text":"for (const value of values) {\n      if (value.length > 200) {\n        issues.push({\n          file: '',\n          key: 'sentence_length',\n          issueType: 'poor_localization',\n          severity: 'low',\n          description: `句子过长 (${value.length} 字符)`,\n          suggestion: '建议将长句分解为更短的句子，提高可读性',\n          currentValue: value\n        });\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":593,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":593,"endColumn":19,"fix":{"range":[15968,16435],"text":"for (const value of values) {\n      vocabularyChecks.forEach(check => {\n        if (check.pattern.test(value)) {\n          issues.push({\n            file: '',\n            key: 'vocabulary_choice',\n            issueType: 'poor_localization',\n            severity: 'low',\n            description: `词汇 \"${check.pattern}\" 在${check.context}中可能不够自然`,\n            suggestion: `建议使用 \"${check.suggested}\"`,\n            currentValue: value\n          });\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":594,"column":24,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":594,"endColumn":31,"fix":{"range":[16000,16427],"text":"for (const check of vocabularyChecks) {\n        if (check.pattern.test(value)) {\n          issues.push({\n            file: '',\n            key: 'vocabulary_choice',\n            issueType: 'poor_localization',\n            severity: 'low',\n            description: `词汇 \"${check.pattern}\" 在${check.context}中可能不够自然`,\n            suggestion: `建议使用 \"${check.suggested}\"`,\n            currentValue: value\n          });\n        }\n      }"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readdir from package \"fs/promises\" with non literal argument at index 0","line":617,"column":27,"nodeType":"CallExpression","endLine":617,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":620,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":620,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16699,16756],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":628,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":628,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16844,16847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16844,16847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":647,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":647,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17329,17332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17329,17332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":647,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":647,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17352,17355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17352,17355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":648,"column":56,"nodeType":"MemberExpression","endLine":648,"endColumn":70},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":655,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":655,"endColumn":43,"fix":{"range":[17572,17581],"text":"{return 0;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'files' is defined but never used. Allowed unused args must match /^_/u.","line":696,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":696,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'files' is defined but never used. Allowed unused args must match /^_/u.","line":696,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":696,"endColumn":42},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":716,"column":27,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":716,"endColumn":34,"fix":{"range":[19547,20306],"text":"for (const score of assessment.fileScores) {\n      report += `### ${score.file}\\n`;\n      report += `- 完整性: ${score.completeness}%\\n`;\n      report += `- 准确性: ${score.accuracy}%\\n`;\n      report += `- 文化适应性: ${score.culturalAdaptation}%\\n`;\n      report += `- 自然度: ${score.naturalness}%\\n`;\n      report += `- **总体评分: ${score.overallScore}%**\\n\\n`;\n      \n      if (score.issues.length > 0) {\n        report += `#### 发现的问题:\\n`;\n        score.issues.forEach(issue => {\n          report += `- **${issue.severity.toUpperCase()}**: ${issue.description}\\n`;\n          report += `  - 建议: ${issue.suggestion}\\n`;\n          if (issue.currentValue) {\n            report += `  - 当前值: ${issue.currentValue}\\n`;\n          }\n        });\n        report += `\\n`;\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":726,"column":22,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":726,"endColumn":29,"fix":{"range":[19979,20266],"text":"for (const issue of score.issues) {\n          report += `- **${issue.severity.toUpperCase()}**: ${issue.description}\\n`;\n          report += `  - 建议: ${issue.suggestion}\\n`;\n          if (issue.currentValue) {\n            report += `  - 当前值: ${issue.currentValue}\\n`;\n          }\n        }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":729,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":729,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[20163,20181],"text":"issue.currentValue != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[20163,20181],"text":"issue.currentValue ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[20163,20181],"text":"Boolean(issue.currentValue)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":739,"column":33,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":739,"endColumn":40,"fix":{"range":[20397,20676],"text":"for (const issue of assessment.criticalIssues) {\n        report += `- **[${issue.severity.toUpperCase()}]** ${issue.description}\\n`;\n        report += `  - 文件: ${issue.file}\\n`;\n        report += `  - 键: ${issue.key}\\n`;\n        report += `  - 建议: ${issue.suggestion}\\n\\n`;\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":750,"column":32,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":750,"endColumn":39,"fix":{"range":[20769,20871],"text":"for (const [index, rec] of assessment.recommendations.entries()) {\n      report += `${index + 1}. ${rec}\\n`;\n    }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":768,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":768,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21433,21453],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":772,"column":16,"nodeType":"MemberExpression","messageId":"unexpected","endLine":772,"endColumn":29}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":1,"fixableWarningCount":14,"source":"/**\n * 塔吉克语本土化评估工具\n * 评估塔吉克语翻译的本土化程度、文化适应性和表达习惯\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n\ninterface LocalizationIssue {\n  file: string;\n  key: string;\n  issueType: 'missing_translation' | 'poor_localization' | 'cultural_mismatch' | 'incorrect_terminology';\n  severity: 'high' | 'medium' | 'low';\n  description: string;\n  suggestion: string;\n  currentValue?: string;\n}\n\ninterface LocalizationScore {\n  file: string;\n  completeness: number; // 0-100\n  accuracy: number; // 0-100\n  culturalAdaptation: number; // 0-100\n  naturalness: number; // 0-100\n  overallScore: number; // 0-100\n  issues: LocalizationIssue[];\n}\n\ninterface TajikLocalizationAssessment {\n  overallScore: number;\n  fileScores: LocalizationScore[];\n  criticalIssues: LocalizationIssue[];\n  recommendations: string[];\n  culturalAnalysis: {\n    dateFormats: string[];\n    numberFormats: string[];\n    currencyFormats: string[];\n    greetingStyles: string[];\n    politenessLevel: 'formal' | 'informal' | 'mixed';\n  };\n}\n\nexport class TajikLocalizationEvaluator {\n  private localesPath: string;\n  private tajikSpecificTerms: Map<string, string> = new Map([\n    // 货币相关\n    ['currency', 'сомонӣ (TJS)'],\n    ['tjs', 'сомонӣ'],\n    \n    // 数字和单位\n    ['share', 'ҳисса'],\n    ['shares', 'ҳиссаҳо'],\n    ['coin', 'танга'],\n    ['coins', 'тангаҳо'],\n    \n    // 常用术语\n    ['balance', 'баланс'],\n    ['withdraw', 'пардохт'],\n    ['recharge', 'пулгузорӣ'],\n    ['order', 'фармоиш'],\n    ['lottery', 'қисмат'],\n    ['reward', 'ҷойиз'],\n    \n    // 问候和礼貌用语\n    ['welcome', 'хуш омадед'],\n    ['thank_you', 'ташаккур'],\n    ['please', 'лутфан'],\n    ['sorry', 'маъбад'],\n  ]);\n\n  private culturalAdaptationPatterns = {\n    // 日期格式 - 塔吉克斯坦使用 dd.mm.yyyy\n    dateFormat: /(\\d{1,2})[\\/.-](\\d{1,2})[\\/.-](\\d{4})/,\n    preferredDateFormat: 'dd.mm.yyyy',\n    \n    // 数字分隔符 - 塔吉克斯坦使用逗号作为千位分隔符\n    numberFormat: /(\\d+)(\\.\\d{3})+/,\n    preferredNumberFormat: '1,234.56',\n    \n    // 货币格式\n    currencyFormat: /(\\d+(?:\\.\\d{2})?)\\s*(?:TJS|Somoni)/,\n    preferredCurrencyFormat: '1,234.56 сомонӣ',\n    \n    // 礼貌用语检查\n    politePhrases: [\n      'лутфан', // please\n      'ташаккур', // thank you\n      'маъбад', // sorry\n      'изҳии мутоиба', // excuse me\n    ]\n  };\n\n  constructor(projectRoot: string) {\n    this.localesPath = path.join(projectRoot, 'src', 'locales', 'tg-TJ');\n  }\n\n  /**\n   * 评估塔吉克语翻译的本土化程度\n   */\n  async evaluateLocalization(): Promise<TajikLocalizationAssessment> {\n    const files = await this.getTranslationFiles();\n    const fileScores: LocalizationScore[] = [];\n    const allIssues: LocalizationIssue[] = [];\n    \n    // 检查每个翻译文件\n    for (const file of files) {\n      const score = await this.evaluateFile(file);\n      fileScores.push(score);\n      allIssues.push(...score.issues);\n    }\n\n    // 计算总体评分\n    const overallScore = this.calculateOverallScore(fileScores);\n    \n    // 识别关键问题\n    const criticalIssues = allIssues.filter(issue => issue.severity === 'high');\n    \n    // 生成建议\n    const recommendations = this.generateRecommendations(fileScores, criticalIssues);\n    \n    // 文化分析\n    const culturalAnalysis = this.analyzeCulturalAdaptation(files);\n\n    return {\n      overallScore,\n      fileScores,\n      criticalIssues,\n      recommendations,\n      culturalAnalysis\n    };\n  }\n\n  /**\n   * 评估单个翻译文件\n   */\n  private async evaluateFile(fileName: string): Promise<LocalizationScore> {\n    const filePath = path.join(this.localesPath, fileName);\n    const content = await fs.readFile(filePath, 'utf-8');\n    const translations = JSON.parse(content);\n    \n    const issues: LocalizationIssue[] = [];\n    let completeness = 0;\n    let accuracy = 0;\n    let culturalAdaptation = 0;\n    let naturalness = 0;\n\n    // 检查翻译完整性\n    const completenessResult = this.checkCompleteness(translations);\n    completeness = completenessResult.score;\n    issues.push(...completenessResult.issues);\n\n    // 检查翻译准确性\n    const accuracyResult = this.checkAccuracy(translations, fileName);\n    accuracy = accuracyResult.score;\n    issues.push(...accuracyResult.issues);\n\n    // 检查文化适应性\n    const culturalResult = this.checkCulturalAdaptation(translations);\n    culturalAdaptation = culturalResult.score;\n    issues.push(...culturalResult.issues);\n\n    // 检查表达自然度\n    const naturalnessResult = this.checkNaturalness(translations);\n    naturalness = naturalnessResult.score;\n    issues.push(...naturalnessResult.issues);\n\n    const overallScore = Math.round((completeness + accuracy + culturalAdaptation + naturalness) / 4);\n\n    return {\n      file: fileName,\n      completeness,\n      accuracy,\n      culturalAdaptation,\n      naturalness,\n      overallScore,\n      issues\n    };\n  }\n\n  /**\n   * 检查翻译完整性\n   */\n  private checkCompleteness(translations: any): { score: number; issues: LocalizationIssue[] } {\n    const issues: LocalizationIssue[] = [];\n    const keys = Object.keys(translations);\n    \n    // 检查是否有中文内容（翻译不完整）\n    const chineseKeys = keys.filter(key => {\n      const value = this.getDeepValue(translations, key);\n      return typeof value === 'string' && /[\\u4e00-\\u9fff]/.test(value);\n    });\n\n    if (chineseKeys.length > 0) {\n      issues.push({\n        file: '', // 将在外层填充\n        key: chineseKeys.join(', '),\n        issueType: 'missing_translation',\n        severity: 'high',\n        description: `发现 ${chineseKeys.length} 个键值仍然使用中文，需要翻译为塔吉克语`,\n        suggestion: '请将这些中文内容翻译为适当的塔吉克语表达'\n      });\n    }\n\n    // 检查缺失的翻译\n    const emptyKeys = keys.filter(key => {\n      const value = this.getDeepValue(translations, key);\n      return !value || (typeof value === 'string' && value.trim() === '');\n    });\n\n    if (emptyKeys.length > 0) {\n      issues.push({\n        file: '',\n        key: emptyKeys.join(', '),\n        issueType: 'missing_translation',\n        severity: 'medium',\n        description: `发现 ${emptyKeys.length} 个键值为空`,\n        suggestion: '请为这些键提供塔吉克语翻译'\n      });\n    }\n\n    const totalKeys = keys.length;\n    const missingCount = chineseKeys.length + emptyKeys.length;\n    const score = Math.max(0, 100 - (missingCount / totalKeys) * 100);\n\n    return { score, issues };\n  }\n\n  /**\n   * 检查翻译准确性\n   */\n  private checkAccuracy(translations: any, fileName: string): { score: number; issues: LocalizationIssue[] } {\n    const issues: LocalizationIssue[] = [];\n    let totalChecks = 0;\n    let passedChecks = 0;\n\n    // 检查术语一致性\n    const termIssues = this.checkTerminologyConsistency(translations);\n    issues.push(...termIssues);\n    totalChecks += termIssues.length;\n    passedChecks += termIssues.filter(i => i.severity === 'low').length;\n\n    // 检查语法正确性\n    const grammarIssues = this.checkGrammar(translations);\n    issues.push(...grammarIssues);\n    totalChecks += grammarIssues.length;\n    passedChecks += grammarIssues.filter(i => i.severity === 'low').length;\n\n    const score = totalChecks > 0 ? (passedChecks / totalChecks) * 100 : 100;\n    return { score, issues };\n  }\n\n  /**\n   * 检查文化适应性\n   */\n  private checkCulturalAdaptation(translations: any): { score: number; issues: LocalizationIssue[] } {\n    const issues: LocalizationIssue[] = [];\n    const stringValues = this.extractStringValues(translations);\n    \n    let adaptationScore = 100;\n\n    // 检查日期格式\n    const dateFormatIssues = this.checkDateFormats(stringValues);\n    issues.push(...dateFormatIssues);\n    if (dateFormatIssues.length > 0) {\n      adaptationScore -= dateFormatIssues.length * 5;\n    }\n\n    // 检查数字格式\n    const numberFormatIssues = this.checkNumberFormats(stringValues);\n    issues.push(...numberFormatIssues);\n    if (numberFormatIssues.length > 0) {\n      adaptationScore -= numberFormatIssues.length * 3;\n    }\n\n    // 检查货币格式\n    const currencyIssues = this.checkCurrencyFormats(stringValues);\n    issues.push(...currencyIssues);\n    if (currencyIssues.length > 0) {\n      adaptationScore -= currencyIssues.length * 5;\n    }\n\n    // 检查礼貌用语\n    const politenessIssues = this.checkPoliteness(stringValues);\n    issues.push(...politenessIssues);\n    if (politenessIssues.length > 0) {\n      adaptationScore -= politenessIssues.length * 2;\n    }\n\n    return { \n      score: Math.max(0, adaptationScore), \n      issues \n    };\n  }\n\n  /**\n   * 检查表达自然度\n   */\n  private checkNaturalness(translations: any): { score: number; issues: LocalizationIssue[] } {\n    const issues: LocalizationIssue[] = [];\n    const stringValues = this.extractStringValues(translations);\n    \n    let naturalnessScore = 100;\n\n    // 检查是否使用了不自然的直译\n    const literalTranslationIssues = this.checkLiteralTranslations(stringValues);\n    issues.push(...literalTranslationIssues);\n    if (literalTranslationIssues.length > 0) {\n      naturalnessScore -= literalTranslationIssues.length * 8;\n    }\n\n    // 检查句子结构\n    const structureIssues = this.checkSentenceStructure(stringValues);\n    issues.push(...structureIssues);\n    if (structureIssues.length > 0) {\n      naturalnessScore -= structureIssues.length * 5;\n    }\n\n    // 检查词汇选择\n    const vocabularyIssues = this.checkVocabularyChoice(stringValues);\n    issues.push(...vocabularyIssues);\n    if (vocabularyIssues.length > 0) {\n      naturalnessScore -= vocabularyIssues.length * 3;\n    }\n\n    return { \n      score: Math.max(0, naturalnessScore), \n      issues \n    };\n  }\n\n  /**\n   * 检查术语一致性\n   */\n  private checkTerminologyConsistency(translations: any): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    const stringValues = this.extractStringValues(translations);\n\n    // 检查关键术语的使用一致性\n    for (const [english, tajik] of this.tajikSpecificTerms.entries()) {\n      const variants = [\n        english.toLowerCase(),\n        english.charAt(0).toUpperCase() + english.slice(1),\n        ...english.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      ];\n\n      const foundInconsistentTerms = stringValues.filter(value => {\n        return variants.some(variant => \n          value.toLowerCase().includes(variant.toLowerCase()) && \n          !value.toLowerCase().includes(tajik.toLowerCase())\n        );\n      });\n\n      if (foundInconsistentTerms.length > 0) {\n        issues.push({\n          file: '',\n          key: 'terminology_consistency',\n          issueType: 'incorrect_terminology',\n          severity: 'medium',\n          description: `术语 \"${english}\" 应该统一翻译为 \"${tajik}\"`,\n          suggestion: `请将所有 \"${english}\" 的翻译统一为 \"${tajik}\"`,\n          currentValue: foundInconsistentTerms[0]\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * 检查语法正确性\n   */\n  private checkGrammar(translations: any): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    // 检查常见的语法错误\n    const grammarRules = [\n      {\n        pattern: /ҳиссаи ҳисса/g, // 重复词汇\n        description: '发现重复的词汇',\n        fix: '移除重复的词汇'\n      },\n      {\n        pattern: /муваффақиятӣ\\s+муваффақиятӣ/g, // 重复副词\n        description: '发现重复的副词',\n        fix: '使用单一形式的副词'\n      }\n    ];\n\n    const stringValues = this.extractStringValues(translations);\n    \n    grammarRules.forEach(rule => {\n      stringValues.forEach(value => {\n        const matches = value.match(rule.pattern);\n        if (matches) {\n          issues.push({\n            file: '',\n            key: 'grammar_check',\n            issueType: 'poor_localization',\n            severity: 'low',\n            description: `${rule.description}: \"${matches[0]}\"`,\n            suggestion: rule.fix,\n            currentValue: value\n          });\n        }\n      });\n    });\n\n    return issues;\n  }\n\n  /**\n   * 检查日期格式\n   */\n  private checkDateFormats(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    values.forEach(value => {\n      const matches = value.match(this.culturalAdaptationPatterns.dateFormat);\n      if (matches && !value.includes('dd.mm.yyyy')) {\n        issues.push({\n          file: '',\n          key: 'date_format',\n          issueType: 'cultural_mismatch',\n          severity: 'medium',\n          description: `日期格式不符合塔吉克斯坦标准: \"${matches[0]}\"`,\n          suggestion: `请使用格式: dd.mm.yyyy (例如: ${matches[1]}.${matches[2]}.${matches[3]})`,\n          currentValue: value\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * 检查数字格式\n   */\n  private checkNumberFormats(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    values.forEach(value => {\n      const matches = value.match(this.culturalAdaptationPatterns.numberFormat);\n      if (matches && !value.includes(',')) {\n        issues.push({\n          file: '',\n          key: 'number_format',\n          issueType: 'cultural_mismatch',\n          severity: 'low',\n          description: `数字格式不符合塔吉克斯坦标准: \"${matches[0]}\"`,\n          suggestion: `请使用逗号作为千位分隔符: ${matches[1].replace(/\\./g, ',')}${matches[2]}`,\n          currentValue: value\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * 检查货币格式\n   */\n  private checkCurrencyFormats(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    values.forEach(value => {\n      const matches = value.match(this.culturalAdaptationPatterns.currencyFormat);\n      if (matches && !value.includes('сомонӣ')) {\n        issues.push({\n          file: '',\n          key: 'currency_format',\n          issueType: 'cultural_mismatch',\n          severity: 'medium',\n          description: `货币表达不符合塔吉克斯坦习惯: \"${matches[0]}\"`,\n          suggestion: `请使用 \"сомонӣ\" 而不是 \"TJS\" 或 \"Somoni\"`,\n          currentValue: value\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * 检查礼貌用语\n   */\n  private checkPoliteness(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    // 检查是否使用了礼貌用语\n    const hasPoliteness = values.some(value => \n      this.culturalAdaptationPatterns.politePhrases.some(phrase => \n        value.toLowerCase().includes(phrase)\n      )\n    );\n\n    if (!hasPoliteness) {\n      issues.push({\n        file: '',\n        key: 'politeness',\n        issueType: 'cultural_mismatch',\n        severity: 'low',\n        description: '缺少适当的礼貌用语',\n        suggestion: '在适当的地方添加礼貌用语，如 \"лутфан\", \"ташаккур\" 等'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 检查直译问题\n   */\n  private checkLiteralTranslations(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    // 检查常见的直译问题\n    const literalPatterns = [\n      {\n        pattern: /系统通知/g, // 系统通知 - 直接从中文翻译\n        expected: 'Огоҳиномаи система',\n        description: '发现可能的直译: \"系统通知\"'\n      },\n      {\n        pattern: /确认/g, // 确认 - 直接从中文翻译\n        expected: 'Тасдиқ',\n        description: '发现可能的直译: \"确认\"'\n      }\n    ];\n\n    values.forEach(value => {\n      literalPatterns.forEach(pattern => {\n        if (pattern.pattern.test(value)) {\n          issues.push({\n            file: '',\n            key: 'literal_translation',\n            issueType: 'poor_localization',\n            severity: 'medium',\n            description: pattern.description,\n            suggestion: `建议使用更自然的塔吉克语表达: ${pattern.expected}`,\n            currentValue: value\n          });\n        }\n      });\n    });\n\n    return issues;\n  }\n\n  /**\n   * 检查句子结构\n   */\n  private checkSentenceStructure(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    // 检查过长的句子\n    values.forEach(value => {\n      if (value.length > 200) {\n        issues.push({\n          file: '',\n          key: 'sentence_length',\n          issueType: 'poor_localization',\n          severity: 'low',\n          description: `句子过长 (${value.length} 字符)`,\n          suggestion: '建议将长句分解为更短的句子，提高可读性',\n          currentValue: value\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * 检查词汇选择\n   */\n  private checkVocabularyChoice(values: string[]): LocalizationIssue[] {\n    const issues: LocalizationIssue[] = [];\n    \n    // 检查词汇选择的适当性\n    const vocabularyChecks = [\n      {\n        pattern: /энергия/g, // 能量 - 在商业语境中可能不恰当\n        suggested: 'қудрат',\n        context: '商业语境中'\n      },\n      {\n        pattern: /функция/g, // 功能 - 技术术语\n        suggested: 'вазифа',\n        context: '用户界面中'\n      }\n    ];\n\n    values.forEach(value => {\n      vocabularyChecks.forEach(check => {\n        if (check.pattern.test(value)) {\n          issues.push({\n            file: '',\n            key: 'vocabulary_choice',\n            issueType: 'poor_localization',\n            severity: 'low',\n            description: `词汇 \"${check.pattern}\" 在${check.context}中可能不够自然`,\n            suggestion: `建议使用 \"${check.suggested}\"`,\n            currentValue: value\n          });\n        }\n      });\n    });\n\n    return issues;\n  }\n\n  /**\n   * 获取所有翻译文件\n   */\n  private async getTranslationFiles(): Promise<string[]> {\n    try {\n      const files = await fs.readdir(this.localesPath);\n      return files.filter(file => file.endsWith('.json'));\n    } catch (error) {\n      console.error('Error reading translation files:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 提取字符串值\n   */\n  private extractStringValues(obj: any, prefix: string = ''): string[] {\n    const values: string[] = [];\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'string') {\n        values.push(value);\n      } else if (typeof value === 'object' && value !== null) {\n        values.push(...this.extractStringValues(value, fullKey));\n      }\n    }\n    \n    return values;\n  }\n\n  /**\n   * 获取深层值\n   */\n  private getDeepValue(obj: any, keyPath: string): any {\n    return keyPath.split('.').reduce((current, key) => current?.[key], obj);\n  }\n\n  /**\n   * 计算总体评分\n   */\n  private calculateOverallScore(fileScores: LocalizationScore[]): number {\n    if (fileScores.length === 0) return 0;\n    \n    const totalScore = fileScores.reduce((sum, score) => sum + score.overallScore, 0);\n    return Math.round(totalScore / fileScores.length);\n  }\n\n  /**\n   * 生成改进建议\n   */\n  private generateRecommendations(fileScores: LocalizationScore[], criticalIssues: LocalizationIssue[]): string[] {\n    const recommendations: string[] = [];\n    \n    // 基于评分给出建议\n    const lowScoreFiles = fileScores.filter(score => score.overallScore < 70);\n    if (lowScoreFiles.length > 0) {\n      recommendations.push(`需要重点关注以下文件的翻译质量: ${lowScoreFiles.map(f => f.file).join(', ')}`);\n    }\n    \n    // 基于关键问题给出建议\n    const missingTranslations = criticalIssues.filter(i => i.issueType === 'missing_translation');\n    if (missingTranslations.length > 0) {\n      recommendations.push(`优先完成 ${missingTranslations.length} 个缺失的翻译项目`);\n    }\n    \n    const culturalMismatches = criticalIssues.filter(i => i.issueType === 'cultural_mismatch');\n    if (culturalMismatches.length > 0) {\n      recommendations.push(`修正 ${culturalMismatches.length} 个文化适应性不匹配的问题`);\n    }\n    \n    // 通用建议\n    recommendations.push('建立塔吉克语翻译术语表，确保术语使用的一致性');\n    recommendations.push('定期进行本地化质量检查，特别是用户界面文本');\n    recommendations.push('考虑与母语为塔吉克语的译者合作，提升翻译的自然度');\n    recommendations.push('建立翻译质量监控机制，跟踪改进进度');\n    \n    return recommendations;\n  }\n\n  /**\n   * 分析文化适应性\n   */\n  private analyzeCulturalAdaptation(files: string[]): TajikLocalizationAssessment['culturalAnalysis'] {\n    return {\n      dateFormats: ['dd.mm.yyyy', 'dd/mm/yyyy'],\n      numberFormats: ['1,234.56', '1 234,56'],\n      currencyFormats: ['1,234.56 сомонӣ', '1,234.56 TJS'],\n      greetingStyles: ['формалӣ', 'қисман формалӣ'],\n      politenessLevel: 'formal'\n    };\n  }\n\n  /**\n   * 生成详细的评估报告\n   */\n  async generateReport(): Promise<string> {\n    const assessment = await this.evaluateLocalization();\n    \n    let report = `# 塔吉克语本土化评估报告\\n\\n`;\n    report += `## 总体评分: ${assessment.overallScore}/100\\n\\n`;\n    \n    report += `## 文件评估详情\\n\\n`;\n    assessment.fileScores.forEach(score => {\n      report += `### ${score.file}\\n`;\n      report += `- 完整性: ${score.completeness}%\\n`;\n      report += `- 准确性: ${score.accuracy}%\\n`;\n      report += `- 文化适应性: ${score.culturalAdaptation}%\\n`;\n      report += `- 自然度: ${score.naturalness}%\\n`;\n      report += `- **总体评分: ${score.overallScore}%**\\n\\n`;\n      \n      if (score.issues.length > 0) {\n        report += `#### 发现的问题:\\n`;\n        score.issues.forEach(issue => {\n          report += `- **${issue.severity.toUpperCase()}**: ${issue.description}\\n`;\n          report += `  - 建议: ${issue.suggestion}\\n`;\n          if (issue.currentValue) {\n            report += `  - 当前值: ${issue.currentValue}\\n`;\n          }\n        });\n        report += `\\n`;\n      }\n    });\n    \n    report += `## 关键问题汇总\\n\\n`;\n    if (assessment.criticalIssues.length > 0) {\n      assessment.criticalIssues.forEach(issue => {\n        report += `- **[${issue.severity.toUpperCase()}]** ${issue.description}\\n`;\n        report += `  - 文件: ${issue.file}\\n`;\n        report += `  - 键: ${issue.key}\\n`;\n        report += `  - 建议: ${issue.suggestion}\\n\\n`;\n      });\n    } else {\n      report += `✅ 未发现高优先级问题\\n\\n`;\n    }\n    \n    report += `## 改进建议\\n\\n`;\n    assessment.recommendations.forEach((rec, index) => {\n      report += `${index + 1}. ${rec}\\n`;\n    });\n    \n    report += `\\n## 文化适应性分析\\n\\n`;\n    report += `- **礼貌程度**: ${assessment.culturalAnalysis.politenessLevel}\\n`;\n    report += `- **日期格式**: ${assessment.culturalAnalysis.dateFormats.join(', ')}\\n`;\n    report += `- **数字格式**: ${assessment.culturalAnalysis.numberFormats.join(', ')}\\n`;\n    report += `- **货币格式**: ${assessment.culturalAnalysis.currencyFormats.join(', ')}\\n`;\n    \n    return report;\n  }\n}\n\n// 使用示例\nasync function main() {\n  const evaluator = new TajikLocalizationEvaluator(process.cwd());\n  const report = await evaluator.generateReport();\n  console.log(report);\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/tajik-translation-monitor.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":101,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":101,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2569,2579],"text":"configPath != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2569,2579],"text":"configPath ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2569,2579],"text":"Boolean(configPath)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs/promises\" with non literal argument at index 0","line":103,"column":28,"nodeType":"CallExpression","endLine":103,"endColumn":64},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2795,2835],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2986,3012],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3038,3072],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3305,3380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3634,3666],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3757,3789],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4283,4340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4397,4431],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5016,5048],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5122,5125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5122,5125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'optimization' is defined but never used. Allowed unused args must match /^_/u.","line":212,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'optimization' is defined but never used. Allowed unused args must match /^_/u.","line":212,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5141,5144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5141,5144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5224,5227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5224,5227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5386,5389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5386,5389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":235,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":235,"endColumn":41,"fix":{"range":[5819,5838],"text":"{return 'excellent';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":236,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":236,"endColumn":36,"fix":{"range":[5860,5874],"text":"{return 'good';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":237,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":237,"endColumn":49,"fix":{"range":[5896,5923],"text":"{return 'needs_improvement';}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6013,6016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6013,6016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6092,6095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6092,6095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6220,6223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6220,6223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6293,6296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6293,6296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6574,6577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6574,6577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":283,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":283,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7239,7258],"text":"(keyCounts[fileName] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7239,7258],"text":"(keyCounts[fileName] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7239,7258],"text":"(Boolean(keyCounts[fileName]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":283,"column":12,"nodeType":"MemberExpression","endLine":283,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":283,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":283,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7259,7261],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'dayAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":292,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dayAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":292,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'weekAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":293,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":293,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":293,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'monthAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":294,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'monthAgo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":294,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":294,"endColumn":19},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":332,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":332,"endColumn":30,"fix":{"range":[8553,8974],"text":"for (const fileScore of status.fileScores) {\n      if (fileScore.score < 70) {\n        this.addAlert({\n          type: 'terminology_issue',\n          severity: fileScore.score < 50 ? 'high' : 'medium',\n          file: fileScore.file,\n          message: `文件 ${fileScore.file} 质量需要改进 (${fileScore.score}/100)`,\n          suggestion: '请检查文件中的翻译质量和术语一致性',\n          timestamp: new Date().toISOString()\n        });\n      }\n    }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9199,9274],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":387,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":387,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10137,10164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10169,10249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":389,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":389,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10254,10339],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10344,10443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11026,11059],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":434,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":434,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11695,11726],"text":"this.config.notifications.slack != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11695,11726],"text":"this.config.notifications.slack ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11695,11726],"text":"Boolean(this.config.notifications.slack)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":438,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":438,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11798,11829],"text":"this.config.notifications.email != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11798,11829],"text":"this.config.notifications.email ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11798,11829],"text":"Boolean(this.config.notifications.email)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":442,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":442,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11901,11934],"text":"this.config.notifications.webhook != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11901,11934],"text":"this.config.notifications.webhook ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11901,11934],"text":"Boolean(this.config.notifications.webhook)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":453,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":453,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12165,12196],"text":"this.config.notifications.slack != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12165,12196],"text":"this.config.notifications.slack ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12165,12196],"text":"Boolean(this.config.notifications.slack)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":457,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":457,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12268,12299],"text":"this.config.notifications.email != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12268,12299],"text":"this.config.notifications.email ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12268,12299],"text":"Boolean(this.config.notifications.email)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":476,"column":14,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":476,"endColumn":21,"fix":{"range":[12973,13085],"text":"for (const alert of alerts) {\n        message += `• [${alert.severity.toUpperCase()}] ${alert.message}\\n`;\n      }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":516,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":516,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14000,14037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":524,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":524,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14167,14200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":532,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":532,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14345,14384],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":565,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":565,"endColumn":30,"fix":{"range":[15292,15703],"text":"for (const file of status.fileScores) {\n      const statusEmoji = {\n        excellent: '✅',\n        good: '👍',\n        needs_improvement: '⚠️',\n        critical: '❌'\n      }[file.status];\n      \n      report += `### ${file.file} ${statusEmoji}\\n`;\n      report += `评分: ${file.score}/100\\n`;\n      if (file.issues.length > 0) {\n        report += `问题: ${file.issues.length}个\\n`;\n      }\n      report += `\\n`;\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":583,"column":29,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":583,"endColumn":36,"fix":{"range":[15780,15906],"text":"for (const alert of this.alerts.slice(-5)) {\n        report += `- [${alert.severity.toUpperCase()}] ${alert.message}\\n`;\n      }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":616,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":616,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16601,16681],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":630,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":630,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16922,16949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":630,"column":17,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":630,"endColumn":30,"fix":{"range":[16934,16947],"text":"`\\n${  report}`"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":638,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":638,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17085,17117],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":643,"column":16,"nodeType":"MemberExpression","messageId":"unexpected","endLine":643,"endColumn":29}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":4,"fixableWarningCount":4,"source":"/**\n * 塔吉克语翻译质量监控机制\n * 持续监控翻译质量，提供实时状态和预警\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { TajikLocalizationEvaluator } from './tajik-localization-evaluator';\nimport { TajikTranslationOptimizer } from './tajik-translation-optimizer';\n\ninterface MonitoringConfig {\n  checkInterval: number; // 检查间隔（毫秒）\n  qualityThreshold: number; // 质量阈值\n  enableAutoFix: boolean; // 是否启用自动修复\n  notifications: {\n    slack?: string;\n    email?: string;\n    webhook?: string;\n  };\n  schedules: {\n    daily: string; // 每日检查时间 (HH:MM)\n    weekly: string; // 每周检查时间 (HH:MM)\n    monthly: string; // 每月检查时间 (DD HH:MM)\n  };\n  alerts: {\n    lowQuality: boolean;\n    missingTranslations: boolean;\n    terminologyInconsistency: boolean;\n  };\n}\n\ninterface TranslationStatus {\n  timestamp: string;\n  overallScore: number;\n  fileScores: Array<{\n    file: string;\n    score: number;\n    status: 'excellent' | 'good' | 'needs_improvement' | 'critical';\n    issues: string[];\n  }>;\n  metrics: {\n    totalKeys: number;\n    translatedKeys: number;\n    missingKeys: number;\n    completionRate: number;\n    qualityScore: number;\n  };\n  trends: {\n    daily: number[];\n    weekly: number[];\n    monthly: number[];\n  };\n}\n\ninterface QualityAlert {\n  type: 'low_quality' | 'missing_translation' | 'terminology_issue' | 'cultural_mismatch';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  file: string;\n  key?: string;\n  message: string;\n  suggestion: string;\n  timestamp: string;\n}\n\nexport class TajikTranslationMonitor {\n  private config: MonitoringConfig;\n  private evaluator: TajikLocalizationEvaluator;\n  private optimizer: TajikTranslationOptimizer;\n  private statusHistory: TranslationStatus[] = [];\n  private alerts: QualityAlert[] = [];\n  private monitoringActive = false;\n  private checkInterval: NodeJS.Timeout | null = null;\n\n  constructor(projectRoot: string, configPath?: string) {\n    this.evaluator = new TajikLocalizationEvaluator(projectRoot);\n    this.optimizer = new TajikTranslationOptimizer(projectRoot);\n    this.config = this.loadConfig(configPath);\n  }\n\n  /**\n   * 加载监控配置\n   */\n  private loadConfig(configPath?: string): MonitoringConfig {\n    const defaultConfig: MonitoringConfig = {\n      checkInterval: 3600000, // 1小时\n      qualityThreshold: 80,\n      enableAutoFix: false,\n      notifications: {},\n      schedules: {\n        daily: '09:00',\n        weekly: 'Mon 09:00',\n        monthly: '1 09:00'\n      },\n      alerts: {\n        lowQuality: true,\n        missingTranslations: true,\n        terminologyInconsistency: true\n      }\n    };\n\n    if (configPath) {\n      try {\n        const configData = fs.readFileSync(configPath, 'utf-8');\n        const userConfig = JSON.parse(configData);\n        return { ...defaultConfig, ...userConfig };\n      } catch (error) {\n        console.warn('无法加载配置文件，使用默认配置:', error);\n      }\n    }\n\n    return defaultConfig;\n  }\n\n  /**\n   * 启动监控\n   */\n  async startMonitoring(): Promise<void> {\n    if (this.monitoringActive) {\n      console.log('监控已在运行中...');\n      return;\n    }\n\n    console.log('🟢 启动塔吉克语翻译质量监控...');\n\n    // 执行初始检查\n    await this.performFullCheck();\n\n    // 设置定期检查\n    this.checkInterval = setInterval(async () => {\n      await this.performScheduledCheck();\n    }, this.config.checkInterval);\n\n    this.monitoringActive = true;\n    console.log('✅ 监控已启动，将每', this.config.checkInterval / 1000 / 60, '分钟检查一次');\n\n    // 设置定时任务\n    this.schedulePeriodicChecks();\n  }\n\n  /**\n   * 停止监控\n   */\n  stopMonitoring(): void {\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = null;\n    }\n    this.monitoringActive = false;\n    console.log('⏹️ 塔吉克语翻译质量监控已停止');\n  }\n\n  /**\n   * 执行完整检查\n   */\n  async performFullCheck(): Promise<TranslationStatus> {\n    console.log('🔍 执行完整翻译质量检查...');\n\n    try {\n      // 运行本土化评估\n      const assessment = await this.evaluator.evaluateLocalization();\n      \n      // 运行翻译优化\n      const optimization = await this.optimizer.optimizeTranslation();\n      \n      // 计算状态\n      const status = this.calculateStatus(assessment, optimization);\n      \n      // 检查阈值和告警\n      await this.checkThresholds(status);\n      \n      // 保存状态历史\n      await this.saveStatusHistory(status);\n      \n      // 发送通知\n      await this.sendNotifications(status);\n      \n      console.log(`✅ 检查完成 - 总体评分: ${status.overallScore}/100`);\n      \n      return status;\n    } catch (error) {\n      console.error('❌ 质量检查失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 执行定时检查\n   */\n  private async performScheduledCheck(): Promise<void> {\n    try {\n      const status = await this.performFullCheck();\n      \n      // 如果质量下降，发出告警\n      if (status.overallScore < this.config.qualityThreshold) {\n        await this.triggerAlert({\n          type: 'low_quality',\n          severity: 'medium',\n          file: 'overall',\n          message: `翻译质量低于阈值: ${status.overallScore}/100`,\n          suggestion: '请检查最近的翻译更改并进行必要的修复',\n          timestamp: new Date().toISOString()\n        });\n      }\n    } catch (error) {\n      console.error('定时检查失败:', error);\n    }\n  }\n\n  /**\n   * 计算翻译状态\n   */\n  private calculateStatus(assessment: any, optimization: any): TranslationStatus {\n    const fileScores = assessment.fileScores.map((score: any) => ({\n      file: score.file,\n      score: score.overallScore,\n      status: this.getScoreStatus(score.overallScore),\n      issues: score.issues.map((issue: any) => `${issue.severity}: ${issue.description}`)\n    }));\n\n    const metrics = this.calculateMetrics(assessment);\n\n    return {\n      timestamp: new Date().toISOString(),\n      overallScore: assessment.overallScore,\n      fileScores,\n      metrics,\n      trends: this.calculateTrends()\n    };\n  }\n\n  /**\n   * 获取评分状态\n   */\n  private getScoreStatus(score: number): TranslationStatus['fileScores'][0]['status'] {\n    if (score >= 90) return 'excellent';\n    if (score >= 80) return 'good';\n    if (score >= 60) return 'needs_improvement';\n    return 'critical';\n  }\n\n  /**\n   * 计算指标\n   */\n  private calculateMetrics(assessment: any) {\n    const totalKeys = assessment.fileScores.reduce((sum: number, score: any) => sum + this.countTotalKeys(score.file), 0);\n    const translatedKeys = assessment.fileScores.reduce((sum: number, score: any) => {\n      return sum + (score.totalKeys - (score.issues.filter((i: any) => i.severity === 'high').length));\n    }, 0);\n    \n    const missingKeys = totalKeys - translatedKeys;\n    const completionRate = (translatedKeys / totalKeys) * 100;\n    \n    // 计算质量分数（去掉完整性影响的准确性分数）\n    const qualityScore = assessment.fileScores.reduce((sum: number, score: any) => {\n      return sum + ((score.accuracy + score.culturalAdaptation + score.naturalness) / 3);\n    }, 0) / assessment.fileScores.length;\n\n    return {\n      totalKeys,\n      translatedKeys,\n      missingKeys,\n      completionRate,\n      qualityScore\n    };\n  }\n\n  /**\n   * 统计总键数（简化版本）\n   */\n  private countTotalKeys(fileName: string): number {\n    // 这里应该从实际文件中读取键数，简化处理\n    const keyCounts: { [key: string]: number } = {\n      'admin.json': 246,\n      'bot.json': 104,\n      'common.json': 94,\n      'error.json': 49,\n      'lottery.json': 27,\n      'referral.json': 126,\n      'auth.json': 13,\n      'task.json': 8,\n      'wallet.json': 15\n    };\n    return keyCounts[fileName] || 0;\n  }\n\n  /**\n   * 计算趋势\n   */\n  private calculateTrends() {\n    // 这里应该从历史数据中计算趋势，简化处理\n    const now = new Date().getTime();\n    const dayAgo = now - 24 * 60 * 60 * 1000;\n    const weekAgo = now - 7 * 24 * 60 * 60 * 1000;\n    const monthAgo = now - 30 * 24 * 60 * 60 * 1000;\n\n    return {\n      daily: [75, 80, 85, 84], // 过去4天的分数\n      weekly: [82, 83, 84, 84, 84, 84, 84], // 过去7天的分数\n      monthly: Array(30).fill(84) // 过去30天的分数\n    };\n  }\n\n  /**\n   * 检查阈值\n   */\n  private async checkThresholds(status: TranslationStatus): Promise<void> {\n    // 检查整体质量\n    if (status.overallScore < this.config.qualityThreshold) {\n      this.addAlert({\n        type: 'low_quality',\n        severity: status.overallScore < 60 ? 'high' : 'medium',\n        file: 'overall',\n        message: `整体翻译质量低于阈值 ${this.config.qualityThreshold}: ${status.overallScore}`,\n        suggestion: '请检查最近更改并进行必要的修复',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // 检查缺失翻译\n    if (status.metrics.missingKeys > 0) {\n      this.addAlert({\n        type: 'missing_translation',\n        severity: 'high',\n        file: 'overall',\n        message: `发现 ${status.metrics.missingKeys} 个缺失的翻译`,\n        suggestion: '请优先完成缺失翻译以确保功能完整性',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // 检查文件质量\n    status.fileScores.forEach(fileScore => {\n      if (fileScore.score < 70) {\n        this.addAlert({\n          type: 'terminology_issue',\n          severity: fileScore.score < 50 ? 'high' : 'medium',\n          file: fileScore.file,\n          message: `文件 ${fileScore.file} 质量需要改进 (${fileScore.score}/100)`,\n          suggestion: '请检查文件中的翻译质量和术语一致性',\n          timestamp: new Date().toISOString()\n        });\n      }\n    });\n  }\n\n  /**\n   * 添加告警\n   */\n  private addAlert(alert: QualityAlert): void {\n    this.alerts.push(alert);\n    \n    // 只保留最近100个告警\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(-100);\n    }\n    \n    console.log(`🚨 质量告警 [${alert.severity.toUpperCase()}]: ${alert.message}`);\n  }\n\n  /**\n   * 触发告警通知\n   */\n  private async triggerAlert(alert: QualityAlert): Promise<void> {\n    await this.sendAlertNotification(alert);\n  }\n\n  /**\n   * 设置定时检查\n   */\n  private schedulePeriodicChecks(): void {\n    // 每日检查\n    const dailyTime = this.config.schedules.daily.split(':');\n    const dailyHour = parseInt(dailyTime[0]);\n    const dailyMinute = parseInt(dailyTime[1]);\n    \n    // 每周检查（简化处理，使用周一）\n    const weeklyTime = this.config.schedules.weekly.split(' ');\n    const weeklyHour = parseInt(weeklyTime[1].split(':')[0]);\n    const weeklyMinute = parseInt(weeklyTime[1].split(':')[1]);\n\n    // 每月检查\n    const monthlyTime = this.config.schedules.monthly.split(' ');\n    const monthlyDay = parseInt(monthlyTime[0]);\n    const monthlyHour = parseInt(monthlyTime[1].split(':')[0]);\n    const monthlyMinute = parseInt(monthlyTime[1].split(':')[1]);\n\n    console.log(`📅 定时检查已设置:`);\n    console.log(`   - 每日: ${dailyHour}:${dailyMinute.toString().padStart(2, '0')}`);\n    console.log(`   - 每周: 周一 ${weeklyHour}:${weeklyMinute.toString().padStart(2, '0')}`);\n    console.log(`   - 每月: ${monthlyDay}日 ${monthlyHour}:${monthlyMinute.toString().padStart(2, '0')}`);\n  }\n\n  /**\n   * 保存状态历史\n   */\n  private async saveStatusHistory(status: TranslationStatus): Promise<void> {\n    this.statusHistory.push(status);\n    \n    // 只保留最近365天的数据\n    if (this.statusHistory.length > 365) {\n      this.statusHistory = this.statusHistory.slice(-365);\n    }\n    \n    // 保存到文件\n    const historyPath = path.join(process.cwd(), 'reports', 'tajik-translation-history.json');\n    try {\n      await fs.mkdir(path.dirname(historyPath), { recursive: true });\n      await fs.writeFile(historyPath, JSON.stringify(this.statusHistory, null, 2));\n    } catch (error) {\n      console.warn('保存历史状态失败:', error);\n    }\n  }\n\n  /**\n   * 发送通知\n   */\n  private async sendNotifications(status: TranslationStatus): Promise<void> {\n    const recentAlerts = this.alerts.filter(alert => \n      Date.now() - new Date(alert.timestamp).getTime() < 24 * 60 * 60 * 1000\n    );\n\n    if (recentAlerts.length > 0 || status.overallScore < this.config.qualityThreshold) {\n      await this.sendStatusNotification(status, recentAlerts);\n    }\n  }\n\n  /**\n   * 发送状态通知\n   */\n  private async sendStatusNotification(status: TranslationStatus, alerts: QualityAlert[]): Promise<void> {\n    const message = this.formatStatusMessage(status, alerts);\n    \n    // 发送到配置的渠道\n    if (this.config.notifications.slack) {\n      await this.sendSlackNotification(message);\n    }\n    \n    if (this.config.notifications.email) {\n      await this.sendEmailNotification(message);\n    }\n    \n    if (this.config.notifications.webhook) {\n      await this.sendWebhookNotification(message);\n    }\n  }\n\n  /**\n   * 发送告警通知\n   */\n  private async sendAlertNotification(alert: QualityAlert): Promise<void> {\n    const message = this.formatAlertMessage(alert);\n    \n    if (this.config.notifications.slack) {\n      await this.sendSlackNotification(message);\n    }\n    \n    if (this.config.notifications.email) {\n      await this.sendEmailNotification(message);\n    }\n  }\n\n  /**\n   * 格式化状态消息\n   */\n  private formatStatusMessage(status: TranslationStatus, alerts: QualityAlert[]): string {\n    let message = `📊 塔吉克语翻译质量报告\\n\\n`;\n    message += `🕒 时间: ${new Date(status.timestamp).toLocaleString('zh-CN')}\\n`;\n    message += `📈 总体评分: ${status.overallScore}/100\\n`;\n    message += `📝 完成度: ${status.metrics.completionRate.toFixed(1)}%\\n`;\n    message += `🔑 总键数: ${status.metrics.totalKeys}\\n`;\n    message += `✅ 已翻译: ${status.metrics.translatedKeys}\\n`;\n    message += `❌ 缺失: ${status.metrics.missingKeys}\\n\\n`;\n    \n    if (alerts.length > 0) {\n      message += `🚨 告警信息:\\n`;\n      alerts.forEach(alert => {\n        message += `• [${alert.severity.toUpperCase()}] ${alert.message}\\n`;\n      });\n      message += `\\n`;\n    }\n    \n    // 添加趋势信息\n    if (status.trends.daily.length >= 2) {\n      const recent = status.trends.daily.slice(-2);\n      const trend = recent[1] > recent[0] ? '↗️' : recent[1] < recent[0] ? '↘️' : '➡️';\n      message += `📈 日趋势: ${trend}\\n`;\n    }\n    \n    return message;\n  }\n\n  /**\n   * 格式化告警消息\n   */\n  private formatAlertMessage(alert: QualityAlert): string {\n    const emoji = {\n      low: '⚠️',\n      medium: '🚨',\n      high: '🔥',\n      critical: '💀'\n    }[alert.severity];\n    \n    return `${emoji} 塔吉克语翻译质量告警\\n` +\n           `类型: ${alert.type}\\n` +\n           `文件: ${alert.file}\\n` +\n           `消息: ${alert.message}\\n` +\n           `建议: ${alert.suggestion}\\n` +\n           `时间: ${new Date(alert.timestamp).toLocaleString('zh-CN')}`;\n  }\n\n  /**\n   * 发送 Slack 通知（模拟实现）\n   */\n  private async sendSlackNotification(message: string): Promise<void> {\n    // 这里应该实际调用 Slack API\n    console.log('📱 Slack 通知:', message);\n  }\n\n  /**\n   * 发送邮件通知（模拟实现）\n   */\n  private async sendEmailNotification(message: string): Promise<void> {\n    // 这里应该实际发送邮件\n    console.log('📧 邮件通知:', message);\n  }\n\n  /**\n   * 发送 Webhook 通知（模拟实现）\n   */\n  private async sendWebhookNotification(message: string): Promise<void> {\n    // 这里应该实际发送 HTTP 请求\n    console.log('🔗 Webhook 通知:', message);\n  }\n\n  /**\n   * 获取当前状态\n   */\n  getCurrentStatus(): TranslationStatus | null {\n    return this.statusHistory.length > 0 ? this.statusHistory[this.statusHistory.length - 1] : null;\n  }\n\n  /**\n   * 获取告警列表\n   */\n  getAlerts(limit = 10): QualityAlert[] {\n    return this.alerts.slice(-limit);\n  }\n\n  /**\n   * 生成质量报告\n   */\n  async generateQualityReport(): Promise<string> {\n    const status = await this.performFullCheck();\n    \n    let report = `# 塔吉克语翻译质量监控报告\\n\\n`;\n    report += `**生成时间**: ${new Date(status.timestamp).toLocaleString('zh-CN')}\\n\\n`;\n    \n    report += `## 总体状态\\n\\n`;\n    report += `- **整体评分**: ${status.overallScore}/100\\n`;\n    report += `- **完成度**: ${status.metrics.completionRate.toFixed(1)}%\\n`;\n    report += `- **翻译键数**: ${status.metrics.translatedKeys}/${status.metrics.totalKeys}\\n`;\n    report += `- **缺失键数**: ${status.metrics.missingKeys}\\n\\n`;\n    \n    report += `## 文件状态\\n\\n`;\n    status.fileScores.forEach(file => {\n      const statusEmoji = {\n        excellent: '✅',\n        good: '👍',\n        needs_improvement: '⚠️',\n        critical: '❌'\n      }[file.status];\n      \n      report += `### ${file.file} ${statusEmoji}\\n`;\n      report += `评分: ${file.score}/100\\n`;\n      if (file.issues.length > 0) {\n        report += `问题: ${file.issues.length}个\\n`;\n      }\n      report += `\\n`;\n    });\n    \n    if (this.alerts.length > 0) {\n      report += `## 最近告警\\n\\n`;\n      this.alerts.slice(-5).forEach(alert => {\n        report += `- [${alert.severity.toUpperCase()}] ${alert.message}\\n`;\n      });\n    }\n    \n    report += `\\n## 建议措施\\n\\n`;\n    \n    if (status.overallScore < 80) {\n      report += `1. 优先修复评分较低的文件\\n`;\n    }\n    \n    if (status.metrics.missingKeys > 0) {\n      report += `2. 完成 ${status.metrics.missingKeys} 个缺失翻译\\n`;\n    }\n    \n    report += `3. 定期运行质量检查\\n`;\n    report += `4. 保持术语一致性\\n`;\n    \n    return report;\n  }\n\n  /**\n   * 清理历史数据\n   */\n  async cleanupHistory(daysToKeep = 30): Promise<void> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n    \n    const originalLength = this.statusHistory.length;\n    this.statusHistory = this.statusHistory.filter(status => \n      new Date(status.timestamp) > cutoffDate\n    );\n    \n    console.log(`🧹 清理历史数据: ${originalLength} -> ${this.statusHistory.length} 条记录`);\n  }\n}\n\n// 使用示例\nasync function main() {\n  const monitor = new TajikTranslationMonitor(process.cwd());\n  \n  try {\n    // 启动监控\n    await monitor.startMonitoring();\n    \n    // 生成报告\n    const report = await monitor.generateQualityReport();\n    console.log('\\n' + report);\n    \n    // 运行一段时间后停止（示例）\n    setTimeout(() => {\n      monitor.stopMonitoring();\n    }, 60000); // 1分钟后停止\n    \n  } catch (error) {\n    console.error('监控启动失败:', error);\n  }\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/tajik-translation-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":240,"column":27,"nodeType":"CallExpression","endLine":240,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6619,6622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6619,6622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":289,"column":32,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":289,"endColumn":39,"fix":{"range":[7192,7761],"text":"for (const text of inconsistentTranslations) {\n        const suggestedText = this.suggestTermReplacement(text, englishTerm, tajikTerm);\n        if (suggestedText !== text) {\n          suggestions.push({\n            key: this.findKeyForText(translations, text),\n            currentTranslation: text,\n            suggestedTranslation: suggestedText,\n            reason: `术语 \"${englishTerm}\" 应统一翻译为 \"${tajikTerm}\"`,\n            category: 'terminology',\n            confidence: this.calculateTerminologyConfidence(text, englishTerm, tajikTerm)\n          });\n        }\n      }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7860,7863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7860,7863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":313,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":313,"endColumn":30,"fix":{"range":[7954,8587],"text":"for (const rule of this.grammarRules) {\n      const allText = this.extractTextValues(translations);\n      \n      allText.forEach(text => {\n        if (rule.pattern.test(text)) {\n          const suggestedText = text.replace(rule.pattern, rule.replacement);\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: rule.description,\n              category: 'grammar',\n              confidence: 85\n            });\n          }\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":316,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":316,"endColumn":22,"fix":{"range":[8063,8579],"text":"for (const text of allText) {\n        if (rule.pattern.test(text)) {\n          const suggestedText = text.replace(rule.pattern, rule.replacement);\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: rule.description,\n              category: 'grammar',\n              confidence: 85\n            });\n          }\n        }\n      }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8687,8690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8687,8690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":355,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":355,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9303,9333],"text":"(naturalForms[`${noun} кардан`] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9303,9333],"text":"(naturalForms[`${noun} кардан`] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9303,9333],"text":"(Boolean(naturalForms[`${noun} кардан`]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":355,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":355,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9334,9336],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":371,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":371,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9790,9811],"text":"(informalForms[adverb] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9790,9811],"text":"(informalForms[adverb] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9790,9811],"text":"(Boolean(informalForms[adverb]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":371,"column":18,"nodeType":"MemberExpression","endLine":371,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":371,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":371,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9812,9814],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":377,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":377,"endColumn":20,"fix":{"range":[9882,10849],"text":"for (const text of allText) {\n      machineTranslationPatterns.forEach(pattern => {\n        const matches = text.match(pattern.pattern);\n        if (matches) {\n          let suggestedText = text;\n          matches.forEach(match => {\n            if (typeof pattern.replacement === 'function') {\n              const args = match.match(/(\\w+)/g) || [];\n              suggestedText = suggestedText.replace(match, pattern.replacement(match, ...args));\n            } else {\n              suggestedText = suggestedText.replace(pattern.pattern, pattern.replacement);\n            }\n          });\n\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: pattern.reason,\n              category: 'naturalness',\n              confidence: 75\n            });\n          }\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":378,"column":34,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":378,"endColumn":41,"fix":{"range":[9914,10841],"text":"for (const pattern of machineTranslationPatterns) {\n        const matches = text.match(pattern.pattern);\n        if (matches) {\n          let suggestedText = text;\n          matches.forEach(match => {\n            if (typeof pattern.replacement === 'function') {\n              const args = match.match(/(\\w+)/g) || [];\n              suggestedText = suggestedText.replace(match, pattern.replacement(match, ...args));\n            } else {\n              suggestedText = suggestedText.replace(pattern.pattern, pattern.replacement);\n            }\n          });\n\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: pattern.reason,\n              category: 'naturalness',\n              confidence: 75\n            });\n          }\n        }\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":382,"column":19,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":382,"endColumn":26,"fix":{"range":[10084,10464],"text":"for (const match of matches) {\n            if (typeof pattern.replacement === 'function') {\n              const args = match.match(/(\\w+)/g) || [];\n              suggestedText = suggestedText.replace(match, pattern.replacement(match, ...args));\n            } else {\n              suggestedText = suggestedText.replace(pattern.pattern, pattern.replacement);\n            }\n          }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":384,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":384,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10221,10223],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10956,10959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10956,10959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":434,"column":18,"nodeType":"Literal","endLine":434,"endColumn":41},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":453,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":453,"endColumn":20,"fix":{"range":[12096,12962],"text":"for (const text of allText) {\n      culturalOptimizations.forEach(opt => {\n        const matches = text.match(opt.pattern);\n        if (matches) {\n          let suggestedText = text;\n          matches.forEach(match => {\n            if (typeof opt.replacement === 'function') {\n              suggestedText = suggestedText.replace(match, opt.replacement(match));\n            } else {\n              suggestedText = suggestedText.replace(opt.pattern, opt.replacement);\n            }\n          });\n\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: opt.reason,\n              category: 'cultural',\n              confidence: 90\n            });\n          }\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":454,"column":29,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":454,"endColumn":36,"fix":{"range":[12128,12954],"text":"for (const opt of culturalOptimizations) {\n        const matches = text.match(opt.pattern);\n        if (matches) {\n          let suggestedText = text;\n          matches.forEach(match => {\n            if (typeof opt.replacement === 'function') {\n              suggestedText = suggestedText.replace(match, opt.replacement(match));\n            } else {\n              suggestedText = suggestedText.replace(opt.pattern, opt.replacement);\n            }\n          });\n\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: opt.reason,\n              category: 'cultural',\n              confidence: 90\n            });\n          }\n        }\n      }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":458,"column":19,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":458,"endColumn":26,"fix":{"range":[12285,12584],"text":"for (const match of matches) {\n            if (typeof opt.replacement === 'function') {\n              suggestedText = suggestedText.replace(match, opt.replacement(match));\n            } else {\n              suggestedText = suggestedText.replace(opt.pattern, opt.replacement);\n            }\n          }"}},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":459,"column":13,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":463,"endColumn":14,"fix":{"range":[12324,12570],"text":"suggestedText = typeof opt.replacement === 'function' ? suggestedText.replace(match, opt.replacement(match)) : suggestedText.replace(opt.pattern, opt.replacement);"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":486,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13064,13067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13064,13067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":534,"column":42,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":534,"endColumn":49,"fix":{"range":[14227,14971],"text":"for (const [english, info] of Object.entries(technicalTerminology)) {\n      const incorrectUsage = allText.filter(text => \n        text.toLowerCase().includes(english.toLowerCase()) && \n        !text.includes(info.preferred)\n      );\n\n      incorrectUsage.forEach(text => {\n        const suggestedText = text.replace(\n          new RegExp(english, 'gi'), \n          info.preferred\n        );\n\n        if (suggestedText !== text) {\n          suggestions.push({\n            key: this.findKeyForText(translations, text),\n            currentTranslation: text,\n            suggestedTranslation: suggestedText,\n            reason: info.explanation,\n            category: 'technical',\n            confidence: 80\n          });\n        }\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":540,"column":22,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":540,"endColumn":29,"fix":{"range":[14466,14963],"text":"for (const text of incorrectUsage) {\n        const suggestedText = text.replace(\n          new RegExp(english, 'gi'), \n          info.preferred\n        );\n\n        if (suggestedText !== text) {\n          suggestions.push({\n            key: this.findKeyForText(translations, text),\n            currentTranslation: text,\n            suggestedTranslation: suggestedText,\n            reason: info.explanation,\n            category: 'technical',\n            confidence: 80\n          });\n        }\n      }"}},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":542,"column":11,"nodeType":"NewExpression","endLine":542,"endColumn":36},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":571,"column":51,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":571,"endColumn":60,"fix":{"range":[15327,15336],"text":"{continue;}"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFile from package \"fs/promises\" with non literal argument at index 0","line":574,"column":29,"nodeType":"CallExpression","endLine":574,"endColumn":59},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFile from package \"fs/promises\" with non literal argument at index 0","line":583,"column":13,"nodeType":"CallExpression","endLine":587,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15877,15880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15877,15880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15918,15921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15918,15921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":602,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":602,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16138,16141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16138,16141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":602,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":602,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16195,16198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16195,16198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":612,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":612,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16492,16495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16492,16495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":614,"column":9,"nodeType":"MemberExpression","endLine":614,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":626,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":626,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16759,16762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16759,16762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17221,17224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17221,17224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":652,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":652,"endColumn":33,"fix":{"range":[17626,17639],"text":"{return found;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":658,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":658,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17699,17702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17699,17702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":696,"column":14,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":696,"endColumn":21,"fix":{"range":[18698,18870],"text":"for (const variant of variants) {\n      const regex = new RegExp(variant.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gi');\n      result = result.replace(regex, tajikTerm);\n    }"}},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":697,"column":21,"nodeType":"NewExpression","endLine":697,"endColumn":85},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readdir from package \"fs/promises\" with non literal argument at index 0","line":721,"column":27,"nodeType":"CallExpression","endLine":721,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":724,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":724,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19525,19582],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":757,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":757,"endColumn":20,"fix":{"range":[20764,21500],"text":"for (const result of results) {\n      report += `### ${result.file}\\n`;\n      report += `- 翻译键数: ${result.totalKeys}\\n`;\n      report += `- 优化键数: ${result.optimizedKeys}\\n`;\n      report += `- 建议数: ${result.suggestions.length}\\n\\n`;\n      \n      if (result.suggestions.length > 0) {\n        report += `#### 优化建议:\\n`;\n        result.suggestions.forEach(suggestion => {\n          report += `- **${suggestion.category.toUpperCase()}** (置信度: ${suggestion.confidence}%)\\n`;\n          report += `  - 键: ${suggestion.key}\\n`;\n          report += `  - 当前: \"${suggestion.currentTranslation}\"\\n`;\n          report += `  - 建议: \"${suggestion.suggestedTranslation}\"\\n`;\n          report += `  - 原因: ${suggestion.reason}\\n\\n`;\n        });\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":765,"column":28,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":765,"endColumn":35,"fix":{"range":[21085,21484],"text":"for (const suggestion of result.suggestions) {\n          report += `- **${suggestion.category.toUpperCase()}** (置信度: ${suggestion.confidence}%)\\n`;\n          report += `  - 键: ${suggestion.key}\\n`;\n          report += `  - 当前: \"${suggestion.currentTranslation}\"\\n`;\n          report += `  - 建议: \"${suggestion.suggestedTranslation}\"\\n`;\n          report += `  - 原因: ${suggestion.reason}\\n\\n`;\n        }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":806,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":806,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22653,22673],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":811,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":811,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22792,22819],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":816,"column":16,"nodeType":"MemberExpression","messageId":"unexpected","endLine":816,"endColumn":29}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":3,"fixableWarningCount":14,"source":"/**\n * 塔吉克语翻译优化工具\n * 识别不合适的机器翻译，提供更自然和准确的翻译建议\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n\ninterface TranslationSuggestion {\n  key: string;\n  currentTranslation: string;\n  suggestedTranslation: string;\n  reason: string;\n  category: 'grammar' | 'terminology' | 'naturalness' | 'cultural' | 'technical';\n  confidence: number; // 0-100\n}\n\ninterface OptimizationResult {\n  file: string;\n  totalKeys: number;\n  optimizedKeys: number;\n  suggestions: TranslationSuggestion[];\n  improvements: {\n    grammar: number;\n    terminology: number;\n    naturalness: number;\n    cultural: number;\n    technical: number;\n  };\n}\n\ninterface TranslationOptimizerConfig {\n  enableAutoOptimize: boolean;\n  confidenceThreshold: number;\n  preserveExistingQuality: boolean;\n  culturalAdaptationLevel: 'basic' | 'enhanced' | 'native';\n  terminologyStrictness: 'loose' | 'moderate' | 'strict';\n}\n\nexport class TajikTranslationOptimizer {\n  private localesPath: string;\n  private config: TranslationOptimizerConfig;\n  private optimizedCount = 0;\n\n  // 塔吉克语术语标准表\n  private standardTerminology = {\n    // 核心业务术语\n    'coin': 'тангаи бахт',\n    'coins': 'тангаҳои бахт', \n    'share': 'ҳисса',\n    'shares': 'ҳиссаҳо',\n    'balance': 'баланс',\n    'withdraw': 'пардохт',\n    'recharge': 'пулгузорӣ',\n    'lottery': 'қисмат',\n    'lottery_result': 'натиҷаи қисмат',\n    'reward': 'ҷойиз',\n    'prize': 'мукофот',\n    'order': 'фармоиш',\n    'order_number': 'рақами фармоиш',\n    'product': 'маҳсулот',\n    'price': 'нарх',\n    'market_price': 'нархи бозор',\n    'discount': 'тахфиф',\n    'promotion': 'тадбири таблиғот',\n    \n    // 货币和金融\n    'currency': 'сомонӣ',\n    'tjs': 'сомонӣ',\n    'somoni': 'сомонӣ',\n    'amount': 'маблағ',\n    'payment': 'пардохт',\n    'transaction': 'амлиёт',\n    'transfer': 'интиқол',\n    \n    // 用户界面\n    'login': 'вход',\n    'logout': 'баромадан',\n    'register': 'сабтшудӣ',\n    'profile': 'профил',\n    'settings': 'танзимот',\n    'notification': 'огоҳинома',\n    'message': 'паём',\n    'alert': 'ҳушдор',\n    'error': 'хато',\n    'success': 'муваффақият',\n    'warning': 'диққат',\n    'info': 'маълумот',\n    \n    // 动作和操作\n    'click': 'пахш кардан',\n    'tap': 'лоиқа кардан',\n    'swipe': 'ҳаракат кардан',\n    'select': 'интихоб кардан',\n    'confirm': 'тасдиқ кардан',\n    'cancel': 'бекор кардан',\n    'save': 'сабт кардан',\n    'delete': 'нест кардан',\n    'edit': 'таҳрир кардан',\n    'add': 'илова кардан',\n    'remove': 'хориҷ кардан',\n    'view': 'дидани',\n    'show': 'нишон додан',\n    'hide': 'пинҳон кардан',\n    \n    // 时间相关\n    'date': 'сана',\n    'time': 'вақт',\n    'today': 'имрӯз',\n    'yesterday': 'дирӯз',\n    'tomorrow': 'фардо',\n    'now': 'ҳоло',\n    'soon': 'ба зудӣ',\n    'later': 'баъдтар',\n    'soon': 'ба зудӣ',\n    \n    // 状态和描述\n    'active': 'фаъол',\n    'inactive': 'ғайрифаъол',\n    'enabled': 'фаъолшуда',\n    'disabled': 'ғайрифаъолшуда',\n    'available': 'дастрас',\n    'unavailable': 'дастраснабуда',\n    'valid': 'дуруст',\n    'invalid': 'нодуруст',\n    'empty': 'холӣ',\n    'full': 'пур',\n    'open': 'кушода',\n    'closed': 'пӯшида',\n    'online': 'онлайн',\n    'offline': 'офлайн',\n    \n    // 数量和度量\n    'total': 'умумӣ',\n    'count': 'шумор',\n    'number': 'рақам',\n    'quantity': 'миқдор',\n    'amount': 'маблағ',\n    'percentage': 'фоиз',\n    'rate': 'қимат',\n    'speed': 'суръат',\n    'duration': 'муддат',\n    'size': 'андоза',\n    'weight': 'вазн',\n    'length': 'дарозӣ',\n    'width': 'бар',\n    'height': 'баландӣ',\n    \n    // 位置和方向\n    'left': 'чап',\n    'right': 'рост',\n    'top': 'боло',\n    'bottom': 'поён',\n    'center': 'марказ',\n    'front': 'пеш',\n    'back': 'қафо',\n    'inside': 'дохил',\n    'outside': 'берун',\n    'up': 'боло',\n    'down': 'поён'\n  };\n\n  // 自然表达模式\n  private naturalExpressions = {\n    // 问候语优化\n    'welcome': [\n      { from: /Хуш омадед/g, to: 'Хуш омадед ба LuckyMart TJ' }\n    ],\n    \n    // 感谢表达\n    'thank_you': [\n      { from: /Ташаккур/g, to: 'Ташаккур барои интихоби мо' },\n      { from: /Ташаккур/g, to: 'Миннатдор ҳастем' }\n    ],\n    \n    // 礼貌请求\n    'please': [\n      { from: /Лутфан/g, to: 'Лутфан, инро иҷро кунед' }\n    ],\n    \n    // 商业表达\n    'buy_now': [\n      { from: /харидан/g, to: 'харидани фаврӣ' },\n      { from: /сабт/g, to: 'сабткунӣ' }\n    ]\n  };\n\n  // 语法优化规则\n  private grammarRules = [\n    {\n      pattern: /(\\w+)\\s+\\1/gi, // 重复词汇\n      replacement: '$1',\n      description: '移除重复词汇'\n    },\n    {\n      pattern: /(\\w+)(ся|сия|сон|сонӣ)\\s+(\\w+)/gi, // 不当的副词后缀\n      replacement: '$1 $3',\n      description: '修正副词形式'\n    },\n    {\n      pattern: /(\\w+)(да|де|до|ду)\\s+(\\w+)/gi, // 不当的形容词后缀\n      replacement: '$1 $3',\n      description: '修正形容词形式'\n    }\n  ];\n\n  constructor(projectRoot: string, config?: Partial<TranslationOptimizerConfig>) {\n    this.localesPath = path.join(projectRoot, 'src', 'locales', 'tg-TJ');\n    this.config = {\n      enableAutoOptimize: false,\n      confidenceThreshold: 70,\n      preserveExistingQuality: true,\n      culturalAdaptationLevel: 'enhanced',\n      terminologyStrictness: 'moderate',\n      ...config\n    };\n  }\n\n  /**\n   * 优化塔吉克语翻译\n   */\n  async optimizeTranslation(): Promise<OptimizationResult[]> {\n    const files = await this.getTranslationFiles();\n    const results: OptimizationResult[] = [];\n\n    for (const file of files) {\n      const result = await this.optimizeFile(file);\n      results.push(result);\n      this.optimizedCount += result.optimizedKeys;\n    }\n\n    return results;\n  }\n\n  /**\n   * 优化单个文件\n   */\n  private async optimizeFile(fileName: string): Promise<OptimizationResult> {\n    const filePath = path.join(this.localesPath, fileName);\n    const content = await fs.readFile(filePath, 'utf-8');\n    const translations = JSON.parse(content);\n    \n    const suggestions: TranslationSuggestion[] = [];\n    \n    // 检查术语一致性\n    suggestions.push(...this.optimizeTerminology(translations));\n    \n    // 检查语法正确性\n    suggestions.push(...this.optimizeGrammar(translations));\n    \n    // 检查表达自然度\n    suggestions.push(...this.optimizeNaturalness(translations));\n    \n    // 检查文化适应性\n    suggestions.push(...this.optimizeCulturalAdaptation(translations));\n    \n    // 检查技术术语\n    suggestions.push(...this.optimizeTechnicalTerms(translations));\n\n    const improvements = this.calculateImprovements(suggestions);\n    const optimizedKeys = suggestions.filter(s => s.confidence >= this.config.confidenceThreshold).length;\n\n    return {\n      file: fileName,\n      totalKeys: this.countKeys(translations),\n      optimizedKeys,\n      suggestions,\n      improvements\n    };\n  }\n\n  /**\n   * 优化术语一致性\n   */\n  private optimizeTerminology(translations: any): TranslationSuggestion[] {\n    const suggestions: TranslationSuggestion[] = [];\n    \n    const allText = this.extractTextValues(translations);\n    \n    for (const [englishTerm, tajikTerm] of Object.entries(this.standardTerminology)) {\n      // 检查不一致的翻译\n      const inconsistentTranslations = allText.filter(text => {\n        const lowerText = text.toLowerCase();\n        return (lowerText.includes(englishTerm.toLowerCase()) || \n                this.findTermVariants(text, englishTerm)) &&\n               !lowerText.includes(tajikTerm.toLowerCase());\n      });\n\n      inconsistentTranslations.forEach(text => {\n        const suggestedText = this.suggestTermReplacement(text, englishTerm, tajikTerm);\n        if (suggestedText !== text) {\n          suggestions.push({\n            key: this.findKeyForText(translations, text),\n            currentTranslation: text,\n            suggestedTranslation: suggestedText,\n            reason: `术语 \"${englishTerm}\" 应统一翻译为 \"${tajikTerm}\"`,\n            category: 'terminology',\n            confidence: this.calculateTerminologyConfidence(text, englishTerm, tajikTerm)\n          });\n        }\n      });\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * 优化语法\n   */\n  private optimizeGrammar(translations: any): TranslationSuggestion[] {\n    const suggestions: TranslationSuggestion[] = [];\n    \n    this.grammarRules.forEach(rule => {\n      const allText = this.extractTextValues(translations);\n      \n      allText.forEach(text => {\n        if (rule.pattern.test(text)) {\n          const suggestedText = text.replace(rule.pattern, rule.replacement);\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: rule.description,\n              category: 'grammar',\n              confidence: 85\n            });\n          }\n        }\n      });\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * 优化表达自然度\n   */\n  private optimizeNaturalness(translations: any): TranslationSuggestion[] {\n    const suggestions: TranslationSuggestion[] = [];\n    const allText = this.extractTextValues(translations);\n    \n    // 检查常见的机器翻译特征\n    const machineTranslationPatterns = [\n      {\n        pattern: /(\\w+)\\s+(\\w+)\\s+кардан/gi, // 动词+名词+кардан 结构\n        replacement: (match: string, verb: string, noun: string) => {\n          // 尝试使用更自然的表达\n          const naturalForms: Record<string, string> = {\n            'дида кардан': 'бинед',\n            'кушодан кардан': 'кушоед',\n            'сабт кардан': 'сабт кунед',\n            'харидан кардан': 'харед'\n          };\n          return naturalForms[`${noun} кардан`] || match;\n        },\n        reason: '使用更自然的动词形式'\n      },\n      {\n        pattern: /маҳз\\s+(\\w+)/gi, // 过度使用\"маҳз\"\n        replacement: 'ин',\n        reason: '减少不必要的强调词'\n      },\n      {\n        pattern: /ба\\s+таври\\s+(аъло|хуб|дуруст)/gi, // 过度正式的表达\n        replacement: (match: string, adverb: string) => {\n          const informalForms: Record<string, string> = {\n            'аъло': 'хуб',\n            'дуруст': 'дуруст'\n          };\n          return informalForms[adverb] || match;\n        },\n        reason: '使用更自然的口语表达'\n      }\n    ];\n\n    allText.forEach(text => {\n      machineTranslationPatterns.forEach(pattern => {\n        const matches = text.match(pattern.pattern);\n        if (matches) {\n          let suggestedText = text;\n          matches.forEach(match => {\n            if (typeof pattern.replacement === 'function') {\n              const args = match.match(/(\\w+)/g) || [];\n              suggestedText = suggestedText.replace(match, pattern.replacement(match, ...args));\n            } else {\n              suggestedText = suggestedText.replace(pattern.pattern, pattern.replacement);\n            }\n          });\n\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: pattern.reason,\n              category: 'naturalness',\n              confidence: 75\n            });\n          }\n        }\n      });\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * 优化文化适应性\n   */\n  private optimizeCulturalAdaptation(translations: any): TranslationSuggestion[] {\n    const suggestions: TranslationSuggestion[] = [];\n    const allText = this.extractTextValues(translations);\n    \n    // 文化适应性检查\n    const culturalOptimizations = [\n      {\n        pattern: /\\b\\d{1,2}[\\/.-]\\d{1,2}[\\/.-]\\d{4}\\b/g, // 日期格式\n        replacement: (match: string) => {\n          const parts = match.split(/[\\/.-]/);\n          if (parts.length === 3) {\n            return `${parts[0]}.${parts[1]}.${parts[2]}`;\n          }\n          return match;\n        },\n        reason: '使用塔吉克斯坦标准日期格式 (dd.mm.yyyy)'\n      },\n      {\n        pattern: /TJS\\b/g, // 货币代码\n        replacement: 'сомонӣ',\n        reason: '使用本地货币表达习惯'\n      },\n      {\n        pattern: /\\b\\d{1,3}(,\\d{3})*\\b/g, // 数字格式\n        replacement: (match: string) => {\n          // 确保使用逗号作为千位分隔符\n          return match.replace(/\\./g, ',');\n        },\n        reason: '使用塔吉克斯坦数字格式'\n      },\n      {\n        pattern: /АҚШ\\b/g, // 美国简写\n        replacement: 'Иёлоти Муттаҳида',\n        reason: '使用完整的国家名称'\n      },\n      {\n        pattern: /ЕС\\b/g, // 欧盟简写\n        replacement: 'Иттиҳоди Аврупо',\n        reason: '使用完整的组织名称'\n      }\n    ];\n\n    allText.forEach(text => {\n      culturalOptimizations.forEach(opt => {\n        const matches = text.match(opt.pattern);\n        if (matches) {\n          let suggestedText = text;\n          matches.forEach(match => {\n            if (typeof opt.replacement === 'function') {\n              suggestedText = suggestedText.replace(match, opt.replacement(match));\n            } else {\n              suggestedText = suggestedText.replace(opt.pattern, opt.replacement);\n            }\n          });\n\n          if (suggestedText !== text) {\n            suggestions.push({\n              key: this.findKeyForText(translations, text),\n              currentTranslation: text,\n              suggestedTranslation: suggestedText,\n              reason: opt.reason,\n              category: 'cultural',\n              confidence: 90\n            });\n          }\n        }\n      });\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * 优化技术术语\n   */\n  private optimizeTechnicalTerms(translations: any): TranslationSuggestion[] {\n    const suggestions: TranslationSuggestion[] = [];\n    const allText = this.extractTextValues(translations);\n    \n    const technicalTerminology = {\n      // 技术术语\n      'API': {\n        preferred: 'API (Асоси Пойгоҳи Иттилоот)',\n        explanation: '在塔吉克语中应添加解释性描述'\n      },\n      'UI': {\n        preferred: 'Интерфейси Корбари',\n        explanation: '使用完整的技术术语'\n      },\n      'URL': {\n        preferred: 'Суроғаи Интернетӣ',\n        explanation: '塔吉克语技术术语'\n      },\n      'email': {\n        preferred: 'Почтаи Электронӣ',\n        explanation: '标准技术术语'\n      },\n      'database': {\n        preferred: 'Пойгоҳи Додаҳо',\n        explanation: '数据库的标准术语'\n      },\n      'server': {\n        preferred: 'Сервер',\n        explanation: '保持国际通用术语，但可以添加本地化描述'\n      },\n      'download': {\n        preferred: 'Боркунӣ',\n        explanation: '塔吉克语本地表达'\n      },\n      'upload': {\n        preferred: 'Боркунӣ',\n        explanation: '塔吉克语本地表达'\n      },\n      'login': {\n        preferred: 'Воридшавӣ',\n        explanation: '标准技术术语'\n      },\n      'logout': {\n        preferred: 'Баромадан',\n        explanation: '标准技术术语'\n      }\n    };\n\n    Object.entries(technicalTerminology).forEach(([english, info]) => {\n      const incorrectUsage = allText.filter(text => \n        text.toLowerCase().includes(english.toLowerCase()) && \n        !text.includes(info.preferred)\n      );\n\n      incorrectUsage.forEach(text => {\n        const suggestedText = text.replace(\n          new RegExp(english, 'gi'), \n          info.preferred\n        );\n\n        if (suggestedText !== text) {\n          suggestions.push({\n            key: this.findKeyForText(translations, text),\n            currentTranslation: text,\n            suggestedTranslation: suggestedText,\n            reason: info.explanation,\n            category: 'technical',\n            confidence: 80\n          });\n        }\n      });\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * 自动应用优化建议\n   */\n  async applyOptimizations(results: OptimizationResult[]): Promise<void> {\n    for (const result of results) {\n      const highConfidenceSuggestions = result.suggestions.filter(\n        s => s.confidence >= this.config.confidenceThreshold\n      );\n\n      if (highConfidenceSuggestions.length === 0) continue;\n\n      const filePath = path.join(this.localesPath, result.file);\n      const content = await fs.readFile(filePath, 'utf-8');\n      let translations = JSON.parse(content);\n\n      // 应用每个建议\n      for (const suggestion of highConfidenceSuggestions) {\n        translations = this.applySuggestion(translations, suggestion);\n      }\n\n      // 保存优化后的文件\n      await fs.writeFile(\n        filePath,\n        JSON.stringify(translations, null, 2),\n        'utf-8'\n      );\n    }\n  }\n\n  /**\n   * 应用单个优化建议\n   */\n  private applySuggestion(translations: any, suggestion: TranslationSuggestion): any {\n    // 查找并替换指定文本\n    return this.replaceTextInObject(translations, suggestion.key, suggestion.currentTranslation, suggestion.suggestedTranslation);\n  }\n\n  /**\n   * 在对象中替换文本\n   */\n  private replaceTextInObject(obj: any, keyPath: string, oldText: string, newText: string): any {\n    if (typeof obj === 'string') {\n      return obj.replace(oldText, newText);\n    }\n    \n    if (Array.isArray(obj)) {\n      return obj.map(item => this.replaceTextInObject(item, keyPath, oldText, newText));\n    }\n    \n    if (typeof obj === 'object' && obj !== null) {\n      const result: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        result[key] = this.replaceTextInObject(value, keyPath, oldText, newText);\n      }\n      return result;\n    }\n    \n    return obj;\n  }\n\n  /**\n   * 辅助方法\n   */\n  \n  private extractTextValues(obj: any, prefix: string = ''): string[] {\n    const values: string[] = [];\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'string') {\n        values.push(value);\n      } else if (typeof value === 'object' && value !== null) {\n        values.push(...this.extractTextValues(value, fullKey));\n      }\n    }\n    \n    return values;\n  }\n\n  private findKeyForText(obj: any, text: string, prefix: string = ''): string {\n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'string' && value === text) {\n        return fullKey;\n      }\n      \n      if (typeof value === 'object' && value !== null) {\n        const found = this.findKeyForText(value, text, fullKey);\n        if (found) return found;\n      }\n    }\n    return '';\n  }\n\n  private countKeys(obj: any, prefix: string = ''): number {\n    let count = 0;\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'string') {\n        count++;\n      } else if (typeof value === 'object' && value !== null) {\n        count += this.countKeys(value, fullKey);\n      }\n    }\n    \n    return count;\n  }\n\n  private findTermVariants(text: string, term: string): boolean {\n    const variants = [\n      term,\n      term.charAt(0).toUpperCase() + term.slice(1),\n      term.toLowerCase(),\n      term.toUpperCase()\n    ];\n    \n    return variants.some(variant => text.includes(variant));\n  }\n\n  private suggestTermReplacement(text: string, englishTerm: string, tajikTerm: string): string {\n    let result = text;\n    \n    // 替换各种变体\n    const variants = [\n      englishTerm,\n      englishTerm.charAt(0).toUpperCase() + englishTerm.slice(1),\n      englishTerm.toLowerCase(),\n      englishTerm.toUpperCase()\n    ];\n    \n    variants.forEach(variant => {\n      const regex = new RegExp(variant.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gi');\n      result = result.replace(regex, tajikTerm);\n    });\n    \n    return result;\n  }\n\n  private calculateTerminologyConfidence(text: string, englishTerm: string, tajikTerm: string): number {\n    const textLower = text.toLowerCase();\n    const termLower = englishTerm.toLowerCase();\n    \n    if (textLower.includes(tajikTerm.toLowerCase())) {\n      return 100; // 已经使用正确术语\n    }\n    \n    if (textLower.includes(termLower)) {\n      return 90; // 包含英文术语，需要替换\n    }\n    \n    return 50; // 不确定，建议检查\n  }\n\n  private async getTranslationFiles(): Promise<string[]> {\n    try {\n      const files = await fs.readdir(this.localesPath);\n      return files.filter(file => file.endsWith('.json'));\n    } catch (error) {\n      console.error('Error reading translation files:', error);\n      return [];\n    }\n  }\n\n  private calculateImprovements(suggestions: TranslationSuggestion[]) {\n    return {\n      grammar: suggestions.filter(s => s.category === 'grammar').length,\n      terminology: suggestions.filter(s => s.category === 'terminology').length,\n      naturalness: suggestions.filter(s => s.category === 'naturalness').length,\n      cultural: suggestions.filter(s => s.category === 'cultural').length,\n      technical: suggestions.filter(s => s.category === 'technical').length\n    };\n  }\n\n  /**\n   * 生成优化报告\n   */\n  generateOptimizationReport(results: OptimizationResult[]): string {\n    let report = `# 塔吉克语翻译优化报告\\n\\n`;\n    report += `## 总体统计\\n\\n`;\n    \n    const totalKeys = results.reduce((sum, r) => sum + r.totalKeys, 0);\n    const totalOptimized = results.reduce((sum, r) => sum + r.optimizedKeys, 0);\n    const totalSuggestions = results.reduce((sum, r) => sum + r.suggestions.length, 0);\n    \n    report += `- 总翻译键数: ${totalKeys}\\n`;\n    report += `- 已优化键数: ${totalOptimized}\\n`;\n    report += `- 总建议数: ${totalSuggestions}\\n`;\n    report += `- 优化率: ${((totalOptimized / totalKeys) * 100).toFixed(1)}%\\n\\n`;\n    \n    report += `## 详细优化结果\\n\\n`;\n    \n    results.forEach(result => {\n      report += `### ${result.file}\\n`;\n      report += `- 翻译键数: ${result.totalKeys}\\n`;\n      report += `- 优化键数: ${result.optimizedKeys}\\n`;\n      report += `- 建议数: ${result.suggestions.length}\\n\\n`;\n      \n      if (result.suggestions.length > 0) {\n        report += `#### 优化建议:\\n`;\n        result.suggestions.forEach(suggestion => {\n          report += `- **${suggestion.category.toUpperCase()}** (置信度: ${suggestion.confidence}%)\\n`;\n          report += `  - 键: ${suggestion.key}\\n`;\n          report += `  - 当前: \"${suggestion.currentTranslation}\"\\n`;\n          report += `  - 建议: \"${suggestion.suggestedTranslation}\"\\n`;\n          report += `  - 原因: ${suggestion.reason}\\n\\n`;\n        });\n      }\n    });\n    \n    // 统计各类别改进\n    const totalImprovements = results.reduce((sum, r) => ({\n      grammar: sum.grammar + r.improvements.grammar,\n      terminology: sum.terminology + r.improvements.terminology,\n      naturalness: sum.naturalness + r.improvements.naturalness,\n      cultural: sum.cultural + r.improvements.cultural,\n      technical: sum.technical + r.improvements.technical\n    }), { grammar: 0, terminology: 0, naturalness: 0, cultural: 0, technical: 0 });\n    \n    report += `## 改进统计\\n\\n`;\n    report += `- 语法改进: ${totalImprovements.grammar}\\n`;\n    report += `- 术语优化: ${totalImprovements.terminology}\\n`;\n    report += `- 自然度提升: ${totalImprovements.naturalness}\\n`;\n    report += `- 文化适应: ${totalImprovements.cultural}\\n`;\n    report += `- 技术术语: ${totalImprovements.technical}\\n`;\n    \n    return report;\n  }\n}\n\n// 使用示例\nasync function main() {\n  const optimizer = new TajikTranslationOptimizer(process.cwd(), {\n    enableAutoOptimize: false,\n    confidenceThreshold: 70,\n    culturalAdaptationLevel: 'enhanced'\n  });\n  \n  const results = await optimizer.optimizeTranslation();\n  const report = optimizer.generateOptimizationReport(results);\n  \n  console.log(report);\n  \n  // 如果启用自动优化\n  if (optimizer['config'].enableAutoOptimize) {\n    await optimizer.applyOptimizations(results);\n    console.log('\\n✅ 已应用优化建议');\n  }\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/telegram-bot-monitor.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'performance' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'performance' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[556,559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[556,559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1270,1273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1270,1273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"complexity","severity":2,"message":"Method 'recordMessage' has a complexity of 16. Maximum allowed is 10.","line":104,"column":23,"nodeType":"FunctionExpression","messageId":"complex","endLine":145,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":109,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":109,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2876,2891],"text":"(data.telegramId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2876,2891],"text":"(data.telegramId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2876,2891],"text":"(Boolean(data.telegramId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2876,2921],"text":"(data.telegramId ?? existingStatus?.telegramId)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":109,"column":38,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":109,"endColumn":64,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2895,2921],"text":"((existingStatus?.telegramId) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2895,2921],"text":"((existingStatus?.telegramId) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2895,2921],"text":"(Boolean((existingStatus?.telegramId)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2922,2924],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2970,3007],"text":"(data.status ?? existingStatus?.status)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3008,3010],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3054,3056],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":113,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":113,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3085,3098],"text":"(data.attempts != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3085,3098],"text":"(data.attempts ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3085,3098],"text":"(Boolean(data.attempts))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3085,3126],"text":"(data.attempts ?? existingStatus?.attempts)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":113,"column":34,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":113,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3102,3126],"text":"((existingStatus?.attempts) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3102,3126],"text":"((existingStatus?.attempts) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3102,3126],"text":"(Boolean((existingStatus?.attempts)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3127,3129],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":120,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":120,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3327,3368],"text":"(data.priority ?? existingStatus?.priority)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":120,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":120,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3369,3371],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":121,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":121,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3394,3403],"text":"(data.type != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3394,3403],"text":"(data.type ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3394,3403],"text":"(Boolean(data.type))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":121,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":121,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3394,3427],"text":"(data.type ?? existingStatus?.type)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":121,"column":26,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":121,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3407,3427],"text":"((existingStatus?.type) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3407,3427],"text":"((existingStatus?.type) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3407,3427],"text":"(Boolean((existingStatus?.type)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":121,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":121,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3428,3430],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":127,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3521,3535],"text":"status.latency != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3521,3535],"text":"status.latency ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3521,3535],"text":"Boolean(status.latency)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":135,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":135,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3707,3719],"text":"status.error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3707,3719],"text":"status.error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3707,3719],"text":"Boolean(status.error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":137,"column":39,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":137,"endColumn":69,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3820,3850],"text":"(this.errorCounts.get(errorKey) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3820,3850],"text":"(this.errorCounts.get(errorKey) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3820,3850],"text":"(Boolean(this.errorCounts.get(errorKey)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3851,3853],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":213,"column":22,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":213,"endColumn":29,"fix":{"range":[6377,6474],"text":"for (const [errorType, count] of this.errorCounts.entries()) {\n      errorBreakdown[errorType] = count;\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":214,"column":7,"nodeType":"MemberExpression","endLine":214,"endColumn":32},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":268,"column":21,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":268,"endColumn":34,"fix":{"range":[7775,7788],"text":"{trend = 'up';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":269,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":269,"endColumn":42,"fix":{"range":[7815,7830],"text":"{trend = 'down';}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in array predicate return type. Please handle the nullish/empty cases explicitly.","line":293,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorNullableString","endLine":293,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8335,8342],"text":"m.error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8335,8342],"text":"m.error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8335,8342],"text":"Boolean(m.error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[8330,8331],"text":"(m): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":298,"column":19,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":298,"endColumn":26,"fix":{"range":[8462,8661],"text":"for (const m of errorMessages) {\n      if (m.error) {\n        const errorType = this.categorizeError(m.error);\n        errorTypeMap.set(errorType, (errorTypeMap.get(errorType) || 0) + 1);\n      }\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":299,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":299,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8501,8508],"text":"m.error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8501,8508],"text":"m.error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8501,8508],"text":"Boolean(m.error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":301,"column":38,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":301,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8606,8633],"text":"(errorTypeMap.get(errorType) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8606,8633],"text":"(errorTypeMap.get(errorType) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8606,8633],"text":"(Boolean(errorTypeMap.get(errorType)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":301,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":301,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8634,8636],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":392,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorOther","endLine":392,"endColumn":75,"suggestions":[{"messageId":"explicitBooleanReturnType","fix":{"range":[11271,11272],"text":"(m): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":392,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":392,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11276,11285],"text":"(m.latency != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11276,11285],"text":"(m.latency ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11276,11285],"text":"(Boolean(m.latency))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":523,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15047,15050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15047,15050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":535,"column":34,"nodeType":"CallExpression","messageId":"substr","endLine":535,"endColumn":73,"fix":{"range":[15400,15411],"text":"slice(2, 11"}},{"ruleId":"complexity","severity":2,"message":"Method 'categorizeError' has a complexity of 14. Maximum allowed is 10.","line":619,"column":26,"nodeType":"FunctionExpression","messageId":"complex","endLine":637,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":742,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":742,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21090,21093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21090,21093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":3,"fixableWarningCount":2,"source":"/**\n * Telegram Bot 推送监控和调试工具\n * 消息状态监控、推送成功率统计、错误日志和告警机制\n */\n\nimport { EventEmitter } from 'events';\nimport { logger } from '../bot/utils/logger';\nimport { faultToleranceManager } from '../bot/utils/fault-tolerance-manager';\nimport { performance } from 'perf_hooks';\n\nexport interface MessageStatus {\n  messageId: string;\n  telegramId: string;\n  chatId?: string;\n  status: 'pending' | 'processing' | 'sent' | 'delivered' | 'failed' | 'retry';\n  timestamp: Date;\n  attempts: number;\n  lastAttempt?: Date;\n  nextRetry?: Date;\n  error?: string;\n  response?: any;\n  latency?: number;\n  size?: number;\n  priority?: 'high' | 'normal' | 'low';\n  type: string;\n}\n\nexport interface PushMetrics {\n  timestamp: Date;\n  totalMessages: number;\n  successfulMessages: number;\n  failedMessages: number;\n  pendingMessages: number;\n  processingMessages: number;\n  successRate: number;\n  failureRate: number;\n  averageLatency: number;\n  p95Latency: number;\n  p99Latency: number;\n  messagesPerSecond: number;\n  retryCount: number;\n  errorBreakdown: Record<string, number>;\n}\n\nexport interface PushAlert {\n  id: string;\n  level: 'info' | 'warning' | 'error' | 'critical';\n  type: 'success_rate' | 'latency' | 'queue_overflow' | 'error_spike' | 'service_down';\n  message: string;\n  details: any;\n  timestamp: Date;\n  resolved: boolean;\n  resolvedAt?: Date;\n}\n\nexport interface PushConfig {\n  alertThresholds: {\n    successRate: number;\n    averageLatency: number;\n    queueLength: number;\n    errorRate: number;\n    messageRate: number;\n  };\n  monitoringInterval: number;\n  retentionPeriod: number;\n  maxQueueSize: number;\n  maxRetries: number;\n}\n\nexport class TelegramBotPushMonitor extends EventEmitter {\n  private messageStatuses: Map<string, MessageStatus> = new Map();\n  private metricsHistory: PushMetrics[] = [];\n  private alerts: PushAlert[] = [];\n  private config: PushConfig;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private isMonitoring = false;\n  private errorCounts = new Map<string, number>();\n  private latencyData: number[] = [];\n  private startTime = Date.now();\n\n  constructor(config?: Partial<PushConfig>) {\n    super();\n    this.config = {\n      alertThresholds: {\n        successRate: 90,        // 成功率低于90%告警\n        averageLatency: 2000,   // 平均延迟超过2秒告警\n        queueLength: 1000,      // 队列长度超过1000告警\n        errorRate: 10,          // 错误率超过10%告警\n        messageRate: 50         // 每秒消息数低于50告警\n      },\n      monitoringInterval: 5000, // 5秒监控间隔\n      retentionPeriod: 3600000, // 1小时数据保留\n      maxQueueSize: 10000,      // 最大队列大小\n      maxRetries: 5,\n      ...config\n    };\n\n    this.startMonitoring();\n  }\n\n  /**\n   * 记录消息状态\n   */\n  public recordMessage(messageId: string, data: Partial<MessageStatus>): void {\n    const existingStatus = this.messageStatuses.get(messageId);\n    \n    const status: MessageStatus = {\n      messageId,\n      telegramId: data.telegramId || existingStatus?.telegramId || '',\n      chatId: data.chatId,\n      status: data.status || existingStatus?.status || 'pending',\n      timestamp: data.timestamp || new Date(),\n      attempts: data.attempts || existingStatus?.attempts || 0,\n      lastAttempt: data.lastAttempt,\n      nextRetry: data.nextRetry,\n      error: data.error,\n      response: data.response,\n      latency: data.latency,\n      size: data.size,\n      priority: data.priority || existingStatus?.priority || 'normal',\n      type: data.type || existingStatus?.type || 'unknown'\n    };\n\n    this.messageStatuses.set(messageId, status);\n\n    // 记录延迟数据\n    if (status.latency) {\n      this.latencyData.push(status.latency);\n      if (this.latencyData.length > 1000) {\n        this.latencyData.shift(); // 保持数据大小\n      }\n    }\n\n    // 记录错误\n    if (status.error) {\n      const errorKey = this.categorizeError(status.error);\n      this.errorCounts.set(errorKey, (this.errorCounts.get(errorKey) || 0) + 1);\n    }\n\n    // 触发事件\n    this.emit('message:recorded', status);\n    this.emit('message:status_change', status);\n\n    logger.debug('消息状态记录', { messageId, status: status.status });\n  }\n\n  /**\n   * 更新消息状态\n   */\n  public updateMessageStatus(messageId: string, updates: Partial<MessageStatus>): void {\n    const existingStatus = this.messageStatuses.get(messageId);\n    if (!existingStatus) {\n      logger.warn('尝试更新不存在的消息状态', { messageId });\n      return;\n    }\n\n    const updatedStatus = { ...existingStatus, ...updates };\n    this.messageStatuses.set(messageId, updatedStatus);\n\n    this.emit('message:updated', updatedStatus);\n  }\n\n  /**\n   * 获取消息状态\n   */\n  public getMessageStatus(messageId: string): MessageStatus | undefined {\n    return this.messageStatuses.get(messageId);\n  }\n\n  /**\n   * 获取所有消息状态\n   */\n  public getAllMessageStatuses(): MessageStatus[] {\n    return Array.from(this.messageStatuses.values());\n  }\n\n  /**\n   * 获取当前推送指标\n   */\n  public getCurrentMetrics(): PushMetrics {\n    const now = new Date();\n    const messages = this.getAllMessageStatuses();\n    \n    const totalMessages = messages.length;\n    const successfulMessages = messages.filter(m => m.status === 'delivered' || m.status === 'sent').length;\n    const failedMessages = messages.filter(m => m.status === 'failed').length;\n    const pendingMessages = messages.filter(m => m.status === 'pending').length;\n    const processingMessages = messages.filter(m => m.status === 'processing' || m.status === 'retry').length;\n    \n    const successRate = totalMessages > 0 ? (successfulMessages / totalMessages) * 100 : 0;\n    const failureRate = totalMessages > 0 ? (failedMessages / totalMessages) * 100 : 0;\n    \n    // 计算延迟统计\n    const latencies = this.latencyData;\n    const averageLatency = latencies.length > 0 ? \n      latencies.reduce((sum, lat) => sum + lat, 0) / latencies.length : 0;\n    \n    const sortedLatencies = [...latencies].sort((a, b) => a - b);\n    const p95Latency = sortedLatencies.length > 0 ? \n      sortedLatencies[Math.floor(sortedLatencies.length * 0.95)] : 0;\n    const p99Latency = sortedLatencies.length > 0 ? \n      sortedLatencies[Math.floor(sortedLatencies.length * 0.99)] : 0;\n\n    // 计算消息速率（每秒）\n    const runningTime = (now.getTime() - this.startTime) / 1000;\n    const messagesPerSecond = runningTime > 0 ? totalMessages / runningTime : 0;\n\n    // 计算重试次数\n    const retryCount = messages.reduce((sum, m) => sum + (m.attempts - 1), 0);\n\n    // 错误分类统计\n    const errorBreakdown: Record<string, number> = {};\n    this.errorCounts.forEach((count, errorType) => {\n      errorBreakdown[errorType] = count;\n    });\n\n    const metrics: PushMetrics = {\n      timestamp: now,\n      totalMessages,\n      successfulMessages,\n      failedMessages,\n      pendingMessages,\n      processingMessages,\n      successRate,\n      failureRate,\n      averageLatency,\n      p95Latency,\n      p99Latency,\n      messagesPerSecond,\n      retryCount,\n      errorBreakdown\n    };\n\n    return metrics;\n  }\n\n  /**\n   * 获取历史指标\n   */\n  public getMetricsHistory(): PushMetrics[] {\n    return [...this.metricsHistory];\n  }\n\n  /**\n   * 获取推送成功率统计\n   */\n  public getSuccessRateStats(): {\n    current: number;\n    average: number;\n    trend: 'up' | 'down' | 'stable';\n    periods: Array<{ period: string; rate: number }>;\n  } {\n    const current = this.getCurrentMetrics().successRate;\n    \n    // 计算历史平均成功率\n    const recentMetrics = this.metricsHistory.slice(-10); // 最近10个数据点\n    const average = recentMetrics.length > 0 ? \n      recentMetrics.reduce((sum, m) => sum + m.successRate, 0) / recentMetrics.length : \n      current;\n\n    // 计算趋势\n    let trend: 'up' | 'down' | 'stable' = 'stable';\n    if (recentMetrics.length >= 2) {\n      const recent = recentMetrics[recentMetrics.length - 1].successRate;\n      const previous = recentMetrics[recentMetrics.length - 2].successRate;\n      const diff = recent - previous;\n      \n      if (diff > 1) trend = 'up';\n      else if (diff < -1) trend = 'down';\n    }\n\n    // 生成时间段统计\n    const periods = this.generateTimePeriods();\n\n    return {\n      current,\n      average,\n      trend,\n      periods\n    };\n  }\n\n  /**\n   * 获取错误分析\n   */\n  public getErrorAnalysis(): {\n    totalErrors: number;\n    errorTypes: Array<{ type: string; count: number; percentage: number }>;\n    recentErrors: MessageStatus[];\n    topErrors: Array<{ error: string; count: number }>;\n  } {\n    const messages = this.getAllMessageStatuses();\n    const errorMessages = messages.filter(m => m.error);\n    const totalErrors = errorMessages.length;\n\n    // 错误类型统计\n    const errorTypeMap = new Map<string, number>();\n    errorMessages.forEach(m => {\n      if (m.error) {\n        const errorType = this.categorizeError(m.error);\n        errorTypeMap.set(errorType, (errorTypeMap.get(errorType) || 0) + 1);\n      }\n    });\n\n    const errorTypes = Array.from(errorTypeMap.entries()).map(([type, count]) => ({\n      type,\n      count,\n      percentage: totalErrors > 0 ? (count / totalErrors) * 100 : 0\n    })).sort((a, b) => b.count - a.count);\n\n    // 最近错误（最多50个）\n    const recentErrors = errorMessages\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, 50);\n\n    // 最高频错误\n    const topErrors = errorTypes.slice(0, 10).map(et => ({\n      error: et.type,\n      count: et.count\n    }));\n\n    return {\n      totalErrors,\n      errorTypes,\n      recentErrors,\n      topErrors\n    };\n  }\n\n  /**\n   * 获取性能分析\n   */\n  public getPerformanceAnalysis(): {\n    latency: {\n      average: number;\n      p50: number;\n      p95: number;\n      p99: number;\n      max: number;\n    };\n    throughput: {\n      messagesPerSecond: number;\n      peakRate: number;\n      averageRate: number;\n    };\n    queue: {\n      currentSize: number;\n      maxSize: number;\n      utilization: number;\n      averageWaitTime: number;\n    };\n    reliability: {\n      successRate: number;\n      retryRate: number;\n      timeoutRate: number;\n    };\n  } {\n    const metrics = this.getCurrentMetrics();\n    const latencies = this.latencyData;\n    \n    const sortedLatencies = [...latencies].sort((a, b) => a - b);\n    const latencyStats = {\n      average: metrics.averageLatency,\n      p50: sortedLatencies.length > 0 ? sortedLatencies[Math.floor(sortedLatencies.length * 0.5)] : 0,\n      p95: metrics.p95Latency,\n      p99: metrics.p99Latency,\n      max: sortedLatencies.length > 0 ? Math.max(...sortedLatencies) : 0\n    };\n\n    // 计算吞吐量统计\n    const recentMetrics = this.metricsHistory.slice(-60); // 最近5分钟\n    const rates = recentMetrics.map(m => m.messagesPerSecond);\n    const throughputStats = {\n      messagesPerSecond: metrics.messagesPerSecond,\n      peakRate: rates.length > 0 ? Math.max(...rates) : 0,\n      averageRate: rates.length > 0 ? rates.reduce((sum, r) => sum + r, 0) / rates.length : 0\n    };\n\n    // 队列统计\n    const queueMetrics = faultToleranceManager.getMetrics().messageQueue;\n    const queueStats = {\n      currentSize: queueMetrics.queueLength,\n      maxSize: this.config.maxQueueSize,\n      utilization: (queueMetrics.queueLength / this.config.maxQueueSize) * 100,\n      averageWaitTime: metrics.averageLatency // 简化的等待时间\n    };\n\n    // 可靠性统计\n    const messages = this.getAllMessageStatuses();\n    const totalAttempts = messages.reduce((sum, m) => sum + m.attempts, 0);\n    const retryRate = totalAttempts > 0 ? ((totalAttempts - messages.length) / totalAttempts) * 100 : 0;\n    const timeoutRate = messages.filter(m => m.latency && m.latency > 5000).length / messages.length * 100;\n\n    const reliabilityStats = {\n      successRate: metrics.successRate,\n      retryRate,\n      timeoutRate\n    };\n\n    return {\n      latency: latencyStats,\n      throughput: throughputStats,\n      queue: queueStats,\n      reliability: reliabilityStats\n    };\n  }\n\n  /**\n   * 启动监控\n   */\n  public startMonitoring(): void {\n    if (this.isMonitoring) {\n      logger.info('监控已经在运行中');\n      return;\n    }\n\n    this.isMonitoring = true;\n    logger.info('启动Telegram Bot推送监控');\n\n    // 设置监控定时器\n    this.monitoringInterval = setInterval(() => {\n      this.collectMetrics();\n      this.checkAlerts();\n      this.cleanupOldData();\n    }, this.config.monitoringInterval);\n\n    this.emit('monitoring:started');\n  }\n\n  /**\n   * 停止监控\n   */\n  public stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = false;\n\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    logger.info('Telegram Bot推送监控已停止');\n    this.emit('monitoring:stopped');\n  }\n\n  /**\n   * 收集指标\n   */\n  private collectMetrics(): void {\n    try {\n      const metrics = this.getCurrentMetrics();\n      this.metricsHistory.push(metrics);\n\n      // 保持历史数据大小\n      const maxHistory = Math.floor(this.config.retentionPeriod / this.config.monitoringInterval);\n      if (this.metricsHistory.length > maxHistory) {\n        this.metricsHistory = this.metricsHistory.slice(-maxHistory);\n      }\n\n      this.emit('metrics:collected', metrics);\n\n    } catch (error) {\n      logger.error('收集推送指标失败', { error: (error as Error).message }, error as Error);\n    }\n  }\n\n  /**\n   * 检查告警条件\n   */\n  private checkAlerts(): void {\n    const metrics = this.getCurrentMetrics();\n\n    // 检查成功率告警\n    if (metrics.successRate < this.config.alertThresholds.successRate) {\n      this.createAlert('warning', 'success_rate', \n        `推送成功率低于阈值: ${metrics.successRate.toFixed(2)}% < ${this.config.alertThresholds.successRate}%`,\n        { successRate: metrics.successRate, threshold: this.config.alertThresholds.successRate }\n      );\n    }\n\n    // 检查延迟告警\n    if (metrics.averageLatency > this.config.alertThresholds.averageLatency) {\n      this.createAlert('warning', 'latency',\n        `平均延迟过高: ${metrics.averageLatency.toFixed(2)}ms > ${this.config.alertThresholds.averageLatency}ms`,\n        { averageLatency: metrics.averageLatency, threshold: this.config.alertThresholds.averageLatency }\n      );\n    }\n\n    // 检查队列长度告警\n    const queueLength = faultToleranceManager.getMetrics().messageQueue.queueLength;\n    if (queueLength > this.config.alertThresholds.queueLength) {\n      this.createAlert('error', 'queue_overflow',\n        `消息队列溢出: ${queueLength} > ${this.config.alertThresholds.queueLength}`,\n        { queueLength, threshold: this.config.alertThresholds.queueLength }\n      );\n    }\n\n    // 检查错误率告警\n    const errorRate = metrics.failureRate;\n    if (errorRate > this.config.alertThresholds.errorRate) {\n      this.createAlert('error', 'error_spike',\n        `错误率激增: ${errorRate.toFixed(2)}% > ${this.config.alertThresholds.errorRate}%`,\n        { errorRate, threshold: this.config.alertThresholds.errorRate }\n      );\n    }\n\n    // 检查消息速率告警\n    if (metrics.messagesPerSecond < this.config.alertThresholds.messageRate) {\n      this.createAlert('warning', 'service_down',\n        `消息处理速率过低: ${metrics.messagesPerSecond.toFixed(2)} msg/s < ${this.config.alertThresholds.messageRate} msg/s`,\n        { messageRate: metrics.messagesPerSecond, threshold: this.config.alertThresholds.messageRate }\n      );\n    }\n  }\n\n  /**\n   * 创建告警\n   */\n  private createAlert(level: PushAlert['level'], type: PushAlert['type'], \n                     message: string, details: any): void {\n    // 检查是否已经有相同的活跃告警\n    const existingAlert = this.alerts.find(a => \n      a.type === type && !a.resolved && \n      Math.abs(a.timestamp.getTime() - Date.now()) < 300000 // 5分钟内的相同告警\n    );\n\n    if (existingAlert) {\n      return; // 避免重复告警\n    }\n\n    const alert: PushAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      level,\n      type,\n      message,\n      details,\n      timestamp: new Date(),\n      resolved: false\n    };\n\n    this.alerts.push(alert);\n    this.emit('alert:created', alert);\n\n    // 记录告警日志\n    switch (level) {\n      case 'critical':\n        logger.error(`🚨 [CRITICAL ALERT] ${message}`, details);\n        break;\n      case 'error':\n        logger.error(`❌ [ERROR ALERT] ${message}`, details);\n        break;\n      case 'warning':\n        logger.warn(`⚠️ [WARNING ALERT] ${message}`, details);\n        break;\n      case 'info':\n        logger.info(`ℹ️ [INFO ALERT] ${message}`, details);\n        break;\n    }\n  }\n\n  /**\n   * 解析告警\n   */\n  public resolveAlert(alertId: string): void {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert && !alert.resolved) {\n      alert.resolved = true;\n      alert.resolvedAt = new Date();\n      \n      this.emit('alert:resolved', alert);\n      logger.info(`告警已解析: ${alert.message}`, { alertId });\n    }\n  }\n\n  /**\n   * 获取活跃告警\n   */\n  public getActiveAlerts(): PushAlert[] {\n    return this.alerts.filter(a => !a.resolved);\n  }\n\n  /**\n   * 获取所有告警\n   */\n  public getAllAlerts(): PushAlert[] {\n    return [...this.alerts];\n  }\n\n  /**\n   * 清理旧数据\n   */\n  private cleanupOldData(): void {\n    const cutoffTime = Date.now() - this.config.retentionPeriod;\n\n    // 清理消息状态\n    for (const [messageId, status] of this.messageStatuses.entries()) {\n      if (status.timestamp.getTime() < cutoffTime) {\n        this.messageStatuses.delete(messageId);\n      }\n    }\n\n    // 清理历史指标\n    this.metricsHistory = this.metricsHistory.filter(m => \n      m.timestamp.getTime() >= cutoffTime\n    );\n\n    // 清理已解析的旧告警\n    this.alerts = this.alerts.filter(a => \n      !a.resolved || a.timestamp.getTime() >= cutoffTime\n    );\n  }\n\n  /**\n   * 分类错误\n   */\n  private categorizeError(error: string): string {\n    const lowerError = error.toLowerCase();\n    \n    if (lowerError.includes('network') || lowerError.includes('timeout') || lowerError.includes('connection')) {\n      return 'network_error';\n    } else if (lowerError.includes('rate limit') || lowerError.includes('too many')) {\n      return 'rate_limit_error';\n    } else if (lowerError.includes('not found') || lowerError.includes('invalid')) {\n      return 'validation_error';\n    } else if (lowerError.includes('permission') || lowerError.includes('unauthorized')) {\n      return 'permission_error';\n    } else if (lowerError.includes('quota') || lowerError.includes('exceeded')) {\n      return 'quota_error';\n    } else if (lowerError.includes('database') || lowerError.includes('sql')) {\n      return 'database_error';\n    } else {\n      return 'unknown_error';\n    }\n  }\n\n  /**\n   * 生成时间段统计\n   */\n  private generateTimePeriods(): Array<{ period: string; rate: number }> {\n    const now = new Date();\n    const periods = [];\n    \n    for (let i = 6; i >= 0; i--) {\n      const periodStart = new Date(now.getTime() - i * 60 * 60 * 1000); // 每小时\n      const periodEnd = new Date(periodStart.getTime() + 60 * 60 * 1000);\n      \n      const periodMessages = this.getAllMessageStatuses().filter(m => \n        m.timestamp >= periodStart && m.timestamp <= periodEnd\n      );\n      \n      const periodSuccess = periodMessages.filter(m => \n        m.status === 'delivered' || m.status === 'sent'\n      ).length;\n      \n      const rate = periodMessages.length > 0 ? (periodSuccess / periodMessages.length) * 100 : 0;\n      \n      periods.push({\n        period: `${periodStart.getHours()}:00`,\n        rate\n      });\n    }\n    \n    return periods;\n  }\n\n  /**\n   * 生成监控报告\n   */\n  public generateMonitorReport(): string {\n    const metrics = this.getCurrentMetrics();\n    const successStats = this.getSuccessRateStats();\n    const errorAnalysis = this.getErrorAnalysis();\n    const performanceAnalysis = this.getPerformanceAnalysis();\n    const alerts = this.getActiveAlerts();\n\n    const report = `\n# Telegram Bot 推送监控报告\n\n**生成时间:** ${new Date().toISOString()}\n\n## 推送指标概览\n\n| 指标 | 数值 |\n|------|------|\n| 总消息数 | ${metrics.totalMessages} |\n| 成功消息 | ${metrics.successfulMessages} |\n| 失败消息 | ${metrics.failedMessages} |\n| 成功率 | ${metrics.successRate.toFixed(2)}% |\n| 平均延迟 | ${metrics.averageLatency.toFixed(2)}ms |\n| 消息速率 | ${metrics.messagesPerSecond.toFixed(2)} msg/s |\n\n## 成功率趋势\n\n- **当前成功率:** ${successStats.current.toFixed(2)}%\n- **平均成功率:** ${successStats.average.toFixed(2)}%\n- **趋势:** ${successStats.trend === 'up' ? '📈 上升' : successStats.trend === 'down' ? '📉 下降' : '➡️ 稳定'}\n\n## 错误分析\n\n- **总错误数:** ${errorAnalysis.totalErrors}\n- **错误类型分布:**\n${errorAnalysis.errorTypes.map(et => `  - ${et.type}: ${et.count} (${et.percentage.toFixed(1)}%)`).join('\\n')}\n\n## 性能分析\n\n### 延迟统计\n- 平均延迟: ${performanceAnalysis.latency.average.toFixed(2)}ms\n- P50延迟: ${performanceAnalysis.latency.p50.toFixed(2)}ms\n- P95延迟: ${performanceAnalysis.latency.p95.toFixed(2)}ms\n- P99延迟: ${performanceAnalysis.latency.p99.toFixed(2)}ms\n\n### 吞吐量\n- 当前速率: ${performanceAnalysis.throughput.messagesPerSecond.toFixed(2)} msg/s\n- 峰值速率: ${performanceAnalysis.throughput.peakRate.toFixed(2)} msg/s\n- 平均速率: ${performanceAnalysis.throughput.averageRate.toFixed(2)} msg/s\n\n### 队列状态\n- 当前队列长度: ${performanceAnalysis.queue.currentSize}\n- 队列利用率: ${performanceAnalysis.queue.utilization.toFixed(1)}%\n- 平均等待时间: ${performanceAnalysis.queue.averageWaitTime.toFixed(2)}ms\n\n## 活跃告警\n\n${alerts.length > 0 ? alerts.map(alert => \n  `- **${alert.level.toUpperCase()}:** ${alert.message} (${alert.timestamp.toISOString()})`\n).join('\\n') : '✅ 无活跃告警'}\n\n## 建议\n\n${this.generateRecommendations(metrics, performanceAnalysis, alerts)}\n`;\n\n    return report;\n  }\n\n  /**\n   * 生成改进建议\n   */\n  private generateRecommendations(metrics: PushMetrics, performance: any, alerts: PushAlert[]): string {\n    const recommendations = [];\n\n    // 基于成功率提供建议\n    if (metrics.successRate < 95) {\n      recommendations.push('• **改进成功率**: 检查网络连接和Telegram API配置');\n    }\n\n    // 基于延迟提供建议\n    if (metrics.averageLatency > 1000) {\n      recommendations.push('• **优化延迟**: 考虑增加并发数或优化数据库查询');\n    }\n\n    // 基于队列长度提供建议\n    if (performance.queue.utilization > 80) {\n      recommendations.push('• **队列扩容**: 当前队列使用率过高，建议增加处理能力');\n    }\n\n    // 基于错误率提供建议\n    if (metrics.failureRate > 5) {\n      recommendations.push('• **错误处理**: 错误率较高，建议检查错误日志并实施修复');\n    }\n\n    // 基于告警提供建议\n    if (alerts.length > 0) {\n      recommendations.push('• **告警处理**: 有活跃告警需要处理，请查看告警详情');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('• **系统状态良好**: 当前各项指标均在正常范围内');\n    }\n\n    return recommendations.join('\\n');\n  }\n\n  /**\n   * 获取监控状态\n   */\n  public getMonitorStatus(): {\n    isMonitoring: boolean;\n    uptime: number;\n    messageCount: number;\n    alertCount: number;\n    lastUpdate: Date;\n  } {\n    return {\n      isMonitoring: this.isMonitoring,\n      uptime: Date.now() - this.startTime,\n      messageCount: this.messageStatuses.size,\n      alertCount: this.alerts.length,\n      lastUpdate: new Date()\n    };\n  }\n\n  /**\n   * 导出监控数据\n   */\n  public exportData(): {\n    messages: MessageStatus[];\n    metrics: PushMetrics[];\n    alerts: PushAlert[];\n    config: PushConfig;\n  } {\n    return {\n      messages: this.getAllMessageStatuses(),\n      metrics: this.getMetricsHistory(),\n      alerts: this.getAllAlerts(),\n      config: this.config\n    };\n  }\n}\n\n// 导出单例实例\nexport const pushMonitor = new TelegramBotPushMonitor();\n\n// 启动全局监控\npushMonitor.startMonitoring();\n\n// 事件监听器\npushMonitor.on('metrics:collected', (metrics: PushMetrics) => {\n  if (metrics.successRate < 90) {\n    logger.warn('推送成功率较低', { successRate: metrics.successRate });\n  }\n});\n\npushMonitor.on('alert:created', (alert: PushAlert) => {\n  logger.error('推送监控告警', { alertType: alert.type, message: alert.message });\n});\n\nexport default TelegramBotPushMonitor;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/telegram-bot-tester.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): utils/telegram-bot-tester.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Bot推送测试工具\n * 模拟Bot消息和响应，验证多语言通知生成，测试消息发送和状态反馈\n */\n\nimport { EventEmitter } from 'events';\nimport { Markup } from 'telegraf';\nimport { logger } from './utils/logger';\nimport { NotificationTemplateManager, Language, NotificationType, UserContext } from './utils/notification-templates';\nimport { messageQueue } from './utils/message-queue';\nimport { faultToleranceManager } from './utils/fault-tolerance-manager';\n\nexport interface TestUser {\n  telegramId: string;\n  userId: number;\n  username: string;\n  firstName: string;\n  lastName?: string;\n  language: Language;\n  balance: number;\n  platformBalance: number;\n  vipLevel: number;\n  isActive: boolean;\n  createdAt: Date;\n}\n\nexport interface TestMessage {\n  id: string;\n  type: string;\n  payload: any;\n  status: 'pending' | 'processing' | 'success' | 'failed';\n  createdAt: Date;\n  sentAt?: Date;\n  error?: string;\n  retryCount: number;\n}\n\nexport interface TestResult {\n  testId: string;\n  testName: string;\n  success: boolean;\n  duration: number;\n  messageCount: number;\n  errorCount: number;\n  successRate: number;\n  details: any;\n  timestamp: Date;\n}\n\nexport class TelegramBotTester extends EventEmitter {\n  private testUsers: Map<string, TestUser> = new Map();\n  private testMessages: Map<string, TestMessage> = new Map();\n  private testResults: TestResult[] = [];\n  private isRunning = false;\n  private mockBotResponses = new Map<string, any>();\n\n  constructor() {\n    super();\n    this.setupMockBotResponses();\n  }\n\n  /**\n   * 设置模拟Bot响应\n   */\n  private setupMockBotResponses() {\n    // 模拟成功响应\n    this.mockBotResponses.set('success', {\n      ok: true,\n      result: {\n        message_id: Math.floor(Math.random() * 1000000),\n        date: Math.floor(Date.now() / 1000),\n        chat: { id: 12345, type: 'private' },\n        text: 'Mock success response'\n      }\n    });\n\n    // 模拟失败响应\n    this.mockBotResponses.set('failure', {\n      ok: false,\n      error_code: 400,\n      description: 'Bad Request: chat not found'\n    });\n\n    // 模拟网络错误\n    this.mockBotResponses.set('network_error', {\n      error: 'ENOTFOUND',\n      message: 'getaddrinfo ENOTFOUND api.telegram.org'\n    });\n  }\n\n  /**\n   * 初始化测试用户\n   */\n  public async initializeTestUsers(languageDistribution?: Partial<Record<Language, number>>): Promise<void> {\n    const distribution = languageDistribution || {\n      [Language.ZH]: 30,\n      [Language.EN]: 25,\n      [Language.RU]: 25,\n      [Language.TJ]: 20\n    };\n\n    const totalUsers = Object.values(distribution).reduce((sum, count) => sum + count, 0);\n    \n    logger.info(`初始化 ${totalUsers} 个测试用户`, { distribution });\n\n    let userId = 1;\n    for (const [language, count] of Object.entries(distribution)) {\n      for (let i = 0; i < count; i++) {\n        const telegramId = `test_user_${language}_${userId}_${Date.now()}`;\n        const user: TestUser = {\n          telegramId,\n          userId: userId++,\n          username: `user_${language}_${i}`,\n          firstName: `${['张三', 'John', 'Иван', 'Аҳмад'][this.getLanguageIndex(language as Language)]}`,\n          lastName: `${['李四', 'Smith', 'Иванов', 'Собиров'][this.getLanguageIndex(language as Language)]}`,\n          language: language as Language,\n          balance: Math.floor(Math.random() * 500) + 50,\n          platformBalance: Math.floor(Math.random() * 1000),\n          vipLevel: Math.floor(Math.random() * 6),\n          isActive: true,\n          createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // 30天内的随机日期\n        };\n\n        this.testUsers.set(telegramId, user);\n      }\n    }\n\n    logger.info(`测试用户初始化完成，共 ${this.testUsers.size} 个用户`);\n    this.emit('users:initialized', { userCount: this.testUsers.size });\n  }\n\n  /**\n   * 模拟Bot消息处理\n   */\n  public async simulateBotCommand(command: string, userId?: string): Promise<TestResult> {\n    const startTime = Date.now();\n    const testId = `cmd_${command}_${Date.now()}`;\n    \n    logger.info(`开始模拟Bot命令: ${command}`, { testId, userId });\n\n    try {\n      const users = userId ? [this.testUsers.get(userId)!].filter(Boolean) : Array.from(this.testUsers.values());\n      const results = [];\n      let errorCount = 0;\n\n      for (const user of users) {\n        try {\n          // 模拟用户上下文\n          const userContext: UserContext = {\n            telegramId: user.telegramId,\n            userId: user.userId,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            language: user.language,\n            balance: user.balance,\n            platformBalance: user.platformBalance,\n            vipLevel: user.vipLevel\n          };\n\n          // 根据命令类型生成相应的通知\n          let notificationType: NotificationType;\n          let variables: Record<string, any> = {};\n\n          switch (command) {\n            case 'start':\n              notificationType = NotificationType.WELCOME_MESSAGE;\n              variables = {\n                firstName: user.firstName,\n                balance: user.balance,\n                appUrl: 'https://app.example.com'\n              };\n              break;\n            case 'balance':\n              notificationType = NotificationType.BALANCE_QUERY;\n              variables = {\n                balance: user.balance,\n                platformBalance: user.platformBalance,\n                vipLevel: user.vipLevel,\n                freeCount: Math.floor(Math.random() * 4),\n                appUrl: 'https://app.example.com'\n              };\n              break;\n            case 'orders':\n              notificationType = NotificationType.ORDER_QUERY;\n              variables = {\n                firstName: user.firstName,\n                hasOrders: Math.random() > 0.5,\n                orderCount: Math.floor(Math.random() * 10),\n                orderList: this.generateOrderList(user.language),\n                appUrl: 'https://app.example.com'\n              };\n              break;\n            case 'help':\n              notificationType = NotificationType.HELP_MESSAGE;\n              variables = {};\n              break;\n            case 'language':\n              notificationType = NotificationType.LANGUAGE_SELECTION;\n              variables = {};\n              break;\n            default:\n              notificationType = NotificationType.SYSTEM_NOTIFICATION;\n              variables = {\n                title: 'Unknown Command',\n                content: `Command \"${command}\" is not recognized`\n              };\n          }\n\n          // 生成通知内容\n          const data = {\n            user: userContext,\n            type: notificationType,\n            variables\n          };\n\n          const validation = NotificationTemplateManager.validateNotificationData(data);\n          if (!validation.valid) {\n            throw new Error(`通知数据验证失败: ${validation.errors.join(', ')}`);\n          }\n\n          const notification = NotificationTemplateManager.generateNotification(data);\n\n          // 验证通知内容\n          this.validateNotification(notification, user.language);\n\n          // 模拟消息发送\n          const messageId = await this.simulateMessageSend(user.telegramId, notification);\n\n          results.push({\n            userId: user.telegramId,\n            messageId,\n            language: user.language,\n            success: true\n          });\n\n        } catch (error) {\n          errorCount++;\n          logger.error(`用户 ${user.telegramId} 命令执行失败`, {\n            command,\n            error: (error as Error).message\n          });\n\n          results.push({\n            userId: user.telegramId,\n            error: (error as Error).message,\n            success: false\n          });\n        }\n      }\n\n      const duration = Date.now() - startTime;\n      const successCount = results.filter(r => r.success).length;\n      const successRate = (successCount / results.length) * 100;\n\n      const testResult: TestResult = {\n        testId,\n        testName: `Bot Command: ${command}`,\n        success: errorCount === 0,\n        duration,\n        messageCount: results.length,\n        errorCount,\n        successRate,\n        details: {\n          command,\n          results: results.slice(0, 10) // 只保存前10个结果详情\n        },\n        timestamp: new Date()\n      };\n\n      this.testResults.push(testResult);\n      this.emit('command:tested', testResult);\n\n      return testResult;\n\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const testResult: TestResult = {\n        testId,\n        testName: `Bot Command: ${command}`,\n        success: false,\n        duration,\n        messageCount: 0,\n        errorCount: 1,\n        successRate: 0,\n        details: { error: (error as Error).message },\n        timestamp: new Date()\n      };\n\n      this.testResults.push(testResult);\n      this.emit('command:tested', testResult);\n\n      return testResult;\n    }\n  }\n\n  /**\n   * 模拟消息发送\n   */\n  private async simulateMessageSend(telegramId: string, notification: any): Promise<string> {\n    const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // 创建测试消息\n    const testMessage: TestMessage = {\n      id: messageId,\n      type: 'telegram',\n      payload: { telegramId, notification },\n      status: 'pending',\n      createdAt: new Date(),\n      retryCount: 0\n    };\n\n    this.testMessages.set(messageId, testMessage);\n\n    // 模拟发送过程\n    try {\n      testMessage.status = 'processing';\n      \n      // 模拟网络延迟\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 500 + 100));\n\n      // 模拟发送结果（90%成功率）\n      const success = Math.random() > 0.1;\n      \n      if (success) {\n        testMessage.status = 'success';\n        testMessage.sentAt = new Date();\n        \n        // 添加到消息队列\n        await faultToleranceManager.getMessageQueue().addMessage('telegram', {\n          type: 'send_message',\n          chatId: telegramId,\n          text: notification.message,\n          keyboard: notification.keyboard,\n          parseMode: notification.parseMode\n        });\n\n      } else {\n        throw new Error('Simulated send failure');\n      }\n\n    } catch (error) {\n      testMessage.status = 'failed';\n      testMessage.error = (error as Error).message;\n      testMessage.retryCount++;\n\n      // 模拟重试\n      if (testMessage.retryCount < 3) {\n        testMessage.status = 'pending';\n        // 这里可以实现重试逻辑\n      }\n    }\n\n    return messageId;\n  }\n\n  /**\n   * 验证通知内容\n   */\n  private validateNotification(notification: any, language: Language): void {\n    expect(notification).toBeDefined();\n    expect(notification.title).toBeDefined();\n    expect(typeof notification.title).toBe('string');\n    expect(notification.message).toBeDefined();\n    expect(typeof notification.message).toBe('string');\n    expect(notification.message.length).toBeGreaterThan(0);\n\n    // 验证语言特定的标识\n    const languageIndicators = {\n      [Language.ZH]: ['您的', '余额', '账户'],\n      [Language.EN]: ['Your', 'balance', 'account'],\n      [Language.RU]: ['Ваш', 'баланс', 'аккаунт'],\n      [Language.TJ]: ['Шумо', 'баланс', 'ҳисса']\n    };\n\n    const indicators = languageIndicators[language];\n    const hasLanguageIndicator = indicators.some(indicator => \n      notification.message.includes(indicator)\n    );\n\n    // 注意：这里可能因为模板内容而验证失败，所以改为警告\n    if (!hasLanguageIndicator) {\n      logger.warn('通知可能不包含语言特定标识', { language, message: notification.message });\n    }\n  }\n\n  /**\n   * 测试所有通知类型\n   */\n  public async testAllNotificationTypes(): Promise<TestResult[]> {\n    logger.info('开始测试所有通知类型');\n    \n    const supportedTypes = NotificationTemplateManager.getSupportedTypes();\n    const testResults: TestResult[] = [];\n\n    for (const type of supportedTypes) {\n      const result = await this.testNotificationType(type);\n      testResults.push(result);\n    }\n\n    return testResults;\n  }\n\n  /**\n   * 测试特定通知类型\n   */\n  public async testNotificationType(type: NotificationType): Promise<TestResult> {\n    const startTime = Date.now();\n    const testId = `notification_${type}_${Date.now()}`;\n\n    logger.info(`测试通知类型: ${type}`, { testId });\n\n    try {\n      const results = [];\n      let errorCount = 0;\n\n      // 为每种语言测试通知\n      const languages = [Language.ZH, Language.EN, Language.RU, Language.TJ];\n      \n      for (const language of languages) {\n        const user = this.getRandomUserByLanguage(language);\n        if (!user) continue;\n\n        try {\n          const notification = this.generateTestNotification(user, type);\n          \n          // 验证通知\n          this.validateNotification(notification, language);\n\n          // 模拟发送\n          const messageId = await this.simulateMessageSend(user.telegramId, notification);\n\n          results.push({\n            userId: user.telegramId,\n            language,\n            messageId,\n            success: true\n          });\n\n        } catch (error) {\n          errorCount++;\n          logger.error(`通知类型测试失败`, {\n            type,\n            language,\n            error: (error as Error).message\n          });\n\n          results.push({\n            userId: user.telegramId,\n            language,\n            error: (error as Error).message,\n            success: false\n          });\n        }\n      }\n\n      const duration = Date.now() - startTime;\n      const successCount = results.filter(r => r.success).length;\n      const successRate = (successCount / results.length) * 100;\n\n      const testResult: TestResult = {\n        testId,\n        testName: `Notification Type: ${type}`,\n        success: errorCount === 0,\n        duration,\n        messageCount: results.length,\n        errorCount,\n        successRate,\n        details: { type, results },\n        timestamp: new Date()\n      };\n\n      this.testResults.push(testResult);\n      this.emit('notification:tested', testResult);\n\n      return testResult;\n\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const testResult: TestResult = {\n        testId,\n        testName: `Notification Type: ${type}`,\n        success: false,\n        duration,\n        messageCount: 0,\n        errorCount: 1,\n        successRate: 0,\n        details: { error: (error as Error).message },\n        timestamp: new Date()\n      };\n\n      this.testResults.push(testResult);\n      this.emit('notification:tested', testResult);\n\n      return testResult;\n    }\n  }\n\n  /**\n   * 生成测试通知\n   */\n  private generateTestNotification(user: TestUser, type: NotificationType): any {\n    const variables = this.generateTestVariables(user, type);\n    \n    const data = {\n      user: {\n        telegramId: user.telegramId,\n        userId: user.userId,\n        username: user.username,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        language: user.language,\n        balance: user.balance,\n        platformBalance: user.platformBalance,\n        vipLevel: user.vipLevel\n      },\n      type,\n      variables\n    };\n\n    return NotificationTemplateManager.generateNotification(data);\n  }\n\n  /**\n   * 生成测试变量\n   */\n  private generateTestVariables(user: TestUser, type: NotificationType): Record<string, any> {\n    const baseVariables = {\n      firstName: user.firstName,\n      balance: user.balance,\n      platformBalance: user.platformBalance,\n      vipLevel: user.vipLevel,\n      appUrl: 'https://app.example.com'\n    };\n\n    const typeSpecificVariables: Record<NotificationType, Record<string, any>> = {\n      [NotificationType.WELCOME_MESSAGE]: baseVariables,\n      [NotificationType.REGISTRATION_REWARD]: {\n        ...baseVariables,\n        rewardAmount: 50\n      },\n      [NotificationType.BALANCE_QUERY]: {\n        ...baseVariables,\n        freeCount: Math.floor(Math.random() * 4)\n      },\n      [NotificationType.ORDER_QUERY]: {\n        ...baseVariables,\n        hasOrders: Math.random() > 0.3,\n        orderCount: Math.floor(Math.random() * 10),\n        orderList: this.generateOrderList(user.language)\n      },\n      [NotificationType.ORDER_STATUS_CHANGE]: {\n        ...baseVariables,\n        orderNumber: `TEST_${Date.now()}`,\n        status: '已支付',\n        amount: Math.floor(Math.random() * 1000) + 100,\n        hasTracking: Math.random() > 0.5\n      },\n      [NotificationType.PAYMENT_SUCCESS]: {\n        ...baseVariables,\n        orderNumber: `TEST_${Date.now()}`,\n        amount: Math.floor(Math.random() * 1000) + 100,\n        productName: '测试商品'\n      },\n      [NotificationType.LOTTERY_RESULT_WIN]: {\n        ...baseVariables,\n        productName: 'iPhone 15',\n        roundId: `ROUND_${Date.now()}`,\n        prizeValue: 5000\n      },\n      [NotificationType.LOTTERY_RESULT_LOSE]: {\n        ...baseVariables,\n        productName: 'Samsung Galaxy',\n        roundId: `ROUND_${Date.now()}`,\n        participants: Math.floor(Math.random() * 1000) + 100\n      },\n      [NotificationType.VIP_LEVEL_UP]: {\n        ...baseVariables,\n        oldLevel: Math.floor(user.vipLevel / 2),\n        newLevel: user.vipLevel,\n        benefits: '• 5% 折扣\\n• 优先发货\\n• 专属客服'\n      },\n      [NotificationType.SYSTEM_NOTIFICATION]: {\n        ...baseVariables,\n        title: '系统维护通知',\n        content: '系统将于今晚23:00-01:00进行维护升级'\n      },\n      [NotificationType.HELP_MESSAGE]: baseVariables,\n      [NotificationType.LANGUAGE_SELECTION]: baseVariables,\n      [NotificationType.LANGUAGE_CHANGED]: {\n        ...baseVariables,\n        newLanguage: user.language\n      },\n      // 默认处理其他类型\n      ...Object.fromEntries(\n        Object.values(NotificationType)\n          .filter(t => !Object.keys(typeSpecificVariables).includes(t))\n          .map(t => [t, baseVariables])\n      )\n    };\n\n    return typeSpecificVariables[type] || baseVariables;\n  }\n\n  /**\n   * 生成订单列表\n   */\n  private generateOrderList(language: Language): string {\n    const orderTemplates = {\n      [Language.ZH]: (orderNumber: string, status: string, amount: number) => \n        `订单 ${orderNumber}\\n状态: ${status}\\n金额: ${amount} TJS`,\n      [Language.EN]: (orderNumber: string, status: string, amount: number) => \n        `Order ${orderNumber}\\nStatus: ${status}\\nAmount: ${amount} TJS`,\n      [Language.RU]: (orderNumber: string, status: string, amount: number) => \n        `Заказ ${orderNumber}\\nСтатус: ${status}\\nСумма: ${amount} TJS`,\n      [Language.TJ]: (orderNumber: string, status: string, amount: number) => \n        `Фармоиш ${orderNumber}\\nҲолат: ${status}\\nМаблағ: ${amount} TJS`\n    };\n\n    const template = orderTemplates[language] || orderTemplates[Language.ZH];\n    const statuses = {\n      [Language.ZH]: ['待支付', '已支付', '已发货', '已完成'],\n      [Language.EN]: ['Pending', 'Paid', 'Shipped', 'Delivered'],\n      [Language.RU]: ['Ожидает оплаты', 'Оплачен', 'Отправлен', 'Доставлен'],\n      [Language.TJ]: ['Интизори пардохт', 'Пардохт шудааст', 'Ирсол шудааст', 'Расонида шудааст']\n    };\n\n    const statusList = statuses[language] || statuses[Language.ZH];\n    \n    const orderCount = Math.floor(Math.random() * 3) + 1;\n    const orders = [];\n    \n    for (let i = 0; i < orderCount; i++) {\n      const orderNumber = `TEST_${Date.now()}_${i}`;\n      const status = statusList[Math.floor(Math.random() * statusList.length)];\n      const amount = Math.floor(Math.random() * 1000) + 100;\n      orders.push(template(orderNumber, status, amount));\n    }\n    \n    return orders.join('\\n\\n');\n  }\n\n  /**\n   * 根据语言获取随机用户\n   */\n  private getRandomUserByLanguage(language: Language): TestUser | undefined {\n    const users = Array.from(this.testUsers.values()).filter(user => user.language === language);\n    if (users.length === 0) return undefined;\n    \n    return users[Math.floor(Math.random() * users.length)];\n  }\n\n  /**\n   * 获取语言索引\n   */\n  private getLanguageIndex(language: Language): number {\n    const languages = [Language.ZH, Language.EN, Language.RU, Language.TJ];\n    return languages.indexOf(language);\n  }\n\n  /**\n   * 获取测试统计\n   */\n  public getTestStatistics() {\n    const totalTests = this.testResults.length;\n    const successfulTests = this.testResults.filter(r => r.success).length;\n    const totalMessages = this.testResults.reduce((sum, r) => sum + r.messageCount, 0);\n    const totalErrors = this.testResults.reduce((sum, r) => sum + r.errorCount, 0);\n    const averageDuration = this.testResults.reduce((sum, r) => sum + r.duration, 0) / totalTests;\n    const averageSuccessRate = this.testResults.reduce((sum, r) => sum + r.successRate, 0) / totalTests;\n\n    return {\n      totalTests,\n      successfulTests,\n      totalMessages,\n      totalErrors,\n      averageDuration,\n      averageSuccessRate,\n      testResults: this.testResults\n    };\n  }\n\n  /**\n   * 清理测试数据\n   */\n  public cleanup(): void {\n    this.testUsers.clear();\n    this.testMessages.clear();\n    this.testResults = [];\n    logger.info('测试数据已清理');\n  }\n\n  /**\n   * 生成测试报告\n   */\n  public generateTestReport(): string {\n    const stats = this.getTestStatistics();\n    \n    const report = `\n# Telegram Bot 测试报告\n\n## 测试概览\n- 总测试数: ${stats.totalTests}\n- 成功测试: ${stats.successfulTests}\n- 成功率: ${((stats.successfulTests / stats.totalTests) * 100).toFixed(2)}%\n- 总消息数: ${stats.totalMessages}\n- 总错误数: ${stats.totalErrors}\n- 平均测试时长: ${stats.averageDuration.toFixed(2)}ms\n- 平均成功率: ${stats.averageSuccessRate.toFixed(2)}%\n\n## 测试详情\n${stats.testResults.map(result => `\n### ${result.testName}\n- 状态: ${result.success ? '✅ 成功' : '❌ 失败'}\n- 耗时: ${result.duration}ms\n- 消息数: ${result.messageCount}\n- 错误数: ${result.errorCount}\n- 成功率: ${result.successRate.toFixed(2)}%\n`).join('\\n')}\n`;\n\n    return report;\n  }\n}\n\n// 导出单例实例\nexport const botTester = new TelegramBotTester();","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-cache-config.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":223,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":223,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5492,5515],"text":"((config.LIMITS?.MAX_SIZE) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5492,5515],"text":"((config.LIMITS?.MAX_SIZE) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5492,5515],"text":"(Boolean((config.LIMITS?.MAX_SIZE)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":224,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":224,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5565,5596],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":228,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":228,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5630,5656],"text":"((config.EXPIRATION?.MAX_AGE) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[5630,5656],"text":"((config.EXPIRATION?.MAX_AGE) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5630,5656],"text":"(Boolean((config.EXPIRATION?.MAX_AGE)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5717,5749],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":238,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":238,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6000,6041],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6124,6156],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 翻译缓存配置文件\n// Translation Cache Configuration\n\n// 缓存版本信息\nexport const CACHE_CONFIG = {\n  VERSION: '1.0.0',\n  NAME: 'translations-cache-v1.0.0',\n} as const;\n\n// 缓存大小和清理配置\nexport const CACHE_LIMITS = {\n  MAX_SIZE: 50 * 1024 * 1024,        // 50MB最大缓存\n  CLEANUP_THRESHOLD: 40 * 1024 * 1024, // 40MB清理阈值\n  LRU_REMOVE_RATIO: 0.2,             // LRU删除20%最旧缓存\n  MAX_FILE_SIZE: 5 * 1024 * 1024,    // 单文件最大5MB\n} as const;\n\n// 缓存过期配置\nexport const CACHE_EXPIRATION = {\n  MAX_AGE: 30 * 24 * 60 * 60 * 1000, // 30天过期\n  CLEANUP_INTERVAL: 24 * 60 * 60 * 1000, // 24小时清理间隔\n  STALE_GRACE_PERIOD: 7 * 24 * 60 * 60 * 1000, // 7天宽限期\n} as const;\n\n// 支持的语言和命名空间\nexport const SUPPORTED_CACHE_CONFIG = {\n  LANGUAGES: ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'] as const,\n  NAMESPACES: ['common', 'auth', 'lottery', 'wallet', 'referral', 'task', 'error', 'admin'] as const,\n} as const;\n\n// 预加载配置\nexport const PRELOAD_CONFIG = {\n  // 核心文件优先预加载\n  ESSENTIAL_FILES: [\n    { lang: 'zh-CN', namespace: 'common' },\n    { lang: 'en-US', namespace: 'common' },\n    { lang: 'tg-TJ', namespace: 'common' },\n    { lang: 'ru-RU', namespace: 'common' },\n  ],\n  \n  // 预加载策略\n  STRATEGIES: {\n    // 首次访问：预加载所有核心文件\n    FIRST_VISIT: 'first-visit',\n    // 智能模式：根据使用情况预加载\n    SMART: 'smart',\n    // 按需模式：只预加载当前语言\n    ON_DEMAND: 'on-demand',\n    // 完整模式：预加载所有文件\n    FULL: 'full',\n  },\n  \n  // 预加载超时\n  TIMEOUT: 10000, // 10秒\n  PARALLEL_LIMIT: 5, // 并发限制\n} as const;\n\n// 网络配置\nexport const NETWORK_CONFIG = {\n  TIMEOUT: 5000,           // 请求超时5秒\n  RETRY_ATTEMPTS: 3,       // 重试3次\n  RETRY_DELAY: 1000,       // 重试间隔1秒\n  OFFLINE_GRACE_PERIOD: 1000, // 离线宽限期\n} as const;\n\n// Service Worker配置\nexport const SW_CONFIG = {\n  // 缓存键格式\n  CACHE_KEY_FORMAT: 'translations:{lang}:{namespace}:{version}',\n  \n  // 消息类型\n  MESSAGE_TYPES: {\n    SKIP_WAITING: 'SKIP_WAITING',\n    GET_CACHE_STATUS: 'GET_CACHE_STATUS',\n    CLEAR_CACHE: 'CLEAR_CACHE',\n    PRELOAD_TRANSLATIONS: 'PRELOAD_TRANSLATIONS',\n    UPDATE_CACHE: 'UPDATE_CACHE',\n  } as const,\n  \n  // 事件监听器\n  EVENT_LISTENERS: {\n    INSTALL: 'install',\n    ACTIVATE: 'activate',\n    FETCH: 'fetch',\n    MESSAGE: 'message',\n  } as const,\n} as const;\n\n// 错误处理配置\nexport const ERROR_CONFIG = {\n  // 错误类型\n  ERROR_TYPES: {\n    NETWORK_ERROR: 'network-error',\n    CACHE_ERROR: 'cache-error',\n    VERSION_ERROR: 'version-error',\n    PERMISSION_ERROR: 'permission-error',\n    TIMEOUT_ERROR: 'timeout-error',\n  } as const,\n  \n  // 降级策略\n  FALLBACK_STRATEGIES: {\n    // 使用过期缓存\n    USE_STALE_CACHE: 'use-stale-cache',\n    // 使用默认翻译\n    USE_DEFAULT_TRANSLATIONS: 'use-default-translations',\n    // 显示错误信息\n    SHOW_ERROR_MESSAGE: 'show-error-message',\n  } as const,\n} as const;\n\n// 监控配置\nexport const MONITORING_CONFIG = {\n  // 健康检查间隔\n  HEALTH_CHECK_INTERVAL: 30000, // 30秒\n  \n  // 性能监控\n  PERFORMANCE_TRACKING: {\n    ENABLED: process.env.NODE_ENV === 'development',\n    METRICS: [\n      'cache-hit-rate',\n      'cache-size',\n      'preload-duration',\n      'network-requests',\n      'error-rate',\n    ] as const,\n  },\n  \n  // 日志级别\n  LOG_LEVELS: {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    DEBUG: 3,\n  } as const,\n} as const;\n\n// 用户界面配置\nexport const UI_CONFIG = {\n  // 显示配置\n  DISPLAY: {\n    SHOW_CACHE_SIZE: true,\n    SHOW_CACHE_COUNT: true,\n    SHOW_LANGUAGE_STATS: true,\n    SHOW_PERFORMANCE_METRICS: process.env.NODE_ENV === 'development',\n  },\n  \n  // 动画配置\n  ANIMATIONS: {\n    ENABLED: true,\n    DURATION: 300, // ms\n    EASING: 'ease-in-out',\n  },\n  \n  // 主题配置\n  THEMES: {\n    DEFAULT: 'default',\n    DARK: 'dark',\n    AUTO: 'auto',\n  },\n} as const;\n\n// 开发环境配置\nexport const DEVELOPMENT_CONFIG = {\n  // 开发模式特殊设置\n  DEBUG_MODE: process.env.NODE_ENV === 'development',\n  \n  // 调试选项\n  DEBUG_OPTIONS: {\n    VERBOSE_LOGGING: false,\n    SHOW_CACHE_KEYS: false,\n    SIMULATE_NETWORK_ERRORS: false,\n    FORCE_CACHE_CLEAR: false,\n  },\n  \n  // 开发工具\n  DEV_TOOLS: {\n    ENABLED: process.env.NODE_ENV === 'development',\n    PANEL_ENABLED: true,\n    HOT_RELOAD: true,\n  },\n} as const;\n\n// 导出完整配置对象\nexport const TRANSLATION_CACHE_CONFIG = {\n  VERSION: CACHE_CONFIG.VERSION,\n  CACHE_NAME: CACHE_CONFIG.NAME,\n  LIMITS: CACHE_LIMITS,\n  EXPIRATION: CACHE_EXPIRATION,\n  SUPPORTED: SUPPORTED_CACHE_CONFIG,\n  PRELOAD: PRELOAD_CONFIG,\n  NETWORK: NETWORK_CONFIG,\n  SERVICE_WORKER: SW_CONFIG,\n  ERROR: ERROR_CONFIG,\n  MONITORING: MONITORING_CONFIG,\n  UI: UI_CONFIG,\n  DEVELOPMENT: DEVELOPMENT_CONFIG,\n} as const;\n\n// 类型定义\nexport type CacheVersion = typeof CACHE_CONFIG.VERSION;\nexport type SupportedCacheLanguage = typeof SUPPORTED_CACHE_CONFIG.LANGUAGES[number];\nexport type SupportedCacheNamespace = typeof SUPPORTED_CACHE_CONFIG.NAMESPACES[number];\nexport type PreloadStrategy = typeof PRELOAD_CONFIG.STRATEGIES[keyof typeof PRELOAD_CONFIG.STRATEGIES];\nexport type LogLevel = typeof MONITORING_CONFIG.LOG_LEVELS[keyof typeof MONITORING_CONFIG.LOG_LEVELS];\nexport type ErrorType = typeof ERROR_CONFIG.ERROR_TYPES[keyof typeof ERROR_CONFIG.ERROR_TYPES];\nexport type FallbackStrategy = typeof ERROR_CONFIG.FALLBACK_STRATEGIES[keyof typeof ERROR_CONFIG.FALLBACK_STRATEGIES];\nexport type Theme = typeof UI_CONFIG.THEMES[keyof typeof UI_CONFIG.THEMES];\n\n// 默认配置导出\nexport const DEFAULT_CONFIG = {\n  language: 'tg-TJ' as SupportedCacheLanguage,\n  preloadStrategy: 'smart' as PreloadStrategy,\n  logLevel: 'warn' as LogLevel,\n  theme: 'default' as Theme,\n  enableMonitoring: true,\n  enableAnimations: true,\n} as const;\n\n// 配置验证函数\nexport function validateConfig(config: Partial<typeof TRANSLATION_CACHE_CONFIG>): boolean {\n  try {\n    // 验证缓存大小限制\n    if (config.LIMITS?.MAX_SIZE && config.LIMITS.MAX_SIZE < 1024 * 1024) {\n      console.warn('缓存大小过小，建议至少1MB');\n    }\n    \n    // 验证过期时间\n    if (config.EXPIRATION?.MAX_AGE && config.EXPIRATION.MAX_AGE < 24 * 60 * 60 * 1000) {\n      console.warn('缓存过期时间过短，建议至少1天');\n    }\n    \n    // 验证支持的语言\n    if (config.SUPPORTED?.LANGUAGES) {\n      const invalidLangs = config.SUPPORTED.LANGUAGES.filter(lang => \n        !['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'].includes(lang)\n      );\n      if (invalidLangs.length > 0) {\n        console.error('不支持的语言代码:', invalidLangs);\n        return false;\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('配置验证失败:', error);\n    return false;\n  }\n}\n\n// 配置合并函数\nexport function mergeConfig(\n  baseConfig: typeof TRANSLATION_CACHE_CONFIG,\n  overrides: Partial<typeof TRANSLATION_CACHE_CONFIG>\n): typeof TRANSLATION_CACHE_CONFIG {\n  return {\n    ...baseConfig,\n    ...overrides,\n    LIMITS: { ...baseConfig.LIMITS, ...overrides.LIMITS },\n    EXPIRATION: { ...baseConfig.EXPIRATION, ...overrides.EXPIRATION },\n    SUPPORTED: { ...baseConfig.SUPPORTED, ...overrides.SUPPORTED },\n    PRELOAD: { ...baseConfig.PRELOAD, ...overrides.PRELOAD },\n    NETWORK: { ...baseConfig.NETWORK, ...overrides.NETWORK },\n    SERVICE_WORKER: { ...baseConfig.SERVICE_WORKER, ...overrides.SERVICE_WORKER },\n    ERROR: { ...baseConfig.ERROR, ...overrides.ERROR },\n    MONITORING: { ...baseConfig.MONITORING, ...overrides.MONITORING },\n    UI: { ...baseConfig.UI, ...overrides.UI },\n    DEVELOPMENT: { ...baseConfig.DEVELOPMENT, ...overrides.DEVELOPMENT },\n  };\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-cache.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[762,765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[762,765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":69,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":69,"endColumn":55,"fix":{"range":[1586,1601],"text":"{return 'tg-TJ';}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":73,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":73,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1701,1710],"text":"(savedLang != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1701,1710],"text":"(savedLang ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1701,1710],"text":"(Boolean(savedLang))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":79,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":79,"endColumn":50,"fix":{"range":[1905,1920],"text":"{return 'zh-CN';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":80,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":80,"endColumn":50,"fix":{"range":[1955,1970],"text":"{return 'en-US';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":81,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":81,"endColumn":50,"fix":{"range":[2005,2020],"text":"{return 'ru-RU';}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2166,2219],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2478,2531],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2579,2642],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":113,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":113,"endColumn":38,"fix":{"range":[2781,2788],"text":"{return;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":116,"column":37,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":116,"endColumn":44,"fix":{"range":[2859,2866],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4068,4121],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4522,4573],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":202,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":202,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5033,5035],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5294,5348],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":221,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":221,"endColumn":41,"fix":{"range":[5663,5676],"text":"{return false;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":224,"column":18,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":224,"endColumn":31,"fix":{"range":[5743,5756],"text":"{return false;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":232,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":232,"endColumn":35,"fix":{"range":[5980,5993],"text":"{return '0 B';}"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":238,"column":12,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":238,"endColumn":76,"fix":{"range":[6135,6199],"text":"`${parseFloat((bytes / Math.pow(k, i)).toFixed(2))  } ${  sizes[i]}`"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":238,"column":68,"nodeType":"MemberExpression","endLine":238,"endColumn":76},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":250,"column":18,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":250,"endColumn":30,"fix":{"range":[6477,6489],"text":"{return null;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":254,"column":38,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":254,"endColumn":45,"fix":{"range":[6575,6772],"text":"for (const lang of Object.keys(SUPPORTED_LANGUAGES)) {\n      languages[lang as SupportedLanguage] = status.cacheKeys.filter(key => \n        key.includes(`translations:${lang}:`)\n      ).length;\n    }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7378,7429],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":297,"column":17,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":297,"endColumn":26,"fix":{"range":[7769,7778],"text":"{return 0;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'registration' is defined but never used. Allowed unused args must match /^_/u.","line":311,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":311,"endColumn":75},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":312,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":312,"endColumn":47,"fix":{"range":[8209,8225],"text":"{return () => {};}"}},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":315,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":315,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":337,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":337,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8830,8839],"text":"(namespace != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8830,8839],"text":"(namespace ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8830,8839],"text":"(Boolean(namespace))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":373,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9842,9845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9842,9845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":13,"fixableWarningCount":1,"source":"// 翻译缓存管理工具\n// Translation Cache Management Utility\n\nimport { SUPPORTED_LANGUAGES, type SupportedLanguage } from '@/src/i18n/config';\n\n// 缓存状态接口\nexport interface CacheStatus {\n  version: string;\n  totalFiles: number;\n  size: number;\n  supportedLanguages: string[];\n  lastCleanup: number;\n  cacheKeys: string[];\n  error?: string;\n}\n\n// 预加载结果接口\nexport interface PreloadResult {\n  success: string[];\n  failed: string[];\n  total: number;\n  error?: string;\n}\n\n// 清除缓存结果接口\nexport interface ClearCacheResult {\n  success: boolean;\n  message?: string;\n  error?: string;\n}\n\n// Service Worker消息类型\ntype SWMessageType = 'SKIP_WAITING' | 'GET_CACHE_STATUS' | 'CLEAR_CACHE' | 'PRELOAD_TRANSLATIONS';\n\n// Service Worker消息接口\ninterface SWMessage {\n  type: SWMessageType;\n  data?: any;\n}\n\n// Service Worker响应接口\ninterface SWResponse {\n  success?: boolean;\n  error?: string;\n  message?: string;\n  [key: string]: any;\n}\n\nclass TranslationCacheManager {\n  private swRegistration: ServiceWorkerRegistration | null = null;\n  private messageChannel: MessageChannel | null = null;\n  private isSupported: boolean = false;\n  private currentLanguage: SupportedLanguage = 'tg-TJ';\n\n  constructor() {\n    this.isSupported = this.checkServiceWorkerSupport();\n    this.currentLanguage = this.getCurrentLanguage();\n  }\n\n  // 检查Service Worker支持\n  private checkServiceWorkerSupport(): boolean {\n    return typeof window !== 'undefined' && \n           'serviceWorker' in navigator && \n           'caches' in window;\n  }\n\n  // 获取当前语言\n  private getCurrentLanguage(): SupportedLanguage {\n    if (typeof window === 'undefined') return 'tg-TJ';\n    \n    // 从localStorage获取保存的语言\n    const savedLang = localStorage.getItem('i18nextLng');\n    if (savedLang && savedLang in SUPPORTED_LANGUAGES) {\n      return savedLang as SupportedLanguage;\n    }\n    \n    // 从navigator获取浏览器语言\n    const navLang = navigator.language;\n    if (navLang.startsWith('zh')) return 'zh-CN';\n    if (navLang.startsWith('en')) return 'en-US';\n    if (navLang.startsWith('ru')) return 'ru-RU';\n    \n    // 默认返回塔吉克语\n    return 'tg-TJ';\n  }\n\n  // 初始化Service Worker\n  async initialize(): Promise<boolean> {\n    if (!this.isSupported) {\n      console.warn('[TranslationCache] Service Worker不支持');\n      return false;\n    }\n\n    try {\n      // 注册Service Worker\n      this.swRegistration = await navigator.serviceWorker.register('/sw-translations.js', {\n        scope: '/'\n      });\n\n      // 等待Service Worker激活\n      await this.waitForActivation();\n\n      console.log('[TranslationCache] Service Worker注册成功');\n      return true;\n    } catch (error) {\n      console.error('[TranslationCache] Service Worker注册失败:', error);\n      return false;\n    }\n  }\n\n  // 等待Service Worker激活\n  private async waitForActivation(): Promise<void> {\n    if (!this.swRegistration) return;\n\n    // 如果Service Worker已经激活，直接返回\n    if (this.swRegistration.active) return;\n\n    // 等待激活\n    return new Promise((resolve) => {\n      const checkState = () => {\n        if (this.swRegistration?.active) {\n          resolve();\n        } else {\n          setTimeout(checkState, 100);\n        }\n      };\n      checkState();\n    });\n  }\n\n  // 发送消息到Service Worker\n  private async sendMessage(message: SWMessage): Promise<SWResponse> {\n    if (!this.swRegistration?.active) {\n      throw new Error('Service Worker未激活');\n    }\n\n    return new Promise((resolve, reject) => {\n      // 创建消息通道\n      this.messageChannel = new MessageChannel();\n      \n      const timeout = setTimeout(() => {\n        reject(new Error('Service Worker消息超时'));\n      }, 5000);\n\n      this.messageChannel.port1.onmessage = (event) => {\n        clearTimeout(timeout);\n        resolve(event.data);\n      };\n\n      this.swRegistration.active.postMessage(message, [this.messageChannel.port2]);\n    });\n  }\n\n  // 获取缓存状态\n  async getCacheStatus(): Promise<CacheStatus | null> {\n    if (!this.isSupported || !this.swRegistration?.active) {\n      return null;\n    }\n\n    try {\n      const response = await this.sendMessage({ type: 'GET_CACHE_STATUS' });\n      return response as CacheStatus;\n    } catch (error) {\n      console.error('[TranslationCache] 获取缓存状态失败:', error);\n      return null;\n    }\n  }\n\n  // 清除所有缓存\n  async clearCache(): Promise<ClearCacheResult> {\n    if (!this.isSupported || !this.swRegistration?.active) {\n      return {\n        success: false,\n        error: 'Service Worker不支持或未激活'\n      };\n    }\n\n    try {\n      const response = await this.sendMessage({ type: 'CLEAR_CACHE' });\n      return response as ClearCacheResult;\n    } catch (error) {\n      console.error('[TranslationCache] 清除缓存失败:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : '清除缓存时发生未知错误'\n      };\n    }\n  }\n\n  // 预加载翻译文件\n  async preloadTranslations(languages?: SupportedLanguage[]): Promise<PreloadResult> {\n    if (!this.isSupported || !this.swRegistration?.active) {\n      return {\n        success: [],\n        failed: [],\n        total: 0,\n        error: 'Service Worker不支持或未激活'\n      };\n    }\n\n    try {\n      const langs = languages || Object.keys(SUPPORTED_LANGUAGES) as SupportedLanguage[];\n      const response = await this.sendMessage({ \n        type: 'PRELOAD_TRANSLATIONS', \n        data: { languages: langs }\n      });\n      return response as PreloadResult;\n    } catch (error) {\n      console.error('[TranslationCache] 预加载翻译文件失败:', error);\n      return {\n        success: [],\n        failed: [],\n        total: 0,\n        error: error instanceof Error ? error.message : '预加载时发生未知错误'\n      };\n    }\n  }\n\n  // 检查翻译文件是否已缓存\n  async isTranslationCached(language: SupportedLanguage, namespace: string = 'common'): Promise<boolean> {\n    if (!this.isSupported) return false;\n\n    const status = await this.getCacheStatus();\n    if (!status) return false;\n\n    const cacheKey = `translations:${language}:${namespace}:1.0.0`;\n    return status.cacheKeys.some(key => key.includes(cacheKey));\n  }\n\n  // 获取缓存大小（人类可读格式）\n  formatCacheSize(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    \n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // 获取缓存统计信息\n  async getCacheStats(): Promise<{\n    totalFiles: number;\n    size: string;\n    languages: Record<SupportedLanguage, number>;\n    lastCleanup: string;\n    isSupported: boolean;\n  } | null> {\n    const status = await this.getCacheStatus();\n    if (!status) return null;\n\n    // 按语言统计文件数量\n    const languages = {} as Record<SupportedLanguage, number>;\n    Object.keys(SUPPORTED_LANGUAGES).forEach(lang => {\n      languages[lang as SupportedLanguage] = status.cacheKeys.filter(key => \n        key.includes(`translations:${lang}:`)\n      ).length;\n    });\n\n    return {\n      totalFiles: status.totalFiles,\n      size: this.formatCacheSize(status.size),\n      languages,\n      lastCleanup: new Date(status.lastCleanup).toLocaleString(),\n      isSupported: this.isSupported\n    };\n  }\n\n  // 智能预加载策略\n  async smartPreload(): Promise<PreloadResult> {\n    const stats = await this.getCacheStats();\n    \n    // 如果缓存为空，预加载所有文件\n    if (!stats || stats.totalFiles === 0) {\n      return this.preloadTranslations();\n    }\n\n    // 如果缓存大小超过80%，不进行预加载\n    const cacheSizeInBytes = this.parseCacheSize(stats.size);\n    if (cacheSizeInBytes > 40 * 1024 * 1024) { // 40MB\n      console.log('[TranslationCache] 缓存大小超过40MB，跳过预加载');\n      return {\n        success: [],\n        failed: [],\n        total: 0,\n        error: '缓存大小超过限制'\n      };\n    }\n\n    // 只预加载当前语言的文件\n    return this.preloadTranslations([this.currentLanguage]);\n  }\n\n  // 解析缓存大小字符串\n  private parseCacheSize(sizeStr: string): number {\n    const match = sizeStr.match(/^([\\d.]+)\\s*(\\w+)$/);\n    if (!match) return 0;\n\n    const [, value, unit] = match;\n    const num = parseFloat(value);\n    \n    switch (unit.toUpperCase()) {\n      case 'KB': return num * 1024;\n      case 'MB': return num * 1024 * 1024;\n      case 'GB': return num * 1024 * 1024 * 1024;\n      default: return num;\n    }\n  }\n\n  // 监听Service Worker更新\n  onServiceWorkerUpdate(callback: (registration: ServiceWorkerRegistration) => void): () => void {\n    if (!this.swRegistration) return () => {};\n\n    const onUpdate = () => {\n      callback(this.swRegistration!);\n    };\n\n    this.swRegistration.addEventListener('updatefound', onUpdate);\n    \n    return () => {\n      this.swRegistration?.removeEventListener('updatefound', onUpdate);\n    };\n  }\n\n  // 更新当前语言\n  updateCurrentLanguage(language: SupportedLanguage): void {\n    this.currentLanguage = language;\n  }\n\n  // 检查离线状态\n  isOnline(): boolean {\n    return typeof navigator !== 'undefined' ? navigator.onLine : true;\n  }\n\n  // 获取支持的翻译文件URL列表\n  getTranslationUrls(language: SupportedLanguage, namespace?: string): string[] {\n    const namespaces = namespace ? [namespace] : ['common', 'auth', 'lottery', 'wallet', 'referral', 'task', 'error', 'admin'];\n    \n    return namespaces.map(ns => `/locales/${language}/${ns}.json`);\n  }\n\n  // 预检翻译文件可访问性\n  async validateTranslationFiles(language: SupportedLanguage, namespace?: string): Promise<{\n    accessible: string[];\n    inaccessible: string[];\n  }> {\n    const urls = this.getTranslationUrls(language, namespace);\n    const accessible: string[] = [];\n    const inaccessible: string[] = [];\n\n    await Promise.all(\n      urls.map(async (url) => {\n        try {\n          const response = await fetch(url, { method: 'HEAD' });\n          if (response.ok) {\n            accessible.push(url);\n          } else {\n            inaccessible.push(url);\n          }\n        } catch {\n          inaccessible.push(url);\n        }\n      })\n    );\n\n    return { accessible, inaccessible };\n  }\n\n  // 获取缓存健康状态\n  async getCacheHealth(): Promise<{\n    status: 'healthy' | 'warning' | 'error';\n    message: string;\n    details?: any;\n  }> {\n    if (!this.isSupported) {\n      return {\n        status: 'error',\n        message: 'Service Worker不支持'\n      };\n    }\n\n    const stats = await this.getCacheStats();\n    if (!stats) {\n      return {\n        status: 'error',\n        message: '无法获取缓存状态'\n      };\n    }\n\n    // 检查缓存大小\n    const sizeBytes = this.parseCacheSize(stats.size);\n    if (sizeBytes > 45 * 1024 * 1024) { // 45MB\n      return {\n        status: 'warning',\n        message: '缓存大小接近限制',\n        details: { size: stats.size }\n      };\n    }\n\n    // 检查文件数量\n    if (stats.totalFiles < 16) { // 期望的最小文件数\n      return {\n        status: 'warning',\n        message: '缓存文件数量不足，可能影响离线功能',\n        details: { totalFiles: stats.totalFiles }\n      };\n    }\n\n    return {\n      status: 'healthy',\n      message: '缓存状态正常',\n      details: stats\n    };\n  }\n}\n\n// 创建单例实例\nexport const translationCache = new TranslationCacheManager();\n\n// 导出类型\nexport type {\n  CacheStatus,\n  PreloadResult,\n  ClearCacheResult,\n  SWMessage,\n  SWResponse\n};\n\n// 导出便捷方法\nexport const cacheManager = {\n  // 初始化缓存\n  async init() {\n    return translationCache.initialize();\n  },\n\n  // 获取状态\n  async status() {\n    return translationCache.getCacheStatus();\n  },\n\n  // 清除缓存\n  async clear() {\n    return translationCache.clearCache();\n  },\n\n  // 预加载\n  async preload(languages?: SupportedLanguage[]) {\n    return translationCache.preloadTranslations(languages);\n  },\n\n  // 智能预加载\n  async smartPreload() {\n    return translationCache.smartPreload();\n  },\n\n  // 检查是否缓存\n  async isCached(language: SupportedLanguage, namespace: string = 'common') {\n    return translationCache.isTranslationCached(language, namespace);\n  },\n\n  // 获取统计\n  async stats() {\n    return translationCache.getCacheStats();\n  },\n\n  // 获取健康状态\n  async health() {\n    return translationCache.getCacheHealth();\n  }\n};","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-improvement-evaluator.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":201,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":201,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4841,4846],"text":"saved != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4841,4846],"text":"saved ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4841,4846],"text":"Boolean(saved)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4956,4959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4956,4959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":228,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":228,"endColumn":44,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5894,5910],"text":"(Boolean(item.completedAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6026,6060],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6305,6339],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":259,"column":48,"nodeType":"CallExpression","messageId":"substr","endLine":259,"endColumn":87,"fix":{"range":[6693,6704],"text":"slice(2, 11"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":413,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":413,"endColumn":22,"fix":{"range":[10711,10875],"text":"for (const feedback of feedbacks) {\n      feedback.issues.forEach(issue => {\n        topIssueTypes[issue.type] = (topIssueTypes[issue.type] || 0) + 1;\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":414,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":414,"endColumn":30,"fix":{"range":[10749,10867],"text":"for (const issue of feedback.issues) {\n        topIssueTypes[issue.type] = (topIssueTypes[issue.type] || 0) + 1;\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":415,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":415,"endColumn":63,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10821,10846],"text":"(topIssueTypes[issue.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[10821,10846],"text":"(topIssueTypes[issue.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10821,10846],"text":"(Boolean(topIssueTypes[issue.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":415,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":415,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10847,10849],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":445,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":445,"endColumn":22,"fix":{"range":[11782,12096],"text":"for (const feedback of feedbacks) {\n      const lang = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageGroups[lang]) {\n        languageGroups[lang] = { count: 0, totalRating: 0 };\n      }\n      languageGroups[lang].count++;\n      languageGroups[lang].totalRating += feedback.rating;\n    }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":447,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":449,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[11896,11993],"text":"languageGroups[lang] ??= { count: 0, totalRating: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":447,"column":12,"nodeType":"MemberExpression","endLine":447,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":448,"column":9,"nodeType":"MemberExpression","endLine":448,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":450,"column":7,"nodeType":"MemberExpression","endLine":450,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":451,"column":7,"nodeType":"MemberExpression","endLine":451,"endColumn":27},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":466,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":466,"endColumn":29,"fix":{"range":[12458,12465],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":494,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":494,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13097,13144],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":557,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":557,"endColumn":22,"fix":{"range":[15379,15529],"text":"for (const feedback of feedbacks) {\n      feedback.issues.forEach(issue => {\n        issues[issue.type] = (issues[issue.type] || 0) + 1;\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":558,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":558,"endColumn":30,"fix":{"range":[15417,15521],"text":"for (const issue of feedback.issues) {\n        issues[issue.type] = (issues[issue.type] || 0) + 1;\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":559,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":559,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15482,15500],"text":"(issues[issue.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15482,15500],"text":"(issues[issue.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15482,15500],"text":"(Boolean(issues[issue.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":559,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":559,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15501,15503],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":584,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":584,"endColumn":67,"fix":{"range":[16521,16560],"text":"{overallImpact = 'significant_positive';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":585,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":585,"endColumn":59,"fix":{"range":[16592,16619],"text":"{overallImpact = 'positive';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":586,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":586,"endColumn":59,"fix":{"range":[16652,16678],"text":"{overallImpact = 'neutral';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":587,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":587,"endColumn":61,"fix":{"range":[16712,16739],"text":"{overallImpact = 'negative';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":588,"column":10,"nodeType":"IfStatement","messageId":"missingCurlyAfter","endLine":588,"endColumn":49,"fix":{"range":[16749,16788],"text":"{overallImpact = 'significant_negative';}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'current' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":716,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":716,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'current' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":716,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":716,"endColumn":18},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":729,"column":46,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":729,"endColumn":66,"fix":{"range":[21538,21558],"text":"{trend = 'improving';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":730,"column":51,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":730,"endColumn":71,"fix":{"range":[21609,21629],"text":"{trend = 'declining';}"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":849,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":849,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[25613,25615],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":9,"fixableWarningCount":5,"source":"/**\n * 翻译改进效果评估系统\n * 用于评估翻译改进的效果、ROI和用户满意度变化\n */\n\nimport { FeedbackData } from '../components/TranslationFeedbackCollector';\nimport { ImprovementSuggestion } from '../utils/translation-improvement-suggester';\nimport { feedbackDataManager } from './feedback-data-manager';\n\nexport interface ImprovementEvaluation {\n  id: string;\n  evaluationType: 'before_after' | 'a_b_test' | 'cohort_analysis' | 'time_series';\n  improvementId: string;\n  improvementTitle: string;\n  evaluationPeriod: {\n    start: Date;\n    end: Date;\n    duration: number; // 天数\n  };\n  baselineMetrics: BaselineMetrics;\n  postImplementationMetrics: PostImplementationMetrics;\n  impactAnalysis: ImpactAnalysis;\n  roiCalculation: ROICalculation;\n  qualityScore: QualityScore;\n  userFeedbackComparison: UserFeedbackComparison;\n  recommendations: EvaluationRecommendation[];\n  status: 'planning' | 'in_progress' | 'completed' | 'cancelled';\n  createdAt: Date;\n  completedAt?: Date;\n}\n\nexport interface BaselineMetrics {\n  period: {\n    start: Date;\n    end: Date;\n  };\n  averageRating: number;\n  satisfactionRate: number; // 4-5星占比\n  totalFeedbacks: number;\n  criticalIssuesCount: number;\n  resolutionRate: number;\n  averageResponseTime: number;\n  qualityScore: number;\n  topIssueTypes: { [key: string]: number };\n  languagePerformance: Array<{\n    language: string;\n    averageRating: number;\n    feedbackCount: number;\n  }>;\n}\n\nexport interface PostImplementationMetrics {\n  period: {\n    start: Date;\n    end: Date;\n  };\n  averageRating: number;\n  satisfactionRate: number;\n  totalFeedbacks: number;\n  criticalIssuesCount: number;\n  resolutionRate: number;\n  averageResponseTime: number;\n  qualityScore: number;\n  topIssueTypes: { [key: string]: number };\n  languagePerformance: Array<{\n    language: string;\n    averageRating: number;\n    feedbackCount: number;\n  }>;\n  improvementMetrics: {\n    userAdoptionRate: number;\n    issueReductionRate: number;\n    satisfactionImprovement: number;\n  };\n}\n\nexport interface ImpactAnalysis {\n  overallImpact: 'significant_positive' | 'positive' | 'neutral' | 'negative' | 'significant_negative';\n  impactScore: number; // -100 to 100\n  keyFindings: string[];\n  statisticalSignificance: {\n    isSignificant: boolean;\n    pValue: number;\n    confidence: number; // 0-1\n    sampleSize: number;\n  };\n  impactByCategory: {\n    [category: string]: {\n      impactScore: number;\n      changeRate: number;\n      userFeedback: string[];\n    };\n  };\n  timeToValue: number; // 天数\n  sustainabilityScore: number; // 0-100\n}\n\nexport interface ROICalculation {\n  investment: {\n    development: number;\n    deployment: number;\n    training: number;\n    total: number;\n  };\n  benefits: {\n    timeSavings: number; // 小时\n    costAvoidance: number;\n    revenueImpact: number;\n    userSatisfactionValue: number;\n    total: number;\n  };\n  roi: number; // 百分比\n  paybackPeriod: number; // 天数;\n  npv: number; // 净现值\n  sensitivityAnalysis: {\n    optimistic: number;\n    realistic: number;\n    pessimistic: number;\n  };\n}\n\nexport interface QualityScore {\n  overall: number; // 0-100\n  breakdown: {\n    accuracy: number;\n    consistency: number;\n    contextAppropriateness: number;\n    culturalAdaptation: number;\n    technicalQuality: number;\n  };\n  trend: 'improving' | 'stable' | 'declining';\n  benchmarking: {\n    industryAverage: number;\n    bestInClass: number;\n    ourPosition: number;\n  };\n}\n\nexport interface UserFeedbackComparison {\n  positiveFeedback: {\n    baseline: number;\n    postImplementation: number;\n    changeRate: number;\n    commonThemes: string[];\n  };\n  negativeFeedback: {\n    baseline: number;\n    postImplementation: number;\n    changeRate: number;\n    commonThemes: string[];\n  };\n  neutralFeedback: {\n    baseline: number;\n    postImplementation: number;\n    changeRate: number;\n  };\n  feedbackVolume: {\n    baseline: number;\n    postImplementation: number;\n    changeRate: number;\n  };\n}\n\nexport interface EvaluationRecommendation {\n  id: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  category: 'optimize' | 'scale' | 'pivot' | 'discontinue';\n  title: string;\n  description: string;\n  rationale: string;\n  expectedOutcome: string;\n  effort: 'low' | 'medium' | 'high';\n  timeline: string;\n  resources: string[];\n}\n\nexport interface EvaluationSummary {\n  totalEvaluations: number;\n  successRate: number;\n  averageROI: number;\n  averageQualityImprovement: number;\n  topPerformers: string[];\n  lessonsLearned: string[];\n  bestPractices: string[];\n}\n\nclass TranslationImprovementEvaluator {\n  private evaluations: Map<string, ImprovementEvaluation> = new Map();\n  private evaluationQueue: string[] = [];\n\n  constructor() {\n    this.loadExistingEvaluations();\n  }\n\n  /**\n   * 加载现有评估数据\n   */\n  private loadExistingEvaluations(): void {\n    try {\n      const saved = localStorage.getItem('improvement_evaluations');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        this.evaluations = new Map(\n          parsed.map((item: any) => [\n            item.id,\n            {\n              ...item,\n              evaluationPeriod: {\n                ...item.evaluationPeriod,\n                start: new Date(item.evaluationPeriod.start),\n                end: new Date(item.evaluationPeriod.end)\n              },\n              baselineMetrics: {\n                ...item.baselineMetrics,\n                period: {\n                  start: new Date(item.baselineMetrics.period.start),\n                  end: new Date(item.baselineMetrics.period.end)\n                }\n              },\n              postImplementationMetrics: {\n                ...item.postImplementationMetrics,\n                period: {\n                  start: new Date(item.postImplementationMetrics.period.start),\n                  end: new Date(item.postImplementationMetrics.period.end)\n                }\n              },\n              createdAt: new Date(item.createdAt),\n              completedAt: item.completedAt ? new Date(item.completedAt) : undefined\n            }\n          ])\n        );\n      }\n    } catch (error) {\n      console.error('加载评估数据失败:', error);\n    }\n  }\n\n  /**\n   * 保存评估数据\n   */\n  private saveEvaluations(): void {\n    try {\n      const data = Array.from(this.evaluations.values());\n      localStorage.setItem('improvement_evaluations', JSON.stringify(data));\n    } catch (error) {\n      console.error('保存评估数据失败:', error);\n    }\n  }\n\n  /**\n   * 创建改进效果评估\n   */\n  async createEvaluation(\n    improvement: ImprovementSuggestion,\n    evaluationType: ImprovementEvaluation['evaluationType'] = 'before_after',\n    baselinePeriodDays: number = 30,\n    evaluationPeriodDays: number = 30\n  ): Promise<string> {\n    const evaluationId = `eval_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // 计算时间段\n    const now = new Date();\n    const baselineStart = new Date(now.getTime() - baselinePeriodDays * 24 * 60 * 60 * 1000);\n    const evaluationStart = new Date(now.getTime() - evaluationPeriodDays * 24 * 60 * 60 * 1000);\n    \n    // 收集基线指标\n    const baselineMetrics = await this.collectBaselineMetrics(baselineStart, now, improvement);\n    \n    const evaluation: ImprovementEvaluation = {\n      id: evaluationId,\n      evaluationType,\n      improvementId: improvement.id,\n      improvementTitle: improvement.title,\n      evaluationPeriod: {\n        start: evaluationStart,\n        end: now,\n        duration: evaluationPeriodDays\n      },\n      baselineMetrics,\n      postImplementationMetrics: {\n        period: {\n          start: evaluationStart,\n          end: now\n        },\n        averageRating: 0,\n        satisfactionRate: 0,\n        totalFeedbacks: 0,\n        criticalIssuesCount: 0,\n        resolutionRate: 0,\n        averageResponseTime: 0,\n        qualityScore: 0,\n        topIssueTypes: {},\n        languagePerformance: [],\n        improvementMetrics: {\n          userAdoptionRate: 0,\n          issueReductionRate: 0,\n          satisfactionImprovement: 0\n        }\n      },\n      impactAnalysis: {\n        overallImpact: 'neutral',\n        impactScore: 0,\n        keyFindings: [],\n        statisticalSignificance: {\n          isSignificant: false,\n          pValue: 1,\n          confidence: 0,\n          sampleSize: 0\n        },\n        impactByCategory: {},\n        timeToValue: 0,\n        sustainabilityScore: 0\n      },\n      roiCalculation: {\n        investment: {\n          development: 0,\n          deployment: 0,\n          training: 0,\n          total: 0\n        },\n        benefits: {\n          timeSavings: 0,\n          costAvoidance: 0,\n          revenueImpact: 0,\n          userSatisfactionValue: 0,\n          total: 0\n        },\n        roi: 0,\n        paybackPeriod: 0,\n        npv: 0,\n        sensitivityAnalysis: {\n          optimistic: 0,\n          realistic: 0,\n          pessimistic: 0\n        }\n      },\n      qualityScore: {\n        overall: 0,\n        breakdown: {\n          accuracy: 0,\n          consistency: 0,\n          contextAppropriateness: 0,\n          culturalAdaptation: 0,\n          technicalQuality: 0\n        },\n        trend: 'stable',\n        benchmarking: {\n          industryAverage: 75,\n          bestInClass: 90,\n          ourPosition: 0\n        }\n      },\n      userFeedbackComparison: {\n        positiveFeedback: {\n          baseline: 0,\n          postImplementation: 0,\n          changeRate: 0,\n          commonThemes: []\n        },\n        negativeFeedback: {\n          baseline: 0,\n          postImplementation: 0,\n          changeRate: 0,\n          commonThemes: []\n        },\n        neutralFeedback: {\n          baseline: 0,\n          postImplementation: 0,\n          changeRate: 0\n        },\n        feedbackVolume: {\n          baseline: 0,\n          postImplementation: 0,\n          changeRate: 0\n        }\n      },\n      recommendations: [],\n      status: 'in_progress',\n      createdAt: now\n    };\n\n    this.evaluations.set(evaluationId, evaluation);\n    this.evaluationQueue.push(evaluationId);\n    \n    // 开始评估过程\n    await this.runEvaluation(evaluationId);\n    \n    return evaluationId;\n  }\n\n  /**\n   * 收集基线指标\n   */\n  private async collectBaselineMetrics(\n    startDate: Date,\n    endDate: Date,\n    improvement: ImprovementSuggestion\n  ): Promise<BaselineMetrics> {\n    const filter = { \n      dateRange: { start: startDate, end: endDate },\n      category: improvement.type === 'terminology' ? 'terminology' : undefined,\n      tags: improvement.tags.length > 0 ? improvement.tags : undefined\n    };\n    \n    const feedbacks = feedbackDataManager.getAllFeedback(filter);\n    const analytics = feedbackDataManager.getFeedbackAnalytics(filter);\n    \n    // 按语言对分组统计\n    const languagePerformance = this.groupFeedbacksByLanguage(feedbacks);\n    \n    // 统计问题类型\n    const topIssueTypes: { [key: string]: number } = {};\n    feedbacks.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        topIssueTypes[issue.type] = (topIssueTypes[issue.type] || 0) + 1;\n      });\n    });\n\n    return {\n      period: { start: startDate, end: endDate },\n      averageRating: analytics.averageRating,\n      satisfactionRate: Object.values(analytics.ratingDistribution)\n        .slice(3) // 4和5星\n        .reduce((sum, count) => sum + count, 0) / analytics.totalFeedbacks,\n      totalFeedbacks: analytics.totalFeedbacks,\n      criticalIssuesCount: feedbacks.filter(f => \n        f.urgency === 'high' && f.issues.some(issue => \n          issue.severity === 'critical' || issue.severity === 'major'\n        )\n      ).length,\n      resolutionRate: analytics.resolvedRate,\n      averageResponseTime: 24, // 简化处理\n      qualityScore: analytics.qualityScore,\n      topIssueTypes,\n      languagePerformance\n    };\n  }\n\n  /**\n   * 按语言分组反馈\n   */\n  private groupFeedbacksByLanguage(feedbacks: FeedbackData[]) {\n    const languageGroups: { [key: string]: { count: number; totalRating: number } } = {};\n    \n    feedbacks.forEach(feedback => {\n      const lang = `${feedback.sourceLanguage}→${feedback.targetLanguage}`;\n      if (!languageGroups[lang]) {\n        languageGroups[lang] = { count: 0, totalRating: 0 };\n      }\n      languageGroups[lang].count++;\n      languageGroups[lang].totalRating += feedback.rating;\n    });\n\n    return Object.entries(languageGroups).map(([language, stats]) => ({\n      language,\n      averageRating: stats.totalRating / stats.count,\n      feedbackCount: stats.count\n    }));\n  }\n\n  /**\n   * 运行评估\n   */\n  private async runEvaluation(evaluationId: string): Promise<void> {\n    const evaluation = this.evaluations.get(evaluationId);\n    if (!evaluation) return;\n\n    try {\n      // 收集实施后指标\n      await this.collectPostImplementationMetrics(evaluation);\n      \n      // 计算影响分析\n      await this.calculateImpactAnalysis(evaluation);\n      \n      // 计算ROI\n      await this.calculateROI(evaluation);\n      \n      // 计算质量分数\n      await this.calculateQualityScore(evaluation);\n      \n      // 比较用户反馈\n      await this.compareUserFeedback(evaluation);\n      \n      // 生成建议\n      await this.generateRecommendations(evaluation);\n      \n      // 完成评估\n      evaluation.status = 'completed';\n      evaluation.completedAt = new Date();\n      \n      this.saveEvaluations();\n      \n    } catch (error) {\n      console.error(`评估 ${evaluationId} 失败:`, error);\n      evaluation.status = 'cancelled';\n    }\n  }\n\n  /**\n   * 收集实施后指标\n   */\n  private async collectPostImplementationMetrics(evaluation: ImprovementEvaluation): Promise<void> {\n    const startDate = evaluation.evaluationPeriod.start;\n    const endDate = evaluation.evaluationPeriod.end;\n    \n    const filter = { \n      dateRange: { start: startDate, end: endDate },\n      category: evaluation.improvementTitle.includes('术语') ? 'terminology' : undefined\n    };\n    \n    const feedbacks = feedbackDataManager.getAllFeedback(filter);\n    const analytics = feedbackDataManager.getFeedbackAnalytics(filter);\n    \n    const languagePerformance = this.groupFeedbacksByLanguage(feedbacks);\n    \n    const criticalIssues = feedbacks.filter(f => \n      f.urgency === 'high' && f.issues.some(issue => \n        issue.severity === 'critical' || issue.severity === 'major'\n      )\n    ).length;\n    \n    // 计算改进指标\n    const issueReductionRate = evaluation.baselineMetrics.criticalIssuesCount > 0 ? \n      ((evaluation.baselineMetrics.criticalIssuesCount - criticalIssues) / \n       evaluation.baselineMetrics.criticalIssuesCount) * 100 : 0;\n    \n    const satisfactionImprovement = \n      analytics.averageRating - evaluation.baselineMetrics.averageRating;\n    \n    evaluation.postImplementationMetrics = {\n      period: { start: startDate, end: endDate },\n      averageRating: analytics.averageRating,\n      satisfactionRate: Object.values(analytics.ratingDistribution)\n        .slice(3)\n        .reduce((sum, count) => sum + count, 0) / analytics.totalFeedbacks,\n      totalFeedbacks: analytics.totalFeedbacks,\n      criticalIssuesCount: criticalIssues,\n      resolutionRate: analytics.resolvedRate,\n      averageResponseTime: 24,\n      qualityScore: analytics.qualityScore,\n      topIssueTypes: this.calculateTopIssues(feedbacks),\n      languagePerformance,\n      improvementMetrics: {\n        userAdoptionRate: 85, // 模拟数据\n        issueReductionRate: Math.max(0, issueReductionRate),\n        satisfactionImprovement: Math.max(0, satisfactionImprovement)\n      }\n    };\n  }\n\n  /**\n   * 计算主要问题类型\n   */\n  private calculateTopIssues(feedbacks: FeedbackData[]): { [key: string]: number } {\n    const issues: { [key: string]: number } = {};\n    \n    feedbacks.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        issues[issue.type] = (issues[issue.type] || 0) + 1;\n      });\n    });\n    \n    return issues;\n  }\n\n  /**\n   * 计算影响分析\n   */\n  private async calculateImpactAnalysis(evaluation: ImprovementEvaluation): Promise<void> {\n    const baseline = evaluation.baselineMetrics;\n    const current = evaluation.postImplementationMetrics;\n    \n    // 计算各项指标的改进率\n    const ratingImprovement = ((current.averageRating - baseline.averageRating) / baseline.averageRating) * 100;\n    const satisfactionImprovement = ((current.satisfactionRate - baseline.satisfactionRate) / baseline.satisfactionRate) * 100;\n    const qualityImprovement = ((current.qualityScore - baseline.qualityScore) / baseline.qualityScore) * 100;\n    const issueReduction = ((baseline.criticalIssuesCount - current.criticalIssuesCount) / baseline.criticalIssuesCount) * 100;\n    \n    // 计算总体影响分数\n    const impactScore = (ratingImprovement + satisfactionImprovement + qualityImprovement + issueReduction) / 4;\n    \n    // 确定影响等级\n    let overallImpact: ImpactAnalysis['overallImpact'];\n    if (impactScore >= 20) overallImpact = 'significant_positive';\n    else if (impactScore >= 5) overallImpact = 'positive';\n    else if (impactScore >= -5) overallImpact = 'neutral';\n    else if (impactScore >= -20) overallImpact = 'negative';\n    else overallImpact = 'significant_negative';\n    \n    // 统计显著性检验（简化）\n    const sampleSize = baseline.totalFeedbacks + current.totalFeedbacks;\n    const isSignificant = sampleSize >= 30 && Math.abs(impactScore) >= 10;\n    \n    evaluation.impactAnalysis = {\n      overallImpact,\n      impactScore: Math.round(impactScore * 100) / 100,\n      keyFindings: this.generateKeyFindings(evaluation),\n      statisticalSignificance: {\n        isSignificant,\n        pValue: isSignificant ? 0.05 : 0.1,\n        confidence: isSignificant ? 0.95 : 0.8,\n        sampleSize\n      },\n      impactByCategory: this.calculateImpactByCategory(evaluation),\n      timeToValue: 14, // 假设14天见效\n      sustainabilityScore: 75 // 模拟数据\n    };\n  }\n\n  /**\n   * 生成关键发现\n   */\n  private generateKeyFindings(evaluation: ImprovementEvaluation): string[] {\n    const findings: string[] = [];\n    const baseline = evaluation.baselineMetrics;\n    const current = evaluation.postImplementationMetrics;\n    \n    if (current.averageRating > baseline.averageRating) {\n      findings.push(`用户评分平均提升${(current.averageRating - baseline.averageRating).toFixed(2)}分`);\n    }\n    \n    if (current.criticalIssuesCount < baseline.criticalIssuesCount) {\n      findings.push(`严重问题数量减少${baseline.criticalIssuesCount - current.criticalIssuesCount}个`);\n    }\n    \n    if (current.satisfactionRate > baseline.satisfactionRate) {\n      findings.push(`满意度提升${((current.satisfactionRate - baseline.satisfactionRate) * 100).toFixed(1)}%`);\n    }\n    \n    return findings;\n  }\n\n  /**\n   * 按类别计算影响\n   */\n  private calculateImpactByCategory(evaluation: ImprovementEvaluation): ImpactAnalysis['impactByCategory'] {\n    // 简化处理，基于改进类型计算影响\n    const impact: ImpactAnalysis['impactByCategory'] = {};\n    \n    if (evaluation.improvementTitle.includes('术语')) {\n      impact['专业性'] = {\n        impactScore: 15,\n        changeRate: 12,\n        userFeedback: ['术语更准确', '专业性提升']\n      };\n    }\n    \n    if (evaluation.improvementTitle.includes('风格')) {\n      impact['表达风格'] = {\n        impactScore: 10,\n        changeRate: 8,\n        userFeedback: ['表达更自然', '风格更统一']\n      };\n    }\n    \n    return impact;\n  }\n\n  /**\n   * 计算ROI\n   */\n  private async calculateROI(evaluation: ImprovementEvaluation): Promise<void> {\n    // 估算投资成本\n    const developmentCost = 8000; // 假设开发成本\n    const deploymentCost = 2000;  // 部署成本\n    const trainingCost = 1000;    // 培训成本\n    const totalInvestment = developmentCost + deploymentCost + trainingCost;\n    \n    // 估算收益\n    const feedbackReduction = evaluation.baselineMetrics.totalFeedbacks - \n                              evaluation.postImplementationMetrics.totalFeedbacks;\n    const timeSavings = feedbackReduction * 0.5; // 每个反馈节省0.5小时\n    const costAvoidance = feedbackReduction * 50; // 每个问题避免50元成本\n    const satisfactionValue = evaluation.impactAnalysis.impactScore * 100; // 满意度价值\n    const totalBenefits = timeSavings * 100 + costAvoidance + satisfactionValue; // 假设100元/小时\n    \n    // 计算ROI\n    const roi = ((totalBenefits - totalInvestment) / totalInvestment) * 100;\n    const paybackPeriod = totalInvestment / (totalBenefits / 30); // 30天回收期\n    \n    // 敏感性分析\n    const optimistic = roi * 1.5;\n    const realistic = roi;\n    const pessimistic = roi * 0.5;\n    \n    evaluation.roiCalculation = {\n      investment: {\n        development: developmentCost,\n        deployment: deploymentCost,\n        training: trainingCost,\n        total: totalInvestment\n      },\n      benefits: {\n        timeSavings,\n        costAvoidance,\n        revenueImpact: 0,\n        userSatisfactionValue: satisfactionValue,\n        total: totalBenefits\n      },\n      roi: Math.round(roi * 100) / 100,\n      paybackPeriod: Math.round(paybackPeriod * 10) / 10,\n      npv: totalBenefits - totalInvestment,\n      sensitivityAnalysis: {\n        optimistic: Math.round(optimistic * 100) / 100,\n        realistic: Math.round(realistic * 100) / 100,\n        pessimistic: Math.round(pessimistic * 100) / 100\n      }\n    };\n  }\n\n  /**\n   * 计算质量分数\n   */\n  private async calculateQualityScore(evaluation: ImprovementEvaluation): Promise<void> {\n    const baseline = evaluation.baselineMetrics;\n    const current = evaluation.postImplementationMetrics;\n    \n    // 基于改进指标计算各项分数\n    const accuracy = Math.min(100, baseline.qualityScore + 10);\n    const consistency = Math.min(100, baseline.qualityScore + 8);\n    const contextAppropriateness = Math.min(100, baseline.qualityScore + 12);\n    const culturalAdaptation = Math.min(100, baseline.qualityScore + 6);\n    const technicalQuality = Math.min(100, baseline.qualityScore + 9);\n    \n    const overall = (accuracy + consistency + contextAppropriateness + culturalAdaptation + technicalQuality) / 5;\n    \n    // 判断趋势\n    let trend: QualityScore['trend'] = 'stable';\n    if (overall > baseline.qualityScore + 5) trend = 'improving';\n    else if (overall < baseline.qualityScore - 5) trend = 'declining';\n    \n    evaluation.qualityScore = {\n      overall: Math.round(overall),\n      breakdown: {\n        accuracy: Math.round(accuracy),\n        consistency: Math.round(consistency),\n        contextAppropriateness: Math.round(contextAppropriateness),\n        culturalAdaptation: Math.round(culturalAdaptation),\n        technicalQuality: Math.round(technicalQuality)\n      },\n      trend,\n      benchmarking: {\n        industryAverage: 75,\n        bestInClass: 90,\n        ourPosition: Math.round(overall)\n      }\n    };\n  }\n\n  /**\n   * 比较用户反馈\n   */\n  private async compareUserFeedback(evaluation: ImprovementEvaluation): Promise<void> {\n    const baseline = evaluation.baselineMetrics;\n    const current = evaluation.postImplementationMetrics;\n    \n    const baselinePositive = Math.floor(baseline.totalFeedbacks * baseline.satisfactionRate);\n    const baselineNegative = Math.floor(baseline.totalFeedbacks * 0.2); // 假设20%负面\n    const baselineNeutral = baseline.totalFeedbacks - baselinePositive - baselineNegative;\n    \n    const currentPositive = Math.floor(current.totalFeedbacks * current.satisfactionRate);\n    const currentNegative = Math.floor(current.totalFeedbacks * 0.15); // 负面比例下降\n    const currentNeutral = current.totalFeedbacks - currentPositive - currentNegative;\n    \n    evaluation.userFeedbackComparison = {\n      positiveFeedback: {\n        baseline: baselinePositive,\n        postImplementation: currentPositive,\n        changeRate: ((currentPositive - baselinePositive) / baselinePositive) * 100,\n        commonThemes: ['翻译质量提升', '用户体验改善']\n      },\n      negativeFeedback: {\n        baseline: baselineNegative,\n        postImplementation: currentNegative,\n        changeRate: ((currentNegative - baselineNegative) / baselineNegative) * 100,\n        commonThemes: ['仍需改进的方面']\n      },\n      neutralFeedback: {\n        baseline: baselineNeutral,\n        postImplementation: currentNeutral,\n        changeRate: ((currentNeutral - baselineNeutral) / baselineNeutral) * 100\n      },\n      feedbackVolume: {\n        baseline: baseline.totalFeedbacks,\n        postImplementation: current.totalFeedbacks,\n        changeRate: ((current.totalFeedbacks - baseline.totalFeedbacks) / baseline.totalFeedbacks) * 100\n      }\n    };\n  }\n\n  /**\n   * 生成建议\n   */\n  private async generateRecommendations(evaluation: ImprovementEvaluation): Promise<void> {\n    const recommendations: EvaluationRecommendation[] = [];\n    \n    if (evaluation.impactAnalysis.impactScore > 10) {\n      recommendations.push({\n        id: 'scale_improvement',\n        priority: 'high',\n        category: 'scale',\n        title: '扩大改进范围',\n        description: '当前改进效果显著，建议将成功经验应用到更多场景',\n        rationale: `影响分数达到${evaluation.impactAnalysis.impactScore}，表明改进方案有效`,\n        expectedOutcome: '进一步提升整体翻译质量',\n        effort: 'medium',\n        timeline: '2-4周',\n        resources: ['翻译团队', '产品团队']\n      });\n    }\n    \n    if (evaluation.roiCalculation.roi > 50) {\n      recommendations.push({\n        id: 'invest_similar',\n        priority: 'medium',\n        category: 'optimize',\n        title: '投资类似改进',\n        description: 'ROI表现优秀，建议投资类似的项目',\n        rationale: `ROI达到${evaluation.roiCalculation.roi}%，具有良好投资回报`,\n        expectedOutcome: '持续改善翻译质量',\n        effort: 'low',\n        timeline: '1-2周',\n        resources: ['项目管理团队']\n      });\n    }\n    \n    if (evaluation.qualityScore.overall < 80) {\n      recommendations.push({\n        id: 'additional_improvements',\n        priority: 'medium',\n        category: 'optimize',\n        title: '继续优化',\n        description: '质量分数仍有提升空间，建议进一步改进',\n        rationale: `当前质量分数为${evaluation.qualityScore.overall}，低于行业平均水平`,\n        expectedOutcome: '质量分数提升至80分以上',\n        effort: 'high',\n        timeline: '4-6周',\n        resources: ['质量控制团队', '翻译专家']\n      });\n    }\n    \n    evaluation.recommendations = recommendations;\n  }\n\n  /**\n   * 获取评估结果\n   */\n  getEvaluation(evaluationId: string): ImprovementEvaluation | null {\n    return this.evaluations.get(evaluationId) || null;\n  }\n\n  /**\n   * 获取所有评估\n   */\n  getAllEvaluations(): ImprovementEvaluation[] {\n    return Array.from(this.evaluations.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  /**\n   * 获取评估摘要\n   */\n  getEvaluationSummary(): EvaluationSummary {\n    const evaluations = this.getAllEvaluations();\n    const completedEvaluations = evaluations.filter(e => e.status === 'completed');\n    \n    if (completedEvaluations.length === 0) {\n      return {\n        totalEvaluations: 0,\n        successRate: 0,\n        averageROI: 0,\n        averageQualityImprovement: 0,\n        topPerformers: [],\n        lessonsLearned: [],\n        bestPractices: []\n      };\n    }\n    \n    const successRate = completedEvaluations.filter(e => \n      e.impactAnalysis.overallImpact.includes('positive')\n    ).length / completedEvaluations.length;\n    \n    const averageROI = completedEvaluations.reduce((sum, e) => \n      sum + e.roiCalculation.roi, 0) / completedEvaluations.length;\n    \n    const averageQualityImprovement = completedEvaluations.reduce((sum, e) => \n      sum + e.impactAnalysis.impactScore, 0) / completedEvaluations.length;\n    \n    // 获取表现最好的改进\n    const topPerformers = completedEvaluations\n      .sort((a, b) => b.impactAnalysis.impactScore - a.impactAnalysis.impactScore)\n      .slice(0, 5)\n      .map(e => e.improvementTitle);\n    \n    return {\n      totalEvaluations: evaluations.length,\n      successRate,\n      averageROI,\n      averageQualityImprovement,\n      topPerformers,\n      lessonsLearned: [\n        '持续的用户反馈是改进的关键指标',\n        '定期评估有助于及时调整策略',\n        '投资回报率是决策的重要依据'\n      ],\n      bestPractices: [\n        '建立清晰的成功指标',\n        '保持评估的客观性',\n        '及时基于评估结果调整方向'\n      ]\n    };\n  }\n\n  /**\n   * 导出评估报告\n   */\n  exportEvaluationReport(evaluationId: string): string {\n    const evaluation = this.getEvaluation(evaluationId);\n    if (!evaluation) {\n      throw new Error('评估不存在');\n    }\n    \n    return JSON.stringify({\n      generatedAt: new Date().toISOString(),\n      evaluation\n    }, null, 2);\n  }\n\n  /**\n   * 批量评估\n   */\n  async batchEvaluateImprovements(\n    improvements: ImprovementSuggestion[],\n    maxConcurrent: number = 3\n  ): Promise<string[]> {\n    const evaluationIds: string[] = [];\n    const chunks = this.chunkArray(improvements, maxConcurrent);\n    \n    for (const chunk of chunks) {\n      const promises = chunk.map(improvement => \n        this.createEvaluation(improvement)\n      );\n      \n      const results = await Promise.all(promises);\n      evaluationIds.push(...results);\n    }\n    \n    return evaluationIds;\n  }\n\n  /**\n   * 数组分块\n   */\n  private chunkArray<T>(array: T[], chunkSize: number): T[][] {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += chunkSize) {\n      chunks.push(array.slice(i, i + chunkSize));\n    }\n    return chunks;\n  }\n\n  /**\n   * 清理过期评估\n   */\n  cleanupOldEvaluations(daysOld: number = 365): void {\n    const cutoffDate = new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000);\n    \n    for (const [id, evaluation] of this.evaluations.entries()) {\n      if (evaluation.createdAt < cutoffDate && evaluation.status === 'completed') {\n        this.evaluations.delete(id);\n      }\n    }\n    \n    this.saveEvaluations();\n  }\n}\n\n// 创建单例实例\nexport const translationImprovementEvaluator = new TranslationImprovementEvaluator();\n\nexport default translationImprovementEvaluator;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-improvement-suggester.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":78,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2010,2015],"text":"saved != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2010,2015],"text":"saved ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2010,2015],"text":"Boolean(saved)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2106,2109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2106,2109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2278,2312],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2541,2575],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3011,3014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3011,3014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":138,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":138,"endColumn":22,"fix":{"range":[3607,3820],"text":"for (const feedback of feedbacks) {\n      feedback.issues.forEach(issue => {\n        if (!groups[issue.type]) {\n          groups[issue.type] = [];\n        }\n        groups[issue.type].push(feedback);\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":139,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":139,"endColumn":30,"fix":{"range":[3645,3812],"text":"for (const issue of feedback.issues) {\n        if (!groups[issue.type]) {\n          groups[issue.type] = [];\n        }\n        groups[issue.type].push(feedback);\n      }"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":140,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":142,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3688,3759],"text":"groups[issue.type] ??= [];"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":163,"column":39,"nodeType":"CallExpression","messageId":"substr","endLine":163,"endColumn":78,"fix":{"range":[4278,4289],"text":"slice(2, 11"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":200,"column":12,"nodeType":"MemberExpression","endLine":200,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":200,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":200,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5666,5668],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":240,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":240,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6795,6813],"text":"(typeMap[issueType] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6795,6813],"text":"(typeMap[issueType] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6795,6813],"text":"(Boolean(typeMap[issueType]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":240,"column":15,"nodeType":"MemberExpression","endLine":240,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":240,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":240,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6814,6816],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":258,"column":12,"nodeType":"MemberExpression","endLine":258,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in array predicate return type. Please handle the nullish/empty cases explicitly.","line":267,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorNullableString","endLine":267,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7523,7546],"text":"f.improvementSuggestion != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7523,7546],"text":"f.improvementSuggestion ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7523,7546],"text":"Boolean(f.improvementSuggestion)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[7518,7519],"text":"(f): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":314,"column":20,"nodeType":"MemberExpression","endLine":314,"endColumn":40},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":314,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":314,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8932,8934],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":319,"column":21,"nodeType":"MemberExpression","endLine":319,"endColumn":36},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":348,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":348,"endColumn":22,"fix":{"range":[9839,10003],"text":"for (const feedback of feedbacks) {\n      feedback.issues.forEach(issue => {\n        issues[issue.description] = (issues[issue.description] || 0) + 1;\n      });\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":349,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":349,"endColumn":30,"fix":{"range":[9877,9995],"text":"for (const issue of feedback.issues) {\n        issues[issue.description] = (issues[issue.description] || 0) + 1;\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":350,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":350,"endColumn":63,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9949,9974],"text":"(issues[issue.description] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[9949,9974],"text":"(issues[issue.description] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9949,9974],"text":"(Boolean(issues[issue.description]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":350,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":350,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9975,9977],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":381,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":381,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10773,10788],"text":"filter.language != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10773,10788],"text":"filter.language ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10773,10788],"text":"Boolean(filter.language)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":419,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":419,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12117,12128],"text":"(acc[s.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[12117,12128],"text":"(acc[s.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12117,12128],"text":"(Boolean(acc[s.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":419,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":419,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12129,12131],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":425,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":425,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12314,12327],"text":"(acc[s.status] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[12314,12327],"text":"(acc[s.status] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12314,12327],"text":"(Boolean(acc[s.status]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":425,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":425,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12328,12330],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":4,"source":"/**\n * 翻译改进建议系统\n * 基于用户反馈生成智能翻译改进建议\n */\n\nimport { FeedbackData } from '../components/TranslationFeedbackCollector';\nimport { feedbackDataManager } from './feedback-data-manager';\n\nexport interface ImprovementSuggestion {\n  id: string;\n  type: 'terminology' | 'style' | 'grammar' | 'context' | 'cultural' | 'formatting';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  title: string;\n  description: string;\n  originalText: string;\n  suggestedTranslation: string;\n  reason: string;\n  impact: {\n    userSatisfaction: number; // 0-100\n    accuracy: number; // 0-100\n    frequency: number; // 出现频率 0-100\n  };\n  relatedFeedbacks: string[]; // 相关反馈ID列表\n  implementation: {\n    estimatedEffort: 'low' | 'medium' | 'high';\n    timeRequired: number; // 小时\n    resources: string[];\n    dependencies: string[];\n  };\n  status: 'pending' | 'approved' | 'in_progress' | 'completed' | 'rejected';\n  createdAt: Date;\n  updatedAt: Date;\n  tags: string[];\n  metadata: {\n    sourceLanguage: string;\n    targetLanguage: string;\n    context: string;\n    confidence: number; // 0-1\n  };\n}\n\nexport interface SuggestionAnalysis {\n  totalSuggestions: number;\n  highPriorityCount: number;\n  averageImpact: number;\n  completionRate: number;\n  trendingTypes: { [key: string]: number };\n  implementationProgress: { [key: string]: number };\n  roiEstimate: number; // 投资回报率估算\n}\n\nexport interface QualityMetrics {\n  overallScore: number;\n  accuracyScore: number;\n  styleScore: number;\n  contextScore: number;\n  culturalScore: number;\n  frequencyScore: number;\n  trend: 'improving' | 'declining' | 'stable';\n  recommendations: string[];\n}\n\nclass TranslationImprovementSuggester {\n  private suggestions: ImprovementSuggestion[] = [];\n  private readonly CONFIDENCE_THRESHOLD = 0.7;\n  private readonly MIN_FEEDBACK_COUNT = 3;\n\n  constructor() {\n    this.loadExistingSuggestions();\n  }\n\n  /**\n   * 加载现有建议\n   */\n  private loadExistingSuggestions(): void {\n    try {\n      const saved = localStorage.getItem('improvement_suggestions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        this.suggestions = parsed.map((item: any) => ({\n          ...item,\n          createdAt: new Date(item.createdAt),\n          updatedAt: new Date(item.updatedAt)\n        }));\n      }\n    } catch (error) {\n      console.error('加载改进建议失败:', error);\n      this.suggestions = [];\n    }\n  }\n\n  /**\n   * 保存建议到存储\n   */\n  private saveSuggestions(): void {\n    try {\n      localStorage.setItem('improvement_suggestions', JSON.stringify(this.suggestions));\n    } catch (error) {\n      console.error('保存改进建议失败:', error);\n    }\n  }\n\n  /**\n   * 基于反馈数据生成改进建议\n   */\n  async generateSuggestionsFromFeedback(feedbacks: FeedbackData[]): Promise<ImprovementSuggestion[]> {\n    const suggestions: ImprovementSuggestion[] = [];\n\n    // 按问题类型分组分析\n    const groupedFeedbacks = this.groupFeedbacksByIssue(feedbacks);\n    \n    for (const [issueType, feedbackGroup] of Object.entries(groupedFeedbacks)) {\n      const suggestion = await this.analyzeIssueType(issueType as any, feedbackGroup);\n      if (suggestion) {\n        suggestions.push(suggestion);\n      }\n    }\n\n    // 按优先级排序\n    suggestions.sort((a, b) => {\n      const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n\n    // 保存新生成的建议\n    this.suggestions.push(...suggestions);\n    this.saveSuggestions();\n\n    return suggestions;\n  }\n\n  /**\n   * 按问题类型分组反馈\n   */\n  private groupFeedbacksByIssue(feedbacks: FeedbackData[]): { [key: string]: FeedbackData[] } {\n    const groups: { [key: string]: FeedbackData[] } = {};\n\n    feedbacks.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        if (!groups[issue.type]) {\n          groups[issue.type] = [];\n        }\n        groups[issue.type].push(feedback);\n      });\n    });\n\n    return groups;\n  }\n\n  /**\n   * 分析特定问题类型并生成建议\n   */\n  private async analyzeIssueType(\n    issueType: 'incorrect' | 'missing' | 'inappropriate' | 'format' | 'context',\n    feedbacks: FeedbackData[]\n  ): Promise<ImprovementSuggestion | null> {\n    \n    if (feedbacks.length < this.MIN_FEEDBACK_COUNT) {\n      return null; // 需要足够的反馈数据\n    }\n\n    const suggestion: ImprovementSuggestion = {\n      id: `suggestion_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: this.mapIssueTypeToSuggestionType(issueType),\n      priority: this.determinePriority(feedbacks),\n      title: this.generateTitle(issueType, feedbacks),\n      description: this.generateDescription(issueType, feedbacks),\n      originalText: this.extractCommonPattern(feedbacks, 'originalText'),\n      suggestedTranslation: this.generateSuggestedTranslation(feedbacks),\n      reason: this.generateReason(issueType, feedbacks),\n      impact: this.calculateImpact(feedbacks),\n      relatedFeedbacks: feedbacks.map(f => f.id),\n      implementation: this.estimateImplementation(issueType),\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      tags: this.extractTags(feedbacks),\n      metadata: {\n        sourceLanguage: feedbacks[0].sourceLanguage,\n        targetLanguage: feedbacks[0].targetLanguage,\n        context: feedbacks[0].translationContext,\n        confidence: this.calculateConfidence(feedbacks)\n      }\n    };\n\n    return suggestion;\n  }\n\n  /**\n   * 将问题类型映射为建议类型\n   */\n  private mapIssueTypeToSuggestionType(issueType: string): ImprovementSuggestion['type'] {\n    const mapping: { [key: string]: ImprovementSuggestion['type'] } = {\n      'incorrect': 'accuracy',\n      'missing': 'context',\n      'inappropriate': 'style',\n      'format': 'formatting',\n      'context': 'cultural'\n    };\n    return mapping[issueType] || 'style';\n  }\n\n  /**\n   * 确定优先级\n   */\n  private determinePriority(feedbacks: FeedbackData[]): ImprovementSuggestion['priority'] {\n    const highSeverityCount = feedbacks.filter(f => \n      f.issues.some(issue => \n        issue.severity === 'critical' || issue.severity === 'major'\n      )\n    ).length;\n    \n    const highUrgencyCount = feedbacks.filter(f => f.urgency === 'high').length;\n    const averageRating = feedbacks.reduce((sum, f) => sum + f.rating, 0) / feedbacks.length;\n\n    if (highSeverityCount > 0 || highUrgencyCount > 0 || averageRating < 2) {\n      return 'urgent';\n    } else if (highSeverityCount > 0 || averageRating < 3) {\n      return 'high';\n    } else if (averageRating < 4) {\n      return 'medium';\n    } else {\n      return 'low';\n    }\n  }\n\n  /**\n   * 生成建议标题\n   */\n  private generateTitle(issueType: string, feedbacks: FeedbackData[]): string {\n    const typeMap: { [key: string]: string } = {\n      'incorrect': '翻译准确性改进',\n      'missing': '内容完整性优化',\n      'inappropriate': '用词表达优化',\n      'format': '格式规范化',\n      'context': '语境适配改进'\n    };\n    \n    const count = feedbacks.length;\n    return `${typeMap[issueType] || '翻译改进'} (${count}条反馈)`;\n  }\n\n  /**\n   * 生成建议描述\n   */\n  private generateDescription(issueType: string, feedbacks: FeedbackData[]): string {\n    const commonIssues = this.extractCommonIssues(feedbacks);\n    const frequency = feedbacks.length;\n    \n    return `基于${frequency}条用户反馈，发现以下问题：${commonIssues.join('、')}。建议进行相应的翻译改进以提升用户体验。`;\n  }\n\n  /**\n   * 提取常见模式\n   */\n  private extractCommonPattern(feedbacks: FeedbackData[], field: keyof FeedbackData): string {\n    // 简化处理，返回第一个值作为示例\n    return feedbacks[0][field] as string;\n  }\n\n  /**\n   * 生成建议翻译\n   */\n  private generateSuggestedTranslation(feedbacks: FeedbackData[]): string {\n    // 基于用户建议和改进意见生成改进的翻译\n    const suggestions = feedbacks\n      .filter(f => f.improvementSuggestion)\n      .map(f => f.improvementSuggestion);\n    \n    if (suggestions.length > 0) {\n      return suggestions[0]; // 使用第一个建议作为参考\n    }\n    \n    return '建议的改进翻译内容';\n  }\n\n  /**\n   * 生成原因说明\n   */\n  private generateReason(issueType: string, feedbacks: FeedbackData[]): string {\n    const avgRating = feedbacks.reduce((sum, f) => sum + f.rating, 0) / feedbacks.length;\n    \n    return `用户平均评分为${avgRating.toFixed(1)}分，表明此问题影响了用户体验。${feedbacks.length}位用户反馈了类似问题，需要优先处理。`;\n  }\n\n  /**\n   * 计算影响指标\n   */\n  private calculateImpact(feedbacks: FeedbackData[]): ImprovementSuggestion['impact'] {\n    const frequency = (feedbacks.length / 100) * 100; // 简化为百分比\n    const avgRating = feedbacks.reduce((sum, f) => sum + f.rating, 0) / feedbacks.length;\n    const userSatisfaction = (avgRating / 5) * 100;\n    const accuracy = Math.max(0, 100 - (feedbacks.filter(f => f.rating <= 2).length / feedbacks.length * 100));\n    \n    return {\n      userSatisfaction,\n      accuracy,\n      frequency: Math.min(frequency, 100)\n    };\n  }\n\n  /**\n   * 估算实施成本\n   */\n  private estimateImplementation(issueType: string): ImprovementSuggestion['implementation'] {\n    const effortMap: { [key: string]: 'low' | 'medium' | 'high' } = {\n      'format': 'low',\n      'missing': 'medium',\n      'inappropriate': 'medium',\n      'incorrect': 'high',\n      'context': 'high'\n    };\n    \n    const effort = effortMap[issueType] || 'medium';\n    const timeMap = { low: 1, medium: 4, high: 12 };\n    \n    return {\n      estimatedEffort: effort,\n      timeRequired: timeMap[effort],\n      resources: ['翻译团队', '质量控制'],\n      dependencies: ['术语库更新', '风格指南修订']\n    };\n  }\n\n  /**\n   * 提取标签\n   */\n  private extractTags(feedbacks: FeedbackData[]): string[] {\n    const allTags = feedbacks.flatMap(f => f.tags);\n    return [...new Set(allTags)];\n  }\n\n  /**\n   * 计算置信度\n   */\n  private calculateConfidence(feedbacks: FeedbackData[]): number {\n    const baseConfidence = Math.min(feedbacks.length / 10, 1); // 最多10条反馈达到100%置信度\n    const agreementScore = feedbacks.filter(f => f.rating <= 2).length / feedbacks.length; // 低评分一致性\n    return Math.min(baseConfidence + agreementScore * 0.3, 1);\n  }\n\n  /**\n   * 提取常见问题\n   */\n  private extractCommonIssues(feedbacks: FeedbackData[]): string[] {\n    const issues: { [key: string]: number } = {};\n    \n    feedbacks.forEach(feedback => {\n      feedback.issues.forEach(issue => {\n        issues[issue.description] = (issues[issue.description] || 0) + 1;\n      });\n    });\n    \n    return Object.entries(issues)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([issue]) => issue);\n  }\n\n  /**\n   * 获取所有改进建议\n   */\n  getAllSuggestions(filter?: {\n    type?: ImprovementSuggestion['type'];\n    priority?: ImprovementSuggestion['priority'];\n    status?: ImprovementSuggestion['status'];\n    language?: string;\n  }): ImprovementSuggestion[] {\n    let filtered = [...this.suggestions];\n    \n    if (filter) {\n      if (filter.type) {\n        filtered = filtered.filter(s => s.type === filter.type);\n      }\n      if (filter.priority) {\n        filtered = filtered.filter(s => s.priority === filter.priority);\n      }\n      if (filter.status) {\n        filtered = filtered.filter(s => s.status === filter.status);\n      }\n      if (filter.language) {\n        filtered = filtered.filter(s => \n          s.metadata.sourceLanguage === filter.language || \n          s.metadata.targetLanguage === filter.language\n        );\n      }\n    }\n    \n    return filtered.sort((a, b) => {\n      // 按优先级和时间排序\n      const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\n      if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      }\n      return b.createdAt.getTime() - a.createdAt.getTime();\n    });\n  }\n\n  /**\n   * 获取建议统计信息\n   */\n  getSuggestionAnalysis(): SuggestionAnalysis {\n    const totalSuggestions = this.suggestions.length;\n    const highPriorityCount = this.suggestions.filter(s => \n      s.priority === 'high' || s.priority === 'urgent'\n    ).length;\n    \n    const completedSuggestions = this.suggestions.filter(s => s.status === 'completed');\n    const averageImpact = completedSuggestions.length > 0 ? \n      completedSuggestions.reduce((sum, s) => \n        sum + (s.impact.userSatisfaction + s.impact.accuracy) / 2, 0\n      ) / completedSuggestions.length : 0;\n    \n    const completionRate = totalSuggestions > 0 ? \n      completedSuggestions.length / totalSuggestions : 0;\n    \n    // 统计建议类型趋势\n    const trendingTypes = this.suggestions.reduce((acc, s) => {\n      acc[s.type] = (acc[s.type] || 0) + 1;\n      return acc;\n    }, {} as { [key: string]: number });\n    \n    // 统计实施进度\n    const implementationProgress = this.suggestions.reduce((acc, s) => {\n      acc[s.status] = (acc[s.status] || 0) + 1;\n      return acc;\n    }, {} as { [key: string]: number });\n    \n    // 估算ROI\n    const estimatedROI = this.calculateEstimatedROI();\n    \n    return {\n      totalSuggestions,\n      highPriorityCount,\n      averageImpact,\n      completionRate,\n      trendingTypes,\n      implementationProgress,\n      roiEstimate: estimatedROI\n    };\n  }\n\n  /**\n   * 计算估算ROI\n   */\n  private calculateEstimatedROI(): number {\n    const completedSuggestions = this.suggestions.filter(s => s.status === 'completed');\n    const totalTime = completedSuggestions.reduce((sum, s) => sum + s.implementation.timeRequired, 0);\n    \n    // 简化的ROI计算：假设每完成一个建议可以提升5%的用户满意度\n    const satisfactionGain = completedSuggestions.length * 5;\n    const timeCost = totalTime; // 假设每小时成本为单位1\n    \n    return timeCost > 0 ? satisfactionGain / timeCost : 0;\n  }\n\n  /**\n   * 获取质量指标\n   */\n  getQualityMetrics(): QualityMetrics {\n    const recentSuggestions = this.suggestions.filter(s => \n      s.createdAt.getTime() > Date.now() - 30 * 24 * 60 * 60 * 1000 // 最近30天\n    );\n    \n    if (recentSuggestions.length === 0) {\n      return {\n        overallScore: 0,\n        accuracyScore: 0,\n        styleScore: 0,\n        contextScore: 0,\n        culturalScore: 0,\n        frequencyScore: 0,\n        trend: 'stable',\n        recommendations: ['暂无足够数据进行分析']\n      };\n    }\n    \n    const averageAccuracy = recentSuggestions.reduce((sum, s) => sum + s.impact.accuracy, 0) / recentSuggestions.length;\n    const averageStyle = recentSuggestions.filter(s => s.type === 'style').length > 0 ? \n      recentSuggestions.filter(s => s.type === 'style').reduce((sum, s) => sum + s.impact.userSatisfaction, 0) / \n      recentSuggestions.filter(s => s.type === 'style').length : 0;\n    const averageContext = recentSuggestions.filter(s => s.type === 'context').length > 0 ? \n      recentSuggestions.filter(s => s.type === 'context').reduce((sum, s) => sum + s.impact.userSatisfaction, 0) / \n      recentSuggestions.filter(s => s.type === 'context').length : 0;\n    const averageCultural = recentSuggestions.filter(s => s.type === 'cultural').length > 0 ? \n      recentSuggestions.filter(s => s.type === 'cultural').reduce((sum, s) => sum + s.impact.userSatisfaction, 0) / \n      recentSuggestions.filter(s => s.type === 'cultural').length : 0;\n    \n    const overallScore = (averageAccuracy + averageStyle + averageContext + averageCultural) / 4;\n    const frequencyScore = Math.min(recentSuggestions.length * 10, 100);\n    \n    // 判断趋势（简化处理）\n    const trend: 'improving' | 'declining' | 'stable' = 'stable';\n    \n    const recommendations: string[] = [];\n    if (averageAccuracy < 70) {\n      recommendations.push('重点关注翻译准确性改进');\n    }\n    if (averageStyle < 70) {\n      recommendations.push('优化表达风格和用词');\n    }\n    if (averageContext < 70) {\n      recommendations.push('加强语境适配');\n    }\n    if (recentSuggestions.length > 10) {\n      recommendations.push('考虑系统性改进以减少问题数量');\n    }\n    \n    return {\n      overallScore: Math.round(overallScore),\n      accuracyScore: Math.round(averageAccuracy),\n      styleScore: Math.round(averageStyle),\n      contextScore: Math.round(averageContext),\n      culturalScore: Math.round(averageCultural),\n      frequencyScore: Math.round(frequencyScore),\n      trend,\n      recommendations\n    };\n  }\n\n  /**\n   * 更新建议状态\n   */\n  updateSuggestionStatus(\n    suggestionId: string, \n    status: ImprovementSuggestion['status']\n  ): void {\n    const suggestion = this.suggestions.find(s => s.id === suggestionId);\n    if (suggestion) {\n      suggestion.status = status;\n      suggestion.updatedAt = new Date();\n      this.saveSuggestions();\n    }\n  }\n\n  /**\n   * 删除建议\n   */\n  deleteSuggestion(suggestionId: string): void {\n    this.suggestions = this.suggestions.filter(s => s.id !== suggestionId);\n    this.saveSuggestions();\n  }\n\n  /**\n   * 导出建议报告\n   */\n  exportSuggestionsReport(): string {\n    const analysis = this.getSuggestionAnalysis();\n    const qualityMetrics = this.getQualityMetrics();\n    \n    return JSON.stringify({\n      generatedAt: new Date().toISOString(),\n      analysis,\n      qualityMetrics,\n      suggestions: this.suggestions\n    }, null, 2);\n  }\n\n  /**\n   * 自动生成批量建议\n   */\n  async autoGenerateSuggestions(): Promise<ImprovementSuggestion[]> {\n    const allFeedbacks = feedbackDataManager.getAllFeedback();\n    \n    // 只考虑未解决的反馈\n    const unresolvedFeedbacks = allFeedbacks.filter(f => !f.isResolved);\n    \n    if (unresolvedFeedbacks.length < this.MIN_FEEDBACK_COUNT) {\n      return [];\n    }\n    \n    return await this.generateSuggestionsFromFeedback(unresolvedFeedbacks);\n  }\n\n  /**\n   * 预测改进效果\n   */\n  predictImprovementImpact(suggestionIds: string[]): {\n    estimatedSatisfactionGain: number;\n    estimatedAccuracyGain: number;\n    timeToImplementation: number;\n    roi: number;\n  } {\n    const suggestions = this.suggestions.filter(s => suggestionIds.includes(s.id));\n    \n    const estimatedSatisfactionGain = suggestions.reduce((sum, s) => \n      sum + s.impact.userSatisfaction * 0.1, 0); // 假设实现10%的潜在提升\n    const estimatedAccuracyGain = suggestions.reduce((sum, s) => \n      sum + s.impact.accuracy * 0.1, 0);\n    const timeToImplementation = suggestions.reduce((sum, s) => \n      sum + s.implementation.timeRequired, 0);\n    const roi = estimatedSatisfactionGain / (timeToImplementation * 10); // 简化ROI计算\n    \n    return {\n      estimatedSatisfactionGain: Math.round(estimatedSatisfactionGain),\n      estimatedAccuracyGain: Math.round(estimatedAccuracyGain),\n      timeToImplementation,\n      roi: Math.round(roi * 100) / 100\n    };\n  }\n}\n\n// 创建单例实例\nexport const translationImprovementSuggester = new TranslationImprovementSuggester();\n\nexport default translationImprovementSuggester;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-loader.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'createContext' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createContext' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'useContext' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useContext' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactNode' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReactNode' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TranslationContextValue' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TranslationContextValue' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1079,1082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1079,1082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":57,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'locale' is defined but never used. Allowed unused args must match /^_/u.","line":57,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'namespaces' is defined but never used. Allowed unused args must match /^_/u.","line":58,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'locale' is defined but never used. Allowed unused args must match /^_/u.","line":58,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":60},{"ruleId":"no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":59,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'maxSize' is defined but never used. Allowed unused args must match /^_/u.","line":112,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":119,"column":17,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":119,"endColumn":19,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3009,3011],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":165,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":165,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4113,4119],"text":"lruKey != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4113,4119],"text":"lruKey ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4113,4119],"text":"Boolean(lruKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'baseUrl' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":188,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":188,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":193,"column":28,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":193,"endColumn":71,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4667,4710],"text":"(Boolean((navigator.headers?.get?.('accept-encoding'))))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":193,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":193,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4711,4713],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":194,"column":31,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":194,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4748,4779],"text":"(Boolean(acceptEncoding.includes('gzip')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":194,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":194,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4780,4782],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":214,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":214,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5379,5417],"text":"(response.headers.get('content-length') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5379,5417],"text":"(response.headers.get('content-length') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5379,5417],"text":"(Boolean(response.headers.get('content-length')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":214,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":214,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5418,5420],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loadTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":215,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loadTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":215,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":18,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":223,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5608,5636],"text":"(response.headers.get('etag') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5608,5636],"text":"(response.headers.get('etag') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5608,5636],"text":"(Boolean(response.headers.get('etag')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":223,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":223,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5637,5639],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `err` should be named `error`.","line":243,"column":63,"nodeType":"Identifier","messageId":"catch-error-name","endLine":243,"endColumn":66,"fix":{"range":[6328,6413],"text":"error => {\n          console.warn(`Failed to load ${req.locale}/${req.namespace}:`, error"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6347,6415],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":312,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":312,"endColumn":23,"fix":{"range":[8283,8780],"text":"for (const namespace of namespaces) {\n      if (!this.preloadedNamespaces.has(namespace) && !criticalNamespaces.includes(namespace)) {\n        // 在空闲时预加载\n        if ('requestIdleCallback' in window) {\n          (window as any).requestIdleCallback(() => {\n            this.loadNamespace(namespace, locale).catch(console.warn);\n          });\n        } else {\n          setTimeout(() => {\n            this.loadNamespace(namespace, locale).catch(console.warn);\n          }, 100);\n        }\n      }\n    }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8501,8504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8501,8504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":57,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":69},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":57,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":69},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":330,"column":47,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":330,"endColumn":54,"fix":{"range":[8881,8888],"text":"{return;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":334,"column":15,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":334,"endColumn":22,"fix":{"range":[8999,9232],"text":"for (const entry of entries) {\n        if (entry.isIntersecting) {\n          const namespaces = this.getNamespacesFromRoute(entry.target.getAttribute('data-route') || '');\n          this.preloadNamespaces(namespaces);\n        }\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":336,"column":58,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":336,"endColumn":97,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9119,9158],"text":"(entry.target.getAttribute('data-route') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9119,9158],"text":"(entry.target.getAttribute('data-route') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9119,9158],"text":"(Boolean(entry.target.getAttribute('data-route')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":336,"column":98,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":336,"endColumn":100,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9159,9161],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":347,"column":50,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":347,"endColumn":57,"fix":{"range":[9385,9392],"text":"{return;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'mousePosition' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":349,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":349,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mousePosition' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":349,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":349,"endColumn":22},{"ruleId":"prefer-const","severity":2,"message":"'clickHistory' is never reassigned. Use 'const' instead.","line":350,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":350,"endColumn":68,"fix":{"range":[9438,9507],"text":"const clickHistory: Array<{ x: number; y: number; time: number }> = [];"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":374,"column":16,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":374,"endColumn":28,"fix":{"range":[10132,10144],"text":"{return null;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10194,10197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10194,10197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":380,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":380,"endColumn":16,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10253,10258],"text":"(Boolean(value))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":381,"column":17,"nodeType":"MemberExpression","endLine":381,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":425,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":425,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11477,11497],"text":"config.routePattern == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11478,11497],"text":"(config.routePattern ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11477,11497],"text":"!Boolean(config.routePattern)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":425,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":425,"endColumn":46,"fix":{"range":[11499,11512],"text":"{return false;}"}},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":426,"column":23,"nodeType":"NewExpression","endLine":426,"endColumn":73},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":436,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":436,"endColumn":41,"fix":{"range":[11868,11875],"text":"{return;}"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":468,"column":17,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":468,"endColumn":24,"fix":{"range":[12814,13043],"text":"for (const entry of entries) {\n          if (entry.entryType === 'resource' && entry.name.includes('/locales/')) {\n            console.log(`Translation loaded: ${entry.name}, duration: ${entry.duration}ms`);\n          }\n        }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12939,13019],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setTranslations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":482,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":482,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTranslations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":482,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":482,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":482,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":482,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13264,13267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13264,13267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setCurrentLocale' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":484,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":484,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCurrentLocale' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":484,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":484,"endColumn":41},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":490,"column":24,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":490,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":494,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":494,"endColumn":21}],"suppressedMessages":[],"errorCount":49,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":7,"fixableWarningCount":3,"source":"/**\n * 翻译文件渐进式加载器\n * 实现按需和渐进式翻译文件加载，支持预加载、缓存和压缩\n */\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// 加载状态类型\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n\n// 翻译命名空间配置\nexport interface NamespaceConfig {\n  name: string;\n  priority: 'critical' | 'high' | 'normal' | 'low';\n  routePattern?: string;\n  dependencies?: string[];\n  size?: number;\n  lastUsed?: number;\n}\n\n// 翻译文件信息\nexport interface TranslationFile {\n  locale: string;\n  namespace: string;\n  content: Record<string, any>;\n  size: number;\n  loadedAt: number;\n  version: string;\n}\n\n// 加载策略配置\nexport interface LoadingStrategy {\n  initialNamespaces: string[];\n  preloadRules: {\n    routeBased: boolean;\n    timeBased: boolean;\n    behaviorBased: boolean;\n  };\n  cacheStrategy: {\n    maxCacheSize: number;\n    cacheTimeout: number;\n    compressionEnabled: boolean;\n  };\n  performance: {\n    enableGzip: boolean;\n    enableBrotli: boolean;\n    batchLoadSize: number;\n  };\n}\n\n// 翻译上下文\ninterface TranslationContextValue {\n  translations: Record<string, Record<string, any>>;\n  loadingStates: Record<string, LoadingState>;\n  currentLocale: string;\n  availableLocales: string[];\n  loadNamespace: (namespace: string, locale?: string) => Promise<void>;\n  preloadNamespaces: (namespaces: string[], locale?: string) => void;\n  unloadNamespace: (namespace: string) => void;\n  getTranslationStats: () => TranslationStats;\n}\n\n// 翻译统计信息\nexport interface TranslationStats {\n  totalNamespaces: number;\n  loadedNamespaces: number;\n  totalSize: number;\n  cacheHitRate: number;\n  averageLoadTime: number;\n  lastCleanup: number;\n}\n\n// 默认配置\nconst DEFAULT_LOADING_STRATEGY: LoadingStrategy = {\n  initialNamespaces: ['common', 'auth'],\n  preloadRules: {\n    routeBased: true,\n    timeBased: true,\n    behaviorBased: true,\n  },\n  cacheStrategy: {\n    maxCacheSize: 10 * 1024 * 1024, // 10MB\n    cacheTimeout: 30 * 60 * 1000, // 30分钟\n    compressionEnabled: true,\n  },\n  performance: {\n    enableGzip: true,\n    enableBrotli: true,\n    batchLoadSize: 3,\n  },\n};\n\n// 命名空间配置\nconst NAMESPACE_CONFIGS: NamespaceConfig[] = [\n  { name: 'common', priority: 'critical', size: 15 * 1024 },\n  { name: 'auth', priority: 'critical', size: 12 * 1024 },\n  { name: 'error', priority: 'critical', size: 8 * 1024 },\n  { name: 'admin', priority: 'high', routePattern: '/admin*', size: 25 * 1024 },\n  { name: 'lottery', priority: 'high', size: 30 * 1024 },\n  { name: 'referral', priority: 'normal', size: 20 * 1024 },\n  { name: 'wallet', priority: 'normal', size: 18 * 1024 },\n  { name: 'bot', priority: 'low', size: 16 * 1024 },\n  { name: 'task', priority: 'low', size: 14 * 1024 },\n];\n\n// 内存缓存\nclass TranslationCache {\n  private cache = new Map<string, TranslationFile>();\n  private accessOrder: string[] = [];\n  private totalSize = 0;\n\n  constructor(private maxSize: number) {}\n\n  get(key: string): TranslationFile | null {\n    const file = this.cache.get(key);\n    if (file) {\n      this.updateAccessOrder(key);\n    }\n    return file || null;\n  }\n\n  set(key: string, file: TranslationFile): void {\n    // 如果已存在，更新访问顺序\n    if (this.cache.has(key)) {\n      this.updateAccessOrder(key);\n    } else {\n      // 检查是否需要清理缓存\n      while (this.totalSize + file.size > this.maxSize && this.accessOrder.length > 0) {\n        this.evictLeastRecentlyUsed();\n      }\n      this.accessOrder.push(key);\n    }\n    \n    this.cache.set(key, file);\n    this.totalSize += file.size;\n  }\n\n  delete(key: string): void {\n    if (this.cache.has(key)) {\n      const file = this.cache.get(key);\n      if (file) {\n        this.totalSize -= file.size;\n      }\n      this.cache.delete(key);\n      this.accessOrder = this.accessOrder.filter(k => k !== key);\n    }\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.accessOrder = [];\n    this.totalSize = 0;\n  }\n\n  private updateAccessOrder(key: string): void {\n    const index = this.accessOrder.indexOf(key);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n      this.accessOrder.push(key);\n    }\n  }\n\n  private evictLeastRecentlyUsed(): void {\n    const lruKey = this.accessOrder.shift();\n    if (lruKey) {\n      this.delete(lruKey);\n    }\n  }\n\n  getStats() {\n    return {\n      size: this.totalSize,\n      count: this.cache.size,\n      hitRate: this.calculateHitRate(),\n    };\n  }\n\n  private calculateHitRate(): number {\n    // 简化实现，实际应该基于访问统计\n    return this.cache.size / (this.cache.size + 1);\n  }\n}\n\n// HTTP客户端\nclass TranslationHttpClient {\n  private compressionEnabled = true;\n\n  constructor(private baseUrl: string = '/locales') {\n    this.detectCompressionSupport();\n  }\n\n  private detectCompressionSupport(): void {\n    const acceptEncoding = navigator.headers?.get?.('accept-encoding') || '';\n    this.compressionEnabled = acceptEncoding.includes('gzip') || acceptEncoding.includes('br');\n  }\n\n  async loadTranslation(locale: string, namespace: string): Promise<TranslationFile> {\n    const url = this.buildUrl(locale, namespace);\n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch(url, {\n        headers: this.compressionEnabled ? {\n          'Accept-Encoding': 'gzip, br',\n        } : {},\n        cache: 'force-cache',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const content = await response.json();\n      const size = Number(response.headers.get('content-length') || 0);\n      const loadTime = performance.now() - startTime;\n\n      return {\n        locale,\n        namespace,\n        content,\n        size,\n        loadedAt: Date.now(),\n        version: response.headers.get('etag') || '1.0',\n      };\n    } catch (error) {\n      throw new Error(`Failed to load translation ${locale}/${namespace}: ${error}`);\n    }\n  }\n\n  private buildUrl(locale: string, namespace: string): string {\n    return `${this.baseUrl}/${locale}/${namespace}.json`;\n  }\n\n  async batchLoadTranslations(\n    requests: Array<{ locale: string; namespace: string }>\n  ): Promise<TranslationFile[]> {\n    const results: TranslationFile[] = [];\n    const batchSize = 3; // 并发限制\n    \n    for (let i = 0; i < requests.length; i += batchSize) {\n      const batch = requests.slice(i, i + batchSize);\n      const batchPromises = batch.map(req => \n        this.loadTranslation(req.locale, req.namespace).catch(err => {\n          console.warn(`Failed to load ${req.locale}/${req.namespace}:`, err);\n          return null;\n        })\n      );\n      \n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults.filter(Boolean) as TranslationFile[]);\n    }\n    \n    return results;\n  }\n}\n\n// 主翻译加载器类\nexport class TranslationLoader {\n  private cache: TranslationCache;\n  private httpClient: TranslationHttpClient;\n  private loadingStates = new Map<string, LoadingState>();\n  private pendingLoads = new Map<string, Promise<TranslationFile>>();\n  private observer: IntersectionObserver | null = null;\n  private preloadedNamespaces = new Set<string>();\n\n  constructor(\n    private config: LoadingStrategy = DEFAULT_LOADING_STRATEGY\n  ) {\n    this.cache = new TranslationCache(config.cacheStrategy.maxCacheSize);\n    this.httpClient = new TranslationHttpClient();\n    this.initializePerformanceMonitoring();\n  }\n\n  // 加载命名空间\n  async loadNamespace(namespace: string, locale: string = 'zh-CN'): Promise<void> {\n    const key = `${locale}/${namespace}`;\n    \n    // 检查是否正在加载\n    if (this.loadingStates.get(key) === 'loading') {\n      await this.pendingLoads.get(key);\n      return;\n    }\n\n    // 检查缓存\n    const cached = this.cache.get(key);\n    if (cached) {\n      this.updateLoadingState(key, 'success');\n      this.preloadedNamespaces.add(namespace);\n      return;\n    }\n\n    this.updateLoadingState(key, 'loading');\n\n    try {\n      const file = await this.httpClient.loadTranslation(locale, namespace);\n      this.cache.set(key, file);\n      this.updateLoadingState(key, 'success');\n      this.preloadedNamespaces.add(namespace);\n      \n      // 清理过期的缓存\n      this.cleanupCache();\n    } catch (error) {\n      this.updateLoadingState(key, 'error');\n      throw error;\n    }\n  }\n\n  // 预加载命名空间\n  preloadNamespaces(namespaces: string[], locale: string = 'zh-CN'): void {\n    const criticalNamespaces = this.getCriticalNamespaces();\n    \n    namespaces.forEach(namespace => {\n      if (!this.preloadedNamespaces.has(namespace) && !criticalNamespaces.includes(namespace)) {\n        // 在空闲时预加载\n        if ('requestIdleCallback' in window) {\n          (window as any).requestIdleCallback(() => {\n            this.loadNamespace(namespace, locale).catch(console.warn);\n          });\n        } else {\n          setTimeout(() => {\n            this.loadNamespace(namespace, locale).catch(console.warn);\n          }, 100);\n        }\n      }\n    });\n  }\n\n  // 路由预加载\n  setupRouteBasedPreloading(): void {\n    if (!this.config.preloadRules.routeBased) return;\n\n    // 使用 Intersection Observer 预加载可见区域的翻译\n    this.observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const namespaces = this.getNamespacesFromRoute(entry.target.getAttribute('data-route') || '');\n          this.preloadNamespaces(namespaces);\n        }\n      });\n    }, {\n      rootMargin: '100px',\n    });\n  }\n\n  // 行为预测预加载\n  setupBehaviorBasedPreloading(): void {\n    if (!this.config.preloadRules.behaviorBased) return;\n\n    let mousePosition = { x: 0, y: 0 };\n    let clickHistory: Array<{ x: number; y: number; time: number }> = [];\n\n    document.addEventListener('mousemove', (e) => {\n      mousePosition = { x: e.clientX, y: e.clientY };\n    });\n\n    document.addEventListener('click', (e) => {\n      clickHistory.push({ x: e.clientX, y: e.clientY, time: Date.now() });\n      \n      // 保留最近的点击历史\n      if (clickHistory.length > 10) {\n        clickHistory.shift();\n      }\n\n      // 基于点击模式预测下一步操作\n      this.predictAndPreload(clickHistory);\n    });\n  }\n\n  // 获取翻译\n  getTranslation(key: string, locale: string, namespace: string): string | null {\n    const cacheKey = `${locale}/${namespace}`;\n    const file = this.cache.get(cacheKey);\n    \n    if (!file) return null;\n\n    const keys = key.split('.');\n    let value: any = file.content;\n\n    for (const k of keys) {\n      if (value && typeof value === 'object' && k in value) {\n        value = value[k];\n      } else {\n        return null;\n      }\n    }\n\n    return typeof value === 'string' ? value : null;\n  }\n\n  // 卸载命名空间\n  unloadNamespace(namespace: string, locale: string = 'zh-CN'): void {\n    const key = `${locale}/${namespace}`;\n    this.cache.delete(key);\n    this.preloadedNamespaces.delete(namespace);\n    this.loadingStates.delete(key);\n  }\n\n  // 获取统计信息\n  getStats(): TranslationStats {\n    const cacheStats = this.cache.getStats();\n    \n    return {\n      totalNamespaces: NAMESPACE_CONFIGS.length,\n      loadedNamespaces: this.preloadedNamespaces.size,\n      totalSize: cacheStats.size,\n      cacheHitRate: cacheStats.hitRate,\n      averageLoadTime: 0, // 简化实现\n      lastCleanup: Date.now(),\n    };\n  }\n\n  // 私有方法\n  private updateLoadingState(key: string, state: LoadingState): void {\n    this.loadingStates.set(key, state);\n  }\n\n  private getCriticalNamespaces(): string[] {\n    return NAMESPACE_CONFIGS\n      .filter(config => config.priority === 'critical')\n      .map(config => config.name);\n  }\n\n  private getNamespacesFromRoute(route: string): string[] {\n    const matchedConfigs = NAMESPACE_CONFIGS.filter(config => {\n      if (!config.routePattern) return false;\n      const pattern = new RegExp(config.routePattern.replace('*', '.*'));\n      return pattern.test(route);\n    });\n    \n    return matchedConfigs.map(config => config.name);\n  }\n\n  private predictAndPreload(clickHistory: Array<{ x: number; y: number; time: number }>): void {\n    // 简单的行为预测算法\n    // 基于点击位置和历史预测用户可能访问的页面\n    if (clickHistory.length < 3) return;\n\n    const recentClicks = clickHistory.slice(-3);\n    const avgPosition = recentClicks.reduce(\n      (acc, click) => ({ x: acc.x + click.x, y: acc.y + click.y }),\n      { x: 0, y: 0 }\n    );\n    avgPosition.x /= recentClicks.length;\n    avgPosition.y /= recentClicks.length;\n\n    // 基于位置预测可能的操作\n    if (avgPosition.y < window.innerHeight * 0.3) {\n      // 页面顶部，可能预加载导航相关翻译\n      this.preloadNamespaces(['navigation', 'menu']);\n    }\n  }\n\n  private cleanupCache(): void {\n    const now = Date.now();\n    // 清理过期的缓存项\n    for (const [key, file] of this.cache) {\n      if (now - file.loadedAt > this.config.cacheStrategy.cacheTimeout) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  private initializePerformanceMonitoring(): void {\n    // 监控翻译加载性能\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry) => {\n          if (entry.entryType === 'resource' && entry.name.includes('/locales/')) {\n            console.log(`Translation loaded: ${entry.name}, duration: ${entry.duration}ms`);\n          }\n        });\n      });\n      \n      observer.observe({ entryTypes: ['resource'] });\n    }\n  }\n}\n\n// React Hook\nexport function useTranslationLoader() {\n  const [translations, setTranslations] = useState<Record<string, Record<string, any>>>({});\n  const [loadingStates, setLoadingStates] = useState<Record<string, LoadingState>>({});\n  const [currentLocale, setCurrentLocale] = useState('zh-CN');\n  const [loader] = useState(() => new TranslationLoader());\n\n  useEffect(() => {\n    // 初始加载核心翻译\n    const criticalNamespaces = ['common', 'auth', 'error'];\n    criticalNamespaces.forEach(async (namespace) => {\n      try {\n        await loader.loadNamespace(namespace, currentLocale);\n        setLoadingStates(prev => ({ ...prev, [`${currentLocale}/${namespace}`]: 'success' }));\n      } catch (error) {\n        setLoadingStates(prev => ({ ...prev, [`${currentLocale}/${namespace}`]: 'error' }));\n      }\n    });\n  }, [currentLocale, loader]);\n\n  return {\n    translations,\n    loadingStates,\n    currentLocale,\n    availableLocales: ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'],\n    loadNamespace: loader.loadNamespace.bind(loader),\n    preloadNamespaces: loader.preloadNamespaces.bind(loader),\n    unloadNamespace: loader.unloadNamespace.bind(loader),\n    getTranslationStats: loader.getStats.bind(loader),\n  };\n}\n\n// 导出单例实例\nexport const translationLoader = new TranslationLoader();","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-maintenance-system.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1126,1157],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1369,1398],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2646,2670],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":122,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":122,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3171,3196],"text":"(process.env.SMTP_PASSWORD != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3171,3196],"text":"(process.env.SMTP_PASSWORD ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3171,3196],"text":"(Boolean(process.env.SMTP_PASSWORD))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":122,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":122,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3197,3199],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":245,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":245,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6881,6908],"text":"(process.env.SLACK_BOT_TOKEN != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6881,6908],"text":"(process.env.SLACK_BOT_TOKEN ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6881,6908],"text":"(Boolean(process.env.SLACK_BOT_TOKEN))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":245,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":245,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6909,6911],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8706,8730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":329,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":329,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8970,8974],"text":"Boolean(task)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":335,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":335,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9118,9138],"text":"(Boolean((task.metadata?.title)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":335,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":335,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9139,9141],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":340,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":340,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9325,9340],"text":"(Boolean(task.totalSteps))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":340,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":340,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9341,9343],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":362,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9889,9892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9889,9892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10352,10378],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":404,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":404,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10804,10830],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11214,11265],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":433,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":433,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11550,11571],"text":"(options.namespaces[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11550,11571],"text":"(options.namespaces[0] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11550,11571],"text":"(Boolean(options.namespaces[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":433,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":433,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11572,11574],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":438,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":438,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11716,11737],"text":"(options.namespaces[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[11716,11737],"text":"(options.namespaces[0] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11716,11737],"text":"(Boolean(options.namespaces[0]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":438,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":438,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11738,11740],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":449,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":449,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11970,12011],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":452,"column":58,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":452,"endColumn":74,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12086,12102],"text":"(options.assignee != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12086,12102],"text":"(options.assignee ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12086,12102],"text":"(Boolean(options.assignee))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":452,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":452,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12103,12105],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":457,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":457,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12230,12246],"text":"(options.assignee != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12230,12246],"text":"(options.assignee ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12230,12246],"text":"(Boolean(options.assignee))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":457,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":457,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12247,12249],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":461,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":461,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12298,12343],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":471,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":471,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12682,12698],"text":"(options.assignee != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[12682,12698],"text":"(options.assignee ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[12682,12698],"text":"(Boolean(options.assignee))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12699,12701],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":477,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":477,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12812,12866],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":498,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":498,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13203,13257],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":549,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":549,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14621,14662],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":561,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":561,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14805,14808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14805,14808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":562,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14822,14825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14822,14825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":565,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":565,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14863,14895],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":567,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":567,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14915,14918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14915,14918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":628,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":628,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16877,16925],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":635,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":635,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17049,17052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17049,17052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":636,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":636,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17078,17081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17078,17081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":658,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":658,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":672,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":672,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18208,18211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18208,18211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":673,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":673,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18237,18240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18237,18240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":680,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":680,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18372,18375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18372,18375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":681,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":681,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18401,18404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18401,18404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":687,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":687,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18521,18524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18521,18524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":688,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":688,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18550,18553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18550,18553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":700,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":700,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":711,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":711,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19117,19120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19117,19120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":722,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":722,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19392,19424],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":727,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":727,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19495,19523],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":732,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":732,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[19674,19727],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":738,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":738,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[19884,19896],"text":"(op.startTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[19884,19896],"text":"(op.startTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19884,19896],"text":"(Boolean(op.startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":738,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":738,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19897,19899],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":739,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":739,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[19934,19971],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":745,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":745,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20054,20082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":749,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":749,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20178,20219],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":753,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":753,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20301,20331],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":757,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":757,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20397,20423],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":783,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":783,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21412,21451],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":803,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":803,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21931,21968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":813,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":813,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22212,22252],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":817,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":817,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22333,22371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":824,"column":24,"nodeType":"MemberExpression","messageId":"unexpected","endLine":824,"endColumn":37}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 翻译更新和维护系统配置文件\n * Translation Update and Maintenance System Configuration\n * \n * 此文件展示了如何配置和使用翻译更新和维护流程系统\n */\n\nimport { TranslationVersionManager } from '../utils/translation-version-manager';\nimport { TranslationWorkflowManager } from '../workflows/translation-update-workflow';\nimport { TranslationSyncTool } from '../utils/translation-sync-tool';\nimport { TranslationUpdateNotifier } from '../utils/translation-update-notifier';\n\n// 配置示例：完整的翻译管理系统设置\nexport class TranslationMaintenanceSystem {\n  private versionManager: TranslationVersionManager;\n  private workflowManager: TranslationWorkflowManager;\n  private syncTool: TranslationSyncTool;\n  private notifier: TranslationUpdateNotifier;\n\n  constructor() {\n    this.versionManager = new TranslationVersionManager('./src/locales');\n    this.syncTool = new TranslationSyncTool('./src/locales');\n    this.notifier = new TranslationUpdateNotifier();\n    this.workflowManager = new TranslationWorkflowManager(this.versionManager, './src/locales');\n    \n    this.initializeSystem();\n  }\n\n  /**\n   * 初始化翻译管理系统\n   */\n  private async initializeSystem(): Promise<void> {\n    console.log('🚀 初始化翻译管理系统...');\n\n    // 1. 配置环境\n    await this.setupEnvironments();\n\n    // 2. 配置通知系统\n    await this.setupNotifications();\n\n    // 3. 设置事件监听\n    this.setupEventListeners();\n\n    // 4. 启动定期任务\n    this.startPeriodicTasks();\n\n    console.log('✅ 翻译管理系统初始化完成');\n  }\n\n  /**\n   * 设置环境配置\n   */\n  private async setupEnvironments(): Promise<void> {\n    // 开发环境\n    this.syncTool.addEnvironment({\n      name: 'development',\n      type: 'development',\n      baseUrl: 'https://dev-luckymart.example.com',\n      translationPath: './public/locales',\n      deploymentPath: './public/locales',\n      features: {\n        hotReload: true,\n        autoBackup: false,\n        rollbackEnabled: true,\n        notificationEnabled: true\n      }\n    });\n\n    // 预发布环境\n    this.syncTool.addEnvironment({\n      name: 'staging',\n      type: 'staging',\n      baseUrl: 'https://staging-luckymart.example.com',\n      translationPath: './public/locales',\n      deploymentPath: './public/locales',\n      features: {\n        hotReload: false,\n        autoBackup: true,\n        rollbackEnabled: true,\n        notificationEnabled: true\n      }\n    });\n\n    // 生产环境\n    this.syncTool.addEnvironment({\n      name: 'production',\n      type: 'production',\n      baseUrl: 'https://luckymart.example.com',\n      translationPath: './public/locales',\n      deploymentPath: './public/locales',\n      features: {\n        hotReload: false,\n        autoBackup: true,\n        rollbackEnabled: true,\n        notificationEnabled: true\n      }\n    });\n\n    console.log('✅ 环境配置完成');\n  }\n\n  /**\n   * 设置通知系统\n   */\n  private async setupNotifications(): Promise<void> {\n    // 邮件通知配置\n    this.notifier.addConfig({\n      id: 'email-notifications',\n      name: '邮件通知',\n      type: 'email',\n      enabled: true,\n      channels: [\n        {\n          type: 'email',\n          config: {\n            smtp: {\n              host: 'smtp.example.com',\n              port: 587,\n              secure: false,\n              auth: {\n                user: 'noreply@luckymart.com',\n                pass: process.env.SMTP_PASSWORD || ''\n              }\n            },\n            from: 'noreply@luckymart.com',\n            to: [\n              'translation-team@luckymart.com',\n              'pm@luckymart.com'\n            ]\n          },\n          priority: 'normal',\n          rateLimit: {\n            maxPerHour: 100,\n            maxPerDay: 1000,\n            cooldownPeriod: 60\n          }\n        }\n      ],\n      triggers: [\n        {\n          event: 'workflow:completed',\n          conditions: [],\n          batchNotifications: false\n        },\n        {\n          event: 'deployment:completed',\n          conditions: [],\n          batchNotifications: false\n        },\n        {\n          event: 'quality:threshold_exceeded',\n          conditions: [],\n          batchNotifications: true\n        }\n      ],\n      filters: [\n        {\n          name: '排除测试事件',\n          condition: [\n            {\n              field: 'metadata.test',\n              operator: 'equals',\n              value: true\n            }\n          ],\n          action: 'exclude'\n        }\n      ],\n      scheduling: {\n        timezone: 'Asia/Shanghai',\n        workingHours: {\n          start: '09:00',\n          end: '18:00',\n          days: [1, 2, 3, 4, 5] // 周一到周五\n        },\n        holidays: [\n          '2025-01-01',\n          '2025-02-12',\n          '2025-05-01',\n          '2025-10-01'\n        ],\n        batchWindows: {\n          frequency: 'hourly',\n          time: undefined\n        }\n      },\n      templates: {\n        default: 'default',\n        translations: {\n          'workflow:completed': {\n            subject: '翻译工作流已完成 - {{taskTitle}}',\n            body: `翻译工作流 \"{{taskTitle}}\" 已成功完成\\n\\n任务类型: {{taskType}}\\n优先级: {{priority}}\\n创建者: {{createdBy}}\\n完成时间: {{completionTime}}\\n处理文件数: {{filesCount}}\\n\\n感谢您的贡献！`,\n            variables: [\n              { name: 'taskTitle', type: 'string', required: true, description: '任务标题' },\n              { name: 'taskType', type: 'string', required: true, description: '任务类型' },\n              { name: 'completionTime', type: 'date', required: true, description: '完成时间' }\n            ]\n          },\n          'deployment:completed': {\n            subject: '翻译部署已完成 - {{environment}}',\n            body: `翻译部署到 {{environment}} 环境已完成\\n\\n部署ID: {{deploymentId}}\\n环境: {{environment}}\\n部署时间: {{completionTime}}\\n部署文件数: {{filesCount}}\\n状态: ✅ 成功\\n\\n系统已更新，可供用户使用。`,\n            variables: [\n              { name: 'environment', type: 'string', required: true, description: '环境名称' },\n              { name: 'deploymentId', type: 'string', required: true, description: '部署ID' }\n            ]\n          },\n          'quality:threshold_exceeded': {\n            subject: '⚠️ 翻译质量阈值超标',\n            body: `翻译质量检查发现问题\\n\\n检查项目: {{checkType}}\\n质量分数: {{score}}分 (阈值: {{threshold}}分)\\n问题数量: {{issueCount}}\\n问题详情:\\n{{issues}}\\n\\n建议:\\n{{recommendations}}\\n\\n请及时处理，确保翻译质量。`,\n            variables: [\n              { name: 'checkType', type: 'string', required: true, description: '检查类型' },\n              { name: 'score', type: 'number', required: true, description: '质量分数' }\n            ]\n          }\n        },\n        formatting: {\n          useMarkdown: true,\n          includeEmojis: true,\n          maxLength: 1000,\n          truncateText: true\n        }\n      },\n      metrics: {\n        sent: 0,\n        delivered: 0,\n        failed: 0,\n        clicked: 0,\n        opened: 0,\n        bounced: 0,\n        averageDeliveryTime: 0\n      }\n    });\n\n    // Slack通知配置\n    this.notifier.addConfig({\n      id: 'slack-notifications',\n      name: 'Slack通知',\n      type: 'slack',\n      enabled: true,\n      channels: [\n        {\n          type: 'slack',\n          config: {\n            slack: {\n              token: process.env.SLACK_BOT_TOKEN || '',\n              channel: '#translation-updates',\n              username: 'TranslationBot',\n              iconEmoji: ':globe_with_meridians:'\n            }\n          },\n          priority: 'high',\n          rateLimit: {\n            maxPerHour: 200,\n            maxPerDay: 2000,\n            cooldownPeriod: 30\n          }\n        }\n      ],\n      triggers: [\n        {\n          event: 'workflow:failed',\n          conditions: [],\n          delay: 300 // 5分钟后发送\n        },\n        {\n          event: 'deployment:failed',\n          conditions: []\n        },\n        {\n          event: 'approval:requested',\n          conditions: []\n        }\n      ],\n      filters: [],\n      scheduling: {\n        timezone: 'Asia/Shanghai',\n        workingHours: {\n          start: '08:00',\n          end: '22:00',\n          days: [1, 2, 3, 4, 5, 6] // 周一到周六\n        },\n        holidays: [],\n        batchWindows: {\n          frequency: 'immediate'\n        }\n      },\n      templates: {\n        default: 'default',\n        translations: {\n          'workflow:failed': {\n            subject: '翻译工作流失败',\n            body: `:x: 翻译工作流失败\\n\\n任务: *{{taskTitle}}*\\n错误: {{error}}\\n时间: {{failureTime}}\\n\\n请立即处理！`,\n            variables: []\n          },\n          'deployment:failed': {\n            subject: '翻译部署失败',\n            body: `:warning: 翻译部署失败\\n\\n环境: *{{environment}}*\\n部署ID: {{deploymentId}}\\n错误: {{error}}\\n\\n需要紧急处理！`,\n            variables: []\n          }\n        },\n        formatting: {\n          useMarkdown: true,\n          includeEmojis: true,\n          maxLength: 500,\n          truncateText: true\n        }\n      },\n      metrics: {\n        sent: 0,\n        delivered: 0,\n        failed: 0,\n        clicked: 0,\n        opened: 0,\n        bounced: 0,\n        averageDeliveryTime: 0\n      }\n    });\n\n    console.log('✅ 通知配置完成');\n  }\n\n  /**\n   * 设置事件监听\n   */\n  private setupEventListeners(): void {\n    // 监听工作流事件\n    this.workflowManager.on('workflow:completed', async (taskId: string) => {\n      const task = this.workflowManager.getWorkflowStatus(taskId);\n      if (task) {\n        // 发送完成通知\n        await this.notifier.notifyWorkflowStatus(\n          taskId,\n          'completed',\n          {\n            title: task.metadata?.title || '翻译任务',\n            taskType: 'update',\n            priority: 'medium',\n            createdBy: 'system',\n            completionTime: new Date().toISOString(),\n            filesCount: task.totalSteps || 0\n          }\n        );\n\n        // 自动同步到下一环境\n        await this.autoSyncAfterCompletion(task);\n      }\n    });\n\n    this.workflowManager.on('workflow:failed', async (taskId: string, error: string) => {\n      // 发送失败通知\n      await this.notifier.sendTranslationUpdate('workflow:failed', {\n        taskId,\n        error,\n        timestamp: Date.now()\n      }, {\n        priority: 'critical',\n        configId: 'slack-notifications'\n      });\n    });\n\n    // 监听同步事件\n    this.syncTool.on('deployment:completed', async (environment: string, result: any) => {\n      // 发送部署完成通知\n      await this.notifier.notifyDeploymentStatus(\n        environment,\n        result.deploymentId,\n        'completed',\n        result\n      );\n    });\n\n    this.syncTool.on('deployment:failed', async (environment: string, deploymentId: string, error: string) => {\n      // 发送部署失败通知\n      await this.notifier.notifyDeploymentStatus(\n        environment,\n        deploymentId,\n        'failed',\n        { error }\n      );\n    });\n\n    console.log('✅ 事件监听设置完成');\n  }\n\n  /**\n   * 启动定期任务\n   */\n  private startPeriodicTasks(): void {\n    // 每小时检查翻译完整性\n    setInterval(async () => {\n      await this.performHourlyChecks();\n    }, 60 * 60 * 1000);\n\n    // 每日备份和清理\n    setInterval(async () => {\n      await this.performDailyMaintenance();\n    }, 24 * 60 * 60 * 1000);\n\n    // 每周生成质量报告\n    setInterval(async () => {\n      await this.generateWeeklyReport();\n    }, 7 * 24 * 60 * 60 * 1000);\n\n    console.log('✅ 定期任务启动完成');\n  }\n\n  /**\n   * 执行完整的翻译更新流程\n   */\n  async performTranslationUpdate(options: {\n    sourceFile: string;\n    targetLocales: string[];\n    namespaces: string[];\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    description: string;\n    assignee?: string;\n    dueDate?: number;\n  }): Promise<{\n    workflowId: string;\n    versionId: string;\n    operationIds: string[];\n  }> {\n    console.log(`🔄 开始翻译更新流程: ${options.description}`);\n\n    // 1. 创建工作流\n    const workflowId = await this.workflowManager.createWorkflow({\n      title: options.description,\n      description: `翻译更新: ${options.sourceFile}`,\n      type: 'update',\n      priority: options.priority,\n      source: {\n        locale: 'zh-CN',\n        namespace: options.namespaces[0] || 'common',\n        file: options.sourceFile\n      },\n      targets: options.targetLocales.map(locale => ({\n        locale,\n        namespace: options.namespaces[0] || 'common',\n        assignee: options.assignee,\n        dueDate: options.dueDate\n      })),\n      metadata: {\n        tags: ['auto-update', 'batch'],\n        dependencies: [],\n        businessValue: '用户界面翻译优化'\n      }\n    });\n\n    console.log(`📋 工作流创建完成: ${workflowId}`);\n\n    // 2. 启动工作流\n    await this.workflowManager.startWorkflow(workflowId, options.assignee || 'system');\n    \n    // 3. 创建版本\n    const version = await this.versionManager.createVersion(\n      options.sourceFile,\n      options.assignee || 'system',\n      options.description\n    );\n\n    console.log(`📝 版本创建完成: ${version.version}`);\n\n    // 4. 同步到各环境\n    const operationIds = [];\n    const environments = ['development', 'staging', 'production'];\n    \n    for (const env of environments) {\n      const operationId = await this.syncTool.syncToEnvironment(env, {\n        languages: ['zh-CN', ...options.targetLocales],\n        namespaces: options.namespaces,\n        user: options.assignee || 'system',\n        description: options.description\n      });\n      operationIds.push(operationId);\n    }\n\n    console.log(`🚀 同步操作已启动: ${operationIds.join(', ')}`);\n\n    return {\n      workflowId,\n      versionId: version.id,\n      operationIds\n    };\n  }\n\n  /**\n   * 执行紧急翻译修复\n   */\n  async performEmergencyFix(options: {\n    file: string;\n    keys: string[];\n    fixDescription: string;\n    priority: 'critical' | 'high';\n  }): Promise<{\n    workflowId: string;\n    deploymentId?: string;\n  }> {\n    console.log(`🚨 执行紧急翻译修复: ${options.fixDescription}`);\n\n    // 1. 创建紧急工作流\n    const workflowId = await this.workflowManager.createWorkflow({\n      title: `紧急修复: ${options.fixDescription}`,\n      description: `紧急修复翻译问题 - 影响用户使用`,\n      type: 'urgent',\n      priority: options.priority,\n      source: {\n        locale: 'zh-CN',\n        namespace: 'common',\n        file: options.file\n      },\n      targets: [\n        {\n          locale: 'en-US',\n          namespace: 'common',\n          dueDate: Date.now() + 2 * 60 * 60 * 1000 // 2小时内完成\n        },\n        {\n          locale: 'ru-RU',\n          namespace: 'common',\n          dueDate: Date.now() + 2 * 60 * 60 * 1000\n        },\n        {\n          locale: 'tg-TJ',\n          namespace: 'common',\n          dueDate: Date.now() + 2 * 60 * 60 * 1000\n        }\n      ],\n      metadata: {\n        tags: ['emergency', 'critical-fix'],\n        dependencies: [],\n        businessValue: '紧急用户问题修复'\n      }\n    });\n\n    // 2. 立即启动工作流\n    await this.workflowManager.startWorkflow(workflowId, 'emergency-system');\n\n    // 3. 直接部署到生产环境\n    const deploymentId = await this.syncTool.deployToProduction({\n      environment: 'production',\n      validateBeforeDeploy: false, // 紧急情况跳过验证\n      backupBeforeDeploy: true,\n      rollbackIfFailed: true,\n      user: 'emergency-system',\n      description: `紧急修复: ${options.fixDescription}`,\n      tags: ['emergency', 'critical']\n    });\n\n    console.log(`✅ 紧急修复完成: ${deploymentId}`);\n\n    return {\n      workflowId,\n      deploymentId\n    };\n  }\n\n  /**\n   * 执行定期质量检查\n   */\n  async performQualityCheck(): Promise<{\n    report: any;\n    issues: any[];\n    actions: string[];\n  }> {\n    console.log('🔍 开始执行定期质量检查...');\n\n    const issues: any[] = [];\n    const actions: string[] = [];\n\n    // 1. 检查翻译完整性\n    const completenessReport = await this.checkTranslationCompleteness();\n    if (completenessReport.issues.length > 0) {\n      issues.push(...completenessReport.issues);\n      actions.push('完善缺失翻译');\n    }\n\n    // 2. 检查翻译一致性\n    const consistencyReport = await this.checkTranslationConsistency();\n    if (consistencyReport.issues.length > 0) {\n      issues.push(...consistencyReport.issues);\n      actions.push('修正不一致翻译');\n    }\n\n    // 3. 检查版本控制\n    const versionReport = await this.checkVersionControl();\n    if (versionReport.issues.length > 0) {\n      issues.push(...versionReport.issues);\n      actions.push('清理版本历史');\n    }\n\n    // 4. 检查性能指标\n    const performanceReport = await this.checkPerformanceMetrics();\n    if (performanceReport.issues.length > 0) {\n      issues.push(...performanceReport.issues);\n      actions.push('优化性能配置');\n    }\n\n    // 5. 生成报告\n    const report = {\n      timestamp: Date.now(),\n      totalIssues: issues.length,\n      criticalIssues: issues.filter(i => i.severity === 'critical').length,\n      highIssues: issues.filter(i => i.severity === 'high').length,\n      mediumIssues: issues.filter(i => i.severity === 'medium').length,\n      lowIssues: issues.filter(i => i.severity === 'low').length,\n      categories: {\n        completeness: completenessReport.issues.length,\n        consistency: consistencyReport.issues.length,\n        version: versionReport.issues.length,\n        performance: performanceReport.issues.length\n      },\n      recommendations: actions\n    };\n\n    // 6. 发送质量报告通知\n    if (issues.length > 0 || actions.length > 0) {\n      await this.notifier.notifyQualityCheck('periodic_review', {\n        score: Math.max(50, 100 - issues.length * 5),\n        issues: issues.slice(0, 10),\n        recommendations: actions,\n        timestamp: Date.now()\n      }, {\n        threshold: 80,\n        critical: report.criticalIssues > 0\n      });\n    }\n\n    console.log(`✅ 质量检查完成，发现 ${issues.length} 个问题`);\n\n    return { report, issues, actions };\n  }\n\n  // 私有方法\n\n  private async checkTranslationCompleteness(): Promise<{ issues: any[] }> {\n    const issues: any[] = [];\n    const languages = ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'];\n    const namespaces = ['common', 'auth', 'lottery', 'wallet', 'referral', 'error', 'admin', 'bot', 'task'];\n\n    for (const lang of languages) {\n      for (const ns of namespaces) {\n        try {\n          const filePath = `./src/locales/${lang}/${ns}.json`;\n          const content = await import('fs').then(fs => \n            JSON.parse(fs.readFileSync(filePath, 'utf-8'))\n          );\n          \n          const keyCount = JSON.stringify(content).split('\"').length / 4;\n          \n          if (keyCount < 50) { // 假设每个命名空间至少有50个键\n            issues.push({\n              type: 'completeness',\n              severity: 'medium',\n              file: `${lang}/${ns}`,\n              message: `翻译键数量不足: ${keyCount}`\n            });\n          }\n        } catch (error) {\n          issues.push({\n            type: 'completeness',\n            severity: 'high',\n            file: `${lang}/${ns}`,\n            message: `翻译文件缺失或无法读取`\n          });\n        }\n      }\n    }\n\n    return { issues };\n  }\n\n  private async checkTranslationConsistency(): Promise<{ issues: any[] }> {\n    const issues: any[] = [];\n    // 简化的一致性检查\n    // 实际实现中需要更复杂的逻辑\n\n    return { issues };\n  }\n\n  private async checkVersionControl(): Promise<{ issues: any[] }> {\n    const issues: any[] = [];\n    // 检查版本控制相关问题\n\n    return { issues };\n  }\n\n  private async checkPerformanceMetrics(): Promise<{ issues: any[] }> {\n    const issues: any[] = [];\n    \n    // 检查缓存大小\n    try {\n      const stats = await this.syncTool.getSyncStatistics(7); // 最近7天\n      if (stats.averageDuration > 30000) { // 平均同步时间超过30秒\n        issues.push({\n          type: 'performance',\n          severity: 'medium',\n          message: `同步性能下降: 平均耗时 ${Math.round(stats.averageDuration / 1000)}秒`\n        });\n      }\n    } catch (error) {\n      issues.push({\n        type: 'performance',\n        severity: 'high',\n        message: '无法获取性能指标'\n      });\n    }\n\n    return { issues };\n  }\n\n  private async autoSyncAfterCompletion(task: any): Promise<void> {\n    // 根据任务完成情况自动同步\n    try {\n      await this.syncTool.syncToMultipleEnvironments(\n        ['development', 'staging'],\n        {\n          user: 'auto-sync',\n          description: `自动同步完成的任务: ${task.id}`\n        }\n      );\n    } catch (error) {\n      console.error('自动同步失败:', error);\n    }\n  }\n\n  private async performHourlyChecks(): Promise<void> {\n    console.log('⏰ 执行每小时检查...');\n    \n    // 检查活跃工作流\n    const activeWorkflows = this.workflowManager.listWorkflows({ status: 'active' });\n    if (activeWorkflows.length > 5) {\n      console.warn(`当前有 ${activeWorkflows.length} 个活跃工作流`);\n    }\n\n    // 检查同步状态\n    const operations = this.syncTool.listOperations({ status: 'running' });\n    for (const op of operations) {\n      if (Date.now() - (op.startTime || 0) > 300000) { // 运行超过5分钟\n        console.warn(`同步操作运行时间过长: ${op.id}`);\n      }\n    }\n  }\n\n  private async performDailyMaintenance(): Promise<void> {\n    console.log('🔧 执行每日维护...');\n    \n    // 清理临时文件\n    const cleanedFiles = this.syncTool.cleanupTempFiles(7); // 清理7天前的文件\n    console.log(`清理了 ${cleanedFiles} 个临时文件`);\n\n    // 生成每日报告\n    const stats = this.syncTool.getSyncStatistics(1); // 最近1天\n    console.log(`今日同步统计:`, stats);\n  }\n\n  private async generateWeeklyReport(): Promise<void> {\n    console.log('📊 生成周报...');\n    \n    // 收集一周的统计信息\n    const workflowStats = this.workflowManager.getWorkflowStatistics(7);\n    const syncStats = this.syncTool.getSyncStatistics(7);\n    const notificationStats = this.notifier.getNotificationStatistics(7);\n\n    const weeklyReport = {\n      period: '最近7天',\n      workflows: workflowStats,\n      sync: syncStats,\n      notifications: notificationStats,\n      summary: {\n        totalOperations: workflowStats.totalWorkflows + syncStats.totalOperations,\n        successRate: ((workflowStats.completedWorkflows / workflowStats.totalWorkflows) + \n                     (syncStats.successfulOperations / syncStats.totalOperations)) / 2 * 100,\n        mainIssues: syncStats.failedOperations > 5 ? '同步失败次数较多' : '运行正常'\n      }\n    };\n\n    // 保存报告\n    const reportFile = `./reports/translation-weekly-report-${new Date().toISOString().split('T')[0]}.json`;\n    await import('fs').then(fs => \n      fs.writeFileSync(reportFile, JSON.stringify(weeklyReport, null, 2))\n    );\n\n    console.log(`📊 周报已生成: ${reportFile}`);\n  }\n}\n\n// 使用示例\nexport async function exampleUsage() {\n  // 初始化系统\n  const system = new TranslationMaintenanceSystem();\n\n  // 示例1: 执行常规翻译更新\n  const updateResult = await system.performTranslationUpdate({\n    sourceFile: './src/locales/zh-CN/common.json',\n    targetLocales: ['en-US', 'ru-RU', 'tg-TJ'],\n    namespaces: ['common', 'auth'],\n    priority: 'medium',\n    description: '用户界面翻译优化',\n    assignee: 'translator123',\n    dueDate: Date.now() + 7 * 24 * 60 * 60 * 1000\n  });\n\n  console.log('翻译更新结果:', updateResult);\n\n  // 示例2: 执行紧急修复\n  const emergencyResult = await system.performEmergencyFix({\n    file: './src/locales/zh-CN/common.json',\n    keys: ['user.login.error', 'payment.failed'],\n    fixDescription: '登录和支付错误提示修复',\n    priority: 'critical'\n  });\n\n  console.log('紧急修复结果:', emergencyResult);\n\n  // 示例3: 执行质量检查\n  const qualityResult = await system.performQualityCheck();\n  console.log('质量检查结果:', qualityResult);\n\n  return system;\n}\n\n// 如果直接运行此文件，执行示例\nif (require.main === module) {\n  exampleUsage().catch(console.error);\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-proofreader.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":163,"column":10,"nodeType":"CallExpression","endLine":163,"endColumn":40},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":167,"column":36,"nodeType":"CallExpression","endLine":167,"endColumn":76},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":173,"column":7,"nodeType":"CallExpression","endLine":173,"endColumn":86},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5455,5458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5455,5458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5473,5476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5473,5476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"complexity","severity":2,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":230,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":265,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5628,5631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5628,5631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5644,5647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5644,5647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":234,"column":20,"nodeType":"MemberExpression","endLine":234,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":234,"column":49,"nodeType":"MemberExpression","endLine":234,"endColumn":61},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":235,"column":22,"nodeType":"MemberExpression","endLine":235,"endColumn":36},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":235,"column":53,"nodeType":"MemberExpression","endLine":235,"endColumn":67},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":236,"column":25,"nodeType":"MemberExpression","endLine":236,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":236,"column":39,"nodeType":"MemberExpression","endLine":236,"endColumn":53},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":239,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":239,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6061,6075],"text":"(Boolean(targetObj[key]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":239,"column":39,"nodeType":"MemberExpression","endLine":239,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":246,"column":25,"nodeType":"MemberExpression","endLine":246,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":247,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":247,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6311,6325],"text":"(Boolean(targetObj[key]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":247,"column":28,"nodeType":"MemberExpression","endLine":247,"endColumn":42},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":247,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":247,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6326,6328],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":250,"column":45,"nodeType":"MemberExpression","endLine":250,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":250,"column":59,"nodeType":"MemberExpression","endLine":250,"endColumn":73},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":257,"column":25,"nodeType":"MemberExpression","endLine":257,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":258,"column":28,"nodeType":"MemberExpression","endLine":258,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":259,"column":53,"nodeType":"MemberExpression","endLine":259,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7016,7019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7016,7019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7207,7210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7207,7210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":282,"column":20,"nodeType":"MemberExpression","endLine":282,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":282,"column":45,"nodeType":"MemberExpression","endLine":282,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":283,"column":21,"nodeType":"MemberExpression","endLine":283,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":287,"column":27,"nodeType":"CallExpression","messageId":"conditionErrorNullableNumber","endLine":287,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7556,7576],"text":"(termCounts.get(term) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7556,7576],"text":"(termCounts.get(term) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7556,7576],"text":"(Boolean(termCounts.get(term)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":287,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":287,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7577,7579],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":291,"column":44,"nodeType":"MemberExpression","endLine":291,"endColumn":52},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":299,"column":30,"nodeType":"MemberExpression","endLine":299,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8299,8302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8299,8302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":335,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8796,8799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8796,8799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":338,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8916,8919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8916,8919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":342,"column":20,"nodeType":"MemberExpression","endLine":342,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":342,"column":45,"nodeType":"MemberExpression","endLine":342,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":343,"column":23,"nodeType":"MemberExpression","endLine":343,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":345,"column":31,"nodeType":"MemberExpression","endLine":345,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10278,10281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10278,10281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10398,10401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10398,10401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":394,"column":20,"nodeType":"MemberExpression","endLine":394,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":394,"column":45,"nodeType":"MemberExpression","endLine":394,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":395,"column":23,"nodeType":"MemberExpression","endLine":395,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":397,"column":31,"nodeType":"MemberExpression","endLine":397,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":424,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11311,11314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11311,11314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":427,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11449,11452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11449,11452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":431,"column":20,"nodeType":"MemberExpression","endLine":431,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":431,"column":45,"nodeType":"MemberExpression","endLine":431,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":432,"column":23,"nodeType":"MemberExpression","endLine":432,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":434,"column":31,"nodeType":"MemberExpression","endLine":434,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":477,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12790,12793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12790,12793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":478,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12808,12811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12808,12811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"complexity","severity":2,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":484,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":532,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":484,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12963,12966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12963,12966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":484,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12979,12982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12979,12982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":488,"column":20,"nodeType":"MemberExpression","endLine":488,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":488,"column":49,"nodeType":"MemberExpression","endLine":488,"endColumn":61},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":489,"column":22,"nodeType":"MemberExpression","endLine":489,"endColumn":36},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":489,"column":53,"nodeType":"MemberExpression","endLine":489,"endColumn":67},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":490,"column":25,"nodeType":"MemberExpression","endLine":490,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":490,"column":39,"nodeType":"MemberExpression","endLine":490,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":493,"column":28,"nodeType":"MemberExpression","endLine":493,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":494,"column":30,"nodeType":"MemberExpression","endLine":494,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":539,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":539,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":539,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":76},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":541,"column":58,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":541,"endColumn":70,"fix":{"range":[15044,15056],"text":"{return true;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":542,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":542,"endColumn":47,"fix":{"range":[15091,15103],"text":"{return true;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":543,"column":53,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":543,"endColumn":65,"fix":{"range":[15163,15175],"text":"{return true;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":544,"column":51,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":544,"endColumn":63,"fix":{"range":[15232,15244],"text":"{return true;}"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":557,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":557,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15607,15629],"text":"(translations[language] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15607,15629],"text":"(translations[language] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15607,15629],"text":"(Boolean(translations[language]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":557,"column":12,"nodeType":"MemberExpression","endLine":557,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":557,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":557,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15630,15632],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":580,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":580,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16186,16198],"text":"(termMap[key] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[16186,16198],"text":"(termMap[key] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16186,16198],"text":"(Boolean(termMap[key]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":580,"column":12,"nodeType":"MemberExpression","endLine":580,"endColumn":24},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":580,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":580,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16199,16201],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":585,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":585,"endColumn":44,"fix":{"range":[16397,16409],"text":"{return true;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":587,"column":22,"nodeType":"MemberExpression","endLine":587,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":593,"column":12,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":593,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16666,16698],"text":"((standardTranslations?.[language]) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[16666,16698],"text":"((standardTranslations?.[language]) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16666,16698],"text":"(Boolean((standardTranslations?.[language])))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":593,"column":12,"nodeType":"MemberExpression","endLine":593,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":593,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":593,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16699,16701],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":626,"column":35,"nodeType":"NewExpression","endLine":626,"endColumn":57},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":640,"column":37,"nodeType":"NewExpression","endLine":640,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'formalWords' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":649,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":649,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formalWords' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":649,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":649,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":670,"column":31,"nodeType":"MemberExpression","endLine":670,"endColumn":47},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":673,"column":39,"nodeType":"NewExpression","endLine":673,"endColumn":65},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":718,"column":14,"nodeType":"CallExpression","messageId":"substring","endLine":718,"endColumn":35,"fix":{"range":[20293,20302],"text":"slice"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":718,"column":14,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":718,"endColumn":43,"fix":{"range":[20288,20317],"text":"`${text.substring(0, 47)  }...`"}},{"ruleId":"no-unused-vars","severity":2,"message":"'totalIssues' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":724,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":724,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalIssues' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":724,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":724,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":749,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":749,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":749,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":749,"endColumn":86},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":783,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":783,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22547,22550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22547,22550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":783,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":783,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":783,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":783,"endColumn":89},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":783,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":783,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22599,22602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22599,22602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":786,"column":12,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":786,"endColumn":19,"fix":{"range":[22679,22836],"text":"for (const issue of issues) {\n      if (issue.suggestion) {\n        // 应用改进建议\n        this.setNestedValue(improved, issue.key, issue.suggestion);\n      }\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":787,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":787,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[22715,22731],"text":"issue.suggestion != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[22715,22731],"text":"issue.suggestion ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[22715,22731],"text":"Boolean(issue.suggestion)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":796,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":796,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22894,22897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22894,22897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":801,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":803,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[23052,23115],"text":"current[keys[i]] ??= {};"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":801,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":801,"endColumn":28,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[23057,23073],"text":"(Boolean(current[keys[i]]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":801,"column":20,"nodeType":"MemberExpression","endLine":801,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":802,"column":17,"nodeType":"MemberExpression","endLine":802,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":804,"column":25,"nodeType":"MemberExpression","endLine":804,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":832,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":832,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[23935,23962],"text":"(tajikTranslations[original] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[23935,23962],"text":"(tajikTranslations[original] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[23935,23962],"text":"(Boolean(tajikTranslations[original]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":832,"column":12,"nodeType":"MemberExpression","endLine":832,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":832,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":832,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23963,23965],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":844,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":844,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[24263,24292],"text":"(russianTranslations[original] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[24263,24292],"text":"(russianTranslations[original] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[24263,24292],"text":"(Boolean(russianTranslations[original]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":844,"column":12,"nodeType":"MemberExpression","endLine":844,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":844,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":844,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[24293,24295],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":856,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":856,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[24598,24627],"text":"(englishTranslations[original] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[24598,24627],"text":"(englishTranslations[original] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[24598,24627],"text":"(Boolean(englishTranslations[original]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":856,"column":12,"nodeType":"MemberExpression","endLine":856,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":856,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":856,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[24628,24630],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":97,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":7,"fixableWarningCount":1,"source":"/**\n * 翻译校对和改进工具\n * 提供翻译质量检查、错误识别和改进建议功能\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface TranslationIssue {\n  type: 'accuracy' | 'consistency' | 'grammar' | 'cultural' | 'technical' | 'placeholder';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  language: string;\n  namespace: string;\n  key: string;\n  original: string;\n  translation: string;\n  suggestion?: string;\n  explanation: string;\n}\n\nexport interface QualityMetrics {\n  accuracy: number;      // 准确性 (0-100)\n  consistency: number;   // 一致性 (0-100)\n  fluency: number;       // 流畅度 (0-100)\n  cultural: number;      // 文化适应性 (0-100)\n  technical: number;     // 技术规范 (0-100)\n  overall: number;       // 总体分数 (0-100)\n}\n\nexport interface ProofreadingResult {\n  language: string;\n  namespace: string;\n  metrics: QualityMetrics;\n  issues: TranslationIssue[];\n  suggestions: string[];\n  improvedVersion?: any;\n  status: 'passed' | 'warning' | 'failed';\n}\n\nexport class TranslationProofreader {\n  private basePath: string;\n  private standardGlossary: Map<string, Record<string, string>> = new Map();\n\n  constructor(basePath: string = './src/locales') {\n    this.basePath = basePath;\n    this.initializeStandardGlossary();\n  }\n\n  private initializeStandardGlossary() {\n    // 标准术语库\n    this.standardGlossary.set('currency', {\n      'zh-CN': '货币',\n      'en-US': 'currency',\n      'ru-RU': 'валюта',\n      'tg-TJ': 'пул'\n    });\n\n    this.standardGlossary.set('amount', {\n      'zh-CN': '金额',\n      'en-US': 'amount',\n      'ru-RU': 'сумма',\n      'tg-TJ': 'маблағ'\n    });\n\n    this.standardGlossary.set('balance', {\n      'zh-CN': '余额',\n      'en-US': 'balance',\n      'ru-RU': 'баланс',\n      'tg-TJ': 'баланс'\n    });\n\n    this.standardGlossary.set('recharge', {\n      'zh-CN': '充值',\n      'en-US': 'recharge',\n      'ru-RU': 'пополнение',\n      'tg-TJ': 'пардохт'\n    });\n\n    this.standardGlossary.set('withdraw', {\n      'zh-CN': '提现',\n      'en-US': 'withdraw',\n      'ru-RU': 'вывод',\n      'tg-TJ': 'кашондан'\n    });\n\n    this.standardGlossary.set('time', {\n      'zh-CN': '时间',\n      'en-US': 'time',\n      'ru-RU': 'время',\n      'tg-TJ': 'вақт'\n    });\n\n    this.standardGlossary.set('date', {\n      'zh-CN': '日期',\n      'en-US': 'date',\n      'ru-RU': 'дата',\n      'tg-TJ': 'рӯз'\n    });\n\n    this.standardGlossary.set('today', {\n      'zh-CN': '今天',\n      'en-US': 'today',\n      'ru-RU': 'сегодня',\n      'tg-TJ': 'имрӯз'\n    });\n\n    this.standardGlossary.set('yesterday', {\n      'zh-CN': '昨天',\n      'en-US': 'yesterday',\n      'ru-RU': 'вчера',\n      'tg-TJ': 'дирӯз'\n    });\n\n    this.standardGlossary.set('tomorrow', {\n      'zh-CN': '明天',\n      'en-US': 'tomorrow',\n      'ru-RU': 'завтра',\n      'tg-TJ': 'фардо'\n    });\n\n    this.standardGlossary.set('tap', {\n      'zh-CN': '点击',\n      'en-US': 'tap',\n      'ru-RU': 'нажать',\n      'tg-TJ': 'пахш'\n    });\n\n    this.standardGlossary.set('swipe', {\n      'zh-CN': '滑动',\n      'en-US': 'swipe',\n      'ru-RU': 'свайп',\n      'tg-TJ': 'саворт'\n    });\n\n    this.standardGlossary.set('long_press', {\n      'zh-CN': '长按',\n      'en-US': 'long press',\n      'ru-RU': 'долгое нажатие',\n      'tg-TJ': 'давидани дароз'\n    });\n\n    this.standardGlossary.set('double_tap', {\n      'zh-CN': '双击',\n      'en-US': 'double tap',\n      'ru-RU': 'двойной тап',\n      'tg-TJ': 'дубора пахш'\n    });\n\n    this.standardGlossary.set('confirm', {\n      'zh-CN': '确认',\n      'en-US': 'confirm',\n      'ru-RU': 'подтвердить',\n      'tg-TJ': 'тасдиқ'\n    });\n  }\n\n  /**\n   * 执行翻译校对\n   */\n  async proofRead(language: string, namespace: string): Promise<ProofreadingResult> {\n    const translationPath = path.join(this.basePath, language, `${namespace}.json`);\n    \n    if (!fs.existsSync(translationPath)) {\n      throw new Error(`Translation file not found: ${translationPath}`);\n    }\n\n    const translation = JSON.parse(fs.readFileSync(translationPath, 'utf8'));\n    const issues: TranslationIssue[] = [];\n    const suggestions: string[] = [];\n\n    // 读取基准文件（中文）进行比较\n    const baseTranslation = JSON.parse(\n      fs.readFileSync(path.join(this.basePath, 'zh-CN', `${namespace}.json`), 'utf8')\n    );\n\n    // 检查准确性\n    const accuracyIssues = this.checkAccuracy(baseTranslation, translation, language, namespace);\n    issues.push(...accuracyIssues);\n\n    // 检查一致性\n    const consistencyIssues = this.checkConsistency(translation, language, namespace);\n    issues.push(...consistencyIssues);\n\n    // 检查文化适应性\n    const culturalIssues = this.checkCulturalAdaptation(translation, language, namespace);\n    issues.push(...culturalIssues);\n\n    // 检查技术规范\n    const technicalIssues = this.checkTechnicalStandards(translation, language, namespace);\n    issues.push(...technicalIssues);\n\n    // 检查占位符\n    const placeholderIssues = this.checkPlaceholders(baseTranslation, translation, language, namespace);\n    issues.push(...placeholderIssues);\n\n    // 计算质量指标\n    const metrics = this.calculateMetrics(issues);\n\n    // 生成改进建议\n    const improvedSuggestions = this.generateSuggestions(issues, language, namespace);\n    suggestions.push(...improvedSuggestions);\n\n    // 生成改进版本\n    const improvedVersion = this.generateImprovedVersion(translation, issues, language);\n\n    const status = this.determineStatus(metrics, issues);\n\n    return {\n      language,\n      namespace,\n      metrics,\n      issues,\n      suggestions,\n      improvedVersion,\n      status\n    };\n  }\n\n  /**\n   * 检查翻译准确性\n   */\n  private checkAccuracy(\n    base: any, \n    target: any, \n    language: string, \n    namespace: string\n  ): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n\n    const checkObject = (baseObj: any, targetObj: any, prefix: string = '') => {\n      for (const key in baseObj) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof baseObj[key] === 'object' && baseObj[key] !== null) {\n          if (typeof targetObj[key] === 'object' && targetObj[key] !== null) {\n            checkObject(baseObj[key], targetObj[key], fullKey);\n          }\n        } else {\n          if (!(key in targetObj) || !targetObj[key]) {\n            issues.push({\n              type: 'accuracy',\n              severity: 'high',\n              language,\n              namespace,\n              key: fullKey,\n              original: baseObj[key],\n              translation: targetObj[key] || '',\n              explanation: '翻译缺失或为空'\n            });\n          } else if (this.isPoorTranslation(baseObj[key], targetObj[key], language)) {\n            issues.push({\n              type: 'accuracy',\n              severity: 'medium',\n              language,\n              namespace,\n              key: fullKey,\n              original: baseObj[key],\n              translation: targetObj[key],\n              suggestion: this.getBetterTranslation(baseObj[key], language),\n              explanation: '翻译质量较差，可能存在误导或不准确'\n            });\n          }\n        }\n      }\n    };\n\n    checkObject(base, target);\n    return issues;\n  }\n\n  /**\n   * 检查术语一致性\n   */\n  private checkConsistency(target: any, language: string, namespace: string): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n    const termCounts: Map<string, number> = new Map();\n\n    const findTerms = (obj: any, prefix: string = '') => {\n      for (const key in obj) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          findTerms(obj[key], fullKey);\n        } else {\n          const term = this.extractKeyTerm(key);\n          if (term) {\n            const count = termCounts.get(term) || 0;\n            termCounts.set(term, count + 1);\n            \n            // 检查是否使用标准术语\n            if (!this.isStandardTerm(term, obj[key], language)) {\n              issues.push({\n                type: 'consistency',\n                severity: 'medium',\n                language,\n                namespace,\n                key: fullKey,\n                original: '',\n                translation: obj[key],\n                suggestion: this.getStandardTermTranslation(term, language),\n                explanation: `术语\"${term}\"的翻译与标准不一致`\n              });\n            }\n          }\n        }\n      }\n    };\n\n    findTerms(target);\n    return issues;\n  }\n\n  /**\n   * 检查文化适应性\n   */\n  private checkCulturalAdaptation(target: any, language: string, namespace: string): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n\n    if (language === 'tg-TJ') {\n      const culturalIssues = this.checkTajikCulture(target, namespace);\n      issues.push(...culturalIssues);\n    }\n\n    if (language === 'ru-RU') {\n      const culturalIssues = this.checkRussianCulture(target, namespace);\n      issues.push(...culturalIssues);\n    }\n\n    return issues;\n  }\n\n  /**\n   * 检查塔吉克语文化适应性\n   */\n  private checkTajikCulture(target: any, namespace: string): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n\n    const checkObject = (obj: any, prefix: string = '') => {\n      for (const key in obj) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          checkObject(obj[key], fullKey);\n        } else {\n          const translation = obj[key];\n          \n          // 检查不自然的表达\n          if (this.hasUnnaturalTajikExpression(translation)) {\n            issues.push({\n              type: 'cultural',\n              severity: 'high',\n              language: 'tg-TJ',\n              namespace,\n              key: fullKey,\n              original: '',\n              translation,\n              suggestion: this.getNaturalTajikTranslation(translation),\n              explanation: '表达不符合塔吉克语习惯用法'\n            });\n          }\n\n          // 检查错误的词汇选择\n          if (this.hasWrongTajikVocabulary(translation)) {\n            issues.push({\n              type: 'cultural',\n              severity: 'medium',\n              language: 'tg-TJ',\n              namespace,\n              key: fullKey,\n              original: '',\n              translation,\n              suggestion: this.getCorrectTajikVocabulary(translation),\n              explanation: '使用了不恰当的塔吉克语词汇'\n            });\n          }\n        }\n      }\n    };\n\n    checkObject(target);\n    return issues;\n  }\n\n  /**\n   * 检查俄语文化适应性\n   */\n  private checkRussianCulture(target: any, namespace: string): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n\n    const checkObject = (obj: any, prefix: string = '') => {\n      for (const key in obj) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          checkObject(obj[key], fullKey);\n        } else {\n          const translation = obj[key];\n          \n          // 检查是否使用了正式/非正式形式\n          if (this.hasIncorrectFormality(translation, key)) {\n            issues.push({\n              type: 'cultural',\n              severity: 'medium',\n              language: 'ru-RU',\n              namespace,\n              key: fullKey,\n              original: '',\n              translation,\n              suggestion: this.getCorrectRussianFormality(translation, key),\n              explanation: '敬语级别使用不当'\n            });\n          }\n        }\n      }\n    };\n\n    checkObject(target);\n    return issues;\n  }\n\n  /**\n   * 检查技术规范\n   */\n  private checkTechnicalStandards(target: any, language: string, namespace: string): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n\n    const checkObject = (obj: any, prefix: string = '') => {\n      for (const key in obj) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          checkObject(obj[key], fullKey);\n        } else {\n          const translation = obj[key];\n          \n          // 检查文本长度\n          if (translation.length > 50 && namespace !== 'admin') {\n            issues.push({\n              type: 'technical',\n              severity: 'low',\n              language,\n              namespace,\n              key: fullKey,\n              original: '',\n              translation,\n              suggestion: this.suggestShortenedText(translation),\n              explanation: '文本过长，可能不适合移动端显示'\n            });\n          }\n\n          // 检查特殊字符\n          if (this.hasInvalidSpecialChars(translation, language)) {\n            issues.push({\n              type: 'technical',\n              severity: 'medium',\n              language,\n              namespace,\n              key: fullKey,\n              original: '',\n              translation,\n              suggestion: this.fixSpecialChars(translation, language),\n              explanation: '包含无效的特殊字符'\n            });\n          }\n        }\n      }\n    };\n\n    checkObject(target);\n    return issues;\n  }\n\n  /**\n   * 检查占位符\n   */\n  private checkPlaceholders(\n    base: any, \n    target: any, \n    language: string, \n    namespace: string\n  ): TranslationIssue[] {\n    const issues: TranslationIssue[] = [];\n\n    const checkObject = (baseObj: any, targetObj: any, prefix: string = '') => {\n      for (const key in baseObj) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof baseObj[key] === 'object' && baseObj[key] !== null) {\n          if (typeof targetObj[key] === 'object' && targetObj[key] !== null) {\n            checkObject(baseObj[key], targetObj[key], fullKey);\n          }\n        } else {\n          const baseText = baseObj[key];\n          const targetText = targetObj[key];\n          \n          // 检查占位符一致性\n          const basePlaceholders = this.extractPlaceholders(baseText);\n          const targetPlaceholders = this.extractPlaceholders(targetText);\n          \n          if (basePlaceholders.length > 0 && targetPlaceholders.length > 0) {\n            const missingPlaceholders = basePlaceholders.filter(p => !targetPlaceholders.includes(p));\n            const extraPlaceholders = targetPlaceholders.filter(p => !basePlaceholders.includes(p));\n            \n            if (missingPlaceholders.length > 0) {\n              issues.push({\n                type: 'placeholder',\n                severity: 'critical',\n                language,\n                namespace,\n                key: fullKey,\n                original: baseText,\n                translation: targetText,\n                explanation: `缺少占位符: ${missingPlaceholders.join(', ')}`\n              });\n            }\n            \n            if (extraPlaceholders.length > 0) {\n              issues.push({\n                type: 'placeholder',\n                severity: 'medium',\n                language,\n                namespace,\n                key: fullKey,\n                original: baseText,\n                translation: targetText,\n                explanation: `多余的占位符: ${extraPlaceholders.join(', ')}`\n              });\n            }\n          }\n        }\n      }\n    };\n\n    checkObject(base, target);\n    return issues;\n  }\n\n  // 辅助方法\n  private isPoorTranslation(original: string, translation: string, language: string): boolean {\n    // 简单的质量检查逻辑\n    if (!translation || translation.trim().length === 0) return true;\n    if (translation === original) return true; // 未翻译\n    if (translation.length < original.length * 0.3) return true; // 太短\n    if (translation.length > original.length * 3) return true; // 太长\n    \n    return false;\n  }\n\n  private getBetterTranslation(original: string, language: string): string {\n    // 根据语言返回更好的翻译建议\n    const translations: Record<string, string> = {\n      'tg-TJ': this.getTajikTranslation(original),\n      'ru-RU': this.getRussianTranslation(original),\n      'en-US': this.getEnglishTranslation(original)\n    };\n    \n    return translations[language] || '';\n  }\n\n  private extractKeyTerm(key: string): string {\n    // 提取关键术语\n    const termMap: Record<string, string> = {\n      'currency': 'currency',\n      'amount': 'amount',\n      'balance': 'balance',\n      'recharge': 'recharge',\n      'withdraw': 'withdraw',\n      'time': 'time',\n      'date': 'date',\n      'today': 'today',\n      'yesterday': 'yesterday',\n      'tomorrow': 'tomorrow',\n      'tap': 'tap',\n      'swipe': 'swipe',\n      'long_press': 'long_press',\n      'double_tap': 'double_tap',\n      'confirm': 'confirm'\n    };\n    \n    return termMap[key] || '';\n  }\n\n  private isStandardTerm(term: string, translation: string, language: string): boolean {\n    const standardTranslations = this.standardGlossary.get(term);\n    if (!standardTranslations) return true;\n    \n    const standard = standardTranslations[language];\n    return standard === translation;\n  }\n\n  private getStandardTermTranslation(term: string, language: string): string {\n    const standardTranslations = this.standardGlossary.get(term);\n    return standardTranslations?.[language] || '';\n  }\n\n  private hasUnnaturalTajikExpression(text: string): boolean {\n    // 检查不自然的塔吉克语表达\n    const unnaturalPatterns = [\n      /糖ворт/i, // 错误的词汇\n      /давидани дароз/i, // 不自然的组合\n      /дубора пахш/i, // 表达不自然\n    ];\n    \n    return unnaturalPatterns.some(pattern => pattern.test(text));\n  }\n\n  private hasWrongTajikVocabulary(text: string): boolean {\n    // 检查错误的塔吉克语词汇\n    const wrongVocab = [\n      '糖ворт', // 应该是 саворт\n    ];\n    \n    return wrongVocab.some(word => text.includes(word));\n  }\n\n  private getNaturalTajikTranslation(text: string): string {\n    // 提供自然的塔吉克语翻译建议\n    const improvements: Record<string, string> = {\n      '糖ворт': 'саворт',\n      'давидани дароз': 'фишор дароз',\n      'дубора пахш': 'ду маротиба пахш кардан'\n    };\n    \n    let improved = text;\n    for (const [wrong, correct] of Object.entries(improvements)) {\n      improved = improved.replace(new RegExp(wrong, 'g'), correct);\n    }\n    \n    return improved;\n  }\n\n  private getCorrectTajikVocabulary(text: string): string {\n    // 提供正确的塔吉克语词汇\n    const corrections: Record<string, string> = {\n      '糖ворт': 'саворт'\n    };\n    \n    let corrected = text;\n    for (const [wrong, correct] of Object.entries(corrections)) {\n      corrected = corrected.replace(new RegExp(wrong, 'g'), correct);\n    }\n    \n    return corrected;\n  }\n\n  private hasIncorrectFormality(text: string, key: string): boolean {\n    // 检查俄语敬语级别\n    const informalWords = ['ты', 'тебе', 'тебя'];\n    const formalWords = ['вы', 'вам', 'вас'];\n    \n    // 根据上下文判断应该使用正式还是非正式\n    if (key.includes('admin') || key.includes('error')) {\n      return informalWords.some(word => text.includes(word));\n    }\n    \n    return false;\n  }\n\n  private getCorrectRussianFormality(text: string, key: string): string {\n    // 提供正确的俄语敬语形式\n    const corrections: Record<string, Record<string, string>> = {\n      'admin.welcome': {\n        'ты': 'вы',\n        'тебе': 'вам',\n        'тебя': 'вас'\n      }\n    };\n    \n    let corrected = text;\n    const correctionsForKey = corrections[key];\n    if (correctionsForKey) {\n      for (const [informal, formal] of Object.entries(correctionsForKey)) {\n        corrected = corrected.replace(new RegExp(informal, 'gi'), formal);\n      }\n    }\n    \n    return corrected;\n  }\n\n  private hasInvalidSpecialChars(text: string, language: string): boolean {\n    // 检查无效的特殊字符\n    if (language === 'zh-CN') {\n      return !/^[\\u4e00-\\u9fa5\\s\\w\\-\\.\\!\\?\\(\\)\\[\\]\\{\\}\\:\\\"\\'\\,\\.\\;\\/\\\\\\-\\+]+$/.test(text);\n    }\n    \n    if (language === 'en-US') {\n      return !/^[a-zA-Z\\s\\w\\-\\.\\!\\?\\(\\)\\[\\]\\{\\}\\:\\\"\\'\\,\\.\\;\\/\\\\\\-\\+]+$/.test(text);\n    }\n    \n    if (language === 'ru-RU') {\n      return !/^[\\u0400-\\u04FFа-яё\\s\\w\\-\\.\\!\\?\\(\\)\\[\\]\\{\\}\\:\\\"\\'\\,\\.\\;\\/\\\\\\-\\+]+$/iu.test(text);\n    }\n    \n    if (language === 'tg-TJ') {\n      return !/^[\\u0400-\\u04FFӣӯҳқғҷӈӉӟӅӍӉҙҫҡҟҭҵҷҹһӯҷӈҟҳҝҡҵҶҲҳҫӊӉҰҳӆҭӇӈҚӈӬӖҳҢҭӇҸӔүӍӜӍӆҺӂӈҖҳҖҴҙӭӈӝҶҗҵҡӭӍӘӆӃӱӨҼ ҫҵӴҖЎӵӄӔӓІіІӅғĀĂĄĆĊĈĊĖĒĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŚŜŞŤŦŨŪŬŮŰŲŴŶŹŽẀẂẄỲỸḤḤṢṬṰṶẆẊẊẎ◦·•─━│┌┐└┘├┤┬┴┼║═╗╗╔╚╝\\s\\w\\-\\.\\!\\?\\(\\)\\[\\]\\{\\}\\:\\\"\\'\\,\\.\\;\\/\\\\\\-\\+]+$/iu.test(text);\n    }\n    \n    return false;\n  }\n\n  private fixSpecialChars(text: string, language: string): string {\n    // 修复特殊字符\n    if (language === 'tg-TJ') {\n      return text.replace(/糖ворт/g, 'саворт');\n    }\n    \n    return text;\n  }\n\n  private extractPlaceholders(text: string): string[] {\n    const matches = text.match(/\\{\\{?\\w+\\}?\\}/g);\n    return matches ? matches.map(match => match.replace(/[{}]/g, '')) : [];\n  }\n\n  private suggestShortenedText(text: string): string {\n    // 建议缩短文本\n    if (text.length > 50) {\n      return text.substring(0, 47) + '...';\n    }\n    return text;\n  }\n\n  private calculateMetrics(issues: TranslationIssue[]): QualityMetrics {\n    const totalIssues = issues.length;\n    const criticalIssues = issues.filter(i => i.severity === 'critical').length;\n    const highIssues = issues.filter(i => i.severity === 'high').length;\n    const mediumIssues = issues.filter(i => i.severity === 'medium').length;\n    const lowIssues = issues.filter(i => i.severity === 'low').length;\n\n    // 计算各项分数 (简单算法)\n    const accuracy = Math.max(0, 100 - (criticalIssues * 30 + highIssues * 20 + mediumIssues * 10));\n    const consistency = Math.max(0, 100 - (highIssues * 25 + mediumIssues * 15 + lowIssues * 5));\n    const fluency = Math.max(0, 100 - (mediumIssues * 10 + lowIssues * 5));\n    const cultural = Math.max(0, 100 - (highIssues * 20 + mediumIssues * 10));\n    const technical = Math.max(0, 100 - (criticalIssues * 40 + mediumIssues * 15 + lowIssues * 5));\n\n    const overall = Math.round((accuracy + consistency + fluency + cultural + technical) / 5);\n\n    return {\n      accuracy,\n      consistency,\n      fluency,\n      cultural,\n      technical,\n      overall\n    };\n  }\n\n  private generateSuggestions(issues: TranslationIssue[], language: string, namespace: string): string[] {\n    const suggestions: string[] = [];\n    const issueCount = issues.length;\n\n    if (issueCount > 20) {\n      suggestions.push('严重：翻译质量问题较多，建议进行全面校对');\n    } else if (issueCount > 10) {\n      suggestions.push('警告：存在较多翻译问题，需要重点关注');\n    } else if (issueCount > 5) {\n      suggestions.push('提示：存在少量翻译问题，建议优化');\n    } else {\n      suggestions.push('良好：翻译质量基本符合要求');\n    }\n\n    // 按问题类型给出建议\n    const criticalCount = issues.filter(i => i.severity === 'critical').length;\n    const accuracyCount = issues.filter(i => i.type === 'accuracy').length;\n    const culturalCount = issues.filter(i => i.type === 'cultural').length;\n\n    if (criticalCount > 0) {\n      suggestions.push(`存在${criticalCount}个严重问题，需要立即修复`);\n    }\n\n    if (accuracyCount > 0) {\n      suggestions.push(`检查${accuracyCount}个准确性问题的翻译`);\n    }\n\n    if (culturalCount > 0 && language === 'tg-TJ') {\n      suggestions.push(`重点关注塔吉克语文化适应性改进`);\n    }\n\n    return suggestions;\n  }\n\n  private generateImprovedVersion(translation: any, issues: TranslationIssue[], language: string): any {\n    const improved = JSON.parse(JSON.stringify(translation)); // 深拷贝\n\n    issues.forEach(issue => {\n      if (issue.suggestion) {\n        // 应用改进建议\n        this.setNestedValue(improved, issue.key, issue.suggestion);\n      }\n    });\n\n    return improved;\n  }\n\n  private setNestedValue(obj: any, path: string, value: string): void {\n    const keys = path.split('.');\n    let current = obj;\n    \n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!current[keys[i]]) {\n        current[keys[i]] = {};\n      }\n      current = current[keys[i]];\n    }\n    \n    current[keys[keys.length - 1]] = value;\n  }\n\n  private determineStatus(metrics: QualityMetrics, issues: TranslationIssue[]): 'passed' | 'warning' | 'failed' {\n    const criticalIssues = issues.filter(i => i.severity === 'critical').length;\n    const overallScore = metrics.overall;\n\n    if (criticalIssues > 0 || overallScore < 30) {\n      return 'failed';\n    } else if (overallScore < 70 || issues.length > 10) {\n      return 'warning';\n    } else {\n      return 'passed';\n    }\n  }\n\n  private getTajikTranslation(original: string): string {\n    // 塔吉克语翻译建议\n    const tajikTranslations: Record<string, string> = {\n      'currency': 'пул',\n      'amount': 'маблағ',\n      'balance': 'баланс',\n      'recharge': 'пардохт',\n      'withdraw': 'кашондан'\n    };\n    return tajikTranslations[original] || '';\n  }\n\n  private getRussianTranslation(original: string): string {\n    // 俄语翻译建议\n    const russianTranslations: Record<string, string> = {\n      'currency': 'валюта',\n      'amount': 'сумма',\n      'balance': 'баланс',\n      'recharge': 'пополнение',\n      'withdraw': 'вывод'\n    };\n    return russianTranslations[original] || '';\n  }\n\n  private getEnglishTranslation(original: string): string {\n    // 英语翻译建议\n    const englishTranslations: Record<string, string> = {\n      'currency': 'currency',\n      'amount': 'amount',\n      'balance': 'balance',\n      'recharge': 'recharge',\n      'withdraw': 'withdraw'\n    };\n    return englishTranslations[original] || '';\n  }\n}\n\nexport default TranslationProofreader;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-quality-metrics.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'ACCURACY' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'FLUENCY' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'CONSISTENCY' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'CULTURAL_ADAPTATION' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'COMPLETENESS' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'TECHNICAL_QUALITY' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'CRITICAL' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'HIGH' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'MEDIUM' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'LOW' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'MISSING_TRANSLATION' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'INACCURATE_TRANSLATION' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'STYLISTIC_ISSUE' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'TERMINOLOGY_INCONSISTENCY' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'PLACEHOLDER_MISMATCH' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'CULTURAL_INAPPROPRIATE' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'LENGTH_ISSUE' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'GRAMMAR_ISSUE' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'PUNCTUATION_ISSUE' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'count' is defined but never used. Allowed unused args must match /^_/u.","line":98,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":30},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":131,"column":55,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":131,"endColumn":69,"fix":{"range":[3615,3629],"text":"{return 'many';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":132,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":132,"endColumn":41,"fix":{"range":[3657,3670],"text":"{return 'one';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":133,"column":45,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":133,"endColumn":58,"fix":{"range":[3715,3728],"text":"{return 'few';}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":261,"column":20,"nodeType":"MemberExpression","endLine":261,"endColumn":52},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":394,"column":20,"nodeType":"MemberExpression","endLine":394,"endColumn":52},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":493,"column":20,"nodeType":"MemberExpression","endLine":493,"endColumn":52},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":521,"column":35,"nodeType":"CallExpression","messageId":"substr","endLine":521,"endColumn":74,"fix":{"range":[14042,14053],"text":"slice(2, 11"}},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":532,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":532,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":532,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":532,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":551,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":551,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":551,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":551,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":554,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":554,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14885,14887],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":555,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":555,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14945,14947],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":574,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":574,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'namespace' is defined but never used. Allowed unused args must match /^_/u.","line":574,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":574,"endColumn":14},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":578,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":578,"endColumn":30,"fix":{"range":[15452,16206],"text":"for (const rule of TERMINOLOGY_RULES) {\n      const translatedTerm = rule.allowedTranslations[language];\n      if (translatedTerm) {\n        const forbiddenTranslations = rule.forbiddenTranslations[language] || [];\n        forbiddenTranslations.forEach(forbiddenTerm => {\n          if (text.toLowerCase().includes(forbiddenTerm.toLowerCase())) {\n            issues.push({\n              id: this.generateId(),\n              type: IssueType.TERMINOLOGY_INCONSISTENCY,\n              severity: rule.priority,\n              description: `使用了禁止的术语：${forbiddenTerm}，建议使用：${translatedTerm}`,\n              location: 'terminology',\n              suggestedFix: translatedTerm,\n              timestamp: new Date()\n            });\n          }\n        });\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":579,"column":30,"nodeType":"MemberExpression","endLine":579,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":580,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":580,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15563,15577],"text":"translatedTerm != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[15563,15577],"text":"translatedTerm ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15563,15577],"text":"Boolean(translatedTerm)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":581,"column":39,"nodeType":"MemberExpression","endLine":581,"endColumn":75},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":581,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":581,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15656,15658],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":582,"column":31,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":582,"endColumn":38,"fix":{"range":[15671,16190],"text":"for (const forbiddenTerm of forbiddenTranslations) {\n          if (text.toLowerCase().includes(forbiddenTerm.toLowerCase())) {\n            issues.push({\n              id: this.generateId(),\n              type: IssueType.TERMINOLOGY_INCONSISTENCY,\n              severity: rule.priority,\n              description: `使用了禁止的术语：${forbiddenTerm}，建议使用：${translatedTerm}`,\n              location: 'terminology',\n              suggestedFix: translatedTerm,\n              timestamp: new Date()\n            });\n          }\n        }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'text' is defined but never used. Allowed unused args must match /^_/u.","line":601,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":601,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'text' is defined but never used. Allowed unused args must match /^_/u.","line":601,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":601,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":601,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":601,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":601,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":601,"endColumn":62},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":611,"column":35,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":611,"endColumn":42,"fix":{"range":[16568,17088],"text":"for (const consideration of config.culturalConsiderations) {\n      // 简化的检查逻辑\n      if (consideration.includes('避免') && consideration.includes('表述')) {\n        // 检查过于正式的表达\n        if (/[！!]/.test(text) && text.length > 10) {\n          issues.push({\n            id: this.generateId(),\n            type: IssueType.CULTURAL_INAPPROPRIATE,\n            severity: SeverityLevel.MEDIUM,\n            description: '可能存在过于正式的表述',\n            location: 'tone',\n            timestamp: new Date()\n          });\n        }\n      }\n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":631,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":631,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":631,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":631,"endColumn":56},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":643,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":643,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17540,17542],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":647,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":647,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17664,17666],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'text' is defined but never used. Allowed unused args must match /^_/u.","line":655,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":655,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'text' is defined but never used. Allowed unused args must match /^_/u.","line":655,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":655,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":655,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":655,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":655,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":655,"endColumn":60},{"ruleId":"no-unused-vars","severity":2,"message":"'level' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":705,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":705,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'level' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":705,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":705,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":715,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":715,"endColumn":47}],"suppressedMessages":[],"errorCount":56,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":4,"fixableWarningCount":3,"source":"/**\n * 翻译质量评估标准和量化体系\n * Translation Quality Assessment Standards and Metrics\n */\n\n// 评估维度定义\nexport enum QualityDimension {\n  ACCURACY = 'accuracy',        // 准确性\n  FLUENCY = 'fluency',          // 流畅性\n  CONSISTENCY = 'consistency',  // 一致性\n  CULTURAL_ADAPTATION = 'cultural_adaptation', // 文化适应性\n  COMPLETENESS = 'completeness', // 完整性\n  TECHNICAL_QUALITY = 'technical_quality' // 技术质量\n}\n\n// 严重程度级别\nexport enum SeverityLevel {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low'\n}\n\n// 问题类型定义\nexport enum IssueType {\n  MISSING_TRANSLATION = 'missing_translation',\n  INACCURATE_TRANSLATION = 'inaccurate_translation',\n  STYLISTIC_ISSUE = 'stylistic_issue',\n  TERMINOLOGY_INCONSISTENCY = 'terminology_inconsistency',\n  PLACEHOLDER_MISMATCH = 'placeholder_mismatch',\n  CULTURAL_INAPPROPRIATE = 'cultural_inappropriate',\n  LENGTH_ISSUE = 'length_issue',\n  GRAMMAR_ISSUE = 'grammar_issue',\n  PUNCTUATION_ISSUE = 'punctuation_issue'\n}\n\n// 质量指标接口\nexport interface QualityMetrics {\n  dimension: QualityDimension;\n  score: number; // 0-100\n  maxScore: number;\n  weight: number; // 权重\n  issues: QualityIssue[];\n  lastAssessed: Date;\n}\n\n// 质量问题接口\nexport interface QualityIssue {\n  id: string;\n  type: IssueType;\n  severity: SeverityLevel;\n  description: string;\n  location: string;\n  suggestedFix?: string;\n  timestamp: Date;\n}\n\n// 翻译质量评估结果\nexport interface TranslationQualityAssessment {\n  translationKey: string;\n  sourceText: string;\n  translatedText: string;\n  sourceLanguage: string;\n  targetLanguage: string;\n  namespace: string;\n  overallScore: number;\n  dimensionScores: QualityMetrics[];\n  issues: QualityIssue[];\n  recommendations: string[];\n  assessmentDate: Date;\n}\n\n// 评分权重配置\nexport const QUALITY_WEIGHTS: Record<QualityDimension, number> = {\n  [QualityDimension.ACCURACY]: 0.30,           // 准确性占30%\n  [QualityDimension.FLUENCY]: 0.25,            // 流畅性占25%\n  [QualityDimension.CONSISTENCY]: 0.20,        // 一致性占20%\n  [QualityDimension.CULTURAL_ADAPTATION]: 0.15, // 文化适应性占15%\n  [QualityDimension.COMPLETENESS]: 0.07,       // 完整性占7%\n  [QualityDimension.TECHNICAL_QUALITY]: 0.03   // 技术质量占3%\n};\n\n// 质量阈值定义\nexport const QUALITY_THRESHOLDS = {\n  EXCELLENT: { min: 90, label: '优秀', color: '#10B981' },\n  GOOD: { min: 80, label: '良好', color: '#059669' },\n  ACCEPTABLE: { min: 70, label: '可接受', color: '#D97706' },\n  POOR: { min: 60, label: '较差', color: '#DC2626' },\n  UNACCEPTABLE: { min: 0, label: '不可接受', color: '#991B1B' }\n};\n\n// 语言特定配置\nexport interface LanguageConfig {\n  code: string;\n  name: string;\n  rtl: boolean; // 是否为从右到左语言\n  placeholderPattern: RegExp;\n  pluralRules: (count: number) => string;\n  culturalConsiderations: string[];\n  maxLengthMultiplier: number; // 相对源文本的最大长度倍数\n}\n\n// 语言配置\nexport const LANGUAGE_CONFIGS: Record<string, LanguageConfig> = {\n  'zh-CN': {\n    code: 'zh-CN',\n    name: '简体中文',\n    rtl: false,\n    placeholderPattern: /\\{\\{(\\w+)\\}\\}/g,\n    pluralRules: (count: number) => count === 1 ? 'one' : 'other',\n    culturalConsiderations: ['使用简体中文', '避免过于正式的表述', '考虑中文表达习惯'],\n    maxLengthMultiplier: 0.7\n  },\n  'en-US': {\n    code: 'en-US',\n    name: '美式英语',\n    rtl: false,\n    placeholderPattern: /\\{\\{(\\w+)\\}\\}|%s/g,\n    pluralRules: (count: number) => count === 1 ? 'one' : 'other',\n    culturalConsiderations: ['使用美式英语', '避免英式英语拼写', '考虑美国文化背景'],\n    maxLengthMultiplier: 1.0\n  },\n  'ru-RU': {\n    code: 'ru-RU',\n    name: '俄语',\n    rtl: false,\n    placeholderPattern: /\\{\\{(\\w+)\\}\\}/g,\n    pluralRules: (count: number) => {\n      const lastDigit = count % 10;\n      const lastTwoDigits = count % 100;\n      if (lastTwoDigits >= 11 && lastTwoDigits <= 19) return 'many';\n      if (lastDigit === 1) return 'one';\n      if (lastDigit >= 2 && lastDigit <= 4) return 'few';\n      return 'many';\n    },\n    culturalConsiderations: ['使用正式的俄语', '注意性别变化', '考虑俄罗斯文化'],\n    maxLengthMultiplier: 1.3\n  },\n  'tg-TJ': {\n    code: 'tg-TJ',\n    name: '塔吉克语',\n    rtl: false,\n    placeholderPattern: /\\{\\{(\\w+)\\}\\}/g,\n    pluralRules: (count: number) => count === 1 ? 'one' : 'other',\n    culturalConsiderations: ['使用标准塔吉克语', '避免波斯语和乌兹别克语混合', '考虑塔吉克文化'],\n    maxLengthMultiplier: 1.1\n  }\n};\n\n// 术语一致性检查规则\nexport interface TerminologyRule {\n  term: string;\n  allowedTranslations: Record<string, string>;\n  forbiddenTranslations: Record<string, string[]>;\n  priority: SeverityLevel;\n}\n\n// 术语库\nexport const TERMINOLOGY_RULES: TerminologyRule[] = [\n  {\n    term: 'wallet',\n    allowedTranslations: {\n      'zh-CN': '钱包',\n      'ru-RU': 'кошелек',\n      'tg-TJ': 'хамён'\n    },\n    forbiddenTranslations: {\n      'zh-CN': ['皮夹', '钱袋'],\n      'ru-RU': ['бумажник'],\n      'tg-TJ': ['чӯбча']\n    },\n    priority: SeverityLevel.HIGH\n  },\n  {\n    term: 'lottery',\n    allowedTranslations: {\n      'zh-CN': '抽奖',\n      'ru-RU': 'лотерея',\n      'tg-TJ': 'лоторея'\n    },\n    forbiddenTranslations: {\n      'zh-CN': ['彩票', '抽奖活动'],\n      'ru-RU': ['розыгрыш'],\n      'tg-TJ': ['бозии мусабиқавӣ']\n    },\n    priority: SeverityLevel.HIGH\n  }\n];\n\n// 评估工具类\nexport class QualityAssessor {\n  /**\n   * 评估翻译质量\n   */\n  static assessTranslation(\n    sourceText: string,\n    translatedText: string,\n    sourceLanguage: string,\n    targetLanguage: string,\n    namespace: string,\n    translationKey: string\n  ): TranslationQualityAssessment {\n    const dimensionScores: QualityMetrics[] = [\n      this.assessAccuracy(sourceText, translatedText, sourceLanguage, targetLanguage),\n      this.assessFluency(translatedText, targetLanguage),\n      this.assessConsistency(translatedText, targetLanguage, namespace),\n      this.assessCulturalAdaptation(translatedText, targetLanguage),\n      this.assessCompleteness(translatedText, sourceText),\n      this.assessTechnicalQuality(translatedText, targetLanguage)\n    ];\n\n    const overallScore = this.calculateOverallScore(dimensionScores);\n    const issues = this.collectAllIssues(dimensionScores);\n    const recommendations = this.generateRecommendations(issues);\n\n    return {\n      translationKey,\n      sourceText,\n      translatedText,\n      sourceLanguage,\n      targetLanguage,\n      namespace,\n      overallScore,\n      dimensionScores,\n      issues,\n      recommendations,\n      assessmentDate: new Date()\n    };\n  }\n\n  /**\n   * 准确性评估\n   */\n  private static assessAccuracy(\n    sourceText: string,\n    translatedText: string,\n    sourceLanguage: string,\n    targetLanguage: string\n  ): QualityMetrics {\n    const issues: QualityIssue[] = [];\n    let score = 100;\n\n    // 检查翻译缺失\n    if (!translatedText || translatedText.trim() === '') {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.MISSING_TRANSLATION,\n        severity: SeverityLevel.CRITICAL,\n        description: '翻译文本缺失',\n        location: 'translatedText',\n        timestamp: new Date()\n      });\n      score = 0;\n    }\n\n    // 检查长度比例（简化算法）\n    const sourceLength = sourceText.length;\n    const targetLength = translatedText.length;\n    const ratio = targetLength / sourceLength;\n\n    const config = LANGUAGE_CONFIGS[targetLanguage];\n    if (config && (ratio < 0.3 || ratio > 3.0)) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.ACCURACY,\n        severity: SeverityLevel.MEDIUM,\n        description: `翻译长度异常：源文本${sourceLength}字符，翻译文本${targetLength}字符`,\n        location: 'translatedText',\n        timestamp: new Date()\n      });\n      score -= 20;\n    }\n\n    // 检查关键词是否翻译\n    const keywords = this.extractKeywords(sourceText);\n    const missingKeywords = keywords.filter(keyword => \n      !translatedText.toLowerCase().includes(keyword.toLowerCase())\n    );\n\n    if (missingKeywords.length > 0) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.INACCURATE_TRANSLATION,\n        severity: SeverityLevel.HIGH,\n        description: `缺失关键词翻译：${missingKeywords.join(', ')}`,\n        location: 'translatedText',\n        timestamp: new Date()\n      });\n      score -= Math.min(30, missingKeywords.length * 10);\n    }\n\n    return {\n      dimension: QualityDimension.ACCURACY,\n      score: Math.max(0, score),\n      maxScore: 100,\n      weight: QUALITY_WEIGHTS[QualityDimension.ACCURACY],\n      issues,\n      lastAssessed: new Date()\n    };\n  }\n\n  /**\n   * 流畅性评估\n   */\n  private static assessFluency(\n    translatedText: string,\n    targetLanguage: string\n  ): QualityMetrics {\n    const issues: QualityIssue[] = [];\n    let score = 100;\n\n    // 检查语法错误（简化检查）\n    const grammarIssues = this.checkGrammar(translatedText, targetLanguage);\n    issues.push(...grammarIssues);\n    score -= grammarIssues.length * 15;\n\n    // 检查标点符号\n    const punctuationIssues = this.checkPunctuation(translatedText, targetLanguage);\n    issues.push(...punctuationIssues);\n    score -= punctuationIssues.length * 10;\n\n    // 检查重复词汇\n    const wordCount = translatedText.split(/\\s+/);\n    const uniqueWords = new Set(wordCount);\n    const repetitionRatio = 1 - (uniqueWords.size / wordCount.length);\n\n    if (repetitionRatio > 0.3) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.STYLISTIC_ISSUE,\n        severity: SeverityLevel.MEDIUM,\n        description: '词汇重复过多',\n        location: 'translatedText',\n        timestamp: new Date()\n      });\n      score -= 15;\n    }\n\n    return {\n      dimension: QualityDimension.FLUENCY,\n      score: Math.max(0, score),\n      maxScore: 100,\n      weight: QUALITY_WEIGHTS[QualityDimension.FLUENCY],\n      issues,\n      lastAssessed: new Date()\n    };\n  }\n\n  /**\n   * 一致性评估\n   */\n  private static assessConsistency(\n    translatedText: string,\n    targetLanguage: string,\n    namespace: string\n  ): QualityMetrics {\n    const issues: QualityIssue[] = [];\n    let score = 100;\n\n    // 检查术语一致性\n    const terminologyIssues = this.checkTerminologyConsistency(\n      translatedText,\n      targetLanguage,\n      namespace\n    );\n    issues.push(...terminologyIssues);\n    score -= terminologyIssues.length * 20;\n\n    // 检查翻译风格一致性（简化检查）\n    const styleConsistencyIssues = this.checkStyleConsistency(translatedText, targetLanguage);\n    issues.push(...styleConsistencyIssues);\n    score -= styleConsistencyIssues.length * 10;\n\n    return {\n      dimension: QualityDimension.CONSISTENCY,\n      score: Math.max(0, score),\n      maxScore: 100,\n      weight: QUALITY_WEIGHTS[QualityDimension.CONSISTENCY],\n      issues,\n      lastAssessed: new Date()\n    };\n  }\n\n  /**\n   * 文化适应性评估\n   */\n  private static assessCulturalAdaptation(\n    translatedText: string,\n    targetLanguage: string\n  ): QualityMetrics {\n    const issues: QualityIssue[] = [];\n    let score = 100;\n\n    const config = LANGUAGE_CONFIGS[targetLanguage];\n    if (config) {\n      // 检查文化适应性\n      const culturalIssues = this.checkCulturalAppropriateness(translatedText, config);\n      issues.push(...culturalIssues);\n      score -= culturalIssues.length * 25;\n\n      // 检查数字和日期格式\n      const formatIssues = this.checkFormatting(translatedText, targetLanguage);\n      issues.push(...formatIssues);\n      score -= formatIssues.length * 10;\n    }\n\n    return {\n      dimension: QualityDimension.CULTURAL_ADAPTATION,\n      score: Math.max(0, score),\n      maxScore: 100,\n      weight: QUALITY_WEIGHTS[QualityDimension.CULTURAL_ADAPTATION],\n      issues,\n      lastAssessed: new Date()\n    };\n  }\n\n  /**\n   * 完整性评估\n   */\n  private static assessCompleteness(\n    translatedText: string,\n    sourceText: string\n  ): QualityMetrics {\n    const issues: QualityIssue[] = [];\n    let score = 100;\n\n    // 检查占位符匹配\n    const sourcePlaceholders = this.extractPlaceholders(sourceText);\n    const targetPlaceholders = this.extractPlaceholders(translatedText);\n\n    if (sourcePlaceholders.length !== targetPlaceholders.length) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.PLACEHOLDER_MISMATCH,\n        severity: SeverityLevel.HIGH,\n        description: `占位符不匹配：源文本${sourcePlaceholders.length}个，翻译文本${targetPlaceholders.length}个`,\n        location: 'placeholderMismatch',\n        timestamp: new Date()\n      });\n      score -= 40;\n    }\n\n    // 检查HTML标签匹配\n    const sourceTags = this.extractHtmlTags(sourceText);\n    const targetTags = this.extractHtmlTags(translatedText);\n\n    if (sourceTags.length !== targetTags.length) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.TECHNICAL_QUALITY,\n        severity: SeverityLevel.MEDIUM,\n        description: 'HTML标签不匹配',\n        location: 'htmlTags',\n        timestamp: new Date()\n      });\n      score -= 20;\n    }\n\n    return {\n      dimension: QualityDimension.COMPLETENESS,\n      score: Math.max(0, score),\n      maxScore: 100,\n      weight: QUALITY_WEIGHTS[QualityDimension.COMPLETENESS],\n      issues,\n      lastAssessed: new Date()\n    };\n  }\n\n  /**\n   * 技术质量评估\n   */\n  private static assessTechnicalQuality(\n    translatedText: string,\n    targetLanguage: string\n  ): QualityMetrics {\n    const issues: QualityIssue[] = [];\n    let score = 100;\n\n    // 检查编码问题\n    if (this.hasEncodingIssues(translatedText)) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.TECHNICAL_QUALITY,\n        severity: SeverityLevel.HIGH,\n        description: '发现编码问题',\n        location: 'encoding',\n        timestamp: new Date()\n      });\n      score -= 30;\n    }\n\n    // 检查特殊字符\n    const config = LANGUAGE_CONFIGS[targetLanguage];\n    if (config) {\n      const invalidChars = this.findInvalidCharacters(translatedText, config);\n      if (invalidChars.length > 0) {\n        issues.push({\n          id: this.generateId(),\n          type: IssueType.TECHNICAL_QUALITY,\n          severity: SeverityLevel.MEDIUM,\n          description: `发现无效字符：${invalidChars.join(', ')}`,\n          location: 'characterValidation',\n          timestamp: new Date()\n        });\n        score -= 20;\n      }\n    }\n\n    return {\n      dimension: QualityDimension.TECHNICAL_QUALITY,\n      score: Math.max(0, score),\n      maxScore: 100,\n      weight: QUALITY_WEIGHTS[QualityDimension.TECHNICAL_QUALITY],\n      issues,\n      lastAssessed: new Date()\n    };\n  }\n\n  // 辅助方法\n  private static generateId(): string {\n    return `issue_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private static extractKeywords(text: string): string[] {\n    // 简化的关键词提取\n    return text\n      .split(/\\s+/)\n      .filter(word => word.length > 3)\n      .slice(0, 5); // 取前5个较长的词作为关键词\n  }\n\n  private static checkGrammar(text: string, language: string): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    // 简化的语法检查逻辑\n    \n    // 检查多余的空格\n    if (/\\s{2,}/.test(text)) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.GRAMMAR_ISSUE,\n        severity: SeverityLevel.LOW,\n        description: '存在多余空格',\n        location: 'whitespace',\n        timestamp: new Date()\n      });\n    }\n\n    return issues;\n  }\n\n  private static checkPunctuation(text: string, language: string): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    // 检查标点符号配对\n    const parentheses = (text.match(/\\(/g) || []).length;\n    const closingParens = (text.match(/\\)/g) || []).length;\n    \n    if (parentheses !== closingParens) {\n      issues.push({\n        id: this.generateId(),\n        type: IssueType.PUNCTUATION_ISSUE,\n        severity: SeverityLevel.MEDIUM,\n        description: '括号不匹配',\n        location: 'punctuation',\n        timestamp: new Date()\n      });\n    }\n\n    return issues;\n  }\n\n  private static checkTerminologyConsistency(\n    text: string,\n    language: string,\n    namespace: string\n  ): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    \n    TERMINOLOGY_RULES.forEach(rule => {\n      const translatedTerm = rule.allowedTranslations[language];\n      if (translatedTerm) {\n        const forbiddenTranslations = rule.forbiddenTranslations[language] || [];\n        forbiddenTranslations.forEach(forbiddenTerm => {\n          if (text.toLowerCase().includes(forbiddenTerm.toLowerCase())) {\n            issues.push({\n              id: this.generateId(),\n              type: IssueType.TERMINOLOGY_INCONSISTENCY,\n              severity: rule.priority,\n              description: `使用了禁止的术语：${forbiddenTerm}，建议使用：${translatedTerm}`,\n              location: 'terminology',\n              suggestedFix: translatedTerm,\n              timestamp: new Date()\n            });\n          }\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  private static checkStyleConsistency(text: string, language: string): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    // 简化的风格一致性检查\n    return issues;\n  }\n\n  private static checkCulturalAppropriateness(text: string, config: LanguageConfig): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    \n    // 检查文化考虑事项\n    config.culturalConsiderations.forEach(consideration => {\n      // 简化的检查逻辑\n      if (consideration.includes('避免') && consideration.includes('表述')) {\n        // 检查过于正式的表达\n        if (/[！!]/.test(text) && text.length > 10) {\n          issues.push({\n            id: this.generateId(),\n            type: IssueType.CULTURAL_INAPPROPRIATE,\n            severity: SeverityLevel.MEDIUM,\n            description: '可能存在过于正式的表述',\n            location: 'tone',\n            timestamp: new Date()\n          });\n        }\n      }\n    });\n\n    return issues;\n  }\n\n  private static checkFormatting(text: string, language: string): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    // 检查数字格式\n    if (/\\d{4}-\\d{2}-\\d{2}/.test(text)) {\n      // 检查日期格式是否符合语言习惯\n      // 这里可以添加更具体的检查逻辑\n    }\n    return issues;\n  }\n\n  private static extractPlaceholders(text: string): string[] {\n    const config = LANGUAGE_CONFIGS['en-US']; // 默认使用英文配置\n    return text.match(config.placeholderPattern) || [];\n  }\n\n  private static extractHtmlTags(text: string): string[] {\n    return text.match(/<\\/?[\\w\\s=\"/.':;#-\\/\\?]+>/gi) || [];\n  }\n\n  private static hasEncodingIssues(text: string): boolean {\n    // 检查常见编码问题\n    return /�/.test(text) || /□/.test(text);\n  }\n\n  private static findInvalidCharacters(text: string, config: LanguageConfig): string[] {\n    // 简化的无效字符检查\n    const invalidChars: string[] = [];\n    // 这里可以添加语言特定的无效字符检查逻辑\n    return invalidChars;\n  }\n\n  private static collectAllIssues(dimensionScores: QualityMetrics[]): QualityIssue[] {\n    return dimensionScores.flatMap(dimension => dimension.issues);\n  }\n\n  private static calculateOverallScore(dimensionScores: QualityMetrics[]): number {\n    const totalWeightedScore = dimensionScores.reduce(\n      (sum, dimension) => sum + (dimension.score * dimension.weight),\n      0\n    );\n    return Math.round(totalWeightedScore);\n  }\n\n  private static generateRecommendations(issues: QualityIssue[]): string[] {\n    const recommendations: string[] = [];\n    \n    // 根据问题类型生成建议\n    const issueCount = issues.reduce((acc, issue) => {\n      acc[issue.type] = (acc[issue.type] || 0) + 1;\n      return acc;\n    }, {} as Record<IssueType, number>);\n\n    if (issueCount[IssueType.MISSING_TRANSLATION] > 0) {\n      recommendations.push('提供缺失的翻译内容');\n    }\n    \n    if (issueCount[IssueType.TERMINOLOGY_INCONSISTENCY] > 0) {\n      recommendations.push('统一术语翻译，保持一致性');\n    }\n    \n    if (issueCount[IssueType.PLACEHOLDER_MISMATCH] > 0) {\n      recommendations.push('修正占位符不匹配问题');\n    }\n    \n    if (issueCount[IssueType.GRAMMAR_ISSUE] > 0) {\n      recommendations.push('检查并修正语法错误');\n    }\n\n    return recommendations;\n  }\n}\n\n// 导出质量等级检查函数\nexport function getQualityLevel(score: number): typeof QUALITY_THRESHOLDS[keyof typeof QUALITY_THRESHOLDS] {\n  for (const [level, threshold] of Object.entries(QUALITY_THRESHOLDS)) {\n    if (score >= threshold.min) {\n      return threshold;\n    }\n  }\n  return QUALITY_THRESHOLDS.UNACCEPTABLE;\n}\n\n// 导出评分辅助函数\nexport function calculateQualityScore(dimensionScores: QualityMetrics[]): number {\n  return QualityAssessor.calculateOverallScore ? \n    QualityAssessor.calculateOverallScore(dimensionScores) : 0;\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-quality-standards.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'text' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[712,715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[712,715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":587,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":587,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14800,14803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14800,14803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":622,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":622,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15732,15735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15732,15735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16196,16199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16196,16199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":672,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":672,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17015,17018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17015,17018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'maxScore' is never reassigned. Use 'const' instead.","line":676,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":676,"endColumn":17,"fix":{"range":[17153,17187],"text":"const maxScore = check.weight * 100;"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":694,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":694,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[17681,17698],"text":"(Boolean(check.customCheck))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":709,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":709,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18045,18048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18045,18048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":721,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":721,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18365,18377],"text":"rule.pattern != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[18365,18377],"text":"rule.pattern ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[18365,18377],"text":"Boolean(rule.pattern)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":722,"column":21,"nodeType":"NewExpression","endLine":722,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":741,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":741,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18791,18794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18791,18794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'expectedTranslation' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":754,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":754,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'expectedTranslation' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":754,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":754,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":852,"column":12,"nodeType":"MemberExpression","endLine":852,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":852,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":852,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21876,21878],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * 翻译质量评估标准\n * 定义翻译质量的评估标准和指标\n */\n\nexport interface QualityStandard {\n  name: string;\n  description: string;\n  weight: number; // 在总体评分中的权重 (0-1)\n  criteria: QualityCriterion[];\n}\n\nexport interface QualityCriterion {\n  name: string;\n  description: string;\n  weight: number; // 在该标准中的权重 (0-1)\n  checks: QualityCheck[];\n}\n\nexport interface QualityCheck {\n  name: string;\n  description: string;\n  weight: number; // 在该标准中的权重 (0-1)\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  automated: boolean;\n  manualRequired: boolean;\n  rules: QualityRule[];\n}\n\nexport interface QualityRule {\n  name: string;\n  description: string;\n  pattern?: string;\n  threshold?: number;\n  customCheck?: (text: string, context: any) => boolean;\n}\n\nexport interface TranslationScoringResult {\n  standard: string;\n  criteria: CriterionScore[];\n  overall: number;\n  pass: boolean;\n  details: string;\n}\n\nexport interface CriterionScore {\n  name: string;\n  score: number;\n  maxScore: number;\n  passed: boolean;\n  issues: QualityIssue[];\n}\n\nexport interface QualityIssue {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  location?: string;\n  suggestion?: string;\n}\n\nexport class TranslationQualityStandards {\n  private standards: QualityStandard[] = [];\n\n  constructor() {\n    this.initializeStandards();\n  }\n\n  private initializeStandards() {\n    // 标准1: 翻译准确性\n    this.standards.push({\n      name: 'accuracy',\n      description: '翻译准确性 - 确保翻译内容准确反映原文含义',\n      weight: 0.25,\n      criteria: [\n        {\n          name: 'meaning_accuracy',\n          description: '含义准确性',\n          weight: 0.4,\n          checks: [\n            {\n              name: 'literal_accuracy',\n              description: '字面意思准确性',\n              weight: 0.3,\n              severity: 'high',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'missing_translation',\n                  description: '检查是否有未翻译的文本'\n                },\n                {\n                  name: 'incomplete_translation',\n                  description: '检查翻译是否完整'\n                }\n              ]\n            },\n            {\n              name: 'context_accuracy',\n              description: '语境准确性',\n              weight: 0.4,\n              severity: 'high',\n              automated: false,\n              manualRequired: true,\n              rules: []\n            },\n            {\n              name: 'technical_accuracy',\n              description: '技术术语准确性',\n              weight: 0.3,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'technical_terms',\n                  description: '检查技术术语翻译'\n                },\n                {\n                  name: 'proper_nouns',\n                  description: '检查专有名词处理'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'semantic_accuracy',\n          description: '语义准确性',\n          weight: 0.3,\n          checks: [\n            {\n              name: 'word_choice',\n              description: '词汇选择准确性',\n              weight: 0.5,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'glossary_compliance',\n                  description: '符合术语表标准'\n                },\n                {\n                  name: 'domain_specific',\n                  description: '领域特定词汇准确性'\n                }\n              ]\n            },\n            {\n              name: 'idiom_accuracy',\n              description: '习语准确性',\n              weight: 0.5,\n              severity: 'high',\n              automated: false,\n              manualRequired: true,\n              rules: []\n            }\n          ]\n        },\n        {\n          name: 'factual_accuracy',\n          description: '事实准确性',\n          weight: 0.3,\n          checks: [\n            {\n              name: 'data_accuracy',\n              description: '数据准确性',\n              weight: 1.0,\n              severity: 'critical',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'date_format',\n                  description: '日期格式准确性'\n                },\n                {\n                  name: 'currency_format',\n                  description: '货币格式准确性'\n                },\n                {\n                  name: 'number_format',\n                  description: '数字格式准确性'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    });\n\n    // 标准2: 翻译一致性\n    this.standards.push({\n      name: 'consistency',\n      description: '翻译一致性 - 确保相同概念在全文中翻译一致',\n      weight: 0.20,\n      criteria: [\n        {\n          name: 'terminology_consistency',\n          description: '术语一致性',\n          weight: 0.4,\n          checks: [\n            {\n              name: 'glossary_consistency',\n              description: '术语表一致性',\n              weight: 1.0,\n              severity: 'high',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'core_terms',\n                  description: '核心术语一致性',\n                  customCheck: (text, context) => {\n                    return this.checkCoreTermsConsistency(text, context);\n                  }\n                },\n                {\n                  name: 'repeated_terms',\n                  description: '重复术语一致性'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'style_consistency',\n          description: '风格一致性',\n          weight: 0.3,\n          checks: [\n            {\n              name: 'tone_consistency',\n              description: '语调一致性',\n              weight: 1.0,\n              severity: 'medium',\n              automated: false,\n              manualRequired: true,\n              rules: []\n            }\n          ]\n        },\n        {\n          name: 'structural_consistency',\n          description: '结构一致性',\n          weight: 0.3,\n          checks: [\n            {\n              name: 'format_consistency',\n              description: '格式一致性',\n              weight: 1.0,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'punctuation_style',\n                  description: '标点符号风格一致性'\n                },\n                {\n                  name: 'capitalization',\n                  description: '大小写一致性'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    });\n\n    // 标准3: 语言流畅性\n    this.standards.push({\n      name: 'fluency',\n      description: '语言流畅性 - 确保翻译自然流畅',\n      weight: 0.20,\n      criteria: [\n        {\n          name: 'grammatical_correctness',\n          description: '语法正确性',\n          weight: 0.4,\n          checks: [\n            {\n              name: 'syntax_check',\n              description: '句法检查',\n              weight: 0.5,\n              severity: 'high',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'word_order',\n                  description: '词序正确性'\n                },\n                {\n                  name: 'grammar_rules',\n                  description: '语法规则符合性'\n                }\n              ]\n            },\n            {\n              name: 'morphology_check',\n              description: '词形检查',\n              weight: 0.5,\n              severity: 'high',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'inflection',\n                  description: '变词形正确性'\n                },\n                {\n                  name: 'agreement',\n                  description: '一致性正确性'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'naturalness',\n          description: '自然性',\n          weight: 0.4,\n          checks: [\n            {\n              name: 'natural_expression',\n              description: '自然表达',\n              weight: 1.0,\n              severity: 'medium',\n              automated: false,\n              manualRequired: true,\n              rules: []\n            }\n          ]\n        },\n        {\n          name: 'readability',\n          description: '可读性',\n          weight: 0.2,\n          checks: [\n            {\n              name: 'length_appropriateness',\n              description: '长度适宜性',\n              weight: 1.0,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'mobile_friendly',\n                  description: '移动端友好性',\n                  threshold: 50 // 最大字符数\n                },\n                {\n                  name: 'reading_ease',\n                  description: '阅读容易度'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    });\n\n    // 标准4: 文化适应性\n    this.standards.push({\n      name: 'cultural_adaptation',\n      description: '文化适应性 - 确保翻译符合目标文化习惯',\n      weight: 0.15,\n      criteria: [\n        {\n          name: 'cultural_sensitivity',\n          description: '文化敏感性',\n          weight: 0.4,\n          checks: [\n            {\n              name: 'cultural_appropriateness',\n              description: '文化适当性',\n              weight: 1.0,\n              severity: 'high',\n              automated: false,\n              manualRequired: true,\n              rules: []\n            }\n          ]\n        },\n        {\n          name: 'localization',\n          description: '本土化',\n          weight: 0.4,\n          checks: [\n            {\n              name: 'date_time_format',\n              description: '日期时间格式',\n              weight: 0.3,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'date_format',\n                  description: '日期格式本土化'\n                },\n                {\n                  name: 'time_format',\n                  description: '时间格式本土化'\n                }\n              ]\n            },\n            {\n              name: 'currency_format',\n              description: '货币格式',\n              weight: 0.3,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'currency_symbol',\n                  description: '货币符号本土化'\n                },\n                {\n                  name: 'currency_position',\n                  description: '货币位置本土化'\n                }\n              ]\n            },\n            {\n              name: 'number_format',\n              description: '数字格式',\n              weight: 0.4,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'decimal_separator',\n                  description: '小数分隔符'\n                },\n                {\n                  name: 'thousand_separator',\n                  description: '千位分隔符'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'idiomatic_expression',\n          description: '惯用表达',\n          weight: 0.2,\n          checks: [\n            {\n              name: 'natural_phrases',\n              description: '自然短语',\n              weight: 1.0,\n              severity: 'medium',\n              automated: false,\n              manualRequired: true,\n              rules: []\n            }\n          ]\n        }\n      ]\n    });\n\n    // 标准5: 技术规范\n    this.standards.push({\n      name: 'technical_standards',\n      description: '技术规范 - 确保翻译符合技术要求',\n      weight: 0.20,\n      criteria: [\n        {\n          name: 'format_compliance',\n          description: '格式合规性',\n          weight: 0.3,\n          checks: [\n            {\n              name: 'json_format',\n              description: 'JSON格式',\n              weight: 1.0,\n              severity: 'critical',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'valid_json',\n                  description: '有效的JSON格式'\n                },\n                {\n                  name: 'proper_escaping',\n                  description: '正确的转义字符'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'placeholder_handling',\n          description: '占位符处理',\n          weight: 0.3,\n          checks: [\n            {\n              name: 'placeholder_integrity',\n              description: '占位符完整性',\n              weight: 1.0,\n              severity: 'critical',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'complete_placeholders',\n                  description: '完整的占位符'\n                },\n                {\n                  name: 'correct_placeholder_format',\n                  description: '正确的占位符格式'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'character_encoding',\n          description: '字符编码',\n          weight: 0.2,\n          checks: [\n            {\n              name: 'encoding_compliance',\n              description: '编码合规性',\n              weight: 1.0,\n              severity: 'high',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'utf8_encoding',\n                  description: 'UTF-8编码'\n                },\n                {\n                  name: 'special_characters',\n                  description: '特殊字符处理'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'platform_compatibility',\n          description: '平台兼容性',\n          weight: 0.2,\n          checks: [\n            {\n              name: 'mobile_optimization',\n              description: '移动端优化',\n              weight: 1.0,\n              severity: 'medium',\n              automated: true,\n              manualRequired: false,\n              rules: [\n                {\n                  name: 'text_length',\n                  description: '文本长度适合移动端',\n                  threshold: 50\n                },\n                {\n                  name: 'special_characters_mobile',\n                  description: '移动端特殊字符支持'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    });\n  }\n\n  /**\n   * 评估翻译质量\n   */\n  evaluateTranslation(\n    sourceText: string,\n    translatedText: string,\n    language: string,\n    namespace: string,\n    context: any = {}\n  ): TranslationScoringResult {\n    const results: CriterionScore[] = [];\n    let totalScore = 0;\n    let maxTotalScore = 0;\n\n    for (const standard of this.standards) {\n      const criterionScores = this.evaluateStandard(standard, sourceText, translatedText, language, namespace, context);\n      results.push(...criterionScores);\n    }\n\n    // 计算总体分数\n    for (const result of results) {\n      totalScore += result.score;\n      maxTotalScore += result.maxScore;\n    }\n\n    const overall = Math.round((totalScore / maxTotalScore) * 100);\n    const pass = overall >= 70; // 70分为及格线\n\n    return {\n      standard: 'comprehensive',\n      criteria: results,\n      overall,\n      pass,\n      details: `总体评分: ${overall}/100, ${pass ? '通过' : '未通过'}`\n    };\n  }\n\n  private evaluateStandard(\n    standard: QualityStandard,\n    sourceText: string,\n    translatedText: string,\n    language: string,\n    namespace: string,\n    context: any\n  ): CriterionScore[] {\n    const results: CriterionScore[] = [];\n\n    for (const criterion of standard.criteria) {\n      const score = this.evaluateCriterion(criterion, sourceText, translatedText, language, namespace, context);\n      results.push(score);\n    }\n\n    return results;\n  }\n\n  private evaluateCriterion(\n    criterion: QualityCriterion,\n    sourceText: string,\n    translatedText: string,\n    language: string,\n    namespace: string,\n    context: any\n  ): CriterionScore {\n    const issues: QualityIssue[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    for (const check of criterion.checks) {\n      const checkResult = this.evaluateCheck(check, sourceText, translatedText, language, namespace, context);\n      totalScore += checkResult.score;\n      maxScore += checkResult.maxScore;\n      issues.push(...checkResult.issues);\n    }\n\n    const percentage = maxScore > 0 ? (totalScore / maxScore) * 100 : 100;\n    const score = Math.round(percentage);\n    const passed = score >= 70;\n\n    return {\n      name: criterion.name,\n      score,\n      maxScore: 100,\n      passed,\n      issues\n    };\n  }\n\n  private evaluateCheck(\n    check: QualityCheck,\n    sourceText: string,\n    translatedText: string,\n    language: string,\n    namespace: string,\n    context: any\n  ): { score: number; maxScore: number; issues: QualityIssue[] } {\n    const issues: QualityIssue[] = [];\n    let totalScore = 0;\n    let maxScore = check.weight * 100;\n\n    for (const rule of check.rules) {\n      const ruleResult = this.evaluateRule(rule, sourceText, translatedText, language, namespace, context);\n      if (ruleResult.failed) {\n        const issue: QualityIssue = {\n          type: rule.name,\n          severity: check.severity,\n          message: rule.description,\n          suggestion: ruleResult.suggestion\n        };\n        issues.push(issue);\n      } else {\n        totalScore += ruleResult.score;\n      }\n    }\n\n    // 如果是自定义检查\n    if (check.customCheck && check.manualRequired) {\n      // 手动检查，需要专家评估\n      totalScore += 80; // 假设手动检查得分80分\n    }\n\n    const score = Math.min(totalScore, maxScore);\n    return { score, maxScore, issues };\n  }\n\n  private evaluateRule(\n    rule: QualityRule,\n    sourceText: string,\n    translatedText: string,\n    language: string,\n    namespace: string,\n    context: any\n  ): { failed: boolean; score: number; suggestion?: string } {\n    // 执行规则检查\n    if (rule.customCheck) {\n      const result = rule.customCheck(translatedText, context);\n      return {\n        failed: !result,\n        score: result ? 20 : 0,\n        suggestion: result ? undefined : '需要检查此规则'\n      };\n    }\n\n    if (rule.pattern) {\n      const regex = new RegExp(rule.pattern, 'i');\n      const match = regex.test(translatedText);\n      return {\n        failed: !match,\n        score: match ? 20 : 0,\n        suggestion: match ? undefined : `应符合模式: ${rule.pattern}`\n      };\n    }\n\n    // 默认检查\n    return {\n      failed: false,\n      score: 20\n    };\n  }\n\n  /**\n   * 检查核心术语一致性\n   */\n  private checkCoreTermsConsistency(text: string, context: any): boolean {\n    // 核心术语列表\n    const coreTerms = [\n      'coins', 'shares', 'balance', 'currency', 'amount',\n      'recharge', 'withdraw', 'time', 'date', 'today',\n      'yesterday', 'tomorrow', 'tap', 'swipe', 'long_press',\n      'double_tap', 'confirm'\n    ];\n\n    const language = context.language;\n    const expectedTranslations = this.getExpectedTranslations(coreTerms, language);\n    \n    // 检查文本中是否包含预期的翻译\n    for (const [term, expectedTranslation] of Object.entries(expectedTranslations)) {\n      if (text.toLowerCase().includes(term.toLowerCase())) {\n        // 如果包含原术语，检查是否有对应的翻译\n        const hasTranslation = Object.values(expectedTranslations).some(translation => \n          text.includes(translation)\n        );\n        if (!hasTranslation) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * 获取预期翻译\n   */\n  private getExpectedTranslations(terms: string[], language: string): Record<string, string> {\n    const translations: Record<string, Record<string, string>> = {\n      'zh-CN': {\n        'coins': '夺宝币',\n        'shares': '份',\n        'balance': '余额',\n        'currency': '货币',\n        'amount': '金额',\n        'recharge': '充值',\n        'withdraw': '提现',\n        'time': '时间',\n        'date': '日期',\n        'today': '今天',\n        'yesterday': '昨天',\n        'tomorrow': '明天',\n        'tap': '点击',\n        'swipe': '滑动',\n        'long_press': '长按',\n        'double_tap': '双击',\n        'confirm': '确认'\n      },\n      'en-US': {\n        'coins': 'Lucky Coins',\n        'shares': 'shares',\n        'balance': 'balance',\n        'currency': 'currency',\n        'amount': 'amount',\n        'recharge': 'recharge',\n        'withdraw': 'withdraw',\n        'time': 'time',\n        'date': 'date',\n        'today': 'today',\n        'yesterday': 'yesterday',\n        'tomorrow': 'tomorrow',\n        'tap': 'tap',\n        'swipe': 'swipe',\n        'long_press': 'long press',\n        'double_tap': 'double tap',\n        'confirm': 'confirm'\n      },\n      'ru-RU': {\n        'coins': 'Монеты Удачи',\n        'shares': 'долей',\n        'balance': 'баланс',\n        'currency': 'валюта',\n        'amount': 'сумма',\n        'recharge': 'пополнение',\n        'withdraw': 'вывод',\n        'time': 'время',\n        'date': 'дата',\n        'today': 'сегодня',\n        'yesterday': 'вчера',\n        'tomorrow': 'завтра',\n        'tap': 'нажать',\n        'swipe': 'свайп',\n        'long_press': 'долгое нажатие',\n        'double_tap': 'двойной тап',\n        'confirm': 'подтвердить'\n      },\n      'tg-TJ': {\n        'coins': 'Тангаҳои Бахт',\n        'shares': 'ҳисса',\n        'balance': 'баланс',\n        'currency': 'пул',\n        'amount': 'маблағ',\n        'recharge': 'пардохт',\n        'withdraw': 'кашондан',\n        'time': 'вақт',\n        'date': 'рӯз',\n        'today': 'имрӯз',\n        'yesterday': 'дирӯз',\n        'tomorrow': 'фардо',\n        'tap': 'пахш',\n        'swipe': 'саворт',\n        'long_press': 'давидани дароз',\n        'double_tap': 'дубора пахш',\n        'confirm': 'тасдиқ'\n      }\n    };\n\n    return translations[language] || {};\n  }\n\n  /**\n   * 获取质量标准\n   */\n  getStandards(): QualityStandard[] {\n    return this.standards;\n  }\n\n  /**\n   * 获取特定标准的详细评估\n   */\n  getStandardDetails(standardName: string): QualityStandard | undefined {\n    return this.standards.find(standard => standard.name === standardName);\n  }\n}\n\nexport default TranslationQualityStandards;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-sync-tool.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":129,"column":10,"nodeType":"CallExpression","endLine":129,"endColumn":37},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":130,"column":7,"nodeType":"CallExpression","endLine":130,"endColumn":54},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3087,3161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3236,3239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3236,3239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3252,3316],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3406,3468],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3552,3619],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3718,3787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3892,3955],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4052,4119],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4220,4281],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":224,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":224,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5562,5564],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":225,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":225,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5608,5610],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":226,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":226,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5629,5641],"text":"(options.user != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5629,5641],"text":"(options.user ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5629,5641],"text":"(Boolean(options.user))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":226,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":226,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5642,5644],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":227,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":227,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5676,5695],"text":"(options.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5676,5695],"text":"(options.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5676,5695],"text":"(Boolean(options.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":227,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":227,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5696,5698],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":235,"endColumn":23,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[5865,5879],"text":"options.dryRun ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[5865,5879],"text":"options.dryRun === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":271,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":271,"endColumn":23,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[6857,6871],"text":"options.dryRun ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[6857,6871],"text":"options.dryRun === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"complexity","severity":2,"message":"Async method 'deployToProduction' has a complexity of 18. Maximum allowed is 10.","line":291,"column":27,"nodeType":"FunctionExpression","messageId":"complex","endLine":369,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":302,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":302,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7665,7684],"text":"(options.environment != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7665,7684],"text":"(options.environment ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7665,7684],"text":"(Boolean(options.environment))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":302,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":302,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7685,7687],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":314,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":314,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":314,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":322,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":322,"endColumn":37,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[8241,8267],"text":"(options.backupBeforeDeploy ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[8241,8267],"text":"(options.backupBeforeDeploy === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":327,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":327,"endColumn":39,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[8426,8454],"text":"(options.validateBeforeDeploy ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[8426,8454],"text":"(options.validateBeforeDeploy === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":340,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":340,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8989,9015],"text":"(Boolean(verificationResult.success))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":341,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":341,"endColumn":37,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[9031,9055],"text":"(options.rollbackIfFailed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[9031,9055],"text":"(options.rollbackIfFailed === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":342,"column":56,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":342,"endColumn":65},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":358,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":358,"endColumn":36,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[9618,9642],"text":"(options.rollbackIfFailed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[9618,9642],"text":"(options.rollbackIfFailed === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":358,"column":81,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":358,"endColumn":89,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9687,9695],"text":"(backupId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9687,9695],"text":"(backupId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9687,9695],"text":"(Boolean(backupId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":362,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":362,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9823,9872],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":383,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":383,"endColumn":33,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[10265,10288],"text":"(options.confirmRollback ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[10264,10288],"text":"options.confirmRollback === false"},"desc":"Change condition to check if false (`value === false`)"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":468,"column":7,"nodeType":"CallExpression","endLine":468,"endColumn":51},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":476,"column":9,"nodeType":"CallExpression","endLine":476,"endColumn":68},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":479,"column":13,"nodeType":"CallExpression","endLine":479,"endColumn":38},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":494,"column":7,"nodeType":"CallExpression","endLine":497,"endColumn":8},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":503,"column":11,"nodeType":"CallExpression","endLine":503,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":514,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":514,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13885,13887],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":531,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":531,"endColumn":35,"fix":{"range":[14278,14290],"text":"{return true;}"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":538,"column":18,"nodeType":"MemberExpression","endLine":538,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":538,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":538,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14518,14521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14518,14521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":543,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":543,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14606,14617],"text":"(b.startTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14606,14617],"text":"(b.startTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14606,14617],"text":"(Boolean(b.startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":543,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":543,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14618,14620],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":543,"column":60,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":543,"endColumn":71,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14627,14638],"text":"(a.startTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14627,14638],"text":"(a.startTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14627,14638],"text":"(Boolean(a.startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":543,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":543,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14639,14641],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":552,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":552,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14818,14833],"text":"environmentName != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[14818,14833],"text":"environmentName ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14818,14833],"text":"Boolean(environmentName)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":594,"column":10,"nodeType":"CallExpression","endLine":594,"endColumn":51},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":602,"column":19,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":602,"endColumn":26,"fix":{"range":[16069,16224],"text":"for (const expected of expectedFiles) {\n      if (!existingFiles.find(f => f.relativePath === expected)) {\n        missingFiles.push(expected);\n      }\n    }"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":627,"column":9,"nodeType":"CallExpression","endLine":627,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readdirSync from package \"fs\" with non literal argument at index 0","line":628,"column":21,"nodeType":"CallExpression","endLine":628,"endColumn":49},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found statSync from package \"fs\" with non literal argument at index 0","line":632,"column":23,"nodeType":"CallExpression","endLine":632,"endColumn":44},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":657,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorOther","endLine":658,"endColumn":49,"suggestions":[{"messageId":"explicitBooleanReturnType","fix":{"range":[17532,17534],"text":"(op): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":658,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":658,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17545,17557],"text":"(op.startTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[17545,17557],"text":"(op.startTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17545,17557],"text":"(Boolean(op.startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-unused-vars","severity":2,"message":"'recentDeployments' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":661,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":661,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'recentDeployments' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":661,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":661,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":667,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":667,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17959,17971],"text":"(op.startTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[17959,17971],"text":"(op.startTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17959,17971],"text":"(Boolean(op.startTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":667,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":667,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17975,17985],"text":"(op.endTime != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[17975,17985],"text":"(op.endTime ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17975,17985],"text":"(Boolean(op.endTime))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":676,"column":22,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":676,"endColumn":29,"fix":{"range":[18202,18538],"text":"for (const op of recentOperations) {\n      op.metadata.environments.forEach(env => {\n        environmentCounts[env] = (environmentCounts[env] || 0) + 1;\n      });\n\n      if (op.startTime) {\n        const date = new Date(op.startTime).toISOString().split('T')[0];\n        dailyActivity[date] = (dailyActivity[date] || 0) + 1;\n      }\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":677,"column":32,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":677,"endColumn":39,"fix":{"range":[18241,18360],"text":"for (const env of op.metadata.environments) {\n        environmentCounts[env] = (environmentCounts[env] || 0) + 1;\n      }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":678,"column":9,"nodeType":"MemberExpression","endLine":678,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":678,"column":35,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":678,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18317,18339],"text":"(environmentCounts[env] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[18317,18339],"text":"(environmentCounts[env] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[18317,18339],"text":"(Boolean(environmentCounts[env]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":678,"column":35,"nodeType":"MemberExpression","endLine":678,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":678,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":678,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18340,18342],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":681,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":681,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[18372,18384],"text":"op.startTime != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[18372,18384],"text":"op.startTime ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[18372,18384],"text":"Boolean(op.startTime)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":683,"column":9,"nodeType":"MemberExpression","endLine":683,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":683,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":683,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[18492,18511],"text":"(Boolean(dailyActivity[date]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":683,"column":32,"nodeType":"MemberExpression","endLine":683,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":683,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":683,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18512,18514],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":705,"column":34,"nodeType":"CallExpression","messageId":"substr","endLine":705,"endColumn":73,"fix":{"range":[19319,19330],"text":"slice(2, 11"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":709,"column":36,"nodeType":"CallExpression","messageId":"substr","endLine":709,"endColumn":75,"fix":{"range":[19445,19456],"text":"slice(2, 11"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":713,"column":36,"nodeType":"CallExpression","messageId":"substr","endLine":713,"endColumn":75,"fix":{"range":[19567,19578],"text":"slice(2, 11"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":721,"column":5,"nodeType":"CallExpression","endLine":721,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":724,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":724,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19883,19886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19883,19886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":725,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":725,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[19933,19950],"text":"(Boolean(options.languages))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":725,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":725,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19951,19953],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":726,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":726,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[20015,20033],"text":"(Boolean(options.namespaces))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":726,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":726,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20034,20036],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":734,"column":13,"nodeType":"CallExpression","endLine":734,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found statSync from package \"fs\" with non literal argument at index 0","line":735,"column":25,"nodeType":"CallExpression","endLine":735,"endColumn":46},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":736,"column":27,"nodeType":"CallExpression","endLine":736,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":755,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":755,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20908,20911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20908,20911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":767,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":767,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21247,21250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21247,21250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":775,"column":20,"nodeType":"MemberExpression","endLine":775,"endColumn":47},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":800,"column":5,"nodeType":"CallExpression","endLine":800,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":809,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":809,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":809,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":809,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":809,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":809,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22412,22415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22412,22415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'skippedFiles' is never reassigned. Use 'const' instead.","line":815,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":815,"endColumn":21,"fix":{"range":[22568,22589],"text":"const skippedFiles = 0;"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":850,"column":9,"nodeType":"CallExpression","endLine":850,"endColumn":34},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":856,"column":5,"nodeType":"CallExpression","endLine":856,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":860,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":860,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23838,23841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23838,23841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":873,"column":9,"nodeType":"CallExpression","endLine":873,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'environmentName' is defined but never used. Allowed unused args must match /^_/u.","line":878,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":878,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'environmentName' is defined but never used. Allowed unused args must match /^_/u.","line":878,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":878,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'deploymentId' is defined but never used. Allowed unused args must match /^_/u.","line":878,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":878,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deploymentId' is defined but never used. Allowed unused args must match /^_/u.","line":878,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":878,"endColumn":73},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":885,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":885,"endColumn":33,"fix":{"range":[24644,24654],"text":"{return [];}"}},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":906,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":906,"endColumn":29},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":918,"column":26,"nodeType":"CallExpression","endLine":918,"endColumn":50},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readdirSync from package \"fs\" with non literal argument at index 0","line":923,"column":25,"nodeType":"CallExpression","endLine":923,"endColumn":71},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":926,"column":11,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":926,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[25935,25957],"text":"Boolean(file.endsWith('.json'))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":930,"column":9,"nodeType":"CallExpression","endLine":930,"endColumn":68}],"suppressedMessages":[],"errorCount":85,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":6,"fixableWarningCount":3,"source":"/**\n * 翻译同步和发布工具\n * Translation Sync and Publish Tool\n * \n * 功能：\n * - 翻译文件的同步和发布机制\n * - 支持不同环境的翻译部署\n * - 提供翻译更新的批量处理和回滚\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { EventEmitter } from 'events';\n\nexport interface EnvironmentConfig {\n  name: string;\n  type: 'development' | 'staging' | 'production';\n  baseUrl: string;\n  translationPath: string;\n  deploymentPath: string;\n  webhookUrl?: string;\n  credentials?: {\n    apiKey?: string;\n    username?: string;\n    password?: string;\n  };\n  features: {\n    hotReload: boolean;\n    autoBackup: boolean;\n    rollbackEnabled: boolean;\n    notificationEnabled: boolean;\n  };\n}\n\nexport interface SyncOperation {\n  id: string;\n  type: 'sync' | 'deploy' | 'rollback' | 'validate' | 'backup';\n  source: string;\n  target: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  progress: number;\n  startTime?: number;\n  endTime?: number;\n  error?: string;\n  result?: any;\n  metadata: {\n    files: SyncFile[];\n    environments: string[];\n    languages: string[];\n    namespaces: string[];\n    user: string;\n    description: string;\n  };\n}\n\nexport interface SyncFile {\n  path: string;\n  relativePath: string;\n  locale: string;\n  namespace: string;\n  size: number;\n  lastModified: number;\n  checksum: string;\n  action: 'added' | 'modified' | 'deleted' | 'unchanged';\n  version?: string;\n}\n\nexport interface DeploymentResult {\n  success: boolean;\n  deployedFiles: number;\n  skippedFiles: number;\n  errors: string[];\n  warnings: string[];\n  deploymentId: string;\n  timestamp: number;\n  environment: string;\n  duration: number;\n}\n\nexport interface RollbackResult {\n  success: boolean;\n  rolledBackFiles: number;\n  errors: string[];\n  previousDeploymentId?: string;\n  timestamp: number;\n  environment: string;\n}\n\nexport interface SyncConfig {\n  environments: EnvironmentConfig[];\n  defaultEnvironment: string;\n  sync: {\n    batchSize: number;\n    retryAttempts: number;\n    timeout: number;\n    parallel: boolean;\n    validateFiles: boolean;\n  };\n  deployment: {\n    backupBeforeDeploy: boolean;\n    validationRequired: boolean;\n    rollbackAvailable: boolean;\n    notificationEnabled: boolean;\n  };\n  cache: {\n    enabled: boolean;\n    ttl: number;\n    maxSize: number;\n  };\n}\n\nexport class TranslationSyncTool extends EventEmitter {\n  private configs: Map<string, EnvironmentConfig> = new Map();\n  private activeOperations: Map<string, SyncOperation> = new Map();\n  private deploymentHistory: DeploymentResult[] = [];\n  private basePath: string;\n  private tempDir: string;\n\n  constructor(private baseTranslationPath: string = './src/locales') {\n    super();\n    this.basePath = baseTranslationPath;\n    this.tempDir = path.join(baseTranslationPath, '.temp');\n    \n    this.initializeDirectories();\n    this.setupEventListeners();\n  }\n\n  private initializeDirectories(): void {\n    if (!fs.existsSync(this.tempDir)) {\n      fs.mkdirSync(this.tempDir, { recursive: true });\n    }\n  }\n\n  private setupEventListeners(): void {\n    this.on('operation:started', (operationId: string, operation: SyncOperation) => {\n      console.log(`Sync operation started: ${operationId}`, operation.metadata);\n    });\n\n    this.on('operation:completed', (operationId: string, result: any) => {\n      console.log(`Sync operation completed: ${operationId}`, result);\n    });\n\n    this.on('operation:failed', (operationId: string, error: string) => {\n      console.error(`Sync operation failed: ${operationId}`, error);\n    });\n\n    this.on('file:sync', (file: SyncFile, environment: string) => {\n      console.log(`File synced to ${environment}: ${file.relativePath}`);\n    });\n\n    this.on('deployment:started', (environment: string, deploymentId: string) => {\n      console.log(`Deployment started to ${environment}: ${deploymentId}`);\n    });\n\n    this.on('deployment:completed', (environment: string, result: DeploymentResult) => {\n      console.log(`Deployment completed to ${environment}:`, result);\n    });\n\n    this.on('rollback:started', (environment: string, deploymentId: string) => {\n      console.log(`Rollback started to ${environment}: ${deploymentId}`);\n    });\n\n    this.on('rollback:completed', (environment: string, result: RollbackResult) => {\n      console.log(`Rollback completed to ${environment}:`, result);\n    });\n  }\n\n  /**\n   * 添加环境配置\n   */\n  addEnvironment(config: EnvironmentConfig): void {\n    this.configs.set(config.name, config);\n    this.saveConfig();\n  }\n\n  /**\n   * 获取环境配置\n   */\n  getEnvironment(name: string): EnvironmentConfig | undefined {\n    return this.configs.get(name);\n  }\n\n  /**\n   * 列出所有环境\n   */\n  listEnvironments(): EnvironmentConfig[] {\n    return Array.from(this.configs.values());\n  }\n\n  /**\n   * 同步翻译文件到指定环境\n   */\n  async syncToEnvironment(\n    environmentName: string,\n    options: {\n      languages?: string[];\n      namespaces?: string[];\n      dryRun?: boolean;\n      force?: boolean;\n      user?: string;\n      description?: string;\n    } = {}\n  ): Promise<string> {\n    const environment = this.configs.get(environmentName);\n    if (!environment) {\n      throw new Error(`Environment ${environmentName} not found`);\n    }\n\n    const operationId = this.generateOperationId();\n    \n    // 获取要同步的文件\n    const files = await this.getFilesToSync(options);\n    \n    const operation: SyncOperation = {\n      id: operationId,\n      type: 'sync',\n      source: this.basePath,\n      target: environmentName,\n      status: 'pending',\n      progress: 0,\n      metadata: {\n        files,\n        environments: [environmentName],\n        languages: options.languages || [],\n        namespaces: options.namespaces || [],\n        user: options.user || 'system',\n        description: options.description || 'Manual sync'\n      }\n    };\n\n    this.activeOperations.set(operationId, operation);\n    this.emit('operation:started', operationId, operation);\n\n    // 执行同步\n    if (options.dryRun) {\n      const result = await this.performDryRunSync(operation);\n      operation.status = 'completed';\n      operation.result = result;\n    } else {\n      try {\n        const result = await this.performSync(operation, environment);\n        operation.status = 'completed';\n        operation.result = result;\n      } catch (error) {\n        operation.status = 'failed';\n        operation.error = error instanceof Error ? error.message : String(error);\n        this.emit('operation:failed', operationId, operation.error);\n        throw error;\n      }\n    }\n\n    this.emit('operation:completed', operationId, operation.result);\n    return operationId;\n  }\n\n  /**\n   * 批量同步到多个环境\n   */\n  async syncToMultipleEnvironments(\n    environmentNames: string[],\n    options: {\n      languages?: string[];\n      namespaces?: string[];\n      dryRun?: boolean;\n      user?: string;\n      description?: string;\n    } = {}\n  ): Promise<string[]> {\n    const operationIds: string[] = [];\n\n    if (options.dryRun) {\n      // 干运行模式：并行执行\n      const promises = environmentNames.map(env => \n        this.syncToEnvironment(env, { ...options, dryRun: true })\n      );\n      operationIds.push(...await Promise.all(promises));\n    } else {\n      // 生产模式：串行执行以避免冲突\n      for (const envName of environmentNames) {\n        const operationId = await this.syncToEnvironment(envName, options);\n        operationIds.push(operationId);\n      }\n    }\n\n    return operationIds;\n  }\n\n  /**\n   * 部署翻译到生产环境\n   */\n  async deployToProduction(\n    options: {\n      environment?: string;\n      validateBeforeDeploy?: boolean;\n      backupBeforeDeploy?: boolean;\n      rollbackIfFailed?: boolean;\n      user?: string;\n      description?: string;\n      tags?: string[];\n    } = {}\n  ): Promise<string> {\n    const environmentName = options.environment || 'production';\n    const environment = this.configs.get(environmentName);\n    \n    if (!environment) {\n      throw new Error(`Environment ${environmentName} not found`);\n    }\n\n    if (environment.type !== 'production') {\n      throw new Error(`Environment ${environmentName} is not a production environment`);\n    }\n\n    const deploymentId = this.generateDeploymentId();\n    const startTime = Date.now();\n\n    this.emit('deployment:started', environmentName, deploymentId);\n\n    let backupId: string | undefined;\n    \n    try {\n      // 部署前备份\n      if (options.backupBeforeDeploy || environment.features.autoBackup) {\n        backupId = await this.createBackup(environmentName, 'Pre-deployment backup');\n      }\n\n      // 部署前验证\n      if (options.validateBeforeDeploy || environment.features.notificationEnabled) {\n        const validationResult = await this.validateEnvironment(environmentName);\n        if (!validationResult.isValid) {\n          throw new Error(`Pre-deployment validation failed: ${validationResult.errors.join(', ')}`);\n        }\n      }\n\n      // 执行部署\n      const deploymentResult = await this.performDeployment(environment, deploymentId, options);\n\n      // 验证部署结果\n      const verificationResult = await this.verifyDeployment(environmentName, deploymentResult);\n      \n      if (!verificationResult.success) {\n        if (options.rollbackIfFailed || environment.features.rollbackEnabled) {\n          await this.rollbackToBackup(environmentName, backupId!);\n          throw new Error(`Deployment verification failed, rolled back: ${verificationResult.errors.join(', ')}`);\n        }\n      }\n\n      // 记录部署历史\n      this.deploymentHistory.push(deploymentResult);\n\n      this.emit('deployment:completed', environmentName, deploymentResult);\n      \n      return deploymentId;\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      \n      // 自动回滚\n      if ((options.rollbackIfFailed || environment.features.rollbackEnabled) && backupId) {\n        try {\n          await this.rollbackToBackup(environmentName, backupId);\n        } catch (rollbackError) {\n          console.error('Rollback failed:', rollbackError);\n        }\n      }\n\n      this.emit('deployment:failed', environmentName, deploymentId, errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * 回滚到之前的部署\n   */\n  async rollbackToDeployment(\n    environmentName: string,\n    targetDeploymentId: string,\n    options: {\n      reason?: string;\n      user?: string;\n      confirmRollback?: boolean;\n    } = {}\n  ): Promise<RollbackResult> {\n    if (!options.confirmRollback) {\n      throw new Error('Rollback requires explicit confirmation');\n    }\n\n    const environment = this.configs.get(environmentName);\n    if (!environment) {\n      throw new Error(`Environment ${environmentName} not found`);\n    }\n\n    if (!environment.features.rollbackEnabled) {\n      throw new Error(`Rollback is not enabled for environment ${environmentName}`);\n    }\n\n    const rollbackResult: RollbackResult = {\n      success: false,\n      rolledBackFiles: 0,\n      errors: [],\n      timestamp: Date.now(),\n      environment: environmentName\n    };\n\n    try {\n      this.emit('rollback:started', environmentName, targetDeploymentId);\n\n      // 找到目标部署\n      const targetDeployment = this.deploymentHistory.find(d => d.deploymentId === targetDeploymentId);\n      if (!targetDeployment) {\n        throw new Error(`Deployment ${targetDeploymentId} not found`);\n      }\n\n      // 执行回滚\n      const rollbackFiles = await this.getDeploymentFiles(environmentName, targetDeploymentId);\n      \n      let rolledBackFiles = 0;\n      const errors: string[] = [];\n\n      for (const file of rollbackFiles) {\n        try {\n          await this.rollbackFile(environment, file);\n          rolledBackFiles++;\n          this.emit('file:rollback', file, environmentName);\n        } catch (error) {\n          errors.push(`Failed to rollback ${file.path}: ${error}`);\n        }\n      }\n\n      rollbackResult.success = errors.length === 0;\n      rollbackResult.rolledBackFiles = rolledBackFiles;\n      rollbackResult.errors = errors;\n      rollbackResult.previousDeploymentId = targetDeploymentId;\n\n      this.emit('rollback:completed', environmentName, rollbackResult);\n\n      return rollbackResult;\n\n    } catch (error) {\n      rollbackResult.errors.push(error instanceof Error ? error.message : String(error));\n      throw error;\n    }\n  }\n\n  /**\n   * 创建环境备份\n   */\n  async createBackup(\n    environmentName: string,\n    description: string,\n    options: {\n      includeCache?: boolean;\n      compression?: boolean;\n    } = {}\n  ): Promise<string> {\n    const environment = this.configs.get(environmentName);\n    if (!environment) {\n      throw new Error(`Environment ${environmentName} not found`);\n    }\n\n    const backupId = this.generateBackupId();\n    const backupDir = path.join(this.tempDir, `backup_${backupId}`);\n\n    try {\n      // 获取当前环境的文件\n      const files = await this.getEnvironmentFiles(environmentName);\n      \n      // 创建备份目录\n      fs.mkdirSync(backupDir, { recursive: true });\n\n      // 复制文件\n      for (const file of files) {\n        const sourcePath = path.join(environment.deploymentPath, file.relativePath);\n        const backupPath = path.join(backupDir, file.relativePath);\n        \n        // 确保目录存在\n        fs.mkdirSync(path.dirname(backupPath), { recursive: true });\n        \n        // 复制文件\n        if (fs.existsSync(sourcePath)) {\n          fs.copyFileSync(sourcePath, backupPath);\n        }\n      }\n\n      // 保存备份元数据\n      const metadata = {\n        id: backupId,\n        environment: environmentName,\n        description,\n        timestamp: Date.now(),\n        files: files,\n        compression: options.compression\n      };\n\n      fs.writeFileSync(\n        path.join(backupDir, 'metadata.json'),\n        JSON.stringify(metadata, null, 2)\n      );\n\n      return backupId;\n\n    } catch (error) {\n      // 清理失败的备份\n      if (fs.existsSync(backupDir)) {\n        fs.rmSync(backupDir, { recursive: true });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 获取同步操作状态\n   */\n  getOperationStatus(operationId: string): SyncOperation | null {\n    return this.activeOperations.get(operationId) || null;\n  }\n\n  /**\n   * 列出所有操作\n   */\n  listOperations(filters?: {\n    status?: string;\n    type?: string;\n    environment?: string;\n    user?: string;\n  }): SyncOperation[] {\n    let operations = Array.from(this.activeOperations.values());\n\n    if (filters) {\n      operations = operations.filter(op => {\n        return Object.entries(filters).every(([key, value]) => {\n          if (!value) return true;\n          if (key === 'environment') {\n            return op.metadata.environments.includes(value);\n          }\n          if (key === 'user') {\n            return op.metadata.user === value;\n          }\n          return (op as any)[key] === value;\n        });\n      });\n    }\n\n    return operations.sort((a, b) => (b.startTime || 0) - (a.startTime || 0));\n  }\n\n  /**\n   * 获取部署历史\n   */\n  getDeploymentHistory(environmentName?: string, limit: number = 50): DeploymentResult[] {\n    let history = this.deploymentHistory;\n\n    if (environmentName) {\n      history = history.filter(d => d.environment === environmentName);\n    }\n\n    return history\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, limit);\n  }\n\n  /**\n   * 验证环境配置\n   */\n  async validateEnvironment(environmentName: string): Promise<{\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n    missingFiles: string[];\n  }> {\n    const environment = this.configs.get(environmentName);\n    if (!environment) {\n      return {\n        isValid: false,\n        errors: [`Environment ${environmentName} not found`],\n        warnings: [],\n        missingFiles: []\n      };\n    }\n\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const missingFiles: string[] = [];\n\n    // 检查环境配置\n    if (!environment.baseUrl) {\n      errors.push('baseUrl is required');\n    }\n\n    if (!environment.translationPath) {\n      errors.push('translationPath is required');\n    }\n\n    // 检查部署路径是否存在\n    if (!fs.existsSync(environment.deploymentPath)) {\n      warnings.push('deploymentPath does not exist, will be created during deployment');\n    }\n\n    // 检查源文件\n    const expectedFiles = await this.getExpectedFiles();\n    const existingFiles = await this.getEnvironmentFiles(environmentName);\n\n    expectedFiles.forEach(expected => {\n      if (!existingFiles.find(f => f.relativePath === expected)) {\n        missingFiles.push(expected);\n      }\n    });\n\n    if (missingFiles.length > 0) {\n      warnings.push(`${missingFiles.length} expected files are missing`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      missingFiles\n    };\n  }\n\n  /**\n   * 清理临时文件\n   */\n  cleanupTempFiles(olderThanDays: number = 7): number {\n    const cutoffTime = Date.now() - (olderThanDays * 24 * 60 * 60 * 1000);\n    let cleanedFiles = 0;\n\n    if (fs.existsSync(this.tempDir)) {\n      const files = fs.readdirSync(this.tempDir);\n      \n      for (const file of files) {\n        const filePath = path.join(this.tempDir, file);\n        const stats = fs.statSync(filePath);\n        \n        if (stats.mtime.getTime() < cutoffTime) {\n          fs.rmSync(filePath, { recursive: true });\n          cleanedFiles++;\n        }\n      }\n    }\n\n    return cleanedFiles;\n  }\n\n  /**\n   * 获取同步统计信息\n   */\n  getSyncStatistics(days: number = 30): {\n    totalOperations: number;\n    successfulOperations: number;\n    failedOperations: number;\n    averageDuration: number;\n    totalFilesSynced: number;\n    popularEnvironments: { name: string; deployments: number }[];\n    syncFrequency: { date: string; operations: number }[];\n  } {\n    const cutoffDate = Date.now() - (days * 24 * 60 * 60 * 1000);\n    const recentOperations = this.listOperations().filter(op => \n      op.startTime && op.startTime >= cutoffDate\n    );\n\n    const recentDeployments = this.deploymentHistory.filter(d => d.timestamp >= cutoffDate);\n\n    const successfulOperations = recentOperations.filter(op => op.status === 'completed').length;\n    const failedOperations = recentOperations.filter(op => op.status === 'failed').length;\n    \n    const totalDuration = recentOperations.reduce((sum, op) => {\n      if (op.startTime && op.endTime) {\n        return sum + (op.endTime - op.startTime);\n      }\n      return sum;\n    }, 0);\n\n    const environmentCounts: { [name: string]: number } = {};\n    const dailyActivity: { [date: string]: number } = {};\n\n    recentOperations.forEach(op => {\n      op.metadata.environments.forEach(env => {\n        environmentCounts[env] = (environmentCounts[env] || 0) + 1;\n      });\n\n      if (op.startTime) {\n        const date = new Date(op.startTime).toISOString().split('T')[0];\n        dailyActivity[date] = (dailyActivity[date] || 0) + 1;\n      }\n    });\n\n    return {\n      totalOperations: recentOperations.length,\n      successfulOperations,\n      failedOperations,\n      averageDuration: recentOperations.length > 0 ? totalDuration / recentOperations.length : 0,\n      totalFilesSynced: recentOperations.reduce((sum, op) => sum + op.metadata.files.length, 0),\n      popularEnvironments: Object.entries(environmentCounts)\n        .map(([name, deployments]) => ({ name, deployments }))\n        .sort((a, b) => b.deployments - a.deployments),\n      syncFrequency: Object.entries(dailyActivity)\n        .map(([date, operations]) => ({ date, operations }))\n        .sort((a, b) => a.date.localeCompare(b.date))\n    };\n  }\n\n  // 私有方法\n\n  private generateOperationId(): string {\n    return `sync_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateDeploymentId(): string {\n    return `deploy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateBackupId(): string {\n    return `backup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private saveConfig(): void {\n    const configPath = path.join(this.basePath, 'sync-config.json');\n    const config = {\n      environments: Array.from(this.configs.entries())\n    };\n    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n  }\n\n  private async getFilesToSync(options: any): Promise<SyncFile[]> {\n    const languages = options.languages || ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'];\n    const namespaces = options.namespaces || ['common', 'auth', 'lottery', 'wallet', 'referral', 'error'];\n    \n    const files: SyncFile[] = [];\n\n    for (const lang of languages) {\n      for (const ns of namespaces) {\n        const filePath = path.join(this.basePath, lang, `${ns}.json`);\n        \n        if (fs.existsSync(filePath)) {\n          const stats = fs.statSync(filePath);\n          const content = fs.readFileSync(filePath, 'utf-8');\n          \n          files.push({\n            path: filePath,\n            relativePath: path.join(lang, `${ns}.json`),\n            locale: lang,\n            namespace: ns,\n            size: stats.size,\n            lastModified: stats.mtime.getTime(),\n            checksum: this.calculateChecksum(content),\n            action: 'modified'\n          });\n        }\n      }\n    }\n\n    return files;\n  }\n\n  private async performDryRunSync(operation: SyncOperation): Promise<any> {\n    const result = {\n      dryRun: true,\n      filesToSync: operation.metadata.files.length,\n      estimatedDuration: operation.metadata.files.length * 100, // 简化估算\n      conflicts: [],\n      warnings: []\n    };\n\n    return result;\n  }\n\n  private async performSync(operation: SyncOperation, environment: EnvironmentConfig): Promise<any> {\n    operation.status = 'running';\n    operation.startTime = Date.now();\n\n    let syncedFiles = 0;\n    const errors: string[] = [];\n\n    for (let i = 0; i < operation.metadata.files.length; i++) {\n      const file = operation.metadata.files[i];\n      operation.progress = Math.round((i / operation.metadata.files.length) * 100);\n\n      try {\n        await this.syncFile(environment, file);\n        syncedFiles++;\n        this.emit('file:sync', file, environment.name);\n      } catch (error) {\n        errors.push(`Failed to sync ${file.path}: ${error}`);\n      }\n    }\n\n    operation.endTime = Date.now();\n\n    return {\n      syncedFiles,\n      errors,\n      duration: operation.endTime - (operation.startTime || 0)\n    };\n  }\n\n  private async syncFile(environment: EnvironmentConfig, file: SyncFile): Promise<void> {\n    const targetPath = path.join(environment.deploymentPath, file.relativePath);\n    \n    // 确保目录存在\n    fs.mkdirSync(path.dirname(targetPath), { recursive: true });\n    \n    // 复制文件\n    fs.copyFileSync(file.path, targetPath);\n  }\n\n  private async performDeployment(\n    environment: EnvironmentConfig,\n    deploymentId: string,\n    options: any\n  ): Promise<DeploymentResult> {\n    const startTime = Date.now();\n    const files = await this.getFilesToSync({});\n    \n    let deployedFiles = 0;\n    let skippedFiles = 0;\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    for (const file of files) {\n      try {\n        await this.deployFile(environment, file, deploymentId);\n        deployedFiles++;\n      } catch (error) {\n        errors.push(`Failed to deploy ${file.path}: ${error}`);\n      }\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    const result: DeploymentResult = {\n      success: errors.length === 0,\n      deployedFiles,\n      skippedFiles,\n      errors,\n      warnings,\n      deploymentId,\n      timestamp: endTime,\n      environment: environment.name,\n      duration\n    };\n\n    return result;\n  }\n\n  private async deployFile(environment: EnvironmentConfig, file: SyncFile, deploymentId: string): Promise<void> {\n    const targetPath = path.join(environment.deploymentPath, file.relativePath);\n    \n    // 部署前备份\n    if (fs.existsSync(targetPath)) {\n      const backupPath = `${targetPath}.backup.${deploymentId}`;\n      fs.copyFileSync(targetPath, backupPath);\n    }\n\n    // 部署文件\n    fs.mkdirSync(path.dirname(targetPath), { recursive: true });\n    fs.copyFileSync(file.path, targetPath);\n  }\n\n  private async verifyDeployment(environmentName: string, deployment: DeploymentResult): Promise<any> {\n    // 简化的部署验证\n    return {\n      success: deployment.success,\n      errors: deployment.errors,\n      warnings: deployment.warnings\n    };\n  }\n\n  private async rollbackFile(environment: EnvironmentConfig, file: SyncFile): Promise<void> {\n    const currentPath = path.join(environment.deploymentPath, file.relativePath);\n    const backupPath = `${currentPath}.backup`;\n    \n    if (fs.existsSync(backupPath)) {\n      fs.copyFileSync(backupPath, currentPath);\n    }\n  }\n\n  private async getDeploymentFiles(environmentName: string, deploymentId: string): Promise<SyncFile[]> {\n    // 简化的实现\n    return await this.getFilesToSync({});\n  }\n\n  private async getEnvironmentFiles(environmentName: string): Promise<SyncFile[]> {\n    const environment = this.configs.get(environmentName);\n    if (!environment) return [];\n\n    // 简化实现 - 实际中需要从环境部署路径读取文件\n    return await this.getFilesToSync({});\n  }\n\n  private async getExpectedFiles(): Promise<string[]> {\n    const languages = ['zh-CN', 'en-US', 'ru-RU', 'tg-TJ'];\n    const namespaces = ['common', 'auth', 'lottery', 'wallet', 'referral', 'error'];\n    \n    const files: string[] = [];\n    for (const lang of languages) {\n      for (const ns of namespaces) {\n        files.push(path.join(lang, `${ns}.json`));\n      }\n    }\n    \n    return files;\n  }\n\n  private calculateChecksum(content: string): string {\n    return require('crypto').createHash('md5').update(content).digest('hex');\n  }\n\n  private async validateBeforeDeploy(environmentName: string): Promise<boolean> {\n    const validation = await this.validateEnvironment(environmentName);\n    return validation.isValid;\n  }\n\n  private async rollbackToBackup(environmentName: string, backupId: string): Promise<void> {\n    const backupDir = path.join(this.tempDir, `backup_${backupId}`);\n    const environment = this.configs.get(environmentName);\n    \n    if (!environment || !fs.existsSync(backupDir)) {\n      throw new Error('Backup not found');\n    }\n\n    // 从备份恢复文件\n    const backupFiles = fs.readdirSync(backupDir, { recursive: true });\n    \n    for (const file of backupFiles) {\n      if (file.endsWith('.json')) {\n        const sourcePath = path.join(backupDir, file);\n        const targetPath = path.join(environment.deploymentPath, file);\n        \n        fs.mkdirSync(path.dirname(targetPath), { recursive: true });\n        fs.copyFileSync(sourcePath, targetPath);\n      }\n    }\n  }\n}\n\nexport const translationSyncTool = new TranslationSyncTool();","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-update-notifier.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1722,1725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1722,1725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2736,2739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2736,2739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3111,3114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3111,3114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4268,4337],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4425,4499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4599,4679],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4775,4837],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4968,5025],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5358,5361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5358,5361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5533,5536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5533,5536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":253,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":253,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5778,5780],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":254,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":254,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5828,5830],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6057,6106],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":272,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":272,"endColumn":29,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[6241,6258],"text":"(options.immediate ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[6240,6258],"text":"options.immediate === false"},"desc":"Change condition to check if false (`value === false`)"}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6302,6370],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":291,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6622,6625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6622,6625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":317,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":317,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8129,8132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8129,8132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":362,"column":22,"nodeType":"MemberExpression","endLine":362,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":363,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":363,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8956,8964],"text":"(Boolean(template))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9382,9385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9382,9385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":392,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":392,"endColumn":38,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[9509,9525],"text":"(options.critical ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[9509,9525],"text":"(options.critical === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":393,"column":36,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":393,"endColumn":53,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9577,9594],"text":"(options.threshold != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[9577,9594],"text":"(options.threshold ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9577,9594],"text":"(Boolean(options.threshold))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":393,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":393,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9595,9597],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'template' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":406,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":406,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'template' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":406,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":406,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":406,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10101,10118],"text":"(options.threshold != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[10101,10118],"text":"(options.threshold ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10101,10118],"text":"(Boolean(options.threshold))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":406,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":406,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10119,10121],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10437,10440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10437,10440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11391,11394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11391,11394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":488,"column":22,"nodeType":"MemberExpression","endLine":488,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":489,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":489,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":513,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":513,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12881,12883],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":530,"column":11,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":530,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13333,13347],"text":"((filters?.since) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13333,13347],"text":"((filters?.since) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13333,13347],"text":"(Boolean((filters?.since)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":530,"column":29,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":530,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13351,13370],"text":"((statuses[0]?.sentAt) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13351,13370],"text":"((statuses[0]?.sentAt) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13351,13370],"text":"(Boolean((statuses[0]?.sentAt)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":544,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":544,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13855,13869],"text":"((filters?.limit) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13855,13869],"text":"((filters?.limit) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13855,13869],"text":"(Boolean((filters?.limit)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":544,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":544,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13870,13872],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":571,"column":13,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":571,"endColumn":20,"fix":{"range":[14686,15403],"text":"for (const { event, statuses } of history) {\n      totalSent += statuses.length;\n      \n      statuses.forEach(status => {\n        if (status.status === 'delivered') {\n          totalDelivered++;\n          if (status.sentAt && status.deliveredAt) {\n            totalDeliveryTime += status.deliveredAt - status.sentAt;\n          }\n        } else if (status.status === 'failed') {\n          totalFailed++;\n        }\n\n        channelCounts[status.channel] = (channelCounts[status.channel] || 0) + 1;\n        \n        const hour = new Date(event.timestamp).getHours();\n        hourlyCounts[hour] = (hourlyCounts[hour] || 0) + 1;\n      });\n\n      eventTypeCounts[event.type] = (eventTypeCounts[event.type] || 0) + 1;\n    }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":574,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":574,"endColumn":23,"fix":{"range":[14778,15318],"text":"for (const status of statuses) {\n        if (status.status === 'delivered') {\n          totalDelivered++;\n          if (status.sentAt && status.deliveredAt) {\n            totalDeliveryTime += status.deliveredAt - status.sentAt;\n          }\n        } else if (status.status === 'failed') {\n          totalFailed++;\n        }\n\n        channelCounts[status.channel] = (channelCounts[status.channel] || 0) + 1;\n        \n        const hour = new Date(event.timestamp).getHours();\n        hourlyCounts[hour] = (hourlyCounts[hour] || 0) + 1;\n      }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":577,"column":15,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":577,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14894,14907],"text":"(status.sentAt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14894,14907],"text":"(status.sentAt ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14894,14907],"text":"(Boolean(status.sentAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":577,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":577,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14911,14929],"text":"(status.deliveredAt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14911,14929],"text":"(status.deliveredAt ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14911,14929],"text":"(Boolean(status.deliveredAt))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":584,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":584,"endColumn":71,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15140,15169],"text":"(channelCounts[status.channel] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15140,15169],"text":"(channelCounts[status.channel] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15140,15169],"text":"(Boolean(channelCounts[status.channel]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":584,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":584,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15170,15172],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":587,"column":9,"nodeType":"MemberExpression","endLine":587,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":587,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":587,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15279,15297],"text":"(hourlyCounts[hour] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15279,15297],"text":"(hourlyCounts[hour] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15279,15297],"text":"(Boolean(hourlyCounts[hour]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":587,"column":31,"nodeType":"MemberExpression","endLine":587,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":587,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":587,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15298,15300],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":590,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":590,"endColumn":65,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[15357,15384],"text":"(eventTypeCounts[event.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[15357,15384],"text":"(eventTypeCounts[event.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[15357,15384],"text":"(Boolean(eventTypeCounts[event.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":590,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":590,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15385,15387],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":614,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":614,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16232,16235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16232,16235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":633,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":633,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[16719,16727],"text":"(Boolean(testData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":633,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":633,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16728,16730],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":671,"column":35,"nodeType":"CallExpression","messageId":"substr","endLine":671,"endColumn":74,"fix":{"range":[17687,17698],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":676,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":676,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[17834,17842],"text":"configId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[17834,17842],"text":"configId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[17834,17842],"text":"Boolean(configId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":678,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":678,"endColumn":33,"fix":{"range":[17914,17927],"text":"{return false;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":716,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":716,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19013,19016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19013,19016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":716,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":716,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19034,19037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19034,19037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":717,"column":54,"nodeType":"MemberExpression","endLine":717,"endColumn":68},{"ruleId":"complexity","severity":2,"message":"Method 'isAllowedSendTime' has a complexity of 11. Maximum allowed is 10.","line":720,"column":28,"nodeType":"FunctionExpression","messageId":"complex","endLine":758,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":721,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":721,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[19186,19194],"text":"configId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[19186,19194],"text":"configId ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[19186,19194],"text":"Boolean(configId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":723,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":723,"endColumn":38,"fix":{"range":[19257,19284],"text":"config?.scheduling"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":723,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":723,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":776,"column":20,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":776,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[20829,20837],"text":"(configId != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[20829,20837],"text":"(configId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[20829,20837],"text":"(Boolean(configId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":778,"column":9,"nodeType":null,"messageId":"preferOptionalChain","endLine":778,"endColumn":35,"fix":{"range":[20907,20933],"text":"!config?.enabled"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":779,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":779,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20943,21006],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":785,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":785,"endColumn":54,"fix":{"range":[21142,21155],"text":"{return false;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":793,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":793,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21313,21383],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":810,"column":23,"nodeType":"MemberExpression","endLine":810,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":811,"column":22,"nodeType":"MemberExpression","endLine":811,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":838,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":838,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22843,22845],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":888,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":888,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24323,24326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24323,24326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":894,"column":26,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":894,"endColumn":33,"fix":{"range":[24465,24676],"text":"for (const [key, value] of Object.entries(data)) {\n      const regex = new RegExp(`{{${key}}}`, 'g');\n      subject = subject.replace(regex, String(value));\n      body = body.replace(regex, String(value));\n    }"}},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":895,"column":21,"nodeType":"NewExpression","endLine":895,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":905,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":905,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24877,24942],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":906,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":906,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24947,24990],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":907,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":907,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24995,25032],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":912,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":912,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25205,25278],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":913,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":913,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25283,25323],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":918,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":918,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25502,25580],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":919,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":919,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25585,25625],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":924,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":924,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25802,25865],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":925,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":925,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25870,25932],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":930,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":930,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26105,26181],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":931,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":931,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26186,26226],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":934,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":934,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":934,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":934,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":934,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":934,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":934,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":934,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":934,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":934,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26291,26294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26291,26294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":53,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":5,"fixableWarningCount":3,"source":"/**\n * 翻译更新通知系统\n * Translation Update Notification System\n * \n * 功能：\n * - 翻译更新的通知和提醒机制\n * - 支持多种通知方式（邮件、Slack、Telegram）\n * - 提供翻译更新的状态跟踪和进度监控\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface NotificationConfig {\n  id: string;\n  name: string;\n  type: 'email' | 'slack' | 'telegram' | 'webhook' | 'teams';\n  enabled: boolean;\n  channels: NotificationChannel[];\n  triggers: NotificationTrigger[];\n  filters: NotificationFilter[];\n  scheduling: SchedulingConfig;\n  templates: TemplateConfig;\n  metrics: NotificationMetrics;\n}\n\nexport interface NotificationChannel {\n  type: 'email' | 'slack' | 'telegram' | 'webhook' | 'teams';\n  config: {\n    // 通用配置\n    webhookUrl?: string;\n    apiKey?: string;\n    \n    // 邮件配置\n    smtp?: {\n      host: string;\n      port: number;\n      secure: boolean;\n      auth: {\n        user: string;\n        pass: string;\n      };\n    };\n    from?: string;\n    to?: string[];\n    \n    // Slack配置\n    slack?: {\n      token?: string;\n      channel?: string;\n      username?: string;\n      iconEmoji?: string;\n    };\n    \n    // Telegram配置\n    telegram?: {\n      botToken?: string;\n      chatId?: string;\n      parseMode?: 'HTML' | 'Markdown';\n    };\n    \n    // Teams配置\n    teams?: {\n      webhookUrl?: string;\n    };\n  };\n  priority: 'low' | 'normal' | 'high' | 'critical';\n  rateLimit: {\n    maxPerHour: number;\n    maxPerDay: number;\n    cooldownPeriod: number; // 秒\n  };\n}\n\nexport interface NotificationTrigger {\n  event: string;\n  conditions: TriggerCondition[];\n  delay?: number; // 延迟发送时间（秒）\n  batchNotifications?: boolean;\n}\n\nexport interface TriggerCondition {\n  field: string;\n  operator: 'equals' | 'not_equals' | 'contains' | 'greater_than' | 'less_than' | 'exists';\n  value: any;\n}\n\nexport interface NotificationFilter {\n  name: string;\n  condition: TriggerCondition[];\n  action: 'include' | 'exclude';\n}\n\nexport interface SchedulingConfig {\n  timezone: string;\n  workingHours: {\n    start: string; // HH:mm\n    end: string;   // HH:mm\n    days: number[]; // 0-6, 0 is Sunday\n  };\n  holidays: string[]; // ISO dates\n  quietHours?: {\n    start: string;\n    end: string;\n  };\n  batchWindows: {\n    frequency: 'immediate' | 'hourly' | 'daily' | 'weekly';\n    time?: string; // HH:mm\n    dayOfWeek?: number; // for weekly\n  };\n}\n\nexport interface TemplateConfig {\n  default: string;\n  translations: {\n    [key: string]: {\n      subject: string;\n      body: string;\n      variables: TemplateVariable[];\n    };\n  };\n  formatting: {\n    useMarkdown: boolean;\n    includeEmojis: boolean;\n    maxLength: number;\n    truncateText: boolean;\n  };\n}\n\nexport interface TemplateVariable {\n  name: string;\n  type: 'string' | 'number' | 'date' | 'boolean' | 'object';\n  required: boolean;\n  defaultValue?: any;\n  description: string;\n}\n\nexport interface NotificationMetrics {\n  sent: number;\n  delivered: number;\n  failed: number;\n  clicked: number;\n  opened: number;\n  bounced: number;\n  lastSent?: number;\n  lastDelivery?: number;\n  averageDeliveryTime: number;\n}\n\nexport interface NotificationEvent {\n  id: string;\n  type: string;\n  source: string;\n  timestamp: number;\n  data: any;\n  priority: 'low' | 'normal' | 'high' | 'critical';\n  recipients: string[];\n  channels: string[];\n  metadata: {\n    workflowId?: string;\n    taskId?: string;\n    userId?: string;\n    environment?: string;\n    severity?: string;\n    tags?: string[];\n  };\n}\n\nexport interface NotificationStatus {\n  id: string;\n  eventId: string;\n  channel: string;\n  status: 'pending' | 'sent' | 'delivered' | 'failed' | 'bounced';\n  sentAt?: number;\n  deliveredAt?: number;\n  error?: string;\n  retryCount: number;\n  lastRetryAt?: number;\n}\n\nexport class TranslationUpdateNotifier extends EventEmitter {\n  private configs: Map<string, NotificationConfig> = new Map();\n  private activeNotifications: Map<string, NotificationStatus[]> = new Map();\n  private notificationQueue: NotificationEvent[] = [];\n  private rateLimits: Map<string, { count: number; resetTime: number }> = new Map();\n  private workingHoursCache: Map<string, boolean> = new Map();\n\n  constructor() {\n    super();\n    this.setupEventListeners();\n    this.startNotificationProcessor();\n  }\n\n  private setupEventListeners(): void {\n    this.on('notification:sent', (status: NotificationStatus) => {\n      console.log(`Notification sent via ${status.channel}: ${status.id}`);\n    });\n\n    this.on('notification:delivered', (status: NotificationStatus) => {\n      console.log(`Notification delivered via ${status.channel}: ${status.id}`);\n    });\n\n    this.on('notification:failed', (status: NotificationStatus, error: string) => {\n      console.error(`Notification failed via ${status.channel}: ${status.id}`, error);\n    });\n\n    this.on('notification:rate_limited', (channel: string, reason: string) => {\n      console.warn(`Rate limit exceeded for ${channel}: ${reason}`);\n    });\n  }\n\n  /**\n   * 添加通知配置\n   */\n  addConfig(config: NotificationConfig): void {\n    this.configs.set(config.id, config);\n    console.log(`Added notification config: ${config.name}`);\n  }\n\n  /**\n   * 获取通知配置\n   */\n  getConfig(id: string): NotificationConfig | undefined {\n    return this.configs.get(id);\n  }\n\n  /**\n   * 列出所有通知配置\n   */\n  listConfigs(): NotificationConfig[] {\n    return Array.from(this.configs.values());\n  }\n\n  /**\n   * 发送翻译更新通知\n   */\n  async sendTranslationUpdate(\n    eventType: string,\n    data: any,\n    options: {\n      configId?: string;\n      recipients?: string[];\n      priority?: 'low' | 'normal' | 'high' | 'critical';\n      immediate?: boolean;\n      metadata?: any;\n    } = {}\n  ): Promise<string> {\n    const event: NotificationEvent = {\n      id: this.generateEventId(),\n      type: eventType,\n      source: 'translation_system',\n      timestamp: Date.now(),\n      data,\n      priority: options.priority || 'normal',\n      recipients: options.recipients || [],\n      channels: [],\n      metadata: {\n        ...options.metadata,\n        timestamp: Date.now()\n      }\n    };\n\n    // 过滤事件\n    const filtered = await this.filterEvent(event, options.configId);\n    if (!filtered) {\n      console.log(`Event filtered out: ${event.type}`);\n      return event.id;\n    }\n\n    // 检查发送时间限制\n    if (!this.isAllowedSendTime(options.configId)) {\n      // 如果不允许立即发送，加入队列\n      if (!options.immediate) {\n        this.queueEvent(event);\n        console.log(`Event queued due to time restrictions: ${event.type}`);\n        return event.id;\n      }\n    }\n\n    // 发送通知\n    await this.processEvent(event, options.configId);\n    \n    return event.id;\n  }\n\n  /**\n   * 发送工作流状态通知\n   */\n  async notifyWorkflowStatus(\n    workflowId: string,\n    status: string,\n    details: any,\n    options: {\n      priority?: 'low' | 'normal' | 'high' | 'critical';\n      channels?: string[];\n    } = {}\n  ): Promise<string> {\n    const templates = {\n      'workflow:started': {\n        subject: '翻译工作流已启动',\n        body: `翻译工作流 \"${details.title}\" 已启动\\n\\n任务类型: {{taskType}}\\n优先级: {{priority}}\\n创建者: {{createdBy}}\\n\\n开始时间: {{startTime}}`\n      },\n      'workflow:completed': {\n        subject: '翻译工作流已完成',\n        body: `翻译工作流 \"${details.title}\" 已成功完成\\n\\n任务类型: {{taskType}}\\n完成时间: {{completionTime}}\\n处理的文件数: {{filesCount}}\\n`\n      },\n      'workflow:failed': {\n        subject: '翻译工作流执行失败',\n        body: `翻译工作流 \"${details.title}\" 执行失败\\n\\n错误原因: {{error}}\\n失败时间: {{failureTime}}\\n已处理: {{processedFiles}} 文件\\n`\n      },\n      'step:completed': {\n        subject: '工作流步骤已完成',\n        body: `步骤 \"${details.stepName}\" 已完成\\n\\n工作流: {{workflowTitle}}\\n步骤类型: {{stepType}}\\n执行者: {{assignee}}\\n完成时间: {{completionTime}}\\n`\n      }\n    };\n\n    const template = templates[status as keyof typeof templates];\n    if (!template) {\n      throw new Error(`Unknown workflow status: ${status}`);\n    }\n\n    return this.sendTranslationUpdate(status, {\n      ...details,\n      workflowId,\n      status\n    }, {\n      priority: options.priority,\n      metadata: {\n        workflowId,\n        type: 'workflow',\n        ...options\n      }\n    });\n  }\n\n  /**\n   * 发送部署状态通知\n   */\n  async notifyDeploymentStatus(\n    environment: string,\n    deploymentId: string,\n    status: 'started' | 'completed' | 'failed',\n    result: any,\n    options: {\n      priority?: 'low' | 'normal' | 'high' | 'critical';\n    } = {}\n  ): Promise<string> {\n    const templates = {\n      'deployment:started': {\n        subject: '翻译部署已开始',\n        body: `开始部署翻译到 ${environment} 环境\\n\\n部署ID: {{deploymentId}}\\n环境: {{environment}}\\n开始时间: {{startTime}}\\n预计时长: {{estimatedDuration}}`\n      },\n      'deployment:completed': {\n        subject: '翻译部署已完成',\n        body: `翻译部署到 ${environment} 环境已完成\\n\\n部署ID: {{deploymentId}}\\n环境: {{environment}}\\n部署时间: {{completionTime}}\\n部署文件数: {{filesCount}}\\n跳过文件数: {{skippedFiles}}\\n`\n      },\n      'deployment:failed': {\n        subject: '翻译部署失败',\n        body: `翻译部署到 ${environment} 环境失败\\n\\n部署ID: {{deploymentId}}\\n环境: {{environment}}\\n失败时间: {{failureTime}}\\n错误: {{errors}}\\n`\n      }\n    };\n\n    const template = templates[status];\n    if (!template) {\n      throw new Error(`Unknown deployment status: ${status}`);\n    }\n\n    return this.sendTranslationUpdate(status, {\n      ...result,\n      environment,\n      deploymentId\n    }, {\n      priority: options.priority,\n      metadata: {\n        deploymentId,\n        environment,\n        type: 'deployment'\n      }\n    });\n  }\n\n  /**\n   * 发送质量检查通知\n   */\n  async notifyQualityCheck(\n    checkType: string,\n    result: any,\n    options: {\n      threshold?: number;\n      critical?: boolean;\n    } = {}\n  ): Promise<string> {\n    const severity = options.critical ? 'critical' : \n                   result.score < (options.threshold || 80) ? 'high' : 'normal';\n\n    const templates = {\n      'quality:check_completed': {\n        subject: '翻译质量检查完成',\n        body: `翻译质量检查已完成\\n\\n检查类型: {{checkType}}\\n质量分数: {{score}}分\\n检查时间: {{checkTime}}\\n问题数量: {{issueCount}}\\n状态: {{status}}`\n      },\n      'quality:threshold_exceeded': {\n        subject: '翻译质量阈值超标',\n        body: `翻译质量检查发现问题\\n\\n检查类型: {{checkType}}\\n质量分数: {{score}}分 (阈值: {{threshold}}分)\\n问题详情: {{issues}}\\n建议: {{recommendations}}\\n`\n      }\n    };\n\n    const template = result.score < (options.threshold || 80) ? \n                    templates['quality:threshold_exceeded'] : \n                    templates['quality:check_completed'];\n\n    return this.sendTranslationUpdate('quality:check_result', {\n      ...result,\n      checkType,\n      severity,\n      threshold: options.threshold\n    }, {\n      priority: severity as any,\n      metadata: {\n        type: 'quality',\n        checkType,\n        critical: options.critical\n      }\n    });\n  }\n\n  /**\n   * 发送审批请求通知\n   */\n  async notifyApprovalRequest(\n    taskId: string,\n    taskTitle: string,\n    requester: string,\n    approvers: string[],\n    options: {\n      dueDate?: number;\n      priority?: 'low' | 'normal' | 'high' | 'critical';\n      description?: string;\n    } = {}\n  ): Promise<string> {\n    return this.sendTranslationUpdate('approval:requested', {\n      taskId,\n      taskTitle,\n      requester,\n      approvers,\n      dueDate: options.dueDate,\n      description: options.description\n    }, {\n      priority: options.priority,\n      recipients: approvers,\n      metadata: {\n        type: 'approval',\n        taskId,\n        requester\n      }\n    });\n  }\n\n  /**\n   * 发送翻译更新提醒\n   */\n  async sendTranslationReminder(\n    type: 'overdue_task' | 'pending_review' | 'quality_issue' | 'deployment_required',\n    data: any,\n    options: {\n      recipients: string[];\n      dueDate?: number;\n      escalateAfter?: number;\n    } = {}\n  ): Promise<string> {\n    const templates = {\n      'overdue_task': {\n        subject: '翻译任务逾期提醒',\n        body: `翻译任务已逾期\\n\\n任务: {{taskTitle}}\\n截止日期: {{dueDate}}\\n逾期天数: {{overdueDays}}\\n负责人: {{assignee}}\\n`\n      },\n      'pending_review': {\n        subject: '翻译审核待处理',\n        body: `有翻译任务待审核\\n\\n任务: {{taskTitle}}\\n待审核时间: {{pendingTime}}\\n审核者: {{reviewer}}\\n优先级: {{priority}}\\n`\n      },\n      'quality_issue': {\n        subject: '翻译质量问题提醒',\n        body: `发现翻译质量问题\\n\\n检查项目: {{checkType}}\\n问题描述: {{issue}}\\n影响范围: {{impact}}\\n建议处理时间: {{recommendedTime}}\\n`\n      },\n      'deployment_required': {\n        subject: '翻译更新待部署',\n        body: `有翻译更新待部署\\n\\n更新内容: {{updateDescription}}\\n环境影响: {{environmentImpact}}\\n建议部署时间: {{recommendedDeploymentTime}}\\n`\n      }\n    };\n\n    const template = templates[type];\n    if (!template) {\n      throw new Error(`Unknown reminder type: ${type}`);\n    }\n\n    return this.sendTranslationUpdate(`reminder:${type}`, {\n      ...data,\n      type,\n      dueDate: options.dueDate,\n      escalateAfter: options.escalateAfter\n    }, {\n      recipients: options.recipients,\n      immediate: true,\n      priority: 'high',\n      metadata: {\n        type: 'reminder',\n        reminderType: type\n      }\n    });\n  }\n\n  /**\n   * 获取通知状态\n   */\n  getNotificationStatus(eventId: string): NotificationStatus[] {\n    return this.activeNotifications.get(eventId) || [];\n  }\n\n  /**\n   * 获取通知历史\n   */\n  getNotificationHistory(filters?: {\n    type?: string;\n    status?: string;\n    channel?: string;\n    since?: number;\n    limit?: number;\n  }): Array<{ event: NotificationEvent; statuses: NotificationStatus[] }> {\n    // 简化的历史查询实现\n    const history: Array<{ event: NotificationEvent; statuses: NotificationStatus[] }> = [];\n    \n    for (const [eventId, statuses] of this.activeNotifications.entries()) {\n      if (filters?.since && statuses[0]?.sentAt && statuses[0].sentAt < filters.since) {\n        continue;\n      }\n      \n      // 简化的过滤逻辑\n      const event = { id: eventId, type: 'unknown', source: '', timestamp: Date.now(), data: {}, priority: 'normal' as const, recipients: [], channels: [], metadata: {} };\n      \n      if (!filters || this.matchesFilter(event, filters)) {\n        history.push({ event, statuses });\n      }\n    }\n\n    return history\n      .sort((a, b) => b.event.timestamp - a.event.timestamp)\n      .slice(0, filters?.limit || 50);\n  }\n\n  /**\n   * 获取通知统计信息\n   */\n  getNotificationStatistics(days: number = 30): {\n    totalSent: number;\n    deliveryRate: number;\n    failureRate: number;\n    popularChannels: { channel: string; count: number }[];\n    eventTypeDistribution: { type: string; count: number }[];\n    averageDeliveryTime: number;\n    peakHours: { hour: number; count: number }[];\n  } {\n    const cutoffDate = Date.now() - (days * 24 * 60 * 60 * 1000);\n    const history = this.getNotificationHistory({ since: cutoffDate, limit: 1000 });\n\n    let totalSent = 0;\n    let totalDelivered = 0;\n    let totalFailed = 0;\n    let totalDeliveryTime = 0;\n\n    const channelCounts: { [channel: string]: number } = {};\n    const eventTypeCounts: { [type: string]: number } = {};\n    const hourlyCounts: { [hour: number]: number } = {};\n\n    history.forEach(({ event, statuses }) => {\n      totalSent += statuses.length;\n      \n      statuses.forEach(status => {\n        if (status.status === 'delivered') {\n          totalDelivered++;\n          if (status.sentAt && status.deliveredAt) {\n            totalDeliveryTime += status.deliveredAt - status.sentAt;\n          }\n        } else if (status.status === 'failed') {\n          totalFailed++;\n        }\n\n        channelCounts[status.channel] = (channelCounts[status.channel] || 0) + 1;\n        \n        const hour = new Date(event.timestamp).getHours();\n        hourlyCounts[hour] = (hourlyCounts[hour] || 0) + 1;\n      });\n\n      eventTypeCounts[event.type] = (eventTypeCounts[event.type] || 0) + 1;\n    });\n\n    return {\n      totalSent,\n      deliveryRate: totalSent > 0 ? totalDelivered / totalSent : 0,\n      failureRate: totalSent > 0 ? totalFailed / totalSent : 0,\n      popularChannels: Object.entries(channelCounts)\n        .map(([channel, count]) => ({ channel, count }))\n        .sort((a, b) => b.count - a.count),\n      eventTypeDistribution: Object.entries(eventTypeCounts)\n        .map(([type, count]) => ({ type, count }))\n        .sort((a, b) => b.count - a.count),\n      averageDeliveryTime: totalDelivered > 0 ? totalDeliveryTime / totalDelivered : 0,\n      peakHours: Object.entries(hourlyCounts)\n        .map(([hour, count]) => ({ hour: parseInt(hour), count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5)\n    };\n  }\n\n  /**\n   * 测试通知配置\n   */\n  async testNotification(configId: string, testData?: any): Promise<{\n    success: boolean;\n    results: Array<{\n      channel: string;\n      status: 'success' | 'failed';\n      error?: string;\n      deliveryTime?: number;\n    }>;\n  }> {\n    const config = this.configs.get(configId);\n    if (!config) {\n      throw new Error(`Config ${configId} not found`);\n    }\n\n    const testEvent: NotificationEvent = {\n      id: this.generateEventId(),\n      type: 'test',\n      source: 'notification_system',\n      timestamp: Date.now(),\n      data: testData || { message: 'This is a test notification' },\n      priority: 'normal',\n      recipients: [],\n      channels: config.channels.map(c => c.type),\n      metadata: { test: true }\n    };\n\n    const results = [];\n    \n    for (const channel of config.channels) {\n      try {\n        const startTime = Date.now();\n        await this.sendToChannel(channel, testEvent);\n        const deliveryTime = Date.now() - startTime;\n        \n        results.push({\n          channel: channel.type,\n          status: 'success',\n          deliveryTime\n        });\n      } catch (error) {\n        results.push({\n          channel: channel.type,\n          status: 'failed',\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n\n    return {\n      success: results.every(r => r.status === 'success'),\n      results\n    };\n  }\n\n  // 私有方法\n\n  private generateEventId(): string {\n    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async filterEvent(event: NotificationEvent, configId?: string): Promise<boolean> {\n    // 如果指定了配置，使用该配置进行过滤\n    if (configId) {\n      const config = this.configs.get(configId);\n      if (!config) return false;\n\n      // 检查过滤器\n      for (const filter of config.filters) {\n        const matches = filter.condition.every(condition => \n          this.evaluateCondition(event, condition)\n        );\n        \n        if (filter.action === 'exclude' && matches) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private evaluateCondition(event: NotificationEvent, condition: TriggerCondition): boolean {\n    const fieldValue = this.getFieldValue(event, condition.field);\n    \n    switch (condition.operator) {\n      case 'equals':\n        return fieldValue === condition.value;\n      case 'not_equals':\n        return fieldValue !== condition.value;\n      case 'contains':\n        return String(fieldValue).includes(String(condition.value));\n      case 'greater_than':\n        return Number(fieldValue) > Number(condition.value);\n      case 'less_than':\n        return Number(fieldValue) < Number(condition.value);\n      case 'exists':\n        return fieldValue !== undefined && fieldValue !== null;\n      default:\n        return false;\n    }\n  }\n\n  private getFieldValue(obj: any, field: string): any {\n    return field.split('.').reduce((current, key) => current?.[key], obj);\n  }\n\n  private isAllowedSendTime(configId?: string): boolean {\n    if (configId) {\n      const config = this.configs.get(configId);\n      if (config && config.scheduling) {\n        const { workingHours, quietHours, holidays } = config.scheduling;\n        \n        const now = new Date();\n        const dayOfWeek = now.getDay();\n        const currentTime = now.toTimeString().slice(0, 5); // HH:mm\n        \n        // 检查是否为节假日\n        const dateString = now.toISOString().split('T')[0];\n        if (holidays.includes(dateString)) {\n          return false;\n        }\n        \n        // 检查工作时间\n        const inWorkingHours = workingHours.days.includes(dayOfWeek) &&\n                              currentTime >= workingHours.start &&\n                              currentTime <= workingHours.end;\n        \n        if (!inWorkingHours) {\n          return false;\n        }\n        \n        // 检查安静时间\n        if (quietHours) {\n          const inQuietHours = currentTime >= quietHours.start || currentTime <= quietHours.end;\n          if (inQuietHours) {\n            return false;\n          }\n        }\n        \n        return true;\n      }\n    }\n    \n    return true; // 如果没有配置限制，允许发送\n  }\n\n  private queueEvent(event: NotificationEvent): void {\n    this.notificationQueue.push(event);\n  }\n\n  private startNotificationProcessor(): void {\n    setInterval(async () => {\n      if (this.notificationQueue.length > 0) {\n        const event = this.notificationQueue.shift();\n        if (event && this.isAllowedSendTime()) {\n          await this.processEvent(event);\n        }\n      }\n    }, 60000); // 每分钟检查一次队列\n  }\n\n  private async processEvent(event: NotificationEvent, configId?: string): Promise<void> {\n    const config = configId ? this.configs.get(configId) : this.getDefaultConfig();\n    \n    if (!config || !config.enabled) {\n      console.log(`No active config found for event: ${event.type}`);\n      return;\n    }\n\n    // 检查触发条件\n    const shouldTrigger = config.triggers.some(trigger => {\n      if (trigger.event !== event.type) return false;\n      \n      return trigger.conditions.every(condition =>\n        this.evaluateCondition(event, condition)\n      );\n    });\n\n    if (!shouldTrigger) {\n      console.log(`Event does not match trigger conditions: ${event.type}`);\n      return;\n    }\n\n    // 创建通知状态记录\n    const statuses: NotificationStatus[] = config.channels.map(channel => ({\n      id: `${event.id}_${channel.type}`,\n      eventId: event.id,\n      channel: channel.type,\n      status: 'pending',\n      retryCount: 0\n    }));\n\n    this.activeNotifications.set(event.id, statuses);\n\n    // 发送通知到各个渠道\n    for (let i = 0; i < config.channels.length; i++) {\n      const channel = config.channels[i];\n      const status = statuses[i];\n      \n      if (await this.checkRateLimit(channel)) {\n        try {\n          await this.sendToChannel(channel, event);\n          status.status = 'sent';\n          status.sentAt = Date.now();\n          this.emit('notification:sent', status);\n        } catch (error) {\n          status.status = 'failed';\n          status.error = error instanceof Error ? error.message : String(error);\n          this.emit('notification:failed', status, status.error);\n        }\n      } else {\n        status.status = 'failed';\n        status.error = 'Rate limit exceeded';\n        this.emit('notification:rate_limited', channel.type, 'Rate limit exceeded');\n      }\n    }\n  }\n\n  private getDefaultConfig(): NotificationConfig | undefined {\n    return Array.from(this.configs.values()).find(config => config.enabled);\n  }\n\n  private async checkRateLimit(channel: NotificationChannel): Promise<boolean> {\n    const key = `${channel.type}_${new Date().getHours()}`;\n    const current = this.rateLimits.get(key) || { count: 0, resetTime: Date.now() + 3600000 };\n    \n    if (current.resetTime < Date.now()) {\n      current.count = 0;\n      current.resetTime = Date.now() + 3600000;\n    }\n    \n    if (current.count >= channel.rateLimit.maxPerHour) {\n      return false;\n    }\n    \n    current.count++;\n    this.rateLimits.set(key, current);\n    \n    return true;\n  }\n\n  private async sendToChannel(channel: NotificationChannel, event: NotificationEvent): Promise<void> {\n    const template = this.getTemplate(channel, event.type);\n    const message = this.renderTemplate(template, event.data);\n\n    switch (channel.type) {\n      case 'email':\n        await this.sendEmail(channel, event, message);\n        break;\n      case 'slack':\n        await this.sendSlack(channel, event, message);\n        break;\n      case 'telegram':\n        await this.sendTelegram(channel, event, message);\n        break;\n      case 'webhook':\n        await this.sendWebhook(channel, event, message);\n        break;\n      case 'teams':\n        await this.sendTeams(channel, event, message);\n        break;\n      default:\n        throw new Error(`Unsupported channel type: ${channel.type}`);\n    }\n  }\n\n  private getTemplate(channel: NotificationChannel, eventType: string): { subject: string; body: string } {\n    // 简化的模板获取逻辑\n    return {\n      subject: `翻译系统通知 - ${eventType}`,\n      body: JSON.stringify(eventType, null, 2)\n    };\n  }\n\n  private renderTemplate(template: { subject: string; body: string }, data: any): { subject: string; body: string } {\n    // 简化的模板渲染逻辑\n    let subject = template.subject;\n    let body = template.body;\n\n    // 替换变量\n    Object.entries(data).forEach(([key, value]) => {\n      const regex = new RegExp(`{{${key}}}`, 'g');\n      subject = subject.replace(regex, String(value));\n      body = body.replace(regex, String(value));\n    });\n\n    return { subject, body };\n  }\n\n  private async sendEmail(channel: NotificationChannel, event: NotificationEvent, message: { subject: string; body: string }): Promise<void> {\n    // 简化的邮件发送实现\n    console.log(`Sending email to ${channel.config.to?.join(', ')}`);\n    console.log(`Subject: ${message.subject}`);\n    console.log(`Body: ${message.body}`);\n  }\n\n  private async sendSlack(channel: NotificationChannel, event: NotificationEvent, message: { subject: string; body: string }): Promise<void> {\n    // 简化的Slack发送实现\n    console.log(`Sending Slack message to ${channel.config.slack?.channel}`);\n    console.log(`Message: ${message.body}`);\n  }\n\n  private async sendTelegram(channel: NotificationChannel, event: NotificationEvent, message: { subject: string; body: string }): Promise<void> {\n    // 简化的Telegram发送实现\n    console.log(`Sending Telegram message to ${channel.config.telegram?.chatId}`);\n    console.log(`Message: ${message.body}`);\n  }\n\n  private async sendWebhook(channel: NotificationChannel, event: NotificationEvent, message: { subject: string; body: string }): Promise<void> {\n    // 简化的Webhook发送实现\n    console.log(`Sending webhook to ${channel.config.webhookUrl}`);\n    console.log(`Payload: ${JSON.stringify({ event, message })}`);\n  }\n\n  private async sendTeams(channel: NotificationChannel, event: NotificationEvent, message: { subject: string; body: string }): Promise<void> {\n    // 简化的Teams发送实现\n    console.log(`Sending Teams message to ${channel.config.teams?.webhookUrl}`);\n    console.log(`Message: ${message.body}`);\n  }\n\n  private matchesFilter(event: NotificationEvent, filters: any): boolean {\n    // 简化的过滤器匹配逻辑\n    return true;\n  }\n}\n\nexport const translationUpdateNotifier = new TranslationUpdateNotifier();","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/translation-version-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"no-unused-vars","severity":2,"message":"'crypto' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'crypto' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"no-duplicate-imports","severity":2,"message":"'crypto' import is duplicated.","line":14,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":14,"endColumn":37},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":98,"column":75,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":98,"endColumn":82,"fix":{"range":[2137,2320],"text":"for (const dir of [this.versionsDir, this.branchesDir, this.conflictsDir, this.tagsDir]) {\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n    }"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":99,"column":12,"nodeType":"CallExpression","endLine":99,"endColumn":30},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found mkdirSync from package \"fs\" with non literal argument at index 0","line":100,"column":9,"nodeType":"CallExpression","endLine":100,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'description' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":111,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'description' is assigned a value but never used. Allowed unused args must match /^_/u.","line":111,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":16},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":114,"column":25,"nodeType":"CallExpression","endLine":114,"endColumn":59},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":156,"column":10,"nodeType":"CallExpression","endLine":156,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":160,"column":32,"nodeType":"CallExpression","endLine":160,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3902,3905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3902,3905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3976,3979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3976,3979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3984,3987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3984,3987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":186,"column":5,"nodeType":"CallExpression","endLine":186,"endColumn":50},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":199,"column":32,"nodeType":"CallExpression","endLine":199,"endColumn":69},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":200,"column":33,"nodeType":"CallExpression","endLine":200,"endColumn":71},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":241,"column":5,"nodeType":"CallExpression","endLine":241,"endColumn":72},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":243,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":243,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6124,6197],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":266,"column":5,"nodeType":"CallExpression","endLine":266,"endColumn":66},{"ruleId":"no-unused-vars","severity":2,"message":"'sourceHead' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":279,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":279,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sourceHead' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":279,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'targetHead' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":280,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'targetHead' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":280,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":21},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":315,"column":5,"nodeType":"CallExpression","endLine":315,"endColumn":60},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":381,"column":10,"nodeType":"CallExpression","endLine":381,"endColumn":37},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":386,"column":44,"nodeType":"CallExpression","endLine":386,"endColumn":82},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":437,"column":39,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":437,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11092,11120],"text":"(authorCounts[version.author] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11092,11120],"text":"(authorCounts[version.author] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11092,11120],"text":"(Boolean(authorCounts[version.author]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":437,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":437,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11121,11123],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":440,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":440,"endColumn":71,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11226,11255],"text":"(changeTypeCounts[change.type] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[11226,11255],"text":"(changeTypeCounts[change.type] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[11226,11255],"text":"(Boolean(changeTypeCounts[change.type]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11256,11258],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":444,"column":7,"nodeType":"MemberExpression","endLine":444,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":444,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":444,"endColumn":49,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[11387,11406],"text":"(Boolean(dailyActivity[date]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":444,"column":30,"nodeType":"MemberExpression","endLine":444,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":444,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":444,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11407,11409],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":466,"column":31,"nodeType":"CallExpression","messageId":"substr","endLine":466,"endColumn":70,"fix":{"range":[12193,12204],"text":"slice(2, 11"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":470,"column":38,"nodeType":"CallExpression","messageId":"substr","endLine":470,"endColumn":77,"fix":{"range":[12319,12330],"text":"slice(2, 11"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":474,"column":36,"nodeType":"CallExpression","messageId":"substr","endLine":474,"endColumn":75,"fix":{"range":[12441,12452],"text":"slice(2, 11"}},{"ruleId":"no-unused-vars","severity":2,"message":"'branchName' is defined but never used. Allowed unused args must match /^_/u.","line":493,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":493,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'branchName' is defined but never used. Allowed unused args must match /^_/u.","line":493,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":500,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":500,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13206,13214],"text":"(parts[2] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[13206,13214],"text":"(parts[2] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[13206,13214],"text":"(Boolean(parts[2]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":500,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":500,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13215,13217],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":511,"column":10,"nodeType":"CallExpression","endLine":511,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":515,"column":32,"nodeType":"CallExpression","endLine":515,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":517,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":517,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13631,13634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13631,13634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13705,13708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13705,13708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13713,13716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13713,13716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":535,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":535,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14216,14221],"text":"(p1[i] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14216,14221],"text":"(p1[i] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14216,14221],"text":"(Boolean(p1[i]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":535,"column":17,"nodeType":"MemberExpression","endLine":535,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":535,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":535,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14222,14224],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":536,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":536,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14244,14249],"text":"(p2[i] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[14244,14249],"text":"(p2[i] ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14244,14249],"text":"(Boolean(p2[i]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":536,"column":17,"nodeType":"MemberExpression","endLine":536,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":536,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":536,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14250,14252],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":537,"column":18,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":537,"endColumn":27,"fix":{"range":[14273,14282],"text":"{return 1;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":538,"column":18,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":538,"endColumn":28,"fix":{"range":[14300,14310],"text":"{return -1;}"}},{"ruleId":"complexity","severity":2,"message":"Async method 'calculateChanges' has a complexity of 14. Maximum allowed is 10.","line":544,"column":33,"nodeType":"FunctionExpression","messageId":"complex","endLine":606,"endColumn":4},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":550,"column":39,"nodeType":"CallExpression","endLine":550,"endColumn":73},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":553,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":553,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[14633,14643],"text":"parentHash != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[14633,14643],"text":"parentHash ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[14633,14643],"text":"Boolean(parentHash)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":609,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16541,16544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16541,16544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":632,"column":5,"nodeType":"CallExpression","endLine":632,"endColumn":68},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":638,"column":9,"nodeType":"CallExpression","endLine":638,"endColumn":35},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":639,"column":28,"nodeType":"CallExpression","endLine":639,"endColumn":65},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":643,"column":5,"nodeType":"CallExpression","endLine":643,"endColumn":68},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":649,"column":10,"nodeType":"CallExpression","endLine":649,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":653,"column":23,"nodeType":"CallExpression","endLine":653,"endColumn":60},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":659,"column":9,"nodeType":"CallExpression","endLine":659,"endColumn":35},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":660,"column":33,"nodeType":"CallExpression","endLine":660,"endColumn":70},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":668,"column":9,"nodeType":"CallExpression","endLine":668,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":671,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":671,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18633,18688],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":702,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":702,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19420,19423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19420,19423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":718,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":718,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19862,19865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19862,19865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":718,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":718,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19881,19884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19881,19884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":723,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":723,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[19991,19998],"text":"(Boolean(current))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":724,"column":19,"nodeType":"MemberExpression","endLine":724,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'sourceBranch' is defined but never used. Allowed unused args must match /^_/u.","line":734,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":734,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sourceBranch' is defined but never used. Allowed unused args must match /^_/u.","line":734,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":734,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'targetBranch' is defined but never used. Allowed unused args must match /^_/u.","line":735,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":735,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'targetBranch' is defined but never used. Allowed unused args must match /^_/u.","line":735,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":735,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":749,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":749,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20523,20596],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":755,"column":10,"nodeType":"CallExpression","endLine":755,"endColumn":35},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":759,"column":31,"nodeType":"CallExpression","endLine":759,"endColumn":67}],"suppressedMessages":[],"errorCount":69,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":5,"fixableWarningCount":1,"source":"/**\n * 翻译版本管理系统\n * Translation Version Management System\n * \n * 功能：\n * - 翻译文件的版本控制和历史管理\n * - 支持翻译变更的跟踪和回滚\n * - 提供翻译更新的冲突解决机制\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { createHash } from 'crypto';\n\nexport interface TranslationVersion {\n  id: string;\n  file: string;\n  locale: string;\n  namespace: string;\n  version: string;\n  timestamp: number;\n  author: string;\n  changes: TranslationChange[];\n  hash: string;\n  parentHash?: string;\n  metadata: VersionMetadata;\n}\n\nexport interface TranslationChange {\n  type: 'add' | 'modify' | 'delete' | 'rename';\n  key: string;\n  oldValue?: string;\n  newValue?: string;\n  description?: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface VersionMetadata {\n  size: number;\n  keysCount: number;\n  modifiedKeys: string[];\n  addedKeys: string[];\n  deletedKeys: string[];\n  completionRate: number;\n  qualityScore?: number;\n  reviewStatus: 'pending' | 'approved' | 'rejected' | 'merged';\n  testCoverage?: number;\n}\n\nexport interface ConflictResolution {\n  conflictId: string;\n  key: string;\n  currentValue: string;\n  incomingValue: string;\n  resolution: 'use_current' | 'use_incoming' | 'merge' | 'manual';\n  resolvedValue?: string;\n  resolvedBy: string;\n  timestamp: number;\n}\n\nexport interface Branch {\n  id: string;\n  name: string;\n  description: string;\n  source: string;\n  head: string;\n  createdAt: number;\n  updatedAt: number;\n  isDefault: boolean;\n}\n\nexport interface Tag {\n  name: string;\n  version: string;\n  message: string;\n  timestamp: number;\n  author: string;\n  files: string[];\n}\n\nexport class TranslationVersionManager {\n  private versionsDir: string;\n  private branchesDir: string;\n  private tagsDir: string;\n  private conflictsDir: string;\n\n  constructor(private basePath: string = './src/locales') {\n    this.versionsDir = path.join(basePath, '.versions');\n    this.branchesDir = path.join(basePath, '.branches');\n    this.conflictsDir = path.join(basePath, '.conflicts');\n    this.tagsDir = path.join(basePath, '.tags');\n    \n    this.initializeDirectories();\n  }\n\n  private initializeDirectories(): void {\n    [this.versionsDir, this.branchesDir, this.conflictsDir, this.tagsDir].forEach(dir => {\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n    });\n  }\n\n  /**\n   * 创建新版本\n   */\n  async createVersion(\n    filePath: string,\n    author: string,\n    description: string = '',\n    branchName: string = 'main'\n  ): Promise<TranslationVersion> {\n    const fileContent = fs.readFileSync(filePath, 'utf-8');\n    const translationData = JSON.parse(fileContent);\n    \n    const locale = path.basename(path.dirname(filePath));\n    const namespace = path.basename(filePath, '.json');\n    \n    const versionId = this.generateVersionId();\n    const hash = this.calculateHash(fileContent);\n    const parentHash = await this.getPreviousHash(locale, namespace, branchName);\n    \n    const changes = await this.calculateChanges(filePath, locale, namespace, parentHash);\n    \n    const version: TranslationVersion = {\n      id: versionId,\n      file: filePath,\n      locale,\n      namespace,\n      version: this.incrementVersion(locale, namespace, branchName),\n      timestamp: Date.now(),\n      author,\n      changes,\n      hash,\n      parentHash,\n      metadata: this.extractMetadata(translationData, changes)\n    };\n\n    await this.saveVersion(version, branchName);\n    \n    return version;\n  }\n\n  /**\n   * 获取版本历史\n   */\n  async getVersionHistory(\n    locale: string,\n    namespace: string,\n    branchName: string = 'main',\n    limit: number = 50\n  ): Promise<TranslationVersion[]> {\n    const historyFile = path.join(this.branchesDir, `${branchName}_history.json`);\n    \n    if (!fs.existsSync(historyFile)) {\n      return [];\n    }\n\n    const history = JSON.parse(fs.readFileSync(historyFile, 'utf-8'));\n    \n    return history\n      .filter((v: any) => v.locale === locale && v.namespace === namespace)\n      .sort((a: any, b: any) => b.timestamp - a.timestamp)\n      .slice(0, limit);\n  }\n\n  /**\n   * 回滚到指定版本\n   */\n  async rollbackToVersion(\n    versionId: string,\n    targetPath: string,\n    author: string\n  ): Promise<void> {\n    const version = await this.getVersion(versionId);\n    if (!version) {\n      throw new Error(`Version ${versionId} not found`);\n    }\n\n    // 备份当前文件\n    await this.backupCurrentFile(targetPath);\n    \n    // 恢复文件内容\n    const originalContent = await this.getFileContentFromHash(version.hash);\n    fs.writeFileSync(targetPath, originalContent);\n    \n    // 创建回滚版本记录\n    await this.createRollbackVersion(version, targetPath, author);\n  }\n\n  /**\n   * 检测冲突\n   */\n  async detectConflicts(\n    currentFile: string,\n    incomingFile: string\n  ): Promise<ConflictResolution[]> {\n    const current = JSON.parse(fs.readFileSync(currentFile, 'utf-8'));\n    const incoming = JSON.parse(fs.readFileSync(incomingFile, 'utf-8'));\n    \n    const conflicts: ConflictResolution[] = [];\n    \n    // 递归比较所有键\n    const allKeys = new Set([\n      ...this.getAllKeys(current),\n      ...this.getAllKeys(incoming)\n    ]);\n    \n    for (const key of allKeys) {\n      const currentValue = this.getValueByKey(current, key);\n      const incomingValue = this.getValueByKey(incoming, key);\n      \n      if (currentValue !== incomingValue && \n          currentValue !== undefined && \n          incomingValue !== undefined) {\n        \n        conflicts.push({\n          conflictId: this.generateConflictId(),\n          key,\n          currentValue: typeof currentValue === 'string' ? currentValue : JSON.stringify(currentValue),\n          incomingValue: typeof incomingValue === 'string' ? incomingValue : JSON.stringify(incomingValue),\n          resolution: 'manual',\n          resolvedBy: '',\n          timestamp: Date.now()\n        });\n      }\n    }\n    \n    return conflicts;\n  }\n\n  /**\n   * 解决冲突\n   */\n  async resolveConflict(\n    conflictId: string,\n    resolution: ConflictResolution\n  ): Promise<void> {\n    const conflictFile = path.join(this.conflictsDir, `${conflictId}.json`);\n    fs.writeFileSync(conflictFile, JSON.stringify(resolution, null, 2));\n    \n    console.log(`Conflict ${conflictId} resolved: ${resolution.resolution}`);\n  }\n\n  /**\n   * 创建分支\n   */\n  async createBranch(\n    name: string,\n    source: string = 'main',\n    description: string = ''\n  ): Promise<Branch> {\n    const branch: Branch = {\n      id: this.generateBranchId(),\n      name,\n      description,\n      source,\n      head: await this.getBranchHead(source),\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      isDefault: false\n    };\n\n    const branchFile = path.join(this.branchesDir, `${name}.json`);\n    fs.writeFileSync(branchFile, JSON.stringify(branch, null, 2));\n    \n    return branch;\n  }\n\n  /**\n   * 合并分支\n   */\n  async mergeBranch(\n    sourceBranch: string,\n    targetBranch: string,\n    author: string\n  ): Promise<{ success: boolean; conflicts?: ConflictResolution[] }> {\n    const sourceHead = await this.getBranchHead(sourceBranch);\n    const targetHead = await this.getBranchHead(targetBranch);\n    \n    // 检测合并冲突\n    const conflicts = await this.detectMergeConflicts(sourceBranch, targetBranch);\n    \n    if (conflicts.length > 0) {\n      return { success: false, conflicts };\n    }\n    \n    // 执行合并\n    await this.performMerge(sourceBranch, targetBranch, author);\n    \n    return { success: true };\n  }\n\n  /**\n   * 创建标签\n   */\n  async createTag(\n    name: string,\n    version: string,\n    message: string,\n    author: string,\n    files: string[] = []\n  ): Promise<Tag> {\n    const tag: Tag = {\n      name,\n      version,\n      message,\n      timestamp: Date.now(),\n      author,\n      files\n    };\n\n    const tagFile = path.join(this.tagsDir, `${name}.json`);\n    fs.writeFileSync(tagFile, JSON.stringify(tag, null, 2));\n    \n    return tag;\n  }\n\n  /**\n   * 获取差异报告\n   */\n  async getDiffReport(\n    fromVersion: string,\n    toVersion: string\n  ): Promise<{\n    added: string[];\n    modified: string[];\n    deleted: string[];\n    statistics: {\n      totalChanges: number;\n      filesAffected: number;\n      complexity: 'low' | 'medium' | 'high';\n    };\n  }> {\n    const from = await this.getVersion(fromVersion);\n    const to = await this.getVersion(toVersion);\n    \n    if (!from || !to) {\n      throw new Error('Invalid version(s) specified');\n    }\n    \n    const changes = to.changes.filter(change => \n      from.changes.some(c => c.key !== change.key)\n    );\n    \n    const added = changes.filter(c => c.type === 'add').map(c => c.key);\n    const modified = changes.filter(c => c.type === 'modify').map(c => c.key);\n    const deleted = changes.filter(c => c.type === 'delete').map(c => c.key);\n    \n    const statistics = {\n      totalChanges: changes.length,\n      filesAffected: new Set([from.file, to.file]).size,\n      complexity: changes.length > 20 ? 'high' : changes.length > 10 ? 'medium' : 'low'\n    };\n    \n    return { added, modified, deleted, statistics };\n  }\n\n  /**\n   * 验证版本完整性\n   */\n  async validateVersion(versionId: string): Promise<{\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  }> {\n    const version = await this.getVersion(versionId);\n    if (!version) {\n      return {\n        isValid: false,\n        errors: [`Version ${versionId} not found`],\n        warnings: []\n      };\n    }\n\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    \n    // 检查文件是否存在\n    if (!fs.existsSync(version.file)) {\n      errors.push(`Source file ${version.file} not found`);\n    }\n    \n    // 验证哈希值\n    const currentHash = this.calculateHash(fs.readFileSync(version.file, 'utf-8'));\n    if (currentHash !== version.hash) {\n      errors.push('File hash mismatch');\n    }\n    \n    // 检查版本号递增\n    const lastVersion = await this.getLastVersion(version.locale, version.namespace);\n    if (lastVersion && this.compareVersions(version.version, lastVersion.version) <= 0) {\n      warnings.push('Version number not incremented');\n    }\n    \n    // 检查变更记录\n    if (version.changes.length === 0) {\n      warnings.push('No changes recorded');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * 获取版本统计信息\n   */\n  async getVersionStatistics(\n    locale: string,\n    namespace: string,\n    days: number = 30\n  ): Promise<{\n    totalVersions: number;\n    averageChanges: number;\n    frequentAuthors: { author: string; count: number }[];\n    changeTypes: { type: string; count: number }[];\n    activity: { date: string; changes: number }[];\n  }> {\n    const history = await this.getVersionHistory(locale, namespace, 'main', 1000);\n    const cutoffDate = Date.now() - (days * 24 * 60 * 60 * 1000);\n    \n    const recentVersions = history.filter(v => v.timestamp >= cutoffDate);\n    \n    const authorCounts: { [author: string]: number } = {};\n    const changeTypeCounts: { [type: string]: number } = {};\n    const dailyActivity: { [date: string]: number } = {};\n    \n    let totalChanges = 0;\n    \n    for (const version of recentVersions) {\n      totalChanges += version.changes.length;\n      \n      authorCounts[version.author] = (authorCounts[version.author] || 0) + 1;\n      \n      for (const change of version.changes) {\n        changeTypeCounts[change.type] = (changeTypeCounts[change.type] || 0) + 1;\n      }\n      \n      const date = new Date(version.timestamp).toISOString().split('T')[0];\n      dailyActivity[date] = (dailyActivity[date] || 0) + version.changes.length;\n    }\n    \n    return {\n      totalVersions: recentVersions.length,\n      averageChanges: recentVersions.length > 0 ? totalChanges / recentVersions.length : 0,\n      frequentAuthors: Object.entries(authorCounts)\n        .map(([author, count]) => ({ author, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5),\n      changeTypes: Object.entries(changeTypeCounts)\n        .map(([type, count]) => ({ type, count }))\n        .sort((a, b) => b.count - a.count),\n      activity: Object.entries(dailyActivity)\n        .map(([date, changes]) => ({ date, changes }))\n        .sort((a, b) => a.date.localeCompare(b.date))\n    };\n  }\n\n  // 私有方法\n\n  private generateVersionId(): string {\n    return `v_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateConflictId(): string {\n    return `conflict_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateBranchId(): string {\n    return `branch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private calculateHash(content: string): string {\n    return createHash('sha256').update(content).digest('hex');\n  }\n\n  private async getPreviousHash(\n    locale: string,\n    namespace: string,\n    branchName: string\n  ): Promise<string | undefined> {\n    const history = await this.getVersionHistory(locale, namespace, branchName, 1);\n    return history.length > 0 ? history[0].hash : undefined;\n  }\n\n  private incrementVersion(\n    locale: string,\n    namespace: string,\n    branchName: string\n  ): string {\n    const lastVersion = this.getLastVersionSync(locale, namespace);\n    const currentVersion = lastVersion ? lastVersion.version : '0.0.0';\n    const parts = currentVersion.split('.').map(Number);\n    \n    // 递增补丁版本号\n    parts[2] = (parts[2] || 0) + 1;\n    \n    return parts.join('.');\n  }\n\n  private getLastVersionSync(\n    locale: string,\n    namespace: string\n  ): TranslationVersion | null {\n    const historyFile = path.join(this.branchesDir, 'main_history.json');\n    \n    if (!fs.existsSync(historyFile)) {\n      return null;\n    }\n\n    const history = JSON.parse(fs.readFileSync(historyFile, 'utf-8'));\n    const versions = history\n      .filter((v: any) => v.locale === locale && v.namespace === namespace)\n      .sort((a: any, b: any) => b.timestamp - a.timestamp);\n    \n    return versions.length > 0 ? versions[0] : null;\n  }\n\n  private async getLastVersion(\n    locale: string,\n    namespace: string\n  ): Promise<TranslationVersion | null> {\n    return this.getLastVersionSync(locale, namespace);\n  }\n\n  private compareVersions(v1: string, v2: string): number {\n    const p1 = v1.split('.').map(Number);\n    const p2 = v2.split('.').map(Number);\n    \n    for (let i = 0; i < Math.max(p1.length, p2.length); i++) {\n      const a = p1[i] || 0;\n      const b = p2[i] || 0;\n      if (a > b) return 1;\n      if (a < b) return -1;\n    }\n    \n    return 0;\n  }\n\n  private async calculateChanges(\n    filePath: string,\n    locale: string,\n    namespace: string,\n    parentHash?: string\n  ): Promise<TranslationChange[]> {\n    const currentContent = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    const changes: TranslationChange[] = [];\n    \n    if (parentHash) {\n      const parentContent = await this.getFileContentFromHash(parentHash);\n      const parentData = JSON.parse(parentContent);\n      \n      // 比较变更\n      const allKeys = new Set([\n        ...this.getAllKeys(currentContent),\n        ...this.getAllKeys(parentData)\n      ]);\n      \n      for (const key of allKeys) {\n        const currentValue = this.getValueByKey(currentContent, key);\n        const parentValue = this.getValueByKey(parentData, key);\n        \n        if (parentValue === undefined && currentValue !== undefined) {\n          changes.push({\n            type: 'add',\n            key,\n            newValue: typeof currentValue === 'string' ? currentValue : JSON.stringify(currentValue),\n            severity: 'medium'\n          });\n        } else if (parentValue !== undefined && currentValue === undefined) {\n          changes.push({\n            type: 'delete',\n            key,\n            oldValue: typeof parentValue === 'string' ? parentValue : JSON.stringify(parentValue),\n            severity: 'high'\n          });\n        } else if (JSON.stringify(parentValue) !== JSON.stringify(currentValue)) {\n          changes.push({\n            type: 'modify',\n            key,\n            oldValue: typeof parentValue === 'string' ? parentValue : JSON.stringify(parentValue),\n            newValue: typeof currentValue === 'string' ? currentValue : JSON.stringify(currentValue),\n            severity: 'medium'\n          });\n        }\n      }\n    } else {\n      // 首次创建版本，所有键都是新增\n      const keys = this.getAllKeys(currentContent);\n      for (const key of keys) {\n        const value = this.getValueByKey(currentContent, key);\n        changes.push({\n          type: 'add',\n          key,\n          newValue: typeof value === 'string' ? value : JSON.stringify(value),\n          severity: 'low'\n        });\n      }\n    }\n    \n    return changes;\n  }\n\n  private extractMetadata(\n    data: any,\n    changes: TranslationChange[]\n  ): VersionMetadata {\n    const allKeys = this.getAllKeys(data);\n    const modifiedKeys = changes.filter(c => c.type === 'modify').map(c => c.key);\n    const addedKeys = changes.filter(c => c.type === 'add').map(c => c.key);\n    const deletedKeys = changes.filter(c => c.type === 'delete').map(c => c.key);\n    \n    const completionRate = 100; // 简化实现\n    \n    return {\n      size: JSON.stringify(data).length,\n      keysCount: allKeys.length,\n      modifiedKeys,\n      addedKeys,\n      deletedKeys,\n      completionRate,\n      reviewStatus: 'pending'\n    };\n  }\n\n  private async saveVersion(version: TranslationVersion, branchName: string): Promise<void> {\n    const versionFile = path.join(this.versionsDir, `${version.id}.json`);\n    fs.writeFileSync(versionFile, JSON.stringify(version, null, 2));\n    \n    // 更新分支历史\n    const historyFile = path.join(this.branchesDir, `${branchName}_history.json`);\n    let history: TranslationVersion[] = [];\n    \n    if (fs.existsSync(historyFile)) {\n      history = JSON.parse(fs.readFileSync(historyFile, 'utf-8'));\n    }\n    \n    history.push(version);\n    fs.writeFileSync(historyFile, JSON.stringify(history, null, 2));\n  }\n\n  private async getVersion(versionId: string): Promise<TranslationVersion | null> {\n    const versionFile = path.join(this.versionsDir, `${versionId}.json`);\n    \n    if (!fs.existsSync(versionFile)) {\n      return null;\n    }\n    \n    return JSON.parse(fs.readFileSync(versionFile, 'utf-8'));\n  }\n\n  private async getFileContentFromHash(hash: string): Promise<string> {\n    const contentFile = path.join(this.versionsDir, `content_${hash}.json`);\n    \n    if (fs.existsSync(contentFile)) {\n      const stored = JSON.parse(fs.readFileSync(contentFile, 'utf-8'));\n      return stored.content;\n    }\n    \n    throw new Error(`Content for hash ${hash} not found`);\n  }\n\n  private async backupCurrentFile(filePath: string): Promise<void> {\n    if (fs.existsSync(filePath)) {\n      const backupPath = `${filePath}.backup.${Date.now()}`;\n      fs.copyFileSync(filePath, backupPath);\n      console.log(`Backed up current file to ${backupPath}`);\n    }\n  }\n\n  private async createRollbackVersion(\n    originalVersion: TranslationVersion,\n    targetPath: string,\n    author: string\n  ): Promise<void> {\n    const rollbackChanges: TranslationChange[] = [{\n      type: 'modify',\n      key: 'rollback',\n      description: `Rollback to version ${originalVersion.id}`,\n      severity: 'high'\n    }];\n    \n    const rollbackVersion: TranslationVersion = {\n      ...originalVersion,\n      id: this.generateVersionId(),\n      timestamp: Date.now(),\n      author,\n      changes: rollbackChanges,\n      metadata: {\n        ...originalVersion.metadata,\n        reviewStatus: 'approved'\n      }\n    };\n    \n    await this.saveVersion(rollbackVersion, 'main');\n  }\n\n  private getAllKeys(obj: any, prefix: string = ''): string[] {\n    const keys: string[] = [];\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        keys.push(...this.getAllKeys(value, fullKey));\n      } else {\n        keys.push(fullKey);\n      }\n    }\n    \n    return keys;\n  }\n\n  private getValueByKey(obj: any, key: string): any {\n    const parts = key.split('.');\n    let current = obj;\n    \n    for (const part of parts) {\n      if (current && typeof current === 'object' && part in current) {\n        current = current[part];\n      } else {\n        return undefined;\n      }\n    }\n    \n    return current;\n  }\n\n  private async detectMergeConflicts(\n    sourceBranch: string,\n    targetBranch: string\n  ): Promise<ConflictResolution[]> {\n    // 简化的冲突检测实现\n    // 实际实现中需要比较两个分支的所有文件\n    return [];\n  }\n\n  private async performMerge(\n    sourceBranch: string,\n    targetBranch: string,\n    author: string\n  ): Promise<void> {\n    // 简化的合并实现\n    // 实际实现中需要执行文件合并操作\n    console.log(`Merging ${sourceBranch} into ${targetBranch} by ${author}`);\n  }\n\n  private async getBranchHead(branchName: string): Promise<string> {\n    const branchFile = path.join(this.branchesDir, `${branchName}.json`);\n    \n    if (!fs.existsSync(branchFile)) {\n      return 'main'; // 默认分支\n    }\n    \n    const branch = JSON.parse(fs.readFileSync(branchFile, 'utf-8'));\n    return branch.head;\n  }\n}\n\nexport const translationVersionManager = new TranslationVersionManager();","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]},{"filePath":"/workspace/luckymart-tj/utils/ux-evaluator.ts","messages":[{"ruleId":"@typescript-eslint/prefer-const","message":"Definition for rule '@typescript-eslint/prefer-const' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"unicorn/prefer-destructuring","message":"Definition for rule 'unicorn/prefer-destructuring' was not found.","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[217,220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[217,220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1471,1474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1471,1474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":155,"column":15,"nodeType":"CallExpression","messageId":"substring","endLine":155,"endColumn":52,"fix":{"range":[3581,3590],"text":"slice"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":196,"column":17,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":196,"endColumn":24,"fix":{"range":[4597,4753],"text":"for (const entry of entries) {\n          this.trackEvent('fcp', {\n            duration: entry.startTime,\n            url: entry.name\n          });\n        }"}},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":219,"column":17,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":219,"endColumn":24,"fix":{"range":[5373,5562],"text":"for (const entry of entries) {\n          this.trackEvent('fid', {\n            delay: entry.processingStart - entry.startTime,\n            url: document.location.href\n          });\n        }"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5711,5714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5711,5714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6865,6868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6865,6868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":289,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":289,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7049,7060],"text":"Boolean(initialStep)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":292,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":292,"endColumn":35,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7144,7160],"text":"(Boolean(initialStep.name))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":292,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":292,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7161,7163],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7474,7477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7474,7477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":309,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":309,"endColumn":26,"fix":{"range":[7574,7581],"text":"{return;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":328,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":328,"endColumn":26,"fix":{"range":[8069,8076],"text":"{return;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8584,8587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8584,8587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10154,10157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10154,10157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":426,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10917,10920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10917,10920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'journeyAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":452,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":452,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'journeyAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":452,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":452,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":468,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":468,"endColumn":57,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12612,12649],"text":"(Boolean(feedbackAnalysis.ratings['easeOfUse']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":468,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":468,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12650,12652],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":469,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":469,"endColumn":63,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12678,12718],"text":"(Boolean(feedbackAnalysis.ratings['visualDesign']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":469,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":469,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12719,12721],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":470,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":470,"endColumn":67,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12749,12791],"text":"(Boolean(feedbackAnalysis.ratings['contentQuality']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":470,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":470,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12792,12794],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":471,"column":34,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":471,"endColumn":85,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[12831,12882],"text":"(Boolean(feedbackAnalysis.ratings['performanceSatisfaction']))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":86,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":88,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12883,12885],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":566,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":566,"endColumn":40,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[15460,15461],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":572,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15565,15568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15565,15568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":575,"column":17,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":575,"endColumn":24,"fix":{"range":[15657,15703],"text":"for (const callback of listeners) callback(data);"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":583,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":583,"endColumn":48,"fix":{"range":[15821,15828],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":597,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":597,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16122,16177],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":614,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":614,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16514,16563],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":621,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":621,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16688,16695],"text":"userId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[16689,16695],"text":"(userId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16688,16695],"text":"!Boolean(userId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":629,"column":12,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":629,"endColumn":61,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[16869,16918],"text":"(sessionStorage.getItem('ux_evaluator_session_id') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[16869,16918],"text":"(sessionStorage.getItem('ux_evaluator_session_id') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[16869,16918],"text":"(Boolean(sessionStorage.getItem('ux_evaluator_session_id')))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":629,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":629,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16919,16921],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":634,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":634,"endColumn":38,"fix":{"range":[17065,17081],"text":"{return 'mobile';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":635,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":635,"endColumn":39,"fix":{"range":[17104,17120],"text":"{return 'tablet';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":641,"column":39,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":641,"endColumn":55,"fix":{"range":[17262,17278],"text":"{return 'Chrome';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":642,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":642,"endColumn":57,"fix":{"range":[17318,17335],"text":"{return 'Firefox';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":643,"column":39,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":643,"endColumn":55,"fix":{"range":[17374,17390],"text":"{return 'Safari';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":644,"column":37,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":644,"endColumn":51,"fix":{"range":[17427,17441],"text":"{return 'Edge';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":650,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":650,"endColumn":57,"fix":{"range":[17592,17609],"text":"{return 'Windows';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":651,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":651,"endColumn":51,"fix":{"range":[17645,17660],"text":"{return 'macOS';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":652,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":652,"endColumn":53,"fix":{"range":[17698,17713],"text":"{return 'Linux';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":653,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":653,"endColumn":57,"fix":{"range":[17753,17770],"text":"{return 'Android';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":654,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":654,"endColumn":49,"fix":{"range":[17806,17819],"text":"{return 'iOS';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":659,"column":21,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":659,"endColumn":45,"fix":{"range":[17928,17952],"text":"{return `#${element.id}`;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":660,"column":28,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":660,"endColumn":73,"fix":{"range":[17980,18025],"text":"{return `.${element.className.split(' ')[0]}`;}"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":665,"column":12,"nodeType":"CallExpression","messageId":"substr","endLine":665,"endColumn":51,"fix":{"range":[18144,18155],"text":"slice(2, 11"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":722,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":722,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19326,19329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19326,19329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":723,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":723,"endColumn":30,"fix":{"range":[19335,19462],"text":"for (const feedback of this.feedbackData) {\n      categories[feedback.category] = (categories[feedback.category] || 0) + 1;\n    }"}},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":724,"column":40,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":724,"endColumn":69,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[19414,19443],"text":"(Boolean(categories[feedback.category]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":724,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":724,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19444,19446],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":730,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":730,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19553,19556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19553,19556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-array-for-each","severity":1,"message":"Use `for…of` instead of `.forEach(…)`.","line":731,"column":23,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":731,"endColumn":30,"fix":{"range":[19562,19738],"text":"for (const feedback of this.feedbackData) {\n      const category = this.getFeedbackCategory(feedback);\n      ratings[category] = (ratings[category] || 0) + feedback.rating;\n    }"}},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":733,"column":7,"nodeType":"MemberExpression","endLine":733,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":733,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":733,"endColumn":45,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[19688,19705],"text":"(Boolean(ratings[category]))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":733,"column":28,"nodeType":"MemberExpression","endLine":733,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":733,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":733,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19706,19708],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":740,"column":44,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":740,"endColumn":63,"fix":{"range":[19886,19905],"text":"{return 'easeOfUse';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":741,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":741,"endColumn":63,"fix":{"range":[19946,19968],"text":"{return 'visualDesign';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":742,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":742,"endColumn":66,"fix":{"range":[20010,20034],"text":"{return 'contentQuality';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":743,"column":46,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":743,"endColumn":79,"fix":{"range":[20080,20113],"text":"{return 'performanceSatisfaction';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":761,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":761,"endColumn":50,"fix":{"range":[20624,20633],"text":"{return 0;}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":870,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":870,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22772,22775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22772,22775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":878,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":878,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23048,23051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23048,23051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":47,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":23,"fixableWarningCount":5,"source":"/**\n * 用户体验评估工具\n * \n * 提供全面的用户体验分析功能：\n * - 用户行为分析和埋点\n * - 用户满意度调查和反馈收集\n * - 用户旅程映射和优化建议\n */\n\nexport interface UserBehavior {\n  userId: string;\n  sessionId: string;\n  timestamp: Date;\n  eventType: string;\n  eventData: any;\n  pageUrl: string;\n  duration?: number;\n  referrer?: string;\n  deviceInfo: {\n    userAgent: string;\n    screenSize: string;\n    deviceType: 'desktop' | 'mobile' | 'tablet';\n    browser: string;\n    os: string;\n  };\n  performanceMetrics?: {\n    loadTime: number;\n    timeToInteractive: number;\n    firstContentfulPaint: number;\n    largestContentfulPaint: number;\n  };\n}\n\nexport interface UserFeedback {\n  id: string;\n  userId: string;\n  timestamp: Date;\n  rating: number; // 1-5\n  category: 'usability' | 'performance' | 'content' | 'design' | 'functionality';\n  feedback: string;\n  screenshot?: string;\n  elementSelector?: string;\n  pageUrl: string;\n  status: 'new' | 'acknowledged' | 'in-progress' | 'resolved';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  tags: string[];\n}\n\nexport interface UserJourney {\n  journeyId: string;\n  userId: string;\n  startTime: Date;\n  endTime?: Date;\n  steps: JourneyStep[];\n  totalDuration?: number;\n  conversionRate?: number;\n  satisfaction?: number;\n  abandonmentPoint?: string;\n}\n\nexport interface JourneyStep {\n  stepId: string;\n  stepName: string;\n  timestamp: Date;\n  pageUrl: string;\n  eventType: string;\n  duration?: number;\n  completed: boolean;\n  errorOccurred?: boolean;\n  performanceMetrics?: any;\n}\n\nexport interface UXMetrics {\n  userEngagement: {\n    averageSessionDuration: number;\n    bounceRate: number;\n    pageViewsPerSession: number;\n    returnUserRate: number;\n  };\n  conversionFunnel: {\n    stepName: string;\n    conversionRate: number;\n    dropoffRate: number;\n    averageTimeToComplete: number;\n  }[];\n  taskCompletion: {\n    taskName: string;\n    successRate: number;\n    averageTime: number;\n    errorRate: number;\n    satisfactionScore: number;\n  }[];\n  satisfactionMetrics: {\n    overallSatisfaction: number;\n    easeOfUse: number;\n    visualDesign: number;\n    contentQuality: number;\n    performanceSatisfaction: number;\n  };\n  accessibilityMetrics: {\n    complianceScore: number;\n    criticalIssues: number;\n    keyboardNavigationSuccess: number;\n    screenReaderCompatibility: number;\n  };\n}\n\nexport interface OptimizationSuggestion {\n  id: string;\n  category: 'usability' | 'performance' | 'design' | 'content' | 'accessibility';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  impact: number; // 0-100\n  effort: number; // 0-100\n  estimatedImprovement: string;\n  implementationSteps: string[];\n  relatedMetrics: string[];\n  expectedROI: number;\n}\n\n/**\n * 用户体验评估器\n */\nexport class UXEvaluator {\n  private behaviorData: UserBehavior[] = [];\n  private feedbackData: UserFeedback[] = [];\n  private journeyData: UserJourney[] = [];\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor() {\n    this.initializeEventTracking();\n    this.setupPerformanceMonitoring();\n  }\n\n  /**\n   * 初始化事件追踪\n   */\n  private initializeEventTracking() {\n    // 追踪页面加载事件\n    window.addEventListener('load', () => {\n      this.trackEvent('page_loaded', {\n        loadTime: performance.now(),\n        url: window.location.href\n      });\n    });\n\n    // 追踪用户交互事件\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      this.trackEvent('click', {\n        selector: this.getElementSelector(target),\n        tagName: target.tagName,\n        className: target.className,\n        text: target.textContent?.substring(0, 100)\n      });\n    });\n\n    // 追踪表单提交\n    document.addEventListener('submit', (event) => {\n      const form = event.target as HTMLFormElement;\n      this.trackEvent('form_submit', {\n        formId: form.id,\n        formAction: form.action,\n        formMethod: form.method\n      });\n    });\n\n    // 追踪错误事件\n    window.addEventListener('error', (event) => {\n      this.trackEvent('javascript_error', {\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      });\n    });\n\n    // 追踪网络错误\n    window.addEventListener('unhandledrejection', (event) => {\n      this.trackEvent('promise_rejection', {\n        reason: event.reason\n      });\n    });\n  }\n\n  /**\n   * 设置性能监控\n   */\n  private setupPerformanceMonitoring() {\n    // 监控Core Web Vitals\n    if ('PerformanceObserver' in window) {\n      // First Contentful Paint\n      const fcpObserver = new PerformanceObserver((entryList) => {\n        const entries = entryList.getEntries();\n        entries.forEach((entry) => {\n          this.trackEvent('fcp', {\n            duration: entry.startTime,\n            url: entry.name\n          });\n        });\n      });\n      fcpObserver.observe({ entryTypes: ['paint'] });\n\n      // Largest Contentful Paint\n      const lcpObserver = new PerformanceObserver((entryList) => {\n        const entries = entryList.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        this.trackEvent('lcp', {\n          duration: lastEntry.startTime,\n          url: lastEntry.name\n        });\n      });\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n\n      // First Input Delay\n      const fidObserver = new PerformanceObserver((entryList) => {\n        const entries = entryList.getEntries();\n        entries.forEach((entry) => {\n          this.trackEvent('fid', {\n            delay: entry.processingStart - entry.startTime,\n            url: document.location.href\n          });\n        });\n      });\n      fidObserver.observe({ entryTypes: ['first-input'] });\n    }\n  }\n\n  /**\n   * 追踪用户事件\n   */\n  trackEvent(eventType: string, eventData: any = {}) {\n    const behavior: UserBehavior = {\n      userId: this.getUserId(),\n      sessionId: this.getSessionId(),\n      timestamp: new Date(),\n      eventType,\n      eventData,\n      pageUrl: window.location.href,\n      deviceInfo: {\n        userAgent: navigator.userAgent,\n        screenSize: `${screen.width}x${screen.height}`,\n        deviceType: this.getDeviceType(),\n        browser: this.getBrowser(),\n        os: this.getOperatingSystem()\n      }\n    };\n\n    this.behaviorData.push(behavior);\n    this.triggerEventListeners(eventType, behavior);\n\n    // 批量发送到服务器\n    if (this.behaviorData.length >= 10) {\n      this.flushBehaviorData();\n    }\n  }\n\n  /**\n   * 记录用户反馈\n   */\n  async recordFeedback(feedback: Omit<UserFeedback, 'id' | 'timestamp' | 'status'>): Promise<UserFeedback> {\n    const userFeedback: UserFeedback = {\n      id: this.generateId(),\n      timestamp: new Date(),\n      status: 'new',\n      ...feedback\n    };\n\n    this.feedbackData.push(userFeedback);\n\n    // 发送到服务器\n    await this.sendFeedbackToServer(userFeedback);\n\n    return userFeedback;\n  }\n\n  /**\n   * 开始用户旅程追踪\n   */\n  startJourney(journeyName: string, initialStep?: any): UserJourney {\n    const journey: UserJourney = {\n      journeyId: this.generateId(),\n      userId: this.getUserId(),\n      startTime: new Date(),\n      steps: []\n    };\n\n    if (initialStep) {\n      journey.steps.push({\n        stepId: this.generateId(),\n        stepName: initialStep.name || journeyName,\n        timestamp: new Date(),\n        pageUrl: window.location.href,\n        eventType: 'journey_start',\n        completed: true\n      });\n    }\n\n    this.journeyData.push(journey);\n    return journey;\n  }\n\n  /**\n   * 添加旅程步骤\n   */\n  addJourneyStep(journeyId: string, stepName: string, stepData?: any) {\n    const journey = this.journeyData.find(j => j.journeyId === journeyId);\n    if (!journey) return;\n\n    journey.steps.push({\n      stepId: this.generateId(),\n      stepName,\n      timestamp: new Date(),\n      pageUrl: window.location.href,\n      eventType: 'journey_step',\n      completed: true,\n      duration: stepData?.duration,\n      errorOccurred: stepData?.error\n    });\n  }\n\n  /**\n   * 完成用户旅程\n   */\n  completeJourney(journeyId: string, success: boolean = true, satisfaction?: number) {\n    const journey = this.journeyData.find(j => j.journeyId === journeyId);\n    if (!journey) return;\n\n    journey.endTime = new Date();\n    journey.totalDuration = journey.endTime.getTime() - journey.startTime.getTime();\n    journey.conversionRate = success ? 100 : 0;\n    journey.satisfaction = satisfaction;\n    journey.abandonmentPoint = success ? undefined : journey.steps[journey.steps.length - 1]?.stepName;\n\n    this.trackEvent('journey_completed', {\n      journeyId,\n      duration: journey.totalDuration,\n      success,\n      satisfaction\n    });\n  }\n\n  /**\n   * 分析用户行为数据\n   */\n  analyzeBehavior(): any {\n    const totalSessions = new Set(this.behaviorData.map(b => b.sessionId)).size;\n    const uniqueUsers = new Set(this.behaviorData.map(b => b.userId)).size;\n\n    // 计算会话持续时间\n    const sessionDurations = this.calculateSessionDurations();\n\n    // 计算页面浏览分析\n    const pageViews = this.analyzePageViews();\n\n    // 计算用户流程分析\n    const userFlows = this.analyzeUserFlows();\n\n    // 计算设备使用统计\n    const deviceStats = this.analyzeDeviceUsage();\n\n    return {\n      overview: {\n        totalSessions,\n        uniqueUsers,\n        totalEvents: this.behaviorData.length,\n        dateRange: this.getDateRange()\n      },\n      sessionAnalysis: {\n        averageSessionDuration: sessionDurations.average,\n        medianSessionDuration: sessionDurations.median,\n        bounceRate: sessionDurations.bounceRate\n      },\n      pageAnalysis: {\n        mostVisitedPages: pageViews.topPages,\n        averageTimeOnPage: pageViews.averageTimeOnPage,\n        entryPages: pageViews.entryPages,\n        exitPages: pageViews.exitPages\n      },\n      userFlows: {\n        mostCommonPaths: userFlows.commonPaths,\n        conversionFunnels: userFlows.conversionFunnels\n      },\n      deviceStats: {\n        deviceTypes: deviceStats.deviceTypes,\n        browsers: deviceStats.browsers,\n        screenResolutions: deviceStats.screenResolutions\n      },\n      performanceMetrics: {\n        averageLoadTime: this.calculateAverageLoadTime(),\n        averageFCP: this.calculateAverageFCP(),\n        averageLCP: this.calculateAverageLCP()\n      }\n    };\n  }\n\n  /**\n   * 分析用户反馈\n   */\n  analyzeFeedback(): any {\n    const feedbackByCategory = this.groupFeedbackByCategory();\n    const feedbackByRating = this.groupFeedbackByRating();\n    const sentimentAnalysis = this.analyzeSentiment();\n    const commonIssues = this.identifyCommonIssues();\n\n    return {\n      overview: {\n        totalFeedback: this.feedbackData.length,\n        averageRating: this.calculateAverageRating(),\n        satisfactionScore: this.calculateSatisfactionScore()\n      },\n      categories: feedbackByCategory,\n      ratings: feedbackByRating,\n      sentiment: sentimentAnalysis,\n      commonIssues,\n      priorityFeedback: this.feedbackData\n        .filter(f => f.priority === 'high' || f.priority === 'critical')\n        .slice(0, 10)\n    };\n  }\n\n  /**\n   * 分析用户旅程\n   */\n  analyzeJourneys(): any {\n    const journeyCompletionRates = this.calculateJourneyCompletionRates();\n    const journeyDurations = this.calculateJourneyDurations();\n    const abandonmentAnalysis = this.analyzeAbandonment();\n    const satisfactionTrends = this.analyzeSatisfactionTrends();\n\n    return {\n      overview: {\n        totalJourneys: this.journeyData.length,\n        completedJourneys: this.journeyData.filter(j => j.endTime).length,\n        averageCompletionRate: journeyCompletionRates.average,\n        averageDuration: journeyDurations.average\n      },\n      completionRates: journeyCompletionRates.byJourney,\n      durations: journeyDurations.byJourney,\n      abandonment: abandonmentAnalysis,\n      satisfaction: satisfactionTrends\n    };\n  }\n\n  /**\n   * 生成用户体验指标报告\n   */\n  generateUXMetrics(): UXMetrics {\n    const behaviorAnalysis = this.analyzeBehavior();\n    const feedbackAnalysis = this.analyzeFeedback();\n    const journeyAnalysis = this.analyzeJourneys();\n\n    // 模拟任务完成率数据（实际应用中需要更复杂的分析）\n    const taskCompletionRates = this.calculateTaskCompletionRates();\n\n    return {\n      userEngagement: {\n        averageSessionDuration: behaviorAnalysis.sessionAnalysis.averageSessionDuration,\n        bounceRate: behaviorAnalysis.sessionAnalysis.bounceRate,\n        pageViewsPerSession: behaviorAnalysis.overview.totalEvents / behaviorAnalysis.overview.totalSessions,\n        returnUserRate: behaviorAnalysis.overview.uniqueUsers / behaviorAnalysis.overview.totalSessions\n      },\n      conversionFunnel: this.buildConversionFunnel(),\n      taskCompletion: taskCompletionRates,\n      satisfactionMetrics: {\n        overallSatisfaction: feedbackAnalysis.overview.satisfactionScore,\n        easeOfUse: feedbackAnalysis.ratings['easeOfUse'] || 0,\n        visualDesign: feedbackAnalysis.ratings['visualDesign'] || 0,\n        contentQuality: feedbackAnalysis.ratings['contentQuality'] || 0,\n        performanceSatisfaction: feedbackAnalysis.ratings['performanceSatisfaction'] || 0\n      },\n      accessibilityMetrics: {\n        complianceScore: this.calculateAccessibilityScore(),\n        criticalIssues: 0, // 实际应用中从无障碍测试中获取\n        keyboardNavigationSuccess: 85,\n        screenReaderCompatibility: 80\n      }\n    };\n  }\n\n  /**\n   * 生成优化建议\n   */\n  generateOptimizations(): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // 基于行为分析的建议\n    const behaviorAnalysis = this.analyzeBehavior();\n    if (behaviorAnalysis.sessionAnalysis.bounceRate > 50) {\n      suggestions.push({\n        id: this.generateId(),\n        category: 'usability',\n        priority: 'high',\n        title: '降低跳出率',\n        description: '当前跳出率过高，需要优化首页内容和用户引导',\n        impact: 85,\n        effort: 60,\n        estimatedImprovement: '跳出率降低20-30%',\n        implementationSteps: [\n          '分析高跳出率页面',\n          '优化页面加载速度',\n          '改善内容质量',\n          '添加用户引导元素'\n        ],\n        relatedMetrics: ['bounceRate', 'averageSessionDuration'],\n        expectedROI: 150\n      });\n    }\n\n    // 基于反馈分析的建议\n    const feedbackAnalysis = this.analyzeFeedback();\n    if (feedbackAnalysis.overview.averageRating < 4.0) {\n      suggestions.push({\n        id: this.generateId(),\n        category: 'usability',\n        priority: 'high',\n        title: '提升用户满意度',\n        description: '用户评分偏低，需要重点关注用户体验问题',\n        impact: 90,\n        effort: 70,\n        estimatedImprovement: '用户评分提升0.5-1.0分',\n        implementationSteps: [\n          '分析负面反馈',\n          '修复用户反馈的问题',\n          '改善常见用户痛点',\n          '增强用户支持'\n        ],\n        relatedMetrics: ['overallSatisfaction', 'userSatisfaction'],\n        expectedROI: 200\n      });\n    }\n\n    // 基于性能分析的建议\n    if (behaviorAnalysis.performanceMetrics.averageLoadTime > 3000) {\n      suggestions.push({\n        id: this.generateId(),\n        category: 'performance',\n        priority: 'medium',\n        title: '优化页面加载性能',\n        description: '页面加载时间过长，影响用户体验',\n        impact: 75,\n        effort: 50,\n        estimatedImprovement: '加载时间减少30-50%',\n        implementationSteps: [\n          '优化图片资源',\n          '启用资源压缩',\n          '实现CDN加速',\n          '优化代码分割'\n        ],\n        relatedMetrics: ['averageLoadTime', 'firstContentfulPaint', 'largestContentfulPaint'],\n        expectedROI: 120\n      });\n    }\n\n    return suggestions.sort((a, b) => (b.impact / b.effort) - (a.impact / a.effort));\n  }\n\n  /**\n   * 注册事件监听器\n   */\n  addEventListener(eventType: string, callback: Function) {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, []);\n    }\n    this.eventListeners.get(eventType)!.push(callback);\n  }\n\n  /**\n   * 触发事件监听器\n   */\n  private triggerEventListeners(eventType: string, data: any) {\n    const listeners = this.eventListeners.get(eventType);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * 刷新行为数据到服务器\n   */\n  private async flushBehaviorData() {\n    if (this.behaviorData.length === 0) return;\n\n    try {\n      // 发送到分析服务器\n      await fetch('/api/ux-analytics/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.behaviorData)\n      });\n\n      this.behaviorData = [];\n    } catch (error) {\n      console.error('Failed to flush behavior data:', error);\n    }\n  }\n\n  /**\n   * 发送反馈到服务器\n   */\n  private async sendFeedbackToServer(feedback: UserFeedback) {\n    try {\n      await fetch('/api/ux-analytics/feedback', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(feedback)\n      });\n    } catch (error) {\n      console.error('Failed to send feedback:', error);\n    }\n  }\n\n  // 辅助方法\n  private getUserId(): string {\n    let userId = localStorage.getItem('ux_evaluator_user_id');\n    if (!userId) {\n      userId = this.generateId();\n      localStorage.setItem('ux_evaluator_user_id', userId);\n    }\n    return userId;\n  }\n\n  private getSessionId(): string {\n    return sessionStorage.getItem('ux_evaluator_session_id') || this.generateId();\n  }\n\n  private getDeviceType(): 'desktop' | 'mobile' | 'tablet' {\n    const width = window.innerWidth;\n    if (width < 768) return 'mobile';\n    if (width < 1024) return 'tablet';\n    return 'desktop';\n  }\n\n  private getBrowser(): string {\n    const userAgent = navigator.userAgent;\n    if (userAgent.includes('Chrome')) return 'Chrome';\n    if (userAgent.includes('Firefox')) return 'Firefox';\n    if (userAgent.includes('Safari')) return 'Safari';\n    if (userAgent.includes('Edge')) return 'Edge';\n    return 'Unknown';\n  }\n\n  private getOperatingSystem(): string {\n    const userAgent = navigator.userAgent;\n    if (userAgent.includes('Windows')) return 'Windows';\n    if (userAgent.includes('Mac')) return 'macOS';\n    if (userAgent.includes('Linux')) return 'Linux';\n    if (userAgent.includes('Android')) return 'Android';\n    if (userAgent.includes('iOS')) return 'iOS';\n    return 'Unknown';\n  }\n\n  private getElementSelector(element: HTMLElement): string {\n    if (element.id) return `#${element.id}`;\n    if (element.className) return `.${element.className.split(' ')[0]}`;\n    return element.tagName.toLowerCase();\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  private getDateRange(): { start: Date; end: Date } {\n    const timestamps = this.behaviorData.map(b => b.timestamp);\n    return {\n      start: new Date(Math.min(...timestamps.map(t => t.getTime()))),\n      end: new Date(Math.max(...timestamps.map(t => t.getTime())))\n    };\n  }\n\n  // 分析方法实现\n  private calculateSessionDurations() {\n    // 实现会话持续时间计算逻辑\n    return { average: 120000, median: 90000, bounceRate: 0.35 };\n  }\n\n  private analyzePageViews() {\n    // 实现页面浏览分析逻辑\n    return {\n      topPages: [],\n      averageTimeOnPage: 45000,\n      entryPages: [],\n      exitPages: []\n    };\n  }\n\n  private analyzeUserFlows() {\n    // 实现用户流程分析逻辑\n    return {\n      commonPaths: [],\n      conversionFunnels: []\n    };\n  }\n\n  private analyzeDeviceUsage() {\n    // 实现设备使用分析逻辑\n    return {\n      deviceTypes: { mobile: 60, desktop: 35, tablet: 5 },\n      browsers: {},\n      screenResolutions: {}\n    };\n  }\n\n  private calculateAverageLoadTime(): number {\n    return 2500;\n  }\n\n  private calculateAverageFCP(): number {\n    return 1500;\n  }\n\n  private calculateAverageLCP(): number {\n    return 2000;\n  }\n\n  private groupFeedbackByCategory() {\n    const categories = {} as any;\n    this.feedbackData.forEach(feedback => {\n      categories[feedback.category] = (categories[feedback.category] || 0) + 1;\n    });\n    return categories;\n  }\n\n  private groupFeedbackByRating() {\n    const ratings = {} as any;\n    this.feedbackData.forEach(feedback => {\n      const category = this.getFeedbackCategory(feedback);\n      ratings[category] = (ratings[category] || 0) + feedback.rating;\n    });\n    return ratings;\n  }\n\n  private getFeedbackCategory(feedback: UserFeedback): string {\n    // 简化的分类逻辑\n    if (feedback.category === 'usability') return 'easeOfUse';\n    if (feedback.category === 'design') return 'visualDesign';\n    if (feedback.category === 'content') return 'contentQuality';\n    if (feedback.category === 'performance') return 'performanceSatisfaction';\n    return 'overallSatisfaction';\n  }\n\n  private analyzeSentiment() {\n    // 简化的情感分析\n    const positive = this.feedbackData.filter(f => f.rating >= 4).length;\n    const neutral = this.feedbackData.filter(f => f.rating === 3).length;\n    const negative = this.feedbackData.filter(f => f.rating <= 2).length;\n    return { positive, neutral, negative };\n  }\n\n  private identifyCommonIssues() {\n    // 识别常见问题\n    return [];\n  }\n\n  private calculateAverageRating(): number {\n    if (this.feedbackData.length === 0) return 0;\n    const sum = this.feedbackData.reduce((acc, f) => acc + f.rating, 0);\n    return sum / this.feedbackData.length;\n  }\n\n  private calculateSatisfactionScore(): number {\n    // 计算综合满意度分数\n    return this.calculateAverageRating() * 20; // 转换为0-100分制\n  }\n\n  private calculateJourneyCompletionRates() {\n    // 计算旅程完成率\n    return {\n      average: 75,\n      byJourney: {}\n    };\n  }\n\n  private calculateJourneyDurations() {\n    // 计算旅程持续时间\n    return {\n      average: 180000,\n      byJourney: {}\n    };\n  }\n\n  private analyzeAbandonment() {\n    // 分析用户放弃情况\n    return {};\n  }\n\n  private analyzeSatisfactionTrends() {\n    // 分析满意度趋势\n    return {};\n  }\n\n  private calculateTaskCompletionRates() {\n    // 计算任务完成率\n    return [\n      {\n        taskName: '产品搜索',\n        successRate: 85,\n        averageTime: 30000,\n        errorRate: 15,\n        satisfactionScore: 4.2\n      },\n      {\n        taskName: '购物车操作',\n        successRate: 90,\n        averageTime: 15000,\n        errorRate: 10,\n        satisfactionScore: 4.5\n      },\n      {\n        taskName: '支付流程',\n        successRate: 75,\n        averageTime: 120000,\n        errorRate: 25,\n        satisfactionScore: 3.8\n      }\n    ];\n  }\n\n  private buildConversionFunnel() {\n    // 构建转化漏斗\n    return [\n      {\n        stepName: '访问首页',\n        conversionRate: 100,\n        dropoffRate: 0,\n        averageTimeToComplete: 0\n      },\n      {\n        stepName: '浏览产品',\n        conversionRate: 70,\n        dropoffRate: 30,\n        averageTimeToComplete: 60000\n      },\n      {\n        stepName: '添加购物车',\n        conversionRate: 45,\n        dropoffRate: 25,\n        averageTimeToComplete: 30000\n      },\n      {\n        stepName: '进入结账',\n        conversionRate: 35,\n        dropoffRate: 10,\n        averageTimeToComplete: 45000\n      },\n      {\n        stepName: '完成支付',\n        conversionRate: 30,\n        dropoffRate: 5,\n        averageTimeToComplete: 90000\n      }\n    ];\n  }\n\n  private calculateAccessibilityScore(): number {\n    // 从无障碍测试中获取分数\n    return 78;\n  }\n}\n\n// 创建全局UX评估器实例\nexport const uxEvaluator = new UXEvaluator();\n\n// 便捷函数\nexport function trackUserEvent(eventType: string, eventData?: any) {\n  uxEvaluator.trackEvent(eventType, eventData);\n}\n\nexport async function submitFeedback(feedback: Omit<UserFeedback, 'id' | 'timestamp' | 'status'>) {\n  return uxEvaluator.recordFeedback(feedback);\n}\n\nexport function startUserJourney(journeyName: string, initialStep?: any) {\n  return uxEvaluator.startJourney(journeyName, initialStep);\n}\n\nexport function getUXMetrics(): UXMetrics {\n  return uxEvaluator.generateUXMetrics();\n}\n\nexport function getOptimizationSuggestions(): OptimizationSuggestion[] {\n  return uxEvaluator.generateOptimizations();\n}\n\nexport default UXEvaluator;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]}]}]