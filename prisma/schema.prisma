// Prisma Schema for LuckyMart TJ
// 注意：根据Supabase最佳实践，不使用Prisma relations，手动查询关联数据

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                      String              @id @default(uuid()) @db.Uuid
  telegramId              String              @unique @map("telegram_id")
  username                String?             @db.VarChar(255)
  firstName               String              @map("first_name") @db.VarChar(255)
  lastName                String?             @map("last_name") @db.VarChar(255)
  avatarUrl               String?             @map("avatar_url")
  preferredLanguage       String              @default("tg-TJ") @map("preferred_language") @db.VarChar(10)
  balance                 Decimal             @default(0) @db.Decimal(10, 2)
  balanceVersion          Int                 @default(1) @map("balance_version")
  platformBalance         Decimal             @default(0) @map("platform_balance") @db.Decimal(10, 2)
  platformBalanceVersion  Int                 @default(1) @map("platform_balance_version")
  luckyCoins              Decimal             @default(0) @map("lucky_coins") @db.Decimal(10, 2)
  luckyCoinsVersion       Int                 @default(1) @map("lucky_coins_version")
  vipLevel                Int                 @default(0) @map("vip_level")
  totalSpent              Decimal             @default(0) @map("total_spent") @db.Decimal(10, 2)
  freeDailyCount          Int                 @default(0) @map("free_daily_count")
  lastFreeResetDate       DateTime            @default(now()) @map("last_free_reset_date") @db.Date
  createdAt               DateTime            @default(now()) @map("created_at")
  updatedAt               DateTime            @default(now()) @updatedAt @map("updated_at")

  @@index([preferredLanguage])
  @@index([luckyCoins])
  @@index([luckyCoinsVersion])
}

model userAddresses {
  id            String   @id @default(uuid()) @db.Uuid @map("id")
  userId        String   @map("user_id") @db.Uuid
  recipientName String   @map("recipient_name") @db.VarChar(255)
  phone         String   @db.VarChar(50)
  city          String   @db.VarChar(100)
  district      String?  @db.VarChar(100)
  addressLine   String   @map("address_line")
  postalCode    String?  @map("postal_code") @db.VarChar(20)
  isDefault     Boolean  @default(false) @map("is_default")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([userId, isDefault])
  @@map("user_addresses")
}

model products {
  id                        String   @id @default(uuid()) @db.Uuid
  
  // 多语言JSONB字段（新架构）
  nameMultilingual          Json?    @map("name_multilingual") @db.JsonB
  descriptionMultilingual   Json?    @map("description_multilingual") @db.JsonB
  categoryMultilingual      Json?    @map("category_multilingual") @db.JsonB
  
  // 兼容原有字段（逐步淘汰）
  nameZh                    String?  @map("name_zh") @db.VarChar(255)
  nameEn                    String?  @map("name_en") @db.VarChar(255)
  nameRu                    String?  @map("name_ru") @db.VarChar(255)
  descriptionZh             String?  @map("description_zh")
  descriptionEn             String?  @map("description_en")
  descriptionRu             String?  @map("description_ru")
  category                  String?  @db.VarChar(100)
  
  images                    String[]
  marketPrice               Decimal  @map("market_price") @db.Decimal(10, 2)
  totalShares               Int      @map("total_shares")
  pricePerShare             Decimal  @default(1.00) @map("price_per_share") @db.Decimal(10, 2)
  stock                     Int      @default(0)
  status                    String   @default("active") @db.VarChar(20)
  marketingBadge            Json?    @map("marketing_badge")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([status])
  @@index([category])
}

model lotteryRounds {
  id                    String   @id @default(uuid()) @db.Uuid
  productId             String   @map("product_id") @db.Uuid
  roundNumber           Int      @map("round_number")
  totalShares           Int      @map("total_shares")
  pricePerShare         Decimal  @default(1.00) @map("price_per_share") @db.Decimal(10, 2)
  soldShares            Int      @default(0) @map("sold_shares")
  soldSharesVersion     Int      @default(1) @map("sold_shares_version")
  status                String   @default("active") @db.VarChar(20)
  winnerUserId          String?  @map("winner_user_id") @db.Uuid
  winningNumber         Int?     @map("winning_number")
  drawTime              DateTime? @map("draw_time")
  drawAlgorithmData     Json?    @map("draw_algorithm_data")
  participants          Int      @default(0)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([productId, roundNumber])
  @@index([productId])
  @@index([status])
  @@map("lottery_rounds")
}

model participations {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  roundId     String   @map("round_id") @db.Uuid
  productId   String   @map("product_id") @db.Uuid
  numbers     Int[]
  sharesCount Int      @map("shares_count")
  type        String   @db.VarChar(10)
  cost        Decimal  @default(0) @db.Decimal(10, 2)
  version     Int      @default(1)
  isWinner    Boolean  @default(false) @map("is_winner")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([userId, roundId])
  @@index([roundId])
  @@index([isWinner])
}

model orders {
  id                String   @id @default(uuid()) @db.Uuid
  orderNumber       String   @unique @map("order_number") @db.VarChar(50)
  userId            String   @map("user_id") @db.Uuid
  roundId           String?  @map("round_id") @db.Uuid
  productId         String?  @map("product_id") @db.Uuid
  type              String   @db.VarChar(20)
  quantity          Int      @default(1)
  totalAmount       Decimal  @map("total_amount") @db.Decimal(10, 2)
  status            String   @default("pending") @db.VarChar(20)
  version           Int      @default(1)
  paymentMethod     String?  @map("payment_method") @db.VarChar(50)
  paymentStatus     String   @default("pending") @map("payment_status") @db.VarChar(20)
  fulfillmentStatus String   @default("pending") @map("fulfillment_status") @db.VarChar(20)
  shippingAddress   Json?    @map("shipping_address")
  trackingNumber    String?  @map("tracking_number") @db.VarChar(255)
  notes             String?
  // 转售相关字段
  isResale          Boolean  @default(false) @map("is_resale")
  resalePrice       Decimal? @map("resale_price") @db.Decimal(10, 2)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([fulfillmentStatus])
}

model transactions {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  type           String   @db.VarChar(50)
  amount         Decimal  @db.Decimal(10, 2)
  balanceType    String   @map("balance_type") @db.VarChar(20)
  relatedOrderId String?  @map("related_order_id") @db.Uuid
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model resaleListings {
  id           String    @id @default(uuid()) @db.Uuid
  sellerUserId String    @map("seller_user_id") @db.Uuid
  buyerUserId  String?   @map("buyer_user_id") @db.Uuid
  orderId      String    @map("order_id") @db.Uuid
  productId    String?   @map("product_id") @db.Uuid
  listingPrice Decimal   @map("listing_price") @db.Decimal(10, 2)
  platformFee  Decimal   @map("platform_fee") @db.Decimal(10, 2)
  status       String    @default("pending") @db.VarChar(20)
  listedAt     DateTime  @default(now()) @map("listed_at")
  soldAt       DateTime? @map("sold_at")

  @@index([sellerUserId])
  @@index([status])
  @@index([orderId])
  @@map("resale_listings")
}

model withdrawRequests {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  amount         Decimal   @db.Decimal(10, 2)
  fee            Decimal   @db.Decimal(10, 2)
  actualAmount   Decimal   @map("actual_amount") @db.Decimal(10, 2)
  withdrawMethod String    @map("withdraw_method") @db.VarChar(20)
  accountInfo    Json      @map("account_info")
  status         String    @default("pending") @db.VarChar(20)
  rejectReason   String?   @map("reject_reason")
  adminNote      String?   @map("admin_note")
  processedAt    DateTime? @map("processed_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("withdraw_requests")
}

model rechargePackages {
  id                String   @id @default(uuid()) @db.Uuid
  
  // 多语言JSONB字段（新架构）
  nameMultilingual  Json?    @map("name_multilingual") @db.JsonB
  
  // 兼容原有字段（逐步淘汰）
  nameZh            String?  @map("name_zh") @db.VarChar(255)
  nameEn            String?  @map("name_en") @db.VarChar(255)
  nameRu            String?  @map("name_ru") @db.VarChar(255)
  
  price             Decimal  @db.Decimal(10, 2)
  coins             Int
  bonusCoins        Int      @default(0) @map("bonus_coins")
  isActive          Boolean  @default(true) @map("is_active")
  sortOrder         Int      @default(0) @map("sort_order")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("recharge_packages")
}

model notifications {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  type      String    @db.VarChar(50)
  content   String
  status    String    @default("pending") @db.VarChar(20)
  error     String?
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([status])
}

model admins {
  id           String    @id @default(uuid()) @db.Uuid
  username     String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  role         String    @default("admin") @db.VarChar(50)
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
}

model processingLogs {
  id            String    @id @default(uuid()) @db.Uuid
  entityId      String    @map("entity_id") @db.Uuid
  operationType String    @map("operation_type") @db.VarChar(100)
  status        String    @db.VarChar(20) // 'processing', 'completed', 'failed'
  requestId     String?   @map("request_id") @db.VarChar(255)
  errorMessage  String?   @map("error_message")
  data          Json?
  createdAt     DateTime  @default(now()) @map("created_at")
  completedAt   DateTime? @map("completed_at")

  @@index([entityId, operationType])
  @@index([status])
  @@index([requestId])
  @@map("processing_logs")
}

model walletTransactions {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  type        String    @db.VarChar(50) // 'recharge', 'transfer_in', 'transfer_out', 'purchase', 'reward'
  amount      Decimal?  @db.Decimal(10, 2) // 余额变动金额
  luckyCoins  Decimal?  @db.Decimal(10, 2) // 幸运币变动数量
  currency    String    @default("TJS") @db.VarChar(10)
  description String?
  status      String    @default("completed") @db.VarChar(20) // 'pending', 'completed', 'failed'
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("wallet_transactions")
}

// ================================
// 新手激励系统相关模型 (Newbie Incentive System)
// ================================

// 新手任务定义表
model NewbieTasks {
  id                String   @id @default(uuid()) @db.Uuid
  
  // 多语言字段支持
  taskName          Json     @map("task_name") @db.JsonB // {"zh": "任务名称", "en": "Task Name", "ru": "Название задачи"}
  description       Json?    @map("description") @db.JsonB // {"zh": "任务描述", "en": "Task Description", "ru": "Описание задачи"}
  
  // 兼容原有字段（逐步淘汰）
  taskNameZh        String?  @map("task_name_zh") @db.VarChar(255)
  taskNameEn        String?  @map("task_name_en") @db.VarChar(255)
  taskNameRu        String?  @map("task_name_ru") @db.VarChar(255)
  descriptionZh     String?  @map("description_zh")
  descriptionEn     String?  @map("description_en")
  descriptionRu     String?  @map("description_ru")
  
  taskType          String   @map("task_type") @db.VarChar(50) // 'registration', 'first_recharge', 'lottery_participation', 'product_purchase'
  rewardType        String   @map("reward_type") @db.VarChar(30) // 'coins', 'balance', 'vip_days'
  rewardAmount      Decimal  @map("reward_amount") @db.Decimal(10, 2)
  priority          Int      @default(0) // 任务优先级，用于排序显示
  isActive          Boolean  @default(true) @map("is_active")
  maxRewardsPerDay  Int?     @map("max_rewards_per_day") // 每日最大奖励次数
  maxRewardsTotal   Int?     @map("max_rewards_total") // 总最大奖励次数
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([taskType])
  @@index([isActive])
  @@index([priority])
  @@map("newbie_tasks")
}

// 用户任务进度表
model UserTaskProgress {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  taskId            String   @map("task_id") @db.Uuid
  status            String   @default("pending") @db.VarChar(20) // 'pending', 'in_progress', 'completed', 'claimed'
  currentProgress   Int      @default(0) @map("current_progress") // 当前进度
  targetProgress    Int      @default(1) @map("target_progress") // 目标进度
  completionRate    Decimal  @default(0) @map("completion_rate") @db.Decimal(5, 2) // 完成百分比
  claimableAmount   Decimal  @default(0) @map("claimable_amount") @db.Decimal(10, 2) // 可领取金额
  claimedAmount     Decimal  @default(0) @map("claimed_amount") @db.Decimal(10, 2) // 已领取金额
  startedAt         DateTime? @map("started_at")
  completedAt       DateTime? @map("completed_at")
  claimedAt         DateTime? @map("claimed_at")
  expiresAt         DateTime? @map("expires_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([taskId])
  @@index([userId, taskId])
  @@index([status])
  @@index([completedAt])
  @@unique([userId, taskId])
  @@map("user_task_progress")
}

// 签到记录表
model CheckInRecords {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  checkInDate       DateTime @map("check_in_date") @db.Date
  consecutiveDays   Int      @default(1) @map("consecutive_days") // 连续签到天数
  cycleDay          Int      @default(1) @map("cycle_day") // 当前7天周期中的第几天 (1-7)
  isDoubleReward    Boolean  @default(false) @map("is_double_reward") // 是否为双倍奖励日
  rewardAmount      Decimal  @default(0) @map("reward_amount") @db.Decimal(10, 2)
  rewardType        String   @default("coins") @map("reward_type") @db.VarChar(30) // 'coins', 'balance', 'vip_days'
  status            String   @default("claimed") @db.VarChar(20) // 'claimed', 'missed', 'expired'
  claimedAt         DateTime @default(now()) @map("claimed_at")
  notes             String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([userId, checkInDate])
  @@index([status])
  @@index([consecutiveDays])
  @@unique([userId, checkInDate])
  @@map("check_in_records")
}

// 首充奖励记录表
model FirstRechargeRewards {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  rechargeAmount Decimal @default(0) @map("recharge_amount") @db.Decimal(10, 2)
  orderId      String?  @map("order_id") @db.Uuid
  rewardType   String   @map("reward_type") @db.VarChar(50) // 'lucky_coins'
  rewardAmount Decimal  @default(0) @map("reward_amount") @db.Decimal(10, 2) // 幸运币数量
  status       String   @default("pending") @db.VarChar(20) // 'pending', 'claimed', 'expired'
  claimedAt    DateTime? @map("claimed_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([userId, status])
  @@index([orderId])
  @@unique([userId]) // 每个用户只能享受一次首充奖励
  @@map("first_recharge_rewards")
}
